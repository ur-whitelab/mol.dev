{"mappings":"C,A,kC;A,uC;A,E;A,2D;A,E;A,4D;A,wD;A,S,C,C,C,C,C,C,C,C,C,E,2B,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,0D;A,+D;A,8B;A,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,E,gE;A,6D;A,+D;A,gC;A,G,E,O,E,E,C,E,+C;A,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,qD;A,yE;A,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,M,C,S,C,C,C,C,C,ECAA,cAAc,2DAId,oCAAmC;AACnC,IAAM,EAAa,CACf,QAAS,AAAA,GAAc,KACvB,QAAS,AAAA,GAAc,KACvB,cAAe,UACf,cAAe,SACnB,EAEA,UAAY,AAAC,IACT,IAAM,EAAO,EAAE,IAAf,CACM,EAAQ,CAAI,CAAC,EAAE,CACf,EAAM,CAAI,CAAC,EAAE,CACf,EAAS,EACT,AAAU,CAAA,mBAAV,EACA,EAAS,CAAE,QAAS,EAAW,aAApB,CAAmC,QAAS,EAAW,aAApB,AAAkC,EACzE,AAAU,YAAV,EACP,EAAS,EAAW,OAAA,CAAQ,CAAI,CAAC,EAAE,EAClB,YAAV,GACP,CAAA,EAAS,EAAW,OAAA,CAAQ,CAAI,CAAC,EAAE,CAAA,EAEvC,YAAY,CAAC,EAAO,EAAK,EAAO,CACpC,EAGA,cAAc,IAAA,CAAK,AAAC,IAChB,EAAW,aAAA,CAAgB,SAC3B,EAAQ,WAAA,CAAY,YAAY,IAAA,CAAK,KACjC,EAAQ,cAAA,CAAe;;;;SAItB,CAAE,AAAC,IACA,EAAW,aAAA,CAAgB,SAC3B,EAAW,aAAA,CAAgB,QAC/B,GAAG,IAAA,CAAK,KACJ,EAAW,aAAA,CAAgB,SAC3B,IAAM,EAAU,EAAQ,OAAA,CAAQ,GAAA,CAAI,UACpC,CAAA,EAAW,OAAA,CAAU,AAAC,IAClB,GAAI,CAEA,OADa,EAAQ,EAEzB,CAAE,MAAO,EAAG,CAER,OADA,QAAQ,GAAA,CAAI,GACL,IACX,CACJ,EACA,IAAM,EAAU,EAAQ,OAAA,CAAQ,GAAA,CAAI,UACpC,CAAA,EAAW,OAAA,CAAU,AAAC,IAClB,GAAI,CAEA,OADa,EAAQ,EAEzB,CAAE,MAAO,EAAG,CAER,OADA,QAAQ,GAAA,CAAI,GACL,IACX,CACJ,CACJ,EACJ,EAAG,AAAC,IACA,EAAW,aAAA,CAAgB,QAC/B,EACJ,E,E,C,E,E,C,Q,C,Q,oB,oE","sources":["<anon>","src/components/lib/selfies/selfies_worker.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"e2GVl\":[function(require,module,exports) {\nimportScripts(\"https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js\");\nconst selfiesVersion = 2.0;\nlet pyodide = null;\n// make fake function to start with\nconst selfiesMod = {\n    decoder: (s)=>{\n        return null;\n    },\n    encoder: (s)=>{\n        return null;\n    },\n    pyodideLoaded: \"loading\",\n    selfiesLoaded: \"loading\"\n};\nonmessage = (e)=>{\n    const data = e.data;\n    const mtype = data[0];\n    const mid = data[1];\n    let result = \"\";\n    if (mtype === \"loading-status\") result = {\n        pyodide: selfiesMod.pyodideLoaded,\n        selfies: selfiesMod.selfiesLoaded\n    };\n    else if (mtype === \"encoder\") result = selfiesMod.encoder(data[2]);\n    else if (mtype === \"decoder\") result = selfiesMod.decoder(data[2]);\n    postMessage([\n        mtype,\n        mid,\n        result\n    ]);\n};\nloadPyodide().then((pyodide)=>{\n    selfiesMod.pyodideLoaded = \"loaded\";\n    pyodide.loadPackage(\"micropip\").then(()=>{\n        pyodide.runPythonAsync(`\n            import micropip\n            await micropip.install('selfies==${selfiesVersion}')\n            from selfies import encoder, decoder\n        `, (err)=>{\n            selfiesMod.pyodideLoaded = \"failed\";\n            selfiesMod.selfiesLoaded = \"failed\";\n        }).then(()=>{\n            selfiesMod.selfiesLoaded = \"loaded\";\n            const decoder = pyodide.globals.get(\"decoder\");\n            selfiesMod.decoder = (selfies)=>{\n                try {\n                    let result = decoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            const encoder = pyodide.globals.get(\"encoder\");\n            selfiesMod.encoder = (selfies)=>{\n                try {\n                    let result = encoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n        });\n    }, (err)=>{\n        selfiesMod.selfiesLoaded = \"failed\";\n    });\n});\n\n},{}]},[\"e2GVl\"], \"e2GVl\", \"parcelRequire4442\")\n\n//# sourceMappingURL=selfies_worker.9c6d17e4.js.map\n","importScripts('https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js');\n\nconst selfiesVersion = 2.0;\nlet pyodide = null;\n// make fake function to start with\nconst selfiesMod = {\n    decoder: s => { return null },\n    encoder: s => { return null },\n    pyodideLoaded: 'loading',\n    selfiesLoaded: 'loading'\n};\n\nonmessage = (e) => {\n    const data = e.data;\n    const mtype = data[0];\n    const mid = data[1];\n    let result = '';\n    if (mtype === 'loading-status') {\n        result = { pyodide: selfiesMod.pyodideLoaded, selfies: selfiesMod.selfiesLoaded };\n    } else if (mtype === 'encoder') {\n        result = selfiesMod.encoder(data[2]);\n    } else if (mtype === 'decoder') {\n        result = selfiesMod.decoder(data[2]);\n    }\n    postMessage([mtype, mid, result]);\n}\n\n\nloadPyodide().then((pyodide) => {\n    selfiesMod.pyodideLoaded = 'loaded';\n    pyodide.loadPackage('micropip').then(() => {\n        pyodide.runPythonAsync(`\n            import micropip\n            await micropip.install('selfies==${selfiesVersion}')\n            from selfies import encoder, decoder\n        `, (err) => {\n            selfiesMod.pyodideLoaded = 'failed';\n            selfiesMod.selfiesLoaded = 'failed';\n        }).then(() => {\n            selfiesMod.selfiesLoaded = 'loaded'\n            const decoder = pyodide.globals.get('decoder');\n            selfiesMod.decoder = (selfies) => {\n                try {\n                    let result = decoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            const encoder = pyodide.globals.get('encoder');\n            selfiesMod.encoder = (selfies) => {\n                try {\n                    let result = encoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n        });\n    }, (err) => {\n        selfiesMod.selfiesLoaded = 'failed';\n    })\n});\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","importScripts","selfiesMod","decoder","s","encoder","pyodideLoaded","selfiesLoaded","onmessage","e","data","mtype","mid","result","pyodide","selfies","postMessage","loadPyodide","then","loadPackage","runPythonAsync","globals","console","log"],"version":3,"file":"selfies_worker.9c6d17e4.js.map"}