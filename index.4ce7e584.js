!// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
function(e,t,r,s,n){/* eslint-disable no-undef */var a="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},o="function"==typeof a[s]&&a[s],i=o.cache||{},l="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);function u(t,r){if(!i[t]){if(!e[t]){// if we cannot find the module within our internal map or
// cache jump to the current global require ie. the last bundle
// that was added to the page.
var n="function"==typeof a[s]&&a[s];if(!r&&n)return n(t,!0);// If there are other bundles on this page the require from the
// previous one is saved to 'previousRequire'. Repeat this as
// many times as there are bundles until the module is found or
// we exhaust the require chain.
if(o)return o(t,!0);// Try the node require function if it exists.
if(l&&"string"==typeof t)return l(t);var p=Error("Cannot find module '"+t+"'");throw p.code="MODULE_NOT_FOUND",p}d.resolve=function(r){var s=e[t][1][r];return null!=s?s:r},d.cache={};var c=i[t]=new u.Module(t);e[t][0].call(c.exports,d,c,c.exports,this)}return i[t].exports;function d(e){var t=d.resolve(e);return!1===t?{}:u(t)}}u.isParcelRequire=!0,u.Module=function(e){this.id=e,this.bundle=u,this.exports={}},u.modules=e,u.cache=i,u.parent=o,u.register=function(t,r){e[t]=[function(e,t){t.exports=r},{}]},Object.defineProperty(u,"root",{get:function(){return a[s]}}),a[s]=u;for(var p=0;p<t.length;p++)u(t[p]);if(r){// Expose entry point to Node, AMD or browser globals
// Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
var c=u(r);"object"==typeof exports&&"undefined"!=typeof module?module.exports=c:"function"==typeof define&&define.amd?define(function(){return c}):n&&(this[n]=c)}}({e8Kp4:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js"),n=e("vue"),a=e("./components/App.vue"),o=s.interopDefault(a);let i=(0,n.createApp)(o.default);i.mount("#app")},{vue:"4rzM0","./components/App.vue":"1Te0D","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4rzM0":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"compile",()=>a);var n=e("@vue/runtime-dom");s.exportAll(n,r);let a=()=>{}},{"@vue/runtime-dom":"pmTLt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],pmTLt:[function(e,t,r){let s;var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),n.export(r,"Transition",()=>E),n.export(r,"TransitionGroup",()=>X),n.export(r,"VueElement",()=>I),n.export(r,"createApp",()=>eC),n.export(r,"createSSRApp",()=>eS),n.export(r,"defineCustomElement",()=>j),n.export(r,"defineSSRCustomElement",()=>_),n.export(r,"hydrate",()=>ew),n.export(r,"initDirectivesForSSR",()=>eE),n.export(r,"render",()=>eI),n.export(r,"useCssModule",()=>w),n.export(r,"useCssVars",()=>C),n.export(r,"vModelCheckbox",()=>es),n.export(r,"vModelDynamic",()=>ep),n.export(r,"vModelRadio",()=>ea),n.export(r,"vModelSelect",()=>eo),n.export(r,"vModelText",()=>er),n.export(r,"vShow",()=>ev),n.export(r,"withKeys",()=>ex),n.export(r,"withModifiers",()=>em);var a=e("@vue/runtime-core");n.exportAll(a,r);var o=e("@vue/shared");let i="undefined"!=typeof document?document:null,l=i&&/* @__PURE__ */i.createElement("template"),u=/\s*!important$/;function p(e,t,r){if((0,o.isArray)(r))r.forEach(r=>p(e,t,r));else if(null==r&&(r=""),t.startsWith("--"))e.setProperty(t,r);else{let s=function(e,t){let r=d[t];if(r)return r;let s=(0,a.camelize)(t);if("filter"!==s&&s in e)return d[t]=s;s=(0,o.capitalize)(s);for(let r=0;r<c.length;r++){let n=c[r]+s;if(n in e)return d[t]=n}return t}(e,t);u.test(r)?e.setProperty((0,o.hyphenate)(s),r.replace(u,""),"important"):e[s]=r}}let c=["Webkit","Moz","ms"],d={},h="http://www.w3.org/1999/xlink";function f(e,t,r,s){e.addEventListener(t,r,s)}let m=/(?:Once|Passive|Capture)$/,g=0,x=/* @__PURE__ */Promise.resolve(),b=()=>g||(x.then(()=>g=0),g=Date.now()),y=/^on[a-z]/;function j(e,t){let r=(0,a.defineComponent)(e);class s extends I{constructor(e){super(r,e,t)}}return s.def=r,s}let _=e=>j(e,ew),k="undefined"!=typeof HTMLElement?HTMLElement:class{};class I extends k{constructor(e,t={},r){super(),this._def=e,this._props=t,/**
     * @internal
     */this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&r?r(this._createVNode(),this.shadowRoot):(this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,(0,a.nextTick)(()=>{this._connected||(eI(null,this.shadowRoot),this._instance=null)})}/**
   * resolve inner component definition (handle possible async component)
   */_resolveDef(){this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver(e=>{for(let t of e)this._setAttr(t.attributeName)}).observe(this,{attributes:!0});let e=(e,t=!1)=>{let r;let{props:s,styles:n}=e;if(s&&!(0,o.isArray)(s))for(let e in s){let t=s[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=(0,o.toNumber)(this._props[e])),(r||(r=/* @__PURE__ */Object.create(null)))[(0,o.camelize)(e)]=!0)}this._numberProps=r,t&&this._resolveProps(e),this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(t=>e(t,!0)):e(this._def)}_resolveProps(e){let{props:t}=e,r=(0,o.isArray)(t)?t:Object.keys(t||{});for(let e of Object.keys(this))"_"!==e[0]&&r.includes(e)&&this._setProp(e,this[e],!0,!1);for(let e of r.map(o.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}})}_setAttr(e){let t=this.getAttribute(e),r=(0,o.camelize)(e);this._numberProps&&this._numberProps[r]&&(t=(0,o.toNumber)(t)),this._setProp(r,t,!1)}/**
   * @internal
   */_getProp(e){return this._props[e]}/**
   * @internal
   */_setProp(e,t,r=!0,s=!0){t!==this._props[e]&&(this._props[e]=t,s&&this._instance&&this._update(),r&&(!0===t?this.setAttribute((0,o.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,o.hyphenate)(e),t+""):t||this.removeAttribute((0,o.hyphenate)(e))))}_update(){eI(this._createVNode(),this.shadowRoot)}_createVNode(){let e=(0,a.createVNode)(this._def,(0,o.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0;let t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};e.emit=(e,...r)=>{t(e,r),(0,o.hyphenate)(e)!==e&&t((0,o.hyphenate)(e),r)};let r=this;for(;r=r&&(r.parentNode||r.host);)if(r instanceof I){e.parent=r._instance,e.provides=r._instance.provides;break}}),e}_applyStyles(e){e&&e.forEach(e=>{let t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)})}}function w(e="$style"){{let t=(0,a.getCurrentInstance)();if(!t)return o.EMPTY_OBJ;let r=t.type.__cssModules;if(!r)return o.EMPTY_OBJ;let s=r[e];return s||o.EMPTY_OBJ}}function C(e){let t=(0,a.getCurrentInstance)();if(!t)return;let r=t.ut=(r=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach(e=>S(e,r))},s=()=>{let s=e(t.proxy);(function e(t,r){if(128&t.shapeFlag){let s=t.suspense;t=s.activeBranch,s.pendingBranch&&!s.isHydrating&&s.effects.push(()=>{e(s.activeBranch,r)})}for(;t.component;)t=t.component.subTree;if(1&t.shapeFlag&&t.el)S(t.el,r);else if(t.type===a.Fragment)t.children.forEach(t=>e(t,r));else if(t.type===a.Static){let{el:e,anchor:s}=t;for(;e&&(S(e,r),e!==s);)e=e.nextSibling}})(t.subTree,s),r(s)};(0,a.watchPostEffect)(s),(0,a.onMounted)(()=>{let e=new MutationObserver(s);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,a.onUnmounted)(()=>e.disconnect())})}function S(e,t){if(1===e.nodeType){let r=e.style;for(let e in t)r.setProperty(`--${e}`,t[e])}}let T="transition",N="animation",E=(e,{slots:t})=>(0,a.h)(a.BaseTransition,$(e),t);E.displayName="Transition";let F={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},A=E.props=/* @__PURE__ */(0,o.extend)({},a.BaseTransitionPropsValidators,F),R=(e,t=[])=>{(0,o.isArray)(e)?e.forEach(e=>e(...t)):e&&e(...t)},D=e=>!!e&&((0,o.isArray)(e)?e.some(e=>e.length>1):e.length>1);function $(e){let t={};for(let r in e)r in F||(t[r]=e[r]);if(!1===e.css)return t;let{name:r="v",type:s,duration:n,enterFromClass:a=`${r}-enter-from`,enterActiveClass:i=`${r}-enter-active`,enterToClass:l=`${r}-enter-to`,appearFromClass:u=a,appearActiveClass:p=i,appearToClass:c=l,leaveFromClass:d=`${r}-leave-from`,leaveActiveClass:h=`${r}-leave-active`,leaveToClass:f=`${r}-leave-to`}=e,m=function(e){if(null==e)return null;{if((0,o.isObject)(e))return[P(e.enter),P(e.leave)];let t=P(e);return[t,t]}}(n),g=m&&m[0],x=m&&m[1],{onBeforeEnter:b,onEnter:y,onEnterCancelled:j,onLeave:_,onLeaveCancelled:k,onBeforeAppear:I=b,onAppear:w=y,onAppearCancelled:C=j}=t,S=(e,t,r)=>{M(e,t?c:l),M(e,t?p:i),r&&r()},T=(e,t)=>{e._isLeaving=!1,M(e,d),M(e,f),M(e,h),t&&t()},N=e=>(t,r)=>{let n=e?w:y,o=()=>S(t,e,r);R(n,[t,o]),O(()=>{M(t,e?u:a),z(t,e?c:l),D(n)||B(t,s,g,o)})};return(0,o.extend)(t,{onBeforeEnter(e){R(b,[e]),z(e,a),z(e,i)},onBeforeAppear(e){R(I,[e]),z(e,u),z(e,p)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;let r=()=>T(e,t);z(e,d),W(),z(e,h),O(()=>{e._isLeaving&&(M(e,d),z(e,f),D(_)||B(e,s,x,r))}),R(_,[e,r])},onEnterCancelled(e){S(e,!1),R(j,[e])},onAppearCancelled(e){S(e,!0),R(C,[e])},onLeaveCancelled(e){T(e),R(k,[e])}})}function P(e){let t=(0,o.toNumber)(e);return t}function z(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e._vtc||(e._vtc=/* @__PURE__ */new Set)).add(t)}function M(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.remove(t));let{_vtc:r}=e;r&&(r.delete(t),r.size||(e._vtc=void 0))}function O(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let L=0;function B(e,t,r,s){let n=e._endId=++L,a=()=>{n===e._endId&&s()};if(r)return setTimeout(a,r);let{type:o,timeout:i,propCount:l}=U(e,t);if(!o)return s();let u=o+"end",p=0,c=()=>{e.removeEventListener(u,d),a()},d=t=>{t.target===e&&++p>=l&&c()};setTimeout(()=>{p<l&&c()},i+1),e.addEventListener(u,d)}function U(e,t){let r=window.getComputedStyle(e),s=e=>(r[e]||"").split(", "),n=s(`${T}Delay`),a=s(`${T}Duration`),o=V(n,a),i=s(`${N}Delay`),l=s(`${N}Duration`),u=V(i,l),p=null,c=0,d=0;t===T?o>0&&(p=T,c=o,d=a.length):t===N?u>0&&(p=N,c=u,d=l.length):d=(p=(c=Math.max(o,u))>0?o>u?T:N:null)?p===T?a.length:l.length:0;let h=p===T&&/\b(transform|all)(,|$)/.test(s(`${T}Property`).toString());return{type:p,timeout:c,propCount:d,hasTransform:h}}function V(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((t,r)=>G(t)+G(e[r])))}function G(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function W(){return document.body.offsetHeight}let q=/* @__PURE__ */new WeakMap,K=/* @__PURE__ */new WeakMap,H={name:"TransitionGroup",props:/* @__PURE__ */(0,o.extend)({},A,{tag:String,moveClass:String}),setup(e,{slots:t}){let r,s;let n=(0,a.getCurrentInstance)(),o=(0,a.useTransitionState)();return(0,a.onUpdated)(()=>{if(!r.length)return;let t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,r){let s=e.cloneNode();e._vtc&&e._vtc.forEach(e=>{e.split(/\s+/).forEach(e=>e&&s.classList.remove(e))}),r.split(/\s+/).forEach(e=>e&&s.classList.add(e)),s.style.display="none";let n=1===t.nodeType?t:t.parentNode;n.appendChild(s);let{hasTransform:a}=U(s);return n.removeChild(s),a}(r[0].el,n.vnode.el,t))return;r.forEach(Y),r.forEach(Z);let s=r.filter(J);W(),s.forEach(e=>{let r=e.el,s=r.style;z(r,t),s.transform=s.webkitTransform=s.transitionDuration="";let n=r._moveCb=e=>{(!e||e.target===r)&&(!e||/transform$/.test(e.propertyName))&&(r.removeEventListener("transitionend",n),r._moveCb=null,M(r,t))};r.addEventListener("transitionend",n)})}),()=>{let i=(0,a.toRaw)(e),l=$(i),u=i.tag||a.Fragment;r=s,s=t.default?(0,a.getTransitionRawChildren)(t.default()):[];for(let e=0;e<s.length;e++){let t=s[e];null!=t.key&&(0,a.setTransitionHooks)(t,(0,a.resolveTransitionHooks)(t,l,o,n))}if(r)for(let e=0;e<r.length;e++){let t=r[e];(0,a.setTransitionHooks)(t,(0,a.resolveTransitionHooks)(t,l,o,n)),q.set(t,t.el.getBoundingClientRect())}return(0,a.createVNode)(u,null,s)}}};H.props;let X=H;function Y(e){let t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Z(e){K.set(e,e.el.getBoundingClientRect())}function J(e){let t=q.get(e),r=K.get(e),s=t.left-r.left,n=t.top-r.top;if(s||n){let t=e.el.style;return t.transform=t.webkitTransform=`translate(${s}px,${n}px)`,t.transitionDuration="0s",e}}let Q=e=>{let t=e.props["onUpdate:modelValue"]||!1;return(0,o.isArray)(t)?e=>(0,o.invokeArrayFns)(t,e):t};function ee(e){e.target.composing=!0}function et(e){let t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}let er={created(e,{modifiers:{lazy:t,trim:r,number:s}},n){e._assign=Q(n);let a=s||n.props&&"number"===n.props.type;f(e,t?"change":"input",t=>{if(t.target.composing)return;let s=e.value;r&&(s=s.trim()),a&&(s=(0,o.looseToNumber)(s)),e._assign(s)}),r&&f(e,"change",()=>{e.value=e.value.trim()}),t||(f(e,"compositionstart",ee),f(e,"compositionend",et),f(e,"change",et))},// set value on mounted so it's after min/max for type="range"
mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:r,trim:s,number:n}},a){if(e._assign=Q(a),e.composing||document.activeElement===e&&"range"!==e.type&&(r||s&&e.value.trim()===t||(n||"number"===e.type)&&(0,o.looseToNumber)(e.value)===t))return;let i=null==t?"":t;e.value!==i&&(e.value=i)}},es={// #4096 array checkboxes need to be deep traversed
deep:!0,created(e,t,r){e._assign=Q(r),f(e,"change",()=>{let t=e._modelValue,r=el(e),s=e.checked,n=e._assign;if((0,o.isArray)(t)){let e=(0,o.looseIndexOf)(t,r),a=-1!==e;if(s&&!a)n(t.concat(r));else if(!s&&a){let r=[...t];r.splice(e,1),n(r)}}else if((0,o.isSet)(t)){let e=new Set(t);s?e.add(r):e.delete(r),n(e)}else n(eu(e,s))})},// set initial checked on mount to wait for true-value/false-value
mounted:en,beforeUpdate(e,t,r){e._assign=Q(r),en(e,t,r)}};function en(e,{value:t,oldValue:r},s){e._modelValue=t,(0,o.isArray)(t)?e.checked=(0,o.looseIndexOf)(t,s.props.value)>-1:(0,o.isSet)(t)?e.checked=t.has(s.props.value):t!==r&&(e.checked=(0,o.looseEqual)(t,eu(e,!0)))}let ea={created(e,{value:t},r){e.checked=(0,o.looseEqual)(t,r.props.value),e._assign=Q(r),f(e,"change",()=>{e._assign(el(e))})},beforeUpdate(e,{value:t,oldValue:r},s){e._assign=Q(s),t!==r&&(e.checked=(0,o.looseEqual)(t,s.props.value))}},eo={// <select multiple> value need to be deep traversed
deep:!0,created(e,{value:t,modifiers:{number:r}},s){let n=(0,o.isSet)(t);f(e,"change",()=>{let t=Array.prototype.filter.call(e.options,e=>e.selected).map(e=>r?(0,o.looseToNumber)(el(e)):el(e));e._assign(e.multiple?n?new Set(t):t:t[0])}),e._assign=Q(s)},// set value in mounted & updated because <select> relies on its children
// <option>s.
mounted(e,{value:t}){ei(e,t)},beforeUpdate(e,t,r){e._assign=Q(r)},updated(e,{value:t}){ei(e,t)}};function ei(e,t){let r=e.multiple;if(!r||(0,o.isArray)(t)||(0,o.isSet)(t)){for(let s=0,n=e.options.length;s<n;s++){let n=e.options[s],a=el(n);if(r)(0,o.isArray)(t)?n.selected=(0,o.looseIndexOf)(t,a)>-1:n.selected=t.has(a);else if((0,o.looseEqual)(el(n),t)){e.selectedIndex!==s&&(e.selectedIndex=s);return}}r||-1===e.selectedIndex||(e.selectedIndex=-1)}}function el(e){return"_value"in e?e._value:e.value}function eu(e,t){let r=t?"_trueValue":"_falseValue";return r in e?e[r]:t}let ep={created(e,t,r){ed(e,t,r,null,"created")},mounted(e,t,r){ed(e,t,r,null,"mounted")},beforeUpdate(e,t,r,s){ed(e,t,r,s,"beforeUpdate")},updated(e,t,r,s){ed(e,t,r,s,"updated")}};function ec(e,t){switch(e){case"SELECT":return eo;case"TEXTAREA":return er;default:switch(t){case"checkbox":return es;case"radio":return ea;default:return er}}}function ed(e,t,r,s,n){let a=ec(e.tagName,r.props&&r.props.type),o=a[n];o&&o(e,t,r,s)}let eh=["ctrl","shift","alt","meta"],ef={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>eh.some(r=>e[`${r}Key`]&&!t.includes(r))},em=(e,t)=>(r,...s)=>{for(let e=0;e<t.length;e++){let s=ef[t[e]];if(s&&s(r,t))return}return e(r,...s)},eg={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},ex=(e,t)=>r=>{if(!("key"in r))return;let s=(0,o.hyphenate)(r.key);if(t.some(e=>e===s||eg[e]===s))return e(r)},ev={beforeMount(e,{value:t},{transition:r}){e._vod="none"===e.style.display?"":e.style.display,r&&t?r.beforeEnter(e):eb(e,t)},mounted(e,{value:t},{transition:r}){r&&t&&r.enter(e)},updated(e,{value:t,oldValue:r},{transition:s}){!t!=!r&&(s?t?(s.beforeEnter(e),eb(e,!0),s.enter(e)):s.leave(e,()=>{eb(e,!1)}):eb(e,t))},beforeUnmount(e,{value:t}){eb(e,t)}};function eb(e,t){e.style.display=t?e._vod:"none"}let ey=/* @__PURE__ */(0,o.extend)({patchProp:(e,t,r,s,n=!1,i,l,u,c)=>{var d;"class"===t?function(e,t,r){let s=e._vtc;s&&(t=(t?[t,...s]:[...s]).join(" ")),null==t?e.removeAttribute("class"):r?e.setAttribute("class",t):e.className=t}(e,s,n):"style"===t?function(e,t,r){let s=e.style,n=(0,o.isString)(r);if(r&&!n){if(t&&!(0,o.isString)(t))for(let e in t)null==r[e]&&p(s,e,"");for(let e in r)p(s,e,r[e])}else{let a=s.display;n?t!==r&&(s.cssText=r):t&&e.removeAttribute("style"),"_vod"in e&&(s.display=a)}}(e,r,s):(0,o.isOn)(t)?(0,o.isModelListener)(t)||function(e,t,r,s,n=null){let i=e._vei||(e._vei={}),l=i[t];if(s&&l)l.value=s;else{let[r,u]=function(e){let t;if(m.test(e)){let r;for(t={};r=e.match(m);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}let r=":"===e[2]?e.slice(3):(0,o.hyphenate)(e.slice(2));return[r,t]}(t);if(s){let l=i[t]=function(e,t){let r=e=>{if(e._vts){if(e._vts<=r.attached)return}else e._vts=Date.now();(0,a.callWithAsyncErrorHandling)(function(e,t){if(!(0,o.isArray)(t))return t;{let r=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{r.call(e),e._stopped=!0},t.map(e=>t=>!t._stopped&&e&&e(t))}}(e,r.value),t,5,[e])};return r.value=e,r.attached=b(),r}(s,n);f(e,r,l,u)}else l&&(!function(e,t,r,s){e.removeEventListener(t,r,s)}(e,r,l,u),i[t]=void 0)}}(e,t,0,s,l):("."===t[0]?(t=t.slice(1),!0):"^"===t[0]?(t=t.slice(1),!1):(d=t,n?"innerHTML"===d||"textContent"===d||d in e&&y.test(d)&&(0,o.isFunction)(s):!("spellcheck"===d||"draggable"===d||"translate"===d||"form"===d||"list"===d&&"INPUT"===e.tagName||"type"===d&&"TEXTAREA"===e.tagName||y.test(d)&&(0,o.isString)(s))&&d in e))?function(e,t,r,s,n,a,i){if("innerHTML"===t||"textContent"===t){s&&i(s,n,a),e[t]=null==r?"":r;return}let l=e.tagName;if("value"===t&&"PROGRESS"!==l&&// custom elements may use _value internally
!l.includes("-")){e._value=r;let s="OPTION"===l?e.getAttribute("value"):e.value,n=null==r?"":r;s!==n&&(e.value=n),null==r&&e.removeAttribute(t);return}let u=!1;if(""===r||null==r){let s=typeof e[t];"boolean"===s?r=(0,o.includeBooleanAttr)(r):null==r&&"string"===s?(r="",u=!0):"number"===s&&(r=0,u=!0)}try{e[t]=r}catch(e){}u&&e.removeAttribute(t)}(e,t,s,i,l,u,c):("true-value"===t?e._trueValue=s:"false-value"===t&&(e._falseValue=s),function(e,t,r,s,n){if(s&&t.startsWith("xlink:"))null==r?e.removeAttributeNS(h,t.slice(6,t.length)):e.setAttributeNS(h,t,r);else{let s=(0,o.isSpecialBooleanAttr)(t);null==r||s&&!(0,o.includeBooleanAttr)(r)?e.removeAttribute(t):e.setAttribute(t,s?"":r)}}(e,t,s,n))}},{insert:(e,t,r)=>{t.insertBefore(e,r||null)},remove:e=>{let t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,r,s)=>{let n=t?i.createElementNS("http://www.w3.org/2000/svg",e):i.createElement(e,r?{is:r}:void 0);return"select"===e&&s&&null!=s.multiple&&n.setAttribute("multiple",s.multiple),n},createText:e=>i.createTextNode(e),createComment:e=>i.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>i.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},// __UNSAFE__
// Reason: innerHTML.
// Static content here can only come from compiled templates.
// As long as the user only uses trusted templates, this is safe.
insertStaticContent(e,t,r,s,n,a){let o=r?r.previousSibling:t.lastChild;if(n&&(n===a||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),r),n!==a&&(n=n.nextSibling););else{l.innerHTML=s?`<svg>${e}</svg>`:e;let n=l.content;if(s){let e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,r)}return[// first
o?o.nextSibling:t.firstChild,// last
r?r.previousSibling:t.lastChild]}}),ej=!1;function e_(){return s||(s=(0,a.createRenderer)(ey))}function ek(){return s=ej?s:(0,a.createHydrationRenderer)(ey),ej=!0,s}let eI=(...e)=>{e_().render(...e)},ew=(...e)=>{ek().hydrate(...e)},eC=(...e)=>{let t=e_().createApp(...e),{mount:r}=t;return t.mount=e=>{let s=eT(e);if(!s)return;let n=t._component;(0,o.isFunction)(n)||n.render||n.template||(n.template=s.innerHTML),s.innerHTML="";let a=r(s,!1,s instanceof SVGElement);return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),a},t},eS=(...e)=>{let t=ek().createApp(...e),{mount:r}=t;return t.mount=e=>{let t=eT(e);if(t)return r(t,!0,t instanceof SVGElement)},t};function eT(e){if((0,o.isString)(e)){let t=document.querySelector(e);return t}return e}let eN=!1,eE=()=>{eN||(eN=!0,er.getSSRProps=({value:e})=>({value:e}),ea.getSSRProps=({value:e},t)=>{if(t.props&&(0,o.looseEqual)(t.props.value,e))return{checked:!0}},es.getSSRProps=({value:e},t)=>{if((0,o.isArray)(e)){if(t.props&&(0,o.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,o.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},ep.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;let r=ec(t.type.toUpperCase(),t.props&&t.props.type);if(r.getSSRProps)return r.getSSRProps(e,t)},ev.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},{"@vue/runtime-core":"1sRIN","@vue/shared":"i9PY1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1sRIN":[function(e,t,r){let s,n,a,o,i;var l=e("@parcel/transformer-js/src/esmodule-helpers.js");l.defineInteropFlag(r),l.export(r,"EffectScope",()=>u.EffectScope),l.export(r,"ReactiveEffect",()=>u.ReactiveEffect),l.export(r,"customRef",()=>u.customRef),l.export(r,"effect",()=>u.effect),l.export(r,"effectScope",()=>u.effectScope),l.export(r,"getCurrentScope",()=>u.getCurrentScope),l.export(r,"isProxy",()=>u.isProxy),l.export(r,"isReactive",()=>u.isReactive),l.export(r,"isReadonly",()=>u.isReadonly),l.export(r,"isRef",()=>u.isRef),l.export(r,"isShallow",()=>u.isShallow),l.export(r,"markRaw",()=>u.markRaw),l.export(r,"onScopeDispose",()=>u.onScopeDispose),l.export(r,"proxyRefs",()=>u.proxyRefs),l.export(r,"reactive",()=>u.reactive),l.export(r,"readonly",()=>u.readonly),l.export(r,"ref",()=>u.ref),l.export(r,"shallowReactive",()=>u.shallowReactive),l.export(r,"shallowReadonly",()=>u.shallowReadonly),l.export(r,"shallowRef",()=>u.shallowRef),l.export(r,"stop",()=>u.stop),l.export(r,"toRaw",()=>u.toRaw),l.export(r,"toRef",()=>u.toRef),l.export(r,"toRefs",()=>u.toRefs),l.export(r,"toValue",()=>u.toValue),l.export(r,"triggerRef",()=>u.triggerRef),l.export(r,"unref",()=>u.unref),l.export(r,"camelize",()=>p.camelize),l.export(r,"capitalize",()=>p.capitalize),l.export(r,"normalizeClass",()=>p.normalizeClass),l.export(r,"normalizeProps",()=>p.normalizeProps),l.export(r,"normalizeStyle",()=>p.normalizeStyle),l.export(r,"toDisplayString",()=>p.toDisplayString),l.export(r,"toHandlerKey",()=>p.toHandlerKey),l.export(r,"BaseTransition",()=>eI),l.export(r,"BaseTransitionPropsValidators",()=>ek),l.export(r,"Comment",()=>ro),l.export(r,"Fragment",()=>rn),l.export(r,"KeepAlive",()=>eP),l.export(r,"Static",()=>ri),l.export(r,"Suspense",()=>en),l.export(r,"Teleport",()=>rr),l.export(r,"Text",()=>ra),l.export(r,"assertNumber",()=>d),l.export(r,"callWithAsyncErrorHandling",()=>f),l.export(r,"callWithErrorHandling",()=>h),l.export(r,"cloneVNode",()=>rC),l.export(r,"compatUtils",()=>r7),l.export(r,"computed",()=>rQ),l.export(r,"createBlock",()=>rg),l.export(r,"createCommentVNode",()=>rN),l.export(r,"createElementBlock",()=>rm),l.export(r,"createElementVNode",()=>rk),l.export(r,"createHydrationRenderer",()=>t3),l.export(r,"createPropsRestProxy",()=>tj),l.export(r,"createRenderer",()=>t2),l.export(r,"createSlots",()=>e7),l.export(r,"createStaticVNode",()=>rT),l.export(r,"createTextVNode",()=>rS),l.export(r,"createVNode",()=>rI),l.export(r,"defineAsyncComponent",()=>eR),l.export(r,"defineComponent",()=>eF),l.export(r,"defineEmits",()=>tl),l.export(r,"defineExpose",()=>tu),l.export(r,"defineModel",()=>td),l.export(r,"defineOptions",()=>tp),l.export(r,"defineProps",()=>ti),l.export(r,"defineSlots",()=>tc),l.export(r,"devtools",()=>s),l.export(r,"getCurrentInstance",()=>rO),l.export(r,"getTransitionRawChildren",()=>eE),l.export(r,"guardReactiveProps",()=>rw),l.export(r,"h",()=>r0),l.export(r,"handleError",()=>m),l.export(r,"hasInjectionContext",()=>tM),l.export(r,"initCustomFormatter",()=>r3),l.export(r,"inject",()=>tz),l.export(r,"isMemoSame",()=>r5),l.export(r,"isRuntimeOnly",()=>rH),l.export(r,"isVNode",()=>rx),l.export(r,"mergeDefaults",()=>tb),l.export(r,"mergeModels",()=>ty),l.export(r,"mergeProps",()=>rR),l.export(r,"nextTick",()=>C),l.export(r,"onActivated",()=>eM),l.export(r,"onBeforeMount",()=>eW),l.export(r,"onBeforeUnmount",()=>eX),l.export(r,"onBeforeUpdate",()=>eK),l.export(r,"onDeactivated",()=>eO),l.export(r,"onErrorCaptured",()=>e0),l.export(r,"onMounted",()=>eq),l.export(r,"onRenderTracked",()=>eQ),l.export(r,"onRenderTriggered",()=>eJ),l.export(r,"onServerPrefetch",()=>eZ),l.export(r,"onUnmounted",()=>eY),l.export(r,"onUpdated",()=>eH),l.export(r,"openBlock",()=>rp),l.export(r,"popScopeId",()=>X),l.export(r,"provide",()=>tP),l.export(r,"pushScopeId",()=>H),l.export(r,"queuePostFlushCb",()=>N),l.export(r,"registerRuntimeCompiler",()=>rK),l.export(r,"renderList",()=>e8),l.export(r,"renderSlot",()=>te),l.export(r,"resolveComponent",()=>e2),l.export(r,"resolveDirective",()=>e5),l.export(r,"resolveDynamicComponent",()=>e4),l.export(r,"resolveFilter",()=>r8),l.export(r,"resolveTransitionHooks",()=>eC),l.export(r,"setBlockTracking",()=>rh),l.export(r,"setDevtoolsHook",()=>z),l.export(r,"setTransitionHooks",()=>eN),l.export(r,"ssrContextKey",()=>r1),l.export(r,"ssrUtils",()=>r9),l.export(r,"toHandlers",()=>tt),l.export(r,"transformVNodeArgs",()=>rb),l.export(r,"useAttrs",()=>tm),l.export(r,"useModel",()=>tg),l.export(r,"useSSRContext",()=>r2),l.export(r,"useSlots",()=>tf),l.export(r,"useTransitionState",()=>ej),l.export(r,"version",()=>r6),l.export(r,"warn",()=>c),l.export(r,"watch",()=>ef),l.export(r,"watchEffect",()=>ep),l.export(r,"watchPostEffect",()=>ec),l.export(r,"watchSyncEffect",()=>ed),l.export(r,"withAsyncContext",()=>t_),l.export(r,"withCtx",()=>Z),l.export(r,"withDefaults",()=>th),l.export(r,"withDirectives",()=>eb),l.export(r,"withMemo",()=>r4),l.export(r,"withScopeId",()=>Y);var u=e("@vue/reactivity"),p=e("@vue/shared");function c(e,...t){}function d(e,t){}function h(e,t,r,s){let n;try{n=s?e(...s):e()}catch(e){m(e,t,r)}return n}function f(e,t,r,s){if((0,p.isFunction)(e)){let n=h(e,t,r,s);return n&&(0,p.isPromise)(n)&&n.catch(e=>{m(e,t,r)}),n}let n=[];for(let a=0;a<e.length;a++)n.push(f(e[a],t,r,s));return n}function m(e,t,r,s=!0){if(t&&t.vnode,t){let s=t.parent,n=t.proxy;for(;s;){let t=s.ec;if(t){for(let s=0;s<t.length;s++)if(!1===t[s](e,n,r))return}s=s.parent}let a=t.appContext.config.errorHandler;if(a){h(a,null,10,[e,n,r]);return}}!function(e,t,r,s=!0){console.error(e)}(e,0,0,s)}let g=!1,x=!1,b=[],y=0,j=[],_=null,k=0,I=/* @__PURE__ */Promise.resolve(),w=null;function C(e){let t=w||I;return e?t.then(this?e.bind(this):e):t}function S(e){b.length&&b.includes(e,g&&e.allowRecurse?y+1:y)||(null==e.id?b.push(e):b.splice(function(e){let t=y+1,r=b.length;for(;t<r;){let s=t+r>>>1,n=A(b[s]);n<e?t=s+1:r=s}return t}(e.id),0,e),T())}function T(){g||x||(x=!0,w=I.then(function e(t){x=!1,g=!0,b.sort(R),p.NOOP;try{for(y=0;y<b.length;y++){let e=b[y];e&&!1!==e.active&&h(e,null,14)}}finally{y=0,b.length=0,F(t),g=!1,w=null,(b.length||j.length)&&e(t)}}))}function N(e){(0,p.isArray)(e)?j.push(...e):_&&_.includes(e,e.allowRecurse?k+1:k)||j.push(e),T()}function E(e,t=g?y+1:0){for(;t<b.length;t++){let e=b[t];e&&e.pre&&(b.splice(t,1),t--,e())}}function F(e){if(j.length){let e=[...new Set(j)];if(j.length=0,_){_.push(...e);return}for((_=e).sort((e,t)=>A(e)-A(t)),k=0;k<_.length;k++)_[k]();_=null,k=0}}let A=e=>null==e.id?1/0:e.id,R=(e,t)=>{let r=A(e)-A(t);if(0===r){if(e.pre&&!t.pre)return -1;if(t.pre&&!e.pre)return 1}return r},D=[],$=!1;function P(e,...t){s?s.emit(e,...t):$||D.push({event:e,args:t})}function z(e,t){var r,n;if(s=e)s.enabled=!0,D.forEach(({event:e,args:t})=>s.emit(e,...t)),D=[];else if(// browser environment to avoid the timer handle stalling test runner exit
// (#4815)
"undefined"==typeof window||!// some envs mock window but not fully
window.HTMLElement||(null==(n=null==(r=window.navigator)?void 0:r.userAgent)?void 0:n.includes("jsdom")))$=!0,D=[];else{let e=t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[];e.push(e=>{z(e,t)}),setTimeout(()=>{s||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,$=!0,D=[])},3e3)}}let M=/* @__PURE__ */U("component:added"/* COMPONENT_ADDED */),O=/* @__PURE__ */U("component:updated"/* COMPONENT_UPDATED */),L=/* @__PURE__ */U("component:removed"/* COMPONENT_REMOVED */),B=e=>{s&&"function"==typeof s.cleanupBuffer&&// remove the component if it wasn't buffered
!s.cleanupBuffer(e)&&L(e)};function U(e){return t=>{P(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}function V(e,t,...r){let s;if(e.isUnmounted)return;let n=e.vnode.props||p.EMPTY_OBJ,a=r,o=t.startsWith("update:"),i=o&&t.slice(7);if(i&&i in n){let e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=n[e]||p.EMPTY_OBJ;s&&(a=r.map(e=>(0,p.isString)(e)?e.trim():e)),t&&(a=r.map(p.looseToNumber))}if(__VUE_PROD_DEVTOOLS__){var l;l=a,P("component:emit"/* COMPONENT_EMIT */,e.appContext.app,e,t,l)}let u=n[s=(0,p.toHandlerKey)(t)]||// also try camelCase event handler (#2249)
n[s=(0,p.toHandlerKey)((0,p.camelize)(t))];!u&&o&&(u=n[s=(0,p.toHandlerKey)((0,p.hyphenate)(t))]),u&&f(u,e,6,a);let c=n[s+"Once"];if(c){if(e.emitted){if(e.emitted[s])return}else e.emitted={};e.emitted[s]=!0,f(c,e,6,a)}}function G(e,t){return!!(e&&(0,p.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,p.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,p.hasOwn)(e,(0,p.hyphenate)(t))||(0,p.hasOwn)(e,t))}let W=null,q=null;function K(e){let t=W;return W=e,q=e&&e.type.__scopeId||null,t}function H(e){q=e}function X(){q=null}let Y=e=>Z;function Z(e,t=W,r){if(!t||e._n)return e;let s=(...r)=>{let n;s._d&&(rd+=-1);let a=K(t);try{n=e(...r)}finally{K(a),s._d&&(rd+=1)}return __VUE_PROD_DEVTOOLS__&&O(t),n};return s._n=!0,s._c=!0,s._d=!0,s}function J(e){let t,r;let{type:s,vnode:n,proxy:a,withProxy:o,props:i,propsOptions:[l],slots:u,attrs:c,emit:d,render:h,renderCache:f,data:g,setupState:x,ctx:b,inheritAttrs:y}=e,j=K(e);try{if(4&n.shapeFlag){let e=o||a;t=rE(h.call(e,e,f,i,x,g,b)),r=c}else t=rE(s.length>1?s(i,{attrs:c,slots:u,emit:d}):s(i,null)),r=s.props?c:Q(c)}catch(r){rl.length=0,m(r,e,1),t=rI(ro)}let _=t;if(r&&!1!==y){let e=Object.keys(r),{shapeFlag:t}=_;e.length&&7&t&&(l&&e.some(p.isModelListener)&&(r=ee(r,l)),_=rC(_,r))}return n.dirs&&((_=rC(_)).dirs=_.dirs?_.dirs.concat(n.dirs):n.dirs),n.transition&&(_.transition=n.transition),t=_,K(j),t}let Q=e=>{let t;for(let r in e)("class"===r||"style"===r||(0,p.isOn)(r))&&((t||(t={}))[r]=e[r]);return t},ee=(e,t)=>{let r={};for(let s in e)(0,p.isModelListener)(s)&&s.slice(9) in t||(r[s]=e[s]);return r};function et(e,t,r){let s=Object.keys(t);if(s.length!==Object.keys(e).length)return!0;for(let n=0;n<s.length;n++){let a=s[n];if(t[a]!==e[a]&&!G(r,a))return!0}return!1}function er({vnode:e,parent:t},r){for(;t&&t.subTree===e;)(e=t.vnode).el=r,t=t.parent}let es=e=>e.__isSuspense,en={name:"Suspense",// In order to make Suspense tree-shakable, we need to avoid importing it
// directly in the renderer. The renderer checks for the __isSuspense flag
// on a vnode's type and calls the `process` method, passing in renderer
// internals.
__isSuspense:!0,process(e,t,r,s,n,a,o,i,l,u){null==e?function(e,t,r,s,n,a,o,i,l){let{p:u,o:{createElement:p}}=l,c=p("div"),d=e.suspense=eo(e,n,s,t,c,r,a,o,i,l);u(null,d.pendingBranch=e.ssContent,c,null,s,d,a,o),d.deps>0?(ea(e,"onPending"),ea(e,"onFallback"),u(null,e.ssFallback,t,r,s,null,a,o),eu(d,e.ssFallback)):d.resolve(!1,!0)}(t,r,s,n,a,o,i,l,u):function(e,t,r,s,n,a,o,i,{p:l,um:u,o:{createElement:p}}){let c=t.suspense=e.suspense;c.vnode=t,t.el=e.el;let d=t.ssContent,h=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:g,isHydrating:x}=c;if(m)c.pendingBranch=d,rv(d,m)?(l(m,d,c.hiddenContainer,null,n,c,a,o,i),c.deps<=0?c.resolve():g&&(l(f,h,r,s,n,null,a,o,i),eu(c,h))):(c.pendingId++,x?(c.isHydrating=!1,c.activeBranch=m):u(m,n,c),c.deps=0,c.effects.length=0,c.hiddenContainer=p("div"),g?(l(null,d,c.hiddenContainer,null,n,c,a,o,i),c.deps<=0?c.resolve():(l(f,h,r,s,n,null,a,o,i),eu(c,h))):f&&rv(d,f)?(l(f,d,r,s,n,c,a,o,i),c.resolve(!0)):(l(null,d,c.hiddenContainer,null,n,c,a,o,i),c.deps<=0&&c.resolve()));else if(f&&rv(d,f))l(f,d,r,s,n,c,a,o,i),eu(c,d);else if(ea(t,"onPending"),c.pendingBranch=d,c.pendingId++,l(null,d,c.hiddenContainer,null,n,c,a,o,i),c.deps<=0)c.resolve();else{let{timeout:e,pendingId:t}=c;e>0?setTimeout(()=>{c.pendingId===t&&c.fallback(h)},e):0===e&&c.fallback(h)}}(e,t,r,s,n,o,i,l,u)},hydrate:function(e,t,r,s,n,a,o,i,l){let u=t.suspense=eo(t,s,r,e.parentNode,document.createElement("div"),null,n,a,o,i,!0),p=l(e,u.pendingBranch=t.ssContent,r,u,a,o);return 0===u.deps&&u.resolve(!1,!0),p},create:eo,normalize:function(e){let{shapeFlag:t,children:r}=e,s=32&t;e.ssContent=ei(s?r.default:r),e.ssFallback=s?ei(r.fallback):rI(ro)}};function ea(e,t){let r=e.props&&e.props[t];(0,p.isFunction)(r)&&r()}function eo(e,t,r,s,n,a,o,i,l,u,c=!1){var d;let h;let{p:f,m:g,um:x,n:b,o:{parentNode:y,remove:j}}=u,_=(null==(d=e.props)?void 0:d.suspensible)!=null&&!1!==e.props.suspensible;_&&(null==t?void 0:t.pendingBranch)&&(h=t.pendingId,t.deps++);let k=e.props?(0,p.toNumber)(e.props.timeout):void 0,I={vnode:e,parent:t,parentComponent:r,isSVG:o,container:s,hiddenContainer:n,anchor:a,deps:0,pendingId:0,timeout:"number"==typeof k?k:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:c,isUnmounted:!1,effects:[],resolve(e=!1,r=!1){let{vnode:s,activeBranch:n,pendingBranch:a,pendingId:o,effects:i,parentComponent:l,container:u}=I;if(I.isHydrating)I.isHydrating=!1;else if(!e){let e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{o===I.pendingId&&g(a,u,t,0)});let{anchor:t}=I;n&&(t=b(n),x(n,l,I,!0)),e||g(a,u,t,0)}eu(I,a),I.pendingBranch=null,I.isInFallback=!1;let p=I.parent,c=!1;for(;p;){if(p.pendingBranch){p.effects.push(...i),c=!0;break}p=p.parent}c||N(i),I.effects=[],_&&t&&t.pendingBranch&&h===t.pendingId&&(t.deps--,0!==t.deps||r||t.resolve()),ea(s,"onResolve")},fallback(e){if(!I.pendingBranch)return;let{vnode:t,activeBranch:r,parentComponent:s,container:n,isSVG:a}=I;ea(t,"onFallback");let o=b(r),u=()=>{I.isInFallback&&(f(null,e,n,o,s,null,a,i,l),eu(I,e))},p=e.transition&&"out-in"===e.transition.mode;p&&(r.transition.afterLeave=u),I.isInFallback=!0,x(r,s,null,!0),p||u()},move(e,t,r){I.activeBranch&&g(I.activeBranch,e,t,r),I.container=e},next:()=>I.activeBranch&&b(I.activeBranch),registerDep(e,t){let r=!!I.pendingBranch;r&&I.deps++;let s=e.vnode.el;e.asyncDep.catch(t=>{m(t,e,0)}).then(n=>{if(e.isUnmounted||I.isUnmounted||I.pendingId!==e.suspenseId)return;e.asyncResolved=!0;let{vnode:a}=e;rq(e,n,!1),s&&(a.el=s);let i=!s&&e.subTree.el;t(e,a,// if this is not a hydration, instance.subTree will be the comment
// placeholder.
y(s||e.subTree.el),// consider the comment placeholder case.
s?null:b(e.subTree),I,o,l),i&&j(i),er(e,a.el),r&&0==--I.deps&&I.resolve()})},unmount(e,t){I.isUnmounted=!0,I.activeBranch&&x(I.activeBranch,r,e,t),I.pendingBranch&&x(I.pendingBranch,r,e,t)}};return I}function ei(e){let t;if((0,p.isFunction)(e)){let r=rd&&e._c;r&&(e._d=!1,rp()),e=e(),r&&(e._d=!0,t=ru,rc())}if((0,p.isArray)(e)){let t=function(e){let t;for(let r=0;r<e.length;r++){let s=e[r];if(!rx(s))return;if(s.type!==ro||"v-if"===s.children){if(t)return;t=s}}return t}(e);e=t}return e=rE(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter(t=>t!==e)),e}function el(e,t){t&&t.pendingBranch?(0,p.isArray)(e)?t.effects.push(...e):t.effects.push(e):N(e)}function eu(e,t){e.activeBranch=t;let{vnode:r,parentComponent:s}=e,n=r.el=t.el;s&&s.subTree===r&&(s.vnode.el=n,er(s,n))}function ep(e,t){return em(e,null,t)}function ec(e,t){return em(e,null,{flush:"post"})}function ed(e,t){return em(e,null,{flush:"sync"})}let eh={};function ef(e,t,r){return em(e,t,r)}function em(e,t,{immediate:r,deep:s,flush:n,onTrack:a,onTrigger:o}=p.EMPTY_OBJ){var i;let l,c,d,m;let g=(0,u.getCurrentScope)()===(null==(i=rM)?void 0:i.scope)?rM:null,x=!1,b=!1;if((0,u.isRef)(e)?(l=()=>e.value,x=(0,u.isShallow)(e)):(0,u.isReactive)(e)?(l=()=>e,s=!0):(0,p.isArray)(e)?(b=!0,x=e.some(e=>(0,u.isReactive)(e)||(0,u.isShallow)(e)),l=()=>e.map(e=>(0,u.isRef)(e)?e.value:(0,u.isReactive)(e)?ev(e):(0,p.isFunction)(e)?h(e,g,2):void 0)):l=(0,p.isFunction)(e)?t?()=>h(e,g,2):()=>{if(!g||!g.isUnmounted)return c&&c(),f(e,g,3,[y])}:p.NOOP,t&&s){let e=l;l=()=>ev(e())}let y=e=>{c=k.onStop=()=>{h(e,g,4)}};if(rG){if(y=p.NOOP,t?r&&f(t,g,3,[l(),b?[]:void 0,y]):l(),"sync"!==n)return p.NOOP;{let e=r2();d=e.__watcherHandles||(e.__watcherHandles=[])}}let j=b?Array(e.length).fill(eh):eh,_=()=>{if(k.active){if(t){let e=k.run();(s||x||(b?e.some((e,t)=>(0,p.hasChanged)(e,j[t])):(0,p.hasChanged)(e,j)))&&(c&&c(),f(t,g,3,[e,// pass undefined as the old value when it's changed for the first time
j===eh?void 0:b&&j[0]===eh?[]:j,y]),j=e)}else k.run()}};_.allowRecurse=!!t,"sync"===n?m=_:"post"===n?m=()=>t1(_,g&&g.suspense):(_.pre=!0,g&&(_.id=g.uid),m=()=>S(_));let k=new u.ReactiveEffect(l,m);t?r?_():j=k.run():"post"===n?t1(k.run.bind(k),g&&g.suspense):k.run();let I=()=>{k.stop(),g&&g.scope&&(0,p.remove)(g.scope.effects,k)};return d&&d.push(I),I}function eg(e,t,r){let s;let n=this.proxy,a=(0,p.isString)(e)?e.includes(".")?ex(n,e):()=>n[e]:e.bind(n,n);(0,p.isFunction)(t)?s=t:(s=t.handler,r=t);let o=rM;rB(this);let i=em(a,s.bind(n),r);return o?rB(o):rU(),i}function ex(e,t){let r=t.split(".");return()=>{let t=e;for(let e=0;e<r.length&&t;e++)t=t[r[e]];return t}}function ev(e,t){if(!(0,p.isObject)(e)||e.__v_skip||(t=t||/* @__PURE__ */new Set).has(e))return e;if(t.add(e),(0,u.isRef)(e))ev(e.value,t);else if((0,p.isArray)(e))for(let r=0;r<e.length;r++)ev(e[r],t);else if((0,p.isSet)(e)||(0,p.isMap)(e))e.forEach(e=>{ev(e,t)});else if((0,p.isPlainObject)(e))for(let r in e)ev(e[r],t);return e}function eb(e,t){let r=W;if(null===r)return e;let s=rZ(r)||r.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[r,a,o,i=p.EMPTY_OBJ]=t[e];r&&((0,p.isFunction)(r)&&(r={mounted:r,updated:r}),r.deep&&ev(a),n.push({dir:r,instance:s,value:a,oldValue:void 0,arg:o,modifiers:i}))}return e}function ey(e,t,r,s){let n=e.dirs,a=t&&t.dirs;for(let o=0;o<n.length;o++){let i=n[o];a&&(i.oldValue=a[o].value);let l=i.dir[s];l&&((0,u.pauseTracking)(),f(l,r,8,[e.el,i,e,t]),(0,u.resetTracking)())}}function ej(){let e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:/* @__PURE__ */new Map};return eq(()=>{e.isMounted=!0}),eX(()=>{e.isUnmounting=!0}),e}let e_=[Function,Array],ek={mode:String,appear:Boolean,persisted:Boolean,// enter
onBeforeEnter:e_,onEnter:e_,onAfterEnter:e_,onEnterCancelled:e_,// leave
onBeforeLeave:e_,onLeave:e_,onAfterLeave:e_,onLeaveCancelled:e_,// appear
onBeforeAppear:e_,onAppear:e_,onAfterAppear:e_,onAppearCancelled:e_},eI={name:"BaseTransition",props:ek,setup(e,{slots:t}){let r;let s=rO(),n=ej();return()=>{let a=t.default&&eE(t.default(),!0);if(!a||!a.length)return;let o=a[0];if(a.length>1){for(let e of a)if(e.type!==ro){o=e;break}}let i=(0,u.toRaw)(e),{mode:l}=i;if(n.isLeaving)return eS(o);let p=eT(o);if(!p)return eS(o);let c=eC(p,i,n,s);eN(p,c);let d=s.subTree,h=d&&eT(d),f=!1,{getTransitionKey:m}=p.type;if(m){let e=m();void 0===r?r=e:e!==r&&(r=e,f=!0)}if(h&&h.type!==ro&&(!rv(p,h)||f)){let e=eC(h,i,n,s);if(eN(h,e),"out-in"===l)return n.isLeaving=!0,e.afterLeave=()=>{n.isLeaving=!1,!1!==s.update.active&&s.update()},eS(o);"in-out"===l&&p.type!==ro&&(e.delayLeave=(e,t,r)=>{let s=ew(n,h);s[String(h.key)]=h,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete c.delayedLeave},c.delayedLeave=r})}return o}}};function ew(e,t){let{leavingVNodes:r}=e,s=r.get(t.type);return s||(s=/* @__PURE__ */Object.create(null),r.set(t.type,s)),s}function eC(e,t,r,s){let{appear:n,mode:a,persisted:o=!1,onBeforeEnter:i,onEnter:l,onAfterEnter:u,onEnterCancelled:c,onBeforeLeave:d,onLeave:h,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:x,onAppear:b,onAfterAppear:y,onAppearCancelled:j}=t,_=String(e.key),k=ew(r,e),I=(e,t)=>{e&&f(e,s,9,t)},w=(e,t)=>{let r=t[1];I(e,t),(0,p.isArray)(e)?e.every(e=>e.length<=1)&&r():e.length<=1&&r()},C={mode:a,persisted:o,beforeEnter(t){let s=i;if(!r.isMounted){if(!n)return;s=x||i}t._leaveCb&&t._leaveCb(!0);let a=k[_];a&&rv(e,a)&&a.el._leaveCb&&a.el._leaveCb(),I(s,[t])},enter(e){let t=l,s=u,a=c;if(!r.isMounted){if(!n)return;t=b||l,s=y||u,a=j||c}let o=!1,i=e._enterCb=t=>{o||(o=!0,t?I(a,[e]):I(s,[e]),C.delayedLeave&&C.delayedLeave(),e._enterCb=void 0)};t?w(t,[e,i]):i()},leave(t,s){let n=String(e.key);if(t._enterCb&&t._enterCb(!0),r.isUnmounting)return s();I(d,[t]);let a=!1,o=t._leaveCb=r=>{a||(a=!0,s(),r?I(g,[t]):I(m,[t]),t._leaveCb=void 0,k[n]!==e||delete k[n])};k[n]=e,h?w(h,[t,o]):o()},clone:e=>eC(e,t,r,s)};return C}function eS(e){if(e$(e))return(e=rC(e)).children=null,e}function eT(e){return e$(e)?e.children?e.children[0]:void 0:e}function eN(e,t){6&e.shapeFlag&&e.component?eN(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function eE(e,t=!1,r){let s=[],n=0;for(let a=0;a<e.length;a++){let o=e[a],i=null==r?o.key:String(r)+String(null!=o.key?o.key:a);o.type===rn?(128&o.patchFlag&&n++,s=s.concat(eE(o.children,t,i))):(t||o.type!==ro)&&s.push(null!=i?rC(o,{key:i}):o)}if(n>1)for(let e=0;e<s.length;e++)s[e].patchFlag=-2;return s}function eF(e,t){return(0,p.isFunction)(e)?(0,p.extend)({name:e.name},t,{setup:e}):e}let eA=e=>!!e.type.__asyncLoader;function eR(e){let t;(0,p.isFunction)(e)&&(e={loader:e});let{loader:r,loadingComponent:s,errorComponent:n,delay:a=200,timeout:o,suspensible:i=!0,onError:l}=e,c=null,d=0,h=()=>(d++,c=null,f()),f=()=>{let e;return c||(e=c=r().catch(e=>{if(e=e instanceof Error?e:Error(String(e)),l)return new Promise((t,r)=>{l(e,()=>t(h()),()=>r(e),d+1)});throw e}).then(r=>e!==c&&c?c:(r&&(r.__esModule||"Module"===r[Symbol.toStringTag])&&(r=r.default),t=r,r)))};return eF({name:"AsyncComponentWrapper",__asyncLoader:f,get __asyncResolved(){return t},setup(){let e=rM;if(t)return()=>eD(t,e);let r=t=>{c=null,m(t,e,13,!n)};if(i&&e.suspense||rG)return f().then(t=>()=>eD(t,e)).catch(e=>(r(e),()=>n?rI(n,{error:e}):null));let l=(0,u.ref)(!1),p=(0,u.ref)(),d=(0,u.ref)(!!a);return a&&setTimeout(()=>{d.value=!1},a),null!=o&&setTimeout(()=>{if(!l.value&&!p.value){let e=Error(`Async component timed out after ${o}ms.`);r(e),p.value=e}},o),f().then(()=>{l.value=!0,e.parent&&e$(e.parent.vnode)&&S(e.parent.update)}).catch(e=>{r(e),p.value=e}),()=>l.value&&t?eD(t,e):p.value&&n?rI(n,{error:p.value}):s&&!d.value?rI(s):void 0}})}function eD(e,t){let{ref:r,props:s,children:n,ce:a}=t.vnode,o=rI(e,s,n);return o.ref=r,o.ce=a,delete t.vnode.ce,o}let e$=e=>e.type.__isKeepAlive,eP={name:"KeepAlive",// Marker for special handling inside the renderer. We are not using a ===
// check directly on KeepAlive in the renderer, because importing it directly
// would prevent it from being tree-shaken.
__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){let r=rO(),s=r.ctx;if(!s.renderer)return()=>{let e=t.default&&t.default();return e&&1===e.length?e[0]:e};let n=/* @__PURE__ */new Map,a=/* @__PURE__ */new Set,o=null;__VUE_PROD_DEVTOOLS__&&(r.__v_cache=n);let i=r.suspense,{renderer:{p:l,m:u,um:c,o:{createElement:d}}}=s,h=d("div");function f(e){eB(e),c(e,r,i,!0)}function m(e){n.forEach((t,r)=>{let s=rJ(t.type);!s||e&&e(s)||g(r)})}function g(e){let t=n.get(e);o&&rv(t,o)?o&&eB(o):f(t),n.delete(e),a.delete(e)}s.activate=(e,t,r,s,n)=>{let a=e.component;u(e,t,r,0,i),l(a.vnode,e,t,r,a,i,s,e.slotScopeIds,n),t1(()=>{a.isDeactivated=!1,a.a&&(0,p.invokeArrayFns)(a.a);let t=e.props&&e.props.onVnodeMounted;t&&rD(t,a.parent,e)},i),__VUE_PROD_DEVTOOLS__&&M(a)},s.deactivate=e=>{let t=e.component;u(e,h,null,1,i),t1(()=>{t.da&&(0,p.invokeArrayFns)(t.da);let r=e.props&&e.props.onVnodeUnmounted;r&&rD(r,t.parent,e),t.isDeactivated=!0},i),__VUE_PROD_DEVTOOLS__&&M(t)},em(()=>[e.include,e.exclude],([e,t])=>{e&&m(t=>ez(e,t)),t&&m(e=>!ez(t,e))},{flush:"post",deep:!0});let x=null,b=()=>{null!=x&&n.set(x,eU(r.subTree))};return eq(b),eH(b),eX(()=>{n.forEach(e=>{let{subTree:t,suspense:s}=r,n=eU(t);if(e.type===n.type&&e.key===n.key){eB(n);let e=n.component.da;e&&t1(e,s);return}f(e)})}),()=>{if(x=null,!t.default)return null;let r=t.default(),s=r[0];if(r.length>1)return o=null,r;if(!rx(s)||!(4&s.shapeFlag)&&!(128&s.shapeFlag))return o=null,s;let i=eU(s),l=i.type,u=rJ(eA(i)?i.type.__asyncResolved||{}:l),{include:p,exclude:c,max:d}=e;if(p&&(!u||!ez(p,u))||c&&u&&ez(c,u))return o=i,s;let h=null==i.key?l:i.key,f=n.get(h);return i.el&&(i=rC(i),128&s.shapeFlag&&(s.ssContent=i)),x=h,f?(i.el=f.el,i.component=f.component,i.transition&&eN(i,i.transition),i.shapeFlag|=512,a.delete(h),a.add(h)):(a.add(h),d&&a.size>parseInt(d,10)&&g(a.values().next().value)),i.shapeFlag|=256,o=i,es(s.type)?s:i}}};function ez(e,t){return(0,p.isArray)(e)?e.some(e=>ez(e,t)):(0,p.isString)(e)?e.split(",").includes(t):!!(0,p.isRegExp)(e)&&e.test(t)}function eM(e,t){eL(e,"a",t)}function eO(e,t){eL(e,"da",t)}function eL(e,t,r=rM){let s=e.__wdc||(e.__wdc=()=>{let t=r;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(eV(t,s,r),r){let e=r.parent;for(;e&&e.parent;)e$(e.parent.vnode)&&function(e,t,r,s){let n=eV(t,e,s,!0);eY(()=>{(0,p.remove)(s[t],n)},r)}(s,t,r,e),e=e.parent}}function eB(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function eU(e){return 128&e.shapeFlag?e.ssContent:e}function eV(e,t,r=rM,s=!1){if(r){let n=r[e]||(r[e]=[]),a=t.__weh||(t.__weh=(...s)=>{if(r.isUnmounted)return;(0,u.pauseTracking)(),rB(r);let n=f(t,r,e,s);return rU(),(0,u.resetTracking)(),n});return s?n.unshift(a):n.push(a),a}}let eG=e=>(t,r=rM)=>(!rG||"sp"===e)&&eV(e,(...e)=>t(...e),r),eW=eG("bm"),eq=eG("m"),eK=eG("bu"),eH=eG("u"),eX=eG("bum"),eY=eG("um"),eZ=eG("sp"),eJ=eG("rtg"),eQ=eG("rtc");function e0(e,t=rM){eV("ec",e,t)}let e1="components";function e2(e,t){return e6(e1,e,!0,t)||e}let e3=Symbol.for("v-ndc");function e4(e){return(0,p.isString)(e)?e6(e1,e,!1)||e:e||e3}function e5(e){return e6("directives",e)}function e6(e,t,r=!0,s=!1){let n=W||rM;if(n){let r=n.type;if(e===e1){let e=rJ(r,!1);if(e&&(e===t||e===(0,p.camelize)(t)||e===(0,p.capitalize)((0,p.camelize)(t))))return r}let a=// check instance[type] first which is resolved for options API
e9(n[e]||r[e],t)||// global registration
e9(n.appContext[e],t);return!a&&s?r:a}}function e9(e,t){return e&&(e[t]||e[(0,p.camelize)(t)]||e[(0,p.capitalize)((0,p.camelize)(t))])}function e8(e,t,r,s){let n;let a=r&&r[s];if((0,p.isArray)(e)||(0,p.isString)(e)){n=Array(e.length);for(let r=0,s=e.length;r<s;r++)n[r]=t(e[r],r,void 0,a&&a[r])}else if("number"==typeof e){n=Array(e);for(let r=0;r<e;r++)n[r]=t(r+1,r,void 0,a&&a[r])}else if((0,p.isObject)(e)){if(e[Symbol.iterator])n=Array.from(e,(e,r)=>t(e,r,void 0,a&&a[r]));else{let r=Object.keys(e);n=Array(r.length);for(let s=0,o=r.length;s<o;s++){let o=r[s];n[s]=t(e[o],o,s,a&&a[s])}}}else n=[];return r&&(r[s]=n),n}function e7(e,t){for(let r=0;r<t.length;r++){let s=t[r];if((0,p.isArray)(s))for(let t=0;t<s.length;t++)e[s[t].name]=s[t].fn;else s&&(e[s.name]=s.key?(...e)=>{let t=s.fn(...e);return t&&(t.key=s.key),t}:s.fn)}return e}function te(e,t,r={},s,n){if(W.isCE||W.parent&&eA(W.parent)&&W.parent.isCE)return"default"!==t&&(r.name=t),rI("slot",r,s&&s());let a=e[t];a&&a._c&&(a._d=!1),rp();let o=a&&function e(t){return t.some(t=>!rx(t)||!!(t.type!==ro&&(t.type!==rn||e(t.children))))?t:null}(a(r)),i=rg(rn,{key:r.key||// slot content array of a dynamic conditional slot may have a branch
// key attached in the `createSlots` helper, respect that
o&&o.key||`_${t}`},o||(s?s():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),a&&a._c&&(a._d=!0),i}function tt(e,t){let r={};for(let s in e)r[t&&/[A-Z]/.test(s)?`on:${s}`:(0,p.toHandlerKey)(s)]=e[s];return r}let tr=e=>e?rV(e)?rZ(e)||e.proxy:tr(e.parent):null,ts=// due to type annotation
/* @__PURE__ */(0,p.extend)(/* @__PURE__ */Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>tr(e.parent),$root:e=>tr(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?tw(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>S(e.update)),$nextTick:e=>e.n||(e.n=C.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?eg.bind(e):p.NOOP}),tn=(e,t)=>e!==p.EMPTY_OBJ&&!e.__isScriptSetup&&(0,p.hasOwn)(e,t),ta={get({_:e},t){let r,s,n;let{ctx:a,setupState:o,data:i,props:l,accessCache:c,type:d,appContext:h}=e;if("$"!==t[0]){let s=c[t];if(void 0!==s)switch(s){case 1/* SETUP */:return o[t];case 2/* DATA */:return i[t];case 4/* CONTEXT */:return a[t];case 3/* PROPS */:return l[t]}else{if(tn(o,t))return c[t]=1/* SETUP */,o[t];if(i!==p.EMPTY_OBJ&&(0,p.hasOwn)(i,t))return c[t]=2/* DATA */,i[t];if(// props
(r=e.propsOptions[0])&&(0,p.hasOwn)(r,t))return c[t]=3/* PROPS */,l[t];if(a!==p.EMPTY_OBJ&&(0,p.hasOwn)(a,t))return c[t]=4/* CONTEXT */,a[t];(!__VUE_OPTIONS_API__||tk)&&(c[t]=0/* OTHER */)}}let f=ts[t];return f?("$attrs"===t&&(0,u.track)(e,"get",t),f(e)):(s=d.__cssModules)&&(s=s[t])?s:a!==p.EMPTY_OBJ&&(0,p.hasOwn)(a,t)?(c[t]=4/* CONTEXT */,a[t]):(n=h.config.globalProperties,(0,p.hasOwn)(n,t))?n[t]:void 0},set({_:e},t,r){let{data:s,setupState:n,ctx:a}=e;return tn(n,t)?(n[t]=r,!0):s!==p.EMPTY_OBJ&&(0,p.hasOwn)(s,t)?(s[t]=r,!0):!(0,p.hasOwn)(e.props,t)&&!("$"===t[0]&&t.slice(1) in e)&&(a[t]=r,!0)},has({_:{data:e,setupState:t,accessCache:r,ctx:s,appContext:n,propsOptions:a}},o){let i;return!!r[o]||e!==p.EMPTY_OBJ&&(0,p.hasOwn)(e,o)||tn(t,o)||(i=a[0])&&(0,p.hasOwn)(i,o)||(0,p.hasOwn)(s,o)||(0,p.hasOwn)(ts,o)||(0,p.hasOwn)(n.config.globalProperties,o)},defineProperty(e,t,r){return null!=r.get?e._.accessCache[t]=0:(0,p.hasOwn)(r,"value")&&this.set(e,t,r.value,null),Reflect.defineProperty(e,t,r)}},to=/* @__PURE__ */(0,p.extend)({},ta,{get(e,t){if(t!==Symbol.unscopables)return ta.get(e,t,e)},has(e,t){let r="_"!==t[0]&&!(0,p.isGloballyWhitelisted)(t);return r}});function ti(){return null}function tl(){return null}function tu(e){}function tp(e){}function tc(){return null}function td(){}function th(e,t){return null}function tf(){return tx().slots}function tm(){return tx().attrs}function tg(e,t,r){let s=rO();if(!r||!r.local)return{__v_isRef:!0,get value(){return e[t]},set value(value){s.emit(`update:${t}`,value)}};{let r=(0,u.ref)(e[t]);return em(()=>e[t],e=>r.value=e,void 0),em(r,r=>{r!==e[t]&&s.emit(`update:${t}`,r)},void 0),r}}function tx(){let e=rO();return e.setupContext||(e.setupContext=rY(e))}function tv(e){return(0,p.isArray)(e)?e.reduce((e,t)=>(e[t]=null,e),{}):e}function tb(e,t){let r=tv(e);for(let e in t){if(e.startsWith("__skip"))continue;let s=r[e];s?(0,p.isArray)(s)||(0,p.isFunction)(s)?s=r[e]={type:s,default:t[e]}:s.default=t[e]:null===s&&(s=r[e]={default:t[e]}),s&&t[`__skip_${e}`]&&(s.skipFactory=!0)}return r}function ty(e,t){return e&&t?(0,p.isArray)(e)&&(0,p.isArray)(t)?e.concat(t):(0,p.extend)({},tv(e),tv(t)):e||t}function tj(e,t){let r={};for(let s in e)t.includes(s)||Object.defineProperty(r,s,{enumerable:!0,get:()=>e[s]});return r}function t_(e){let t=rO(),r=e();return rU(),(0,p.isPromise)(r)&&(r=r.catch(e=>{throw rB(t),e})),[r,()=>rB(t)]}let tk=!0;function tI(e,t,r){f((0,p.isArray)(e)?e.map(e=>e.bind(t.proxy)):e.bind(t.proxy),t,r)}function tw(e){let t;let r=e.type,{mixins:s,extends:n}=r,{mixins:a,optionsCache:o,config:{optionMergeStrategies:i}}=e.appContext,l=o.get(r);return l?t=l:a.length||s||n?(t={},a.length&&a.forEach(e=>tC(t,e,i,!0)),tC(t,r,i)):t=r,(0,p.isObject)(r)&&o.set(r,t),t}function tC(e,t,r,s=!1){let{mixins:n,extends:a}=t;for(let o in a&&tC(e,a,r,!0),n&&n.forEach(t=>tC(e,t,r,!0)),t)if(s&&"expose"===o);else{let s=tS[o]||r&&r[o];e[o]=s?s(e[o],t[o]):t[o]}return e}let tS={data:tT,props:tA,emits:tA,// objects
methods:tF,computed:tF,// lifecycle
beforeCreate:tE,created:tE,beforeMount:tE,mounted:tE,beforeUpdate:tE,updated:tE,beforeDestroy:tE,beforeUnmount:tE,destroyed:tE,unmounted:tE,activated:tE,deactivated:tE,errorCaptured:tE,serverPrefetch:tE,// assets
components:tF,directives:tF,// watch
watch:function(e,t){if(!e)return t;if(!t)return e;let r=(0,p.extend)(/* @__PURE__ */Object.create(null),e);for(let s in t)r[s]=tE(e[s],t[s]);return r},// provide / inject
provide:tT,inject:function(e,t){return tF(tN(e),tN(t))}};function tT(e,t){return t?e?function(){return(0,p.extend)((0,p.isFunction)(e)?e.call(this,this):e,(0,p.isFunction)(t)?t.call(this,this):t)}:t:e}function tN(e){if((0,p.isArray)(e)){let t={};for(let r=0;r<e.length;r++)t[e[r]]=e[r];return t}return e}function tE(e,t){return e?[...new Set([].concat(e,t))]:t}function tF(e,t){return e?(0,p.extend)(/* @__PURE__ */Object.create(null),e,t):t}function tA(e,t){return e?(0,p.isArray)(e)&&(0,p.isArray)(t)?[.../* @__PURE__ */new Set([...e,...t])]:(0,p.extend)(/* @__PURE__ */Object.create(null),tv(e),tv(null!=t?t:{})):t}function tR(){return{app:null,config:{isNativeTag:p.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:/* @__PURE__ */Object.create(null),optionsCache:/* @__PURE__ */new WeakMap,propsCache:/* @__PURE__ */new WeakMap,emitsCache:/* @__PURE__ */new WeakMap}}let tD=0,t$=null;function tP(e,t){if(rM){let r=rM.provides,s=rM.parent&&rM.parent.provides;s===r&&(r=rM.provides=Object.create(s)),r[e]=t}}function tz(e,t,r=!1){let s=rM||W;if(s||t$){let n=s?null==s.parent?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:t$._context.provides;if(n&&e in n)return n[e];if(arguments.length>1)return r&&(0,p.isFunction)(t)?t.call(s&&s.proxy):t}}function tM(){return!!(rM||W||t$)}function tO(e,t,r,s){let n;let[a,o]=e.propsOptions,i=!1;if(t)for(let l in t){let u;if((0,p.isReservedProp)(l))continue;let c=t[l];a&&(0,p.hasOwn)(a,u=(0,p.camelize)(l))?o&&o.includes(u)?(n||(n={}))[u]=c:r[u]=c:G(e.emitsOptions,l)||l in s&&c===s[l]||(s[l]=c,i=!0)}if(o){let t=(0,u.toRaw)(r),s=n||p.EMPTY_OBJ;for(let n=0;n<o.length;n++){let i=o[n];r[i]=tL(a,t,i,s[i],e,!(0,p.hasOwn)(s,i))}}return i}function tL(e,t,r,s,n,a){let o=e[r];if(null!=o){let e=(0,p.hasOwn)(o,"default");if(e&&void 0===s){let e=o.default;if(o.type!==Function&&!o.skipFactory&&(0,p.isFunction)(e)){let{propsDefaults:a}=n;r in a?s=a[r]:(rB(n),s=a[r]=e.call(null,t),rU())}else s=e}o[0/* shouldCast */]&&(a&&!e?s=!1:o[1/* shouldCastTrue */]&&(""===s||s===(0,p.hyphenate)(r))&&(s=!0))}return s}function tB(e){let t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:null===e?"null":""}function tU(e,t){return(0,p.isArray)(t)?t.findIndex(t=>tB(t)===tB(e)):(0,p.isFunction)(t)?tB(t)===tB(e)?0:-1:-1}let tV=e=>"_"===e[0]||"$stable"===e,tG=e=>(0,p.isArray)(e)?e.map(rE):[rE(e)],tW=(e,t,r)=>{if(t._n)return t;let s=Z((...e)=>tG(t(...e)),r);return s._c=!1,s},tq=(e,t,r)=>{let s=e._ctx;for(let r in e){if(tV(r))continue;let n=e[r];if((0,p.isFunction)(n))t[r]=tW(r,n,s);else if(null!=n){let e=tG(n);t[r]=()=>e}}},tK=(e,t)=>{let r=tG(t);e.slots.default=()=>r},tH=(e,t)=>{if(32&e.vnode.shapeFlag){let r=t._;r?(e.slots=(0,u.toRaw)(t),(0,p.def)(t,"_",r)):tq(t,e.slots={})}else e.slots={},t&&tK(e,t);(0,p.def)(e.slots,ry,1)},tX=(e,t,r)=>{let{vnode:s,slots:n}=e,a=!0,o=p.EMPTY_OBJ;if(32&s.shapeFlag){let e=t._;e?r&&1===e?a=!1:((0,p.extend)(n,t),r||1!==e||delete n._):(a=!t.$stable,tq(t,n)),o=t}else t&&(tK(e,t),o={default:1});if(a)for(let e in n)tV(e)||e in o||delete n[e]};function tY(e,t,r,s,n=!1){if((0,p.isArray)(e)){e.forEach((e,a)=>tY(e,t&&((0,p.isArray)(t)?t[a]:t),r,s,n));return}if(eA(s)&&!n)return;let a=4&s.shapeFlag?rZ(s.component)||s.component.proxy:s.el,o=n?null:a,{i:i,r:l}=e,c=t&&t.r,d=i.refs===p.EMPTY_OBJ?i.refs={}:i.refs,f=i.setupState;if(null!=c&&c!==l&&((0,p.isString)(c)?(d[c]=null,(0,p.hasOwn)(f,c)&&(f[c]=null)):(0,u.isRef)(c)&&(c.value=null)),(0,p.isFunction)(l))h(l,i,12,[o,d]);else{let t=(0,p.isString)(l),s=(0,u.isRef)(l);if(t||s){let i=()=>{if(e.f){let r=t?(0,p.hasOwn)(f,l)?f[l]:d[l]:l.value;n?(0,p.isArray)(r)&&(0,p.remove)(r,a):(0,p.isArray)(r)?r.includes(a)||r.push(a):t?(d[l]=[a],(0,p.hasOwn)(f,l)&&(f[l]=d[l])):(l.value=[a],e.k&&(d[e.k]=l.value))}else t?(d[l]=o,(0,p.hasOwn)(f,l)&&(f[l]=o)):s&&(l.value=o,e.k&&(d[e.k]=o))};o?(i.id=-1,t1(i,r)):i()}}}let tZ=!1,tJ=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,tQ=e=>8/* COMMENT */===e.nodeType;function t0(e){let{mt:t,p:r,o:{patchProp:s,createText:n,nextSibling:a,parentNode:o,remove:i,insert:l,createComment:u}}=e,c=(r,s,i,u,p,x=!1)=>{let b=tQ(r)&&"["===r.data,y=()=>m(r,s,i,u,p,b),{type:j,ref:_,shapeFlag:k,patchFlag:I}=s,w=r.nodeType;s.el=r,-2===I&&(x=!1,s.dynamicChildren=null);let C=null;switch(j){case ra:3/* TEXT */!==w?""===s.children?(l(s.el=n(""),o(r),r),C=r):C=y():(r.data!==s.children&&(tZ=!0,r.data=s.children),C=a(r));break;case ro:C=8/* COMMENT */!==w||b?y():a(r);break;case ri:if(b&&(w=(r=a(r)).nodeType),1/* ELEMENT */===w||3/* TEXT */===w){C=r;let e=!s.children.length;for(let t=0;t<s.staticCount;t++)e&&(s.children+=1/* ELEMENT */===C.nodeType?C.outerHTML:C.data),t===s.staticCount-1&&(s.anchor=C),C=a(C);return b?a(C):C}y();break;case rn:C=b?f(r,s,i,u,p,x):y();break;default:if(1&k)C=1/* ELEMENT */!==w||s.type.toLowerCase()!==r.tagName.toLowerCase()?y():d(r,s,i,u,p,x);else if(6&k){s.slotScopeIds=p;let e=o(r);if(t(s,e,null,i,u,tJ(e),x),(C=b?g(r):a(r))&&tQ(C)&&"teleport end"===C.data&&(C=a(C)),eA(s)){let t;b?(t=rI(rn)).anchor=C?C.previousSibling:e.lastChild:t=3===r.nodeType?rS(""):rI("div"),t.el=r,s.component.subTree=t}}else 64&k?C=8/* COMMENT */!==w?y():s.type.hydrate(r,s,i,u,p,x,e,h):128&k&&(C=s.type.hydrate(r,s,i,u,tJ(o(r)),p,x,e,c))}return null!=_&&tY(_,null,u,s),C},d=(e,t,r,n,a,o)=>{o=o||!!t.dynamicChildren;let{type:l,props:u,patchFlag:c,shapeFlag:d,dirs:f}=t,m="input"===l&&f||"option"===l;if(m||-1!==c){let l;if(f&&ey(t,null,r,"created"),u){if(m||!o||48&c)for(let t in u)(m&&t.endsWith("value")||(0,p.isOn)(t)&&!(0,p.isReservedProp)(t))&&s(e,t,null,u[t],!1,void 0,r);else u.onClick&&s(e,"onClick",null,u.onClick,!1,void 0,r)}if((l=u&&u.onVnodeBeforeMount)&&rD(l,r,t),f&&ey(t,null,r,"beforeMount"),((l=u&&u.onVnodeMounted)||f)&&el(()=>{l&&rD(l,r,t),f&&ey(t,null,r,"mounted")},n),16&d&&// skip if element has innerHTML / textContent
!(u&&(u.innerHTML||u.textContent))){let s=h(e.firstChild,t,e,r,n,a,o);for(;s;){tZ=!0;let e=s;s=s.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(tZ=!0,e.textContent=t.children)}return e.nextSibling},h=(e,t,s,n,a,o,i)=>{i=i||!!t.dynamicChildren;let l=t.children,u=l.length;for(let t=0;t<u;t++){let u=i?l[t]:l[t]=rE(l[t]);if(e)e=c(e,u,n,a,o,i);else{if(u.type===ra&&!u.children)continue;tZ=!0,r(null,u,s,null,n,a,tJ(s),o)}}return e},f=(e,t,r,s,n,i)=>{let{slotScopeIds:p}=t;p&&(n=n?n.concat(p):p);let c=o(e),d=h(a(e),t,c,r,s,n,i);return d&&tQ(d)&&"]"===d.data?a(t.anchor=d):(tZ=!0,l(t.anchor=u("]"),c,d),d)},m=(e,t,s,n,l,u)=>{if(tZ=!0,t.el=null,u){let t=g(e);for(;;){let r=a(e);if(r&&r!==t)i(r);else break}}let p=a(e),c=o(e);return i(e),r(null,t,c,p,s,n,tJ(c),l),p},g=e=>{let t=0;for(;e;)if((e=a(e))&&tQ(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return a(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes()){r(null,e,t),F(),t._vnode=e;return}tZ=!1,c(t.firstChild,e,null,null,null),F(),t._vnode=e,tZ&&console.error("Hydration completed but contains mismatches.")},c]}let t1=el;function t2(e){return t4(e)}function t3(e){return t4(e,t0)}function t4(e,t){var r;let s,n;"boolean"!=typeof __VUE_OPTIONS_API__&&((0,p.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&((0,p.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1);let a=(0,p.getGlobalThis)();a.__VUE__=!0,__VUE_PROD_DEVTOOLS__&&z(a.__VUE_DEVTOOLS_GLOBAL_HOOK__,a);let{insert:o,remove:i,patchProp:l,createElement:c,createText:d,createComment:h,setText:f,setElementText:m,parentNode:g,nextSibling:x,setScopeId:j=p.NOOP,insertStaticContent:_}=e,k=(e,t,r,s=null,n=null,a=null,o=!1,i=null,l=!!t.dynamicChildren)=>{if(e===t)return;e&&!rv(e,t)&&(s=eu(e),en(e,n,a,!0),e=null),-2===t.patchFlag&&(l=!1,t.dynamicChildren=null);let{type:u,ref:p,shapeFlag:c}=t;switch(u){case ra:I(e,t,r,s);break;case ro:w(e,t,r,s);break;case ri:null==e&&C(t,r,s,o);break;case rn:W(e,t,r,s,n,a,o,i,l);break;default:1&c?A(e,t,r,s,n,a,o,i,l):6&c?q(e,t,r,s,n,a,o,i,l):64&c?u.process(e,t,r,s,n,a,o,i,l,ec):128&c&&u.process(e,t,r,s,n,a,o,i,l,ec)}null!=p&&n&&tY(p,e&&e.ref,a,t||e,!t)},I=(e,t,r,s)=>{if(null==e)o(t.el=d(t.children),r,s);else{let r=t.el=e.el;t.children!==e.children&&f(r,t.children)}},w=(e,t,r,s)=>{null==e?o(t.el=h(t.children||""),r,s):t.el=e.el},C=(e,t,r,s)=>{[e.el,e.anchor]=_(e.children,t,r,s,e.el,e.anchor)},T=({el:e,anchor:t},r,s)=>{let n;for(;e&&e!==t;)n=x(e),o(e,r,s),e=n;o(t,r,s)},N=({el:e,anchor:t})=>{let r;for(;e&&e!==t;)r=x(e),i(e),e=r;i(t)},A=(e,t,r,s,n,a,o,i,l)=>{o=o||"svg"===t.type,null==e?R(t,r,s,n,a,o,i,l):L(e,t,n,a,o,i,l)},R=(e,t,r,s,n,a,i,u)=>{let d,h;let{type:f,props:g,shapeFlag:x,transition:b,dirs:y}=e;if(d=e.el=c(e.type,a,g&&g.is,g),8&x?m(d,e.children):16&x&&$(e.children,d,null,s,n,a&&"foreignObject"!==f,i,u),y&&ey(e,null,s,"created"),D(d,e,e.scopeId,i,s),g){for(let t in g)"value"===t||(0,p.isReservedProp)(t)||l(d,t,null,g[t],a,e.children,s,n,el);"value"in g&&l(d,"value",null,g.value),(h=g.onVnodeBeforeMount)&&rD(h,s,e)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(d,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(d,"__vueParentComponent",{value:s,enumerable:!1})),y&&ey(e,null,s,"beforeMount");let j=(!n||n&&!n.pendingBranch)&&b&&!b.persisted;j&&b.beforeEnter(d),o(d,t,r),((h=g&&g.onVnodeMounted)||j||y)&&t1(()=>{h&&rD(h,s,e),j&&b.enter(d),y&&ey(e,null,s,"mounted")},n)},D=(e,t,r,s,n)=>{if(r&&j(e,r),s)for(let t=0;t<s.length;t++)j(e,s[t]);if(n&&t===n.subTree){let t=n.vnode;D(e,t,t.scopeId,t.slotScopeIds,n.parent)}},$=(e,t,r,s,n,a,o,i,l=0)=>{for(let u=l;u<e.length;u++){let l=e[u]=i?rF(e[u]):rE(e[u]);k(null,l,t,r,s,n,a,o,i)}},L=(e,t,r,s,n,a,o)=>{let i;let u=t.el=e.el,{patchFlag:c,dynamicChildren:d,dirs:h}=t;c|=16&e.patchFlag;let f=e.props||p.EMPTY_OBJ,g=t.props||p.EMPTY_OBJ;r&&t5(r,!1),(i=g.onVnodeBeforeUpdate)&&rD(i,r,t,e),h&&ey(t,e,r,"beforeUpdate"),r&&t5(r,!0);let x=n&&"foreignObject"!==t.type;if(d?U(e.dynamicChildren,d,u,r,s,x,a):o||Z(e,t,u,null,r,s,x,a,!1),c>0){if(16&c)V(u,t,f,g,r,s,n);else if(2&c&&f.class!==g.class&&l(u,"class",null,g.class,n),4&c&&l(u,"style",f.style,g.style,n),8&c){let a=t.dynamicProps;for(let t=0;t<a.length;t++){let o=a[t],i=f[o],p=g[o];(p!==i||"value"===o)&&l(u,o,i,p,n,e.children,r,s,el)}}1&c&&e.children!==t.children&&m(u,t.children)}else o||null!=d||V(u,t,f,g,r,s,n);((i=g.onVnodeUpdated)||h)&&t1(()=>{i&&rD(i,r,t,e),h&&ey(t,e,r,"updated")},s)},U=(e,t,r,s,n,a,o)=>{for(let i=0;i<t.length;i++){let l=e[i],u=t[i],p=// which will not have a mounted element
l.el&&// - In the case of a Fragment, we need to provide the actual parent
// of the Fragment itself so it can move its children.
(l.type===rn||// - In the case of different nodes, there is going to be a replacement
// which also requires the correct parent container
!rv(l,u)||// - In the case of a component, it could contain anything.
70&l.shapeFlag)?g(l.el):// just pass the block element here to avoid a DOM parentNode call.
r;k(l,u,p,null,s,n,a,o,!0)}},V=(e,t,r,s,n,a,o)=>{if(r!==s){if(r!==p.EMPTY_OBJ)for(let i in r)(0,p.isReservedProp)(i)||i in s||l(e,i,r[i],null,o,t.children,n,a,el);for(let i in s){if((0,p.isReservedProp)(i))continue;let u=s[i],c=r[i];u!==c&&"value"!==i&&l(e,i,c,u,o,t.children,n,a,el)}"value"in s&&l(e,"value",r.value,s.value)}},W=(e,t,r,s,n,a,i,l,u)=>{let p=t.el=e?e.el:d(""),c=t.anchor=e?e.anchor:d(""),{patchFlag:h,dynamicChildren:f,slotScopeIds:m}=t;m&&(l=l?l.concat(m):m),null==e?(o(p,r,s),o(c,r,s),$(t.children,r,c,n,a,i,l,u)):h>0&&64&h&&f&&// #2715 the previous fragment could've been a BAILed one as a result
// of renderSlot() with no valid children
e.dynamicChildren?(U(e.dynamicChildren,f,r,n,a,i,l),//  get moved around. Make sure all root level vnodes inherit el.
// #2134 or if it's a component root, it may also get moved around
// as the component is being moved.
(null!=t.key||n&&t===n.subTree)&&t6(e,t,!0)):Z(e,t,r,c,n,a,i,l,u)},q=(e,t,r,s,n,a,o,i,l)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,r,s,o,l):K(t,r,s,n,a,o,l):H(e,t,l)},K=(e,t,r,s,n,a,o)=>{let i=e.component=rz(e,s,n);if(e$(e)&&(i.ctx.renderer=ec),rW(i),i.asyncDep){if(n&&n.registerDep(i,X),!e.el){let e=i.subTree=rI(ro);w(null,e,t,r)}return}X(i,e,t,r,n,a,o)},H=(e,t,r)=>{let s=t.component=e.component;if(function(e,t,r){let{props:s,children:n,component:a}=e,{props:o,children:i,patchFlag:l}=t,u=a.emitsOptions;if(t.dirs||t.transition)return!0;if(!r||!(l>=0))return(!!n||!!i)&&(!i||!i.$stable)||s!==o&&(s?!o||et(s,o,u):!!o);if(1024&l)return!0;if(16&l)return s?et(s,o,u):!!o;if(8&l){let e=t.dynamicProps;for(let t=0;t<e.length;t++){let r=e[t];if(o[r]!==s[r]&&!G(u,r))return!0}}return!1}(e,t,r)){if(s.asyncDep&&!s.asyncResolved){Y(s,t,r);return}s.next=t,function(e){let t=b.indexOf(e);t>y&&b.splice(t,1)}(s.update),s.update()}else t.el=e.el,s.vnode=t},X=(e,t,r,s,a,o,i)=>{let l=e.effect=new u.ReactiveEffect(()=>{if(e.isMounted){let t,{next:r,bu:s,u:n,parent:l,vnode:u}=e,c=r;t5(e,!1),r?(r.el=u.el,Y(e,r,i)):r=u,s&&(0,p.invokeArrayFns)(s),(t=r.props&&r.props.onVnodeBeforeUpdate)&&rD(t,l,r,u),t5(e,!0);let d=J(e),h=e.subTree;e.subTree=d,k(h,d,g(h.el),eu(h),e,a,o),r.el=d.el,null===c&&er(e,d.el),n&&t1(n,a),(t=r.props&&r.props.onVnodeUpdated)&&t1(()=>rD(t,l,r,u),a),__VUE_PROD_DEVTOOLS__&&O(e)}else{let i;let{el:l,props:u}=t,{bm:c,m:d,parent:h}=e,f=eA(t);if(t5(e,!1),c&&(0,p.invokeArrayFns)(c),!f&&(i=u&&u.onVnodeBeforeMount)&&rD(i,h,t),t5(e,!0),l&&n){let r=()=>{e.subTree=J(e),n(l,e.subTree,e,a,null)};f?t.type.__asyncLoader().then(// which means it won't track dependencies - but it's ok because
// a server-rendered async wrapper is already in resolved state
// and it will never need to change.
()=>!e.isUnmounted&&r()):r()}else{let n=e.subTree=J(e);k(null,n,r,s,e,a,o),t.el=n.el}if(d&&t1(d,a),!f&&(i=u&&u.onVnodeMounted)){let e=t;t1(()=>rD(i,h,e),a)}(256&t.shapeFlag||h&&eA(h.vnode)&&256&h.vnode.shapeFlag)&&e.a&&t1(e.a,a),e.isMounted=!0,__VUE_PROD_DEVTOOLS__&&M(e),t=r=s=null}},()=>S(c),e.scope),c=e.update=()=>l.run();c.id=e.uid,t5(e,!0),c()},Y=(e,t,r)=>{t.component=e;let s=e.vnode.props;e.vnode=t,e.next=null,function(e,t,r,s){let{props:n,attrs:a,vnode:{patchFlag:o}}=e,i=(0,u.toRaw)(n),[l]=e.propsOptions,c=!1;if(// - #1942 if hmr is enabled with sfc component
// - vite#872 non-sfc component used by sfc component
(s||o>0)&&!(16&o)){if(8&o){let r=e.vnode.dynamicProps;for(let s=0;s<r.length;s++){let o=r[s];if(G(e.emitsOptions,o))continue;let u=t[o];if(l){if((0,p.hasOwn)(a,o))u!==a[o]&&(a[o]=u,c=!0);else{let t=(0,p.camelize)(o);n[t]=tL(l,i,t,u,e,!1)}}else u!==a[o]&&(a[o]=u,c=!0)}}}else{let s;for(let o in tO(e,t,n,a)&&(c=!0),i)t&&// for camelCase
((0,p.hasOwn)(t,o)||// it's possible the original props was passed in as kebab-case
// and converted to camelCase (#955)
(s=(0,p.hyphenate)(o))!==o&&(0,p.hasOwn)(t,s))||(l?r&&// for camelCase
(void 0!==r[o]||// for kebab-case
void 0!==r[s])&&(n[o]=tL(l,i,o,void 0,e,!0)):delete n[o]);if(a!==i)for(let e in a)t&&(0,p.hasOwn)(t,e)||(delete a[e],c=!0)}c&&(0,u.trigger)(e,"set","$attrs")}(e,t.props,s,r),tX(e,t.children,r),(0,u.pauseTracking)(),E(),(0,u.resetTracking)()},Z=(e,t,r,s,n,a,o,i,l=!1)=>{let u=e&&e.children,p=e?e.shapeFlag:0,c=t.children,{patchFlag:d,shapeFlag:h}=t;if(d>0){if(128&d){ee(u,c,r,s,n,a,o,i,l);return}if(256&d){Q(u,c,r,s,n,a,o,i,l);return}}8&h?(16&p&&el(u,n,a),c!==u&&m(r,c)):16&p?16&h?ee(u,c,r,s,n,a,o,i,l):el(u,n,a,!0):(8&p&&m(r,""),16&h&&$(c,r,s,n,a,o,i,l))},Q=(e,t,r,s,n,a,o,i,l)=>{let u;e=e||p.EMPTY_ARR,t=t||p.EMPTY_ARR;let c=e.length,d=t.length,h=Math.min(c,d);for(u=0;u<h;u++){let s=t[u]=l?rF(t[u]):rE(t[u]);k(e[u],s,r,null,n,a,o,i,l)}c>d?el(e,n,a,!0,!1,h):$(t,r,s,n,a,o,i,l,h)},ee=(e,t,r,s,n,a,o,i,l)=>{let u=0,c=t.length,d=e.length-1,h=c-1;for(;u<=d&&u<=h;){let s=e[u],p=t[u]=l?rF(t[u]):rE(t[u]);if(rv(s,p))k(s,p,r,null,n,a,o,i,l);else break;u++}for(;u<=d&&u<=h;){let s=e[d],u=t[h]=l?rF(t[h]):rE(t[h]);if(rv(s,u))k(s,u,r,null,n,a,o,i,l);else break;d--,h--}if(u>d){if(u<=h){let e=h+1,p=e<c?t[e].el:s;for(;u<=h;)k(null,t[u]=l?rF(t[u]):rE(t[u]),r,p,n,a,o,i,l),u++}}else if(u>h)for(;u<=d;)en(e[u],n,a,!0),u++;else{let f;let m=u,g=u,x=/* @__PURE__ */new Map;for(u=g;u<=h;u++){let e=t[u]=l?rF(t[u]):rE(t[u]);null!=e.key&&x.set(e.key,u)}let b=0,y=h-g+1,j=!1,_=0,I=Array(y);for(u=0;u<y;u++)I[u]=0;for(u=m;u<=d;u++){let s;let p=e[u];if(b>=y){en(p,n,a,!0);continue}if(null!=p.key)s=x.get(p.key);else for(f=g;f<=h;f++)if(0===I[f-g]&&rv(p,t[f])){s=f;break}void 0===s?en(p,n,a,!0):(I[s-g]=u+1,s>=_?_=s:j=!0,k(p,t[s],r,null,n,a,o,i,l),b++)}let w=j?function(e){let t,r,s,n,a;let o=e.slice(),i=[0],l=e.length;for(t=0;t<l;t++){let l=e[t];if(0!==l){if(e[r=i[i.length-1]]<l){o[t]=r,i.push(t);continue}for(s=0,n=i.length-1;s<n;)e[i[a=s+n>>1]]<l?s=a+1:n=a;l<e[i[s]]&&(s>0&&(o[t]=i[s-1]),i[s]=t)}}for(s=i.length,n=i[s-1];s-- >0;)i[s]=n,n=o[n];return i}(I):p.EMPTY_ARR;for(f=w.length-1,u=y-1;u>=0;u--){let e=g+u,p=t[e],d=e+1<c?t[e+1].el:s;0===I[u]?k(null,p,r,d,n,a,o,i,l):j&&(f<0||u!==w[f]?es(p,r,d,2):f--)}}},es=(e,t,r,s,n=null)=>{let{el:a,type:i,transition:l,children:u,shapeFlag:p}=e;if(6&p){es(e.component.subTree,t,r,s);return}if(128&p){e.suspense.move(t,r,s);return}if(64&p){i.move(e,t,r,ec);return}if(i===rn){o(a,t,r);for(let e=0;e<u.length;e++)es(u[e],t,r,s);o(e.anchor,t,r);return}if(i===ri){T(e,t,r);return}let c=2!==s&&1&p&&l;if(c){if(0===s)l.beforeEnter(a),o(a,t,r),t1(()=>l.enter(a),n);else{let{leave:e,delayLeave:s,afterLeave:n}=l,i=()=>o(a,t,r),u=()=>{e(a,()=>{i(),n&&n()})};s?s(a,i,u):u()}}else o(a,t,r)},en=(e,t,r,s=!1,n=!1)=>{let a;let{type:o,props:i,ref:l,children:u,dynamicChildren:p,shapeFlag:c,patchFlag:d,dirs:h}=e;if(null!=l&&tY(l,null,r,e,!0),256&c){t.ctx.deactivate(e);return}let f=1&c&&h,m=!eA(e);if(m&&(a=i&&i.onVnodeBeforeUnmount)&&rD(a,t,e),6&c)ei(e.component,r,s);else{if(128&c){e.suspense.unmount(r,s);return}f&&ey(e,null,t,"beforeUnmount"),64&c?e.type.remove(e,t,r,n,ec,s):p&&// #1153: fast path should not be taken for non-stable (v-for) fragments
(o!==rn||d>0&&64&d)?el(p,t,r,!1,!0):(o===rn&&384&d||!n&&16&c)&&el(u,t,r),s&&ea(e)}(m&&(a=i&&i.onVnodeUnmounted)||f)&&t1(()=>{a&&rD(a,t,e),f&&ey(e,null,t,"unmounted")},r)},ea=e=>{let{type:t,el:r,anchor:s,transition:n}=e;if(t===rn){eo(r,s);return}if(t===ri){N(e);return}let a=()=>{i(r),n&&!n.persisted&&n.afterLeave&&n.afterLeave()};if(1&e.shapeFlag&&n&&!n.persisted){let{leave:t,delayLeave:s}=n,o=()=>t(r,a);s?s(e.el,a,o):o()}else a()},eo=(e,t)=>{let r;for(;e!==t;)r=x(e),i(e),e=r;i(t)},ei=(e,t,r)=>{let{bum:s,scope:n,update:a,subTree:o,um:i}=e;s&&(0,p.invokeArrayFns)(s),n.stop(),a&&(a.active=!1,en(o,e,t,r)),i&&t1(i,t),t1(()=>{e.isUnmounted=!0},t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),__VUE_PROD_DEVTOOLS__&&B(e)},el=(e,t,r,s=!1,n=!1,a=0)=>{for(let o=a;o<e.length;o++)en(e[o],t,r,s,n)},eu=e=>6&e.shapeFlag?eu(e.component.subTree):128&e.shapeFlag?e.suspense.next():x(e.anchor||e.el),ep=(e,t,r)=>{null==e?t._vnode&&en(t._vnode,null,null,!0):k(t._vnode||null,e,t,null,null,null,r),E(),F(),t._vnode=e},ec={p:k,um:en,m:es,r:ea,mt:K,mc:$,pc:Z,pbc:U,n:eu,o:e};return t&&([s,n]=t(ec)),{render:ep,hydrate:s,createApp:(r=s,function(e,t=null){(0,p.isFunction)(e)||(e=(0,p.extend)({},e)),null==t||(0,p.isObject)(t)||(t=null);let s=tR(),n=/* @__PURE__ */new Set,a=!1,o=s.app={_uid:tD++,_component:e,_props:t,_container:null,_context:s,_instance:null,version:r6,get config(){return s.config},set config(v){},use:(e,...t)=>(n.has(e)||(e&&(0,p.isFunction)(e.install)?(n.add(e),e.install(o,...t)):(0,p.isFunction)(e)&&(n.add(e),e(o,...t))),o),mixin:e=>(__VUE_OPTIONS_API__&&!s.mixins.includes(e)&&s.mixins.push(e),o),component:(e,t)=>t?(s.components[e]=t,o):s.components[e],directive:(e,t)=>t?(s.directives[e]=t,o):s.directives[e],mount(n,i,l){if(!a){let u=rI(e,t);return u.appContext=s,i&&r?r(u,n):ep(u,n,l),a=!0,o._container=n,n.__vue_app__=o,__VUE_PROD_DEVTOOLS__&&(o._instance=u.component,P("app:init"/* APP_INIT */,o,r6,{Fragment:rn,Text:ra,Comment:ro,Static:ri})),rZ(u.component)||u.component.proxy}},unmount(){a&&(ep(null,o._container),__VUE_PROD_DEVTOOLS__&&(o._instance=null,P("app:unmount"/* APP_UNMOUNT */,o)),delete o._container.__vue_app__)},provide:(e,t)=>(s.provides[e]=t,o),runWithContext(e){t$=o;try{return e()}finally{t$=null}}};return o})}}function t5({effect:e,update:t},r){e.allowRecurse=t.allowRecurse=r}function t6(e,t,r=!1){let s=e.children,n=t.children;if((0,p.isArray)(s)&&(0,p.isArray)(n))for(let e=0;e<s.length;e++){let t=s[e],a=n[e];!(1&a.shapeFlag)||a.dynamicChildren||((a.patchFlag<=0||32===a.patchFlag)&&((a=n[e]=rF(n[e])).el=t.el),r||t6(t,a)),a.type===ra&&(a.el=t.el)}}let t9=e=>e.__isTeleport,t8=e=>e&&(e.disabled||""===e.disabled),t7=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,re=(e,t)=>{let r=e&&e.to;if(!(0,p.isString)(r))return r;if(!t)return null;{let e=t(r);return e}};function rt(e,t,r,{o:{insert:s},m:n},a=2){0===a&&s(e.targetAnchor,t,r);let{el:o,anchor:i,shapeFlag:l,children:u,props:p}=e,c=2===a;if(c&&s(o,t,r),(!c||t8(p))&&16&l)for(let e=0;e<u.length;e++)n(u[e],t,r,2);c&&s(i,t,r)}let rr={__isTeleport:!0,process(e,t,r,s,n,a,o,i,l,u){let{mc:p,pc:c,pbc:d,o:{insert:h,querySelector:f,createText:m,createComment:g}}=u,x=t8(t.props),{shapeFlag:b,children:y,dynamicChildren:j}=t;if(null==e){let e=t.el=m(""),u=t.anchor=m("");h(e,r,s),h(u,r,s);let c=t.target=re(t.props,f),d=t.targetAnchor=m("");c&&(h(d,c),o=o||t7(c));let g=(e,t)=>{16&b&&p(y,e,t,n,a,o,i,l)};x?g(r,u):c&&g(c,d)}else{t.el=e.el;let s=t.anchor=e.anchor,p=t.target=e.target,h=t.targetAnchor=e.targetAnchor,m=t8(e.props),g=m?r:p,b=m?s:h;if(o=o||t7(p),j?(d(e.dynamicChildren,j,g,n,a,o,i),t6(e,t,!0)):l||c(e,t,g,b,n,a,o,i,!1),x)m||rt(t,r,s,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){let e=t.target=re(t.props,f);e&&rt(t,e,null,u,0)}else m&&rt(t,p,h,u,1)}rs(t)},remove(e,t,r,s,{um:n,o:{remove:a}},o){let{shapeFlag:i,children:l,anchor:u,targetAnchor:p,target:c,props:d}=e;if(c&&a(p),(o||!t8(d))&&(a(u),16&i))for(let e=0;e<l.length;e++){let s=l[e];n(s,t,r,!0,!!s.dynamicChildren)}},move:rt,hydrate:function(e,t,r,s,n,a,{o:{nextSibling:o,parentNode:i,querySelector:l}},u){let p=t.target=re(t.props,l);if(p){let l=p._lpa||p.firstChild;if(16&t.shapeFlag){if(t8(t.props))t.anchor=u(o(e),t,i(e),r,s,n,a),t.targetAnchor=l;else{t.anchor=o(e);let i=l;for(;i;)if((i=o(i))&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,p._lpa=t.targetAnchor&&o(t.targetAnchor);break}u(l,t,p,r,s,n,a)}}rs(t)}return t.anchor&&o(t.anchor)}};function rs(e){let t=e.ctx;if(t&&t.ut){let r=e.children[0].el;for(;r!==e.targetAnchor;)1===r.nodeType&&r.setAttribute("data-v-owner",t.uid),r=r.nextSibling;t.ut()}}let rn=Symbol.for("v-fgt"),ra=Symbol.for("v-txt"),ro=Symbol.for("v-cmt"),ri=Symbol.for("v-stc"),rl=[],ru=null;function rp(e=!1){rl.push(ru=e?null:[])}function rc(){rl.pop(),ru=rl[rl.length-1]||null}let rd=1;function rh(e){rd+=e}function rf(e){return e.dynamicChildren=rd>0?ru||p.EMPTY_ARR:null,rc(),rd>0&&ru&&ru.push(e),e}function rm(e,t,r,s,n,a){return rf(rk(e,t,r,s,n,a,!0))}function rg(e,t,r,s,n){return rf(rI(e,t,r,s,n,!0))}function rx(e){return!!e&&!0===e.__v_isVNode}function rv(e,t){return e.type===t.type&&e.key===t.key}function rb(e){}let ry="__vInternal",rj=({key:e})=>null!=e?e:null,r_=({ref:e,ref_key:t,ref_for:r})=>("number"==typeof e&&(e=""+e),null!=e?(0,p.isString)(e)||(0,u.isRef)(e)||(0,p.isFunction)(e)?{i:W,r:e,k:t,f:!!r}:e:null);function rk(e,t=null,r=null,s=0,n=null,a=e===rn?0:1,o=!1,i=!1){let l={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&rj(t),ref:t&&r_(t),scopeId:q,slotScopeIds:null,children:r,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:a,patchFlag:s,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:W};return i?(rA(l,r),128&a&&e.normalize(l)):r&&(l.shapeFlag|=(0,p.isString)(r)?8:16),rd>0&&// avoid a block node from tracking itself
!o&&// has current parent block
ru&&// presence of a patch flag indicates this node needs patching on updates.
// component nodes also should always be patched, because even if the
// component doesn't need to update, it needs to persist the instance on to
// the next vnode so that it can be properly unmounted later.
(l.patchFlag>0||6&a)&&// the EVENTS flag is only for hydration and if it is the only flag, the
// vnode should not be considered dynamic due to handler caching.
32!==l.patchFlag&&ru.push(l),l}let rI=function(e,t=null,r=null,s=0,n=null,a=!1){var o;if(e&&e!==e3||(e=ro),rx(e)){let s=rC(e,t,!0);return r&&rA(s,r),rd>0&&!a&&ru&&(6&s.shapeFlag?ru[ru.indexOf(e)]=s:ru.push(s)),s.patchFlag|=-2,s}if(o=e,(0,p.isFunction)(o)&&"__vccOpts"in o&&(e=e.__vccOpts),t){let{class:e,style:r}=t=rw(t);e&&!(0,p.isString)(e)&&(t.class=(0,p.normalizeClass)(e)),(0,p.isObject)(r)&&((0,u.isProxy)(r)&&!(0,p.isArray)(r)&&(r=(0,p.extend)({},r)),t.style=(0,p.normalizeStyle)(r))}let i=(0,p.isString)(e)?1:es(e)?128:t9(e)?64:(0,p.isObject)(e)?4:(0,p.isFunction)(e)?2:0;return rk(e,t,r,s,n,i,a,!0)};function rw(e){return e?(0,u.isProxy)(e)||ry in e?(0,p.extend)({},e):e:null}function rC(e,t,r=!1){let{props:s,ref:n,patchFlag:a,children:o}=e,i=t?rR(s||{},t):s,l={__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&rj(i),ref:t&&t.ref?// if the vnode itself already has a ref, cloneVNode will need to merge
// the refs so the single vnode can be set on multiple refs
r&&n?(0,p.isArray)(n)?n.concat(r_(t)):[n,r_(t)]:r_(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,// if the vnode is cloned with extra props, we can no longer assume its
// existing patch flag to be reliable and need to add the FULL_PROPS flag.
// note: preserve flag for fragments since they use the flag for children
// fast paths only.
patchFlag:t&&e.type!==rn?-1===a?16:16|a:a,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,// These should technically only be non-null on mounted VNodes. However,
// they *should* be copied for kept-alive vnodes. So we just always copy
// them since them being non-null during a mount doesn't affect the logic as
// they will simply be overwritten.
component:e.component,suspense:e.suspense,ssContent:e.ssContent&&rC(e.ssContent),ssFallback:e.ssFallback&&rC(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return l}function rS(e=" ",t=0){return rI(ra,null,e,t)}function rT(e,t){let r=rI(ri,null,e);return r.staticCount=t,r}function rN(e="",t=!1){return t?(rp(),rg(ro,null,e)):rI(ro,null,e)}function rE(e){return null==e||"boolean"==typeof e?rI(ro):(0,p.isArray)(e)?rI(rn,null,e.slice()):"object"==typeof e?rF(e):rI(ra,null,String(e))}function rF(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:rC(e)}function rA(e,t){let r=0,{shapeFlag:s}=e;if(null==t)t=null;else if((0,p.isArray)(t))r=16;else if("object"==typeof t){if(65&s){let r=t.default;r&&(r._c&&(r._d=!1),rA(e,r()),r._c&&(r._d=!0));return}{r=32;let s=t._;s||ry in t?3===s&&W&&(1===W.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=W}}else(0,p.isFunction)(t)?(t={default:t,_ctx:W},r=32):(t=String(t),64&s?(r=16,t=[rS(t)]):r=8);e.children=t,e.shapeFlag|=r}function rR(...e){let t={};for(let r=0;r<e.length;r++){let s=e[r];for(let e in s)if("class"===e)t.class!==s.class&&(t.class=(0,p.normalizeClass)([t.class,s.class]));else if("style"===e)t.style=(0,p.normalizeStyle)([t.style,s.style]);else if((0,p.isOn)(e)){let r=t[e],n=s[e];n&&r!==n&&!((0,p.isArray)(r)&&r.includes(n))&&(t[e]=r?[].concat(r,n):n)}else""!==e&&(t[e]=s[e])}return t}function rD(e,t,r,s=null){f(e,t,7,[r,s])}let r$=tR(),rP=0;function rz(e,t,r){let s=e.type,n=(t?t.appContext:e.appContext)||r$,a={uid:rP++,vnode:e,type:s,parent:t,appContext:n,root:null,// to be immediately set
next:null,subTree:null,// will be set synchronously right after creation
effect:null,update:null,// will be set synchronously right after creation
scope:new u.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],// local resolved assets
components:null,directives:null,// resolved props and emits options
propsOptions:function e(t,r,s=!1){let n=r.propsCache,a=n.get(t);if(a)return a;let o=t.props,i={},l=[],u=!1;if(__VUE_OPTIONS_API__&&!(0,p.isFunction)(t)){let n=t=>{u=!0;let[s,n]=e(t,r,!0);(0,p.extend)(i,s),n&&l.push(...n)};!s&&r.mixins.length&&r.mixins.forEach(n),t.extends&&n(t.extends),t.mixins&&t.mixins.forEach(n)}if(!o&&!u)return(0,p.isObject)(t)&&n.set(t,p.EMPTY_ARR),p.EMPTY_ARR;if((0,p.isArray)(o))for(let e=0;e<o.length;e++){let t=(0,p.camelize)(o[e]);"$"!==t[0]&&(i[t]=p.EMPTY_OBJ)}else if(o)for(let e in o){let t=(0,p.camelize)(e);if("$"!==t[0]){let r=o[e],s=i[t]=(0,p.isArray)(r)||(0,p.isFunction)(r)?{type:r}:(0,p.extend)({},r);if(s){let e=tU(Boolean,s.type),r=tU(String,s.type);s[0/* shouldCast */]=e>-1,s[1/* shouldCastTrue */]=r<0||e<r,(e>-1||(0,p.hasOwn)(s,"default"))&&l.push(t)}}}let c=[i,l];return(0,p.isObject)(t)&&n.set(t,c),c}(s,n),emitsOptions:function e(t,r,s=!1){let n=r.emitsCache,a=n.get(t);if(void 0!==a)return a;let o=t.emits,i={},l=!1;if(__VUE_OPTIONS_API__&&!(0,p.isFunction)(t)){let n=t=>{let s=e(t,r,!0);s&&(l=!0,(0,p.extend)(i,s))};!s&&r.mixins.length&&r.mixins.forEach(n),t.extends&&n(t.extends),t.mixins&&t.mixins.forEach(n)}return o||l?((0,p.isArray)(o)?o.forEach(e=>i[e]=null):(0,p.extend)(i,o),(0,p.isObject)(t)&&n.set(t,i),i):((0,p.isObject)(t)&&n.set(t,null),null)}(s,n),// emit
emit:null,// to be set immediately
emitted:null,// props default value
propsDefaults:p.EMPTY_OBJ,// inheritAttrs
inheritAttrs:s.inheritAttrs,// state
ctx:p.EMPTY_OBJ,data:p.EMPTY_OBJ,props:p.EMPTY_OBJ,attrs:p.EMPTY_OBJ,slots:p.EMPTY_OBJ,refs:p.EMPTY_OBJ,setupState:p.EMPTY_OBJ,setupContext:null,attrsProxy:null,slotsProxy:null,// suspense related
suspense:r,suspenseId:r?r.pendingId:0,asyncDep:null,asyncResolved:!1,// lifecycle hooks
// not using enums here because it results in computed properties
isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx={_:a},a.root=t?t.root:a,a.emit=V.bind(null,a),e.ce&&e.ce(a),a}let rM=null,rO=()=>rM||W,rL="__VUE_INSTANCE_SETTERS__";(a=(0,p.getGlobalThis)()[rL])||(a=(0,p.getGlobalThis)()[rL]=[]),a.push(e=>rM=e),n=e=>{a.length>1?a.forEach(t=>t(e)):a[0](e)};let rB=e=>{n(e),e.scope.on()},rU=()=>{rM&&rM.scope.off(),n(null)};function rV(e){return 4&e.vnode.shapeFlag}let rG=!1;function rW(e,t=!1){rG=t;let{props:r,children:s}=e.vnode,n=rV(e);!function(e,t,r,s=!1){let n={},a={};for(let r in(0,p.def)(a,ry,1),e.propsDefaults=/* @__PURE__ */Object.create(null),tO(e,t,n,a),e.propsOptions[0])r in n||(n[r]=void 0);r?e.props=s?n:(0,u.shallowReactive)(n):e.type.props?e.props=n:e.props=a,e.attrs=a}(e,r,n,t),tH(e,s);let a=n?function(e,t){let r=e.type;e.accessCache=/* @__PURE__ */Object.create(null),e.proxy=(0,u.markRaw)(new Proxy(e.ctx,ta));let{setup:s}=r;if(s){let r=e.setupContext=s.length>1?rY(e):null;rB(e),(0,u.pauseTracking)();let n=h(s,e,0,[e.props,r]);if((0,u.resetTracking)(),rU(),(0,p.isPromise)(n)){if(n.then(rU,rU),t)return n.then(r=>{rq(e,r,t)}).catch(t=>{m(t,e,0)});e.asyncDep=n}else rq(e,n,t)}else rX(e,t)}(e,t):void 0;return rG=!1,a}function rq(e,t,r){(0,p.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,p.isObject)(t)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=t),e.setupState=(0,u.proxyRefs)(t)),rX(e,r)}function rK(e){o=e,i=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,to))}}let rH=()=>!o;function rX(e,t,r){let s=e.type;if(!e.render){if(!t&&o&&!s.render){let t=s.template||tw(e).template;if(t){let{isCustomElement:r,compilerOptions:n}=e.appContext.config,{delimiters:a,compilerOptions:i}=s,l=(0,p.extend)((0,p.extend)({isCustomElement:r,delimiters:a},n),i);s.render=o(t,l)}}e.render=s.render||p.NOOP,i&&i(e)}__VUE_OPTIONS_API__&&(rB(e),(0,u.pauseTracking)(),function(e){let t=tw(e),r=e.proxy,s=e.ctx;tk=!1,t.beforeCreate&&tI(t.beforeCreate,e,"bc");let{data:n,computed:a,methods:o,watch:i,provide:l,inject:c,created:d,beforeMount:h,mounted:f,beforeUpdate:m,updated:g,activated:x,deactivated:b,beforeDestroy:y,beforeUnmount:j,destroyed:_,unmounted:k,render:I,renderTracked:w,renderTriggered:C,errorCaptured:S,serverPrefetch:T,expose:N,inheritAttrs:E,components:F,directives:A,filters:R}=t;if(c&&function(e,t,r=p.NOOP){for(let r in(0,p.isArray)(e)&&(e=tN(e)),e){let s;let n=e[r];s=(0,p.isObject)(n)?"default"in n?tz(n.from||r,n.default,!0):tz(n.from||r):tz(n),(0,u.isRef)(s)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[r]=s}}(c,s,null),o)for(let e in o){let t=o[e];(0,p.isFunction)(t)&&(s[e]=t.bind(r))}if(n){let t=n.call(r,r);(0,p.isObject)(t)&&(e.data=(0,u.reactive)(t))}if(tk=!0,a)for(let e in a){let t=a[e],n=(0,p.isFunction)(t)?t.bind(r,r):(0,p.isFunction)(t.get)?t.get.bind(r,r):p.NOOP,o=!(0,p.isFunction)(t)&&(0,p.isFunction)(t.set)?t.set.bind(r):p.NOOP,i=rQ({get:n,set:o});Object.defineProperty(s,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(let e in i)(function e(t,r,s,n){let a=n.includes(".")?ex(s,n):()=>s[n];if((0,p.isString)(t)){let e=r[t];(0,p.isFunction)(e)&&em(a,e,void 0)}else if((0,p.isFunction)(t))em(a,t.bind(s),void 0);else if((0,p.isObject)(t)){if((0,p.isArray)(t))t.forEach(t=>e(t,r,s,n));else{let e=(0,p.isFunction)(t.handler)?t.handler.bind(s):r[t.handler];(0,p.isFunction)(e)&&em(a,e,t)}}})(i[e],s,r,e);if(l){let e=(0,p.isFunction)(l)?l.call(r):l;Reflect.ownKeys(e).forEach(t=>{tP(t,e[t])})}function D(e,t){(0,p.isArray)(t)?t.forEach(t=>e(t.bind(r))):t&&e(t.bind(r))}if(d&&tI(d,e,"c"),D(eW,h),D(eq,f),D(eK,m),D(eH,g),D(eM,x),D(eO,b),D(e0,S),D(eQ,w),D(eJ,C),D(eX,j),D(eY,k),D(eZ,T),(0,p.isArray)(N)){if(N.length){let t=e.exposed||(e.exposed={});N.forEach(e=>{Object.defineProperty(t,e,{get:()=>r[e],set:t=>r[e]=t})})}else e.exposed||(e.exposed={})}I&&e.render===p.NOOP&&(e.render=I),null!=E&&(e.inheritAttrs=E),F&&(e.components=F),A&&(e.directives=A)}(e),(0,u.resetTracking)(),rU())}function rY(e){return{get attrs(){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get:(t,r)=>((0,u.track)(e,"get","$attrs"),t[r])}))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function rZ(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,u.proxyRefs)((0,u.markRaw)(e.exposed)),{get:(t,r)=>r in t?t[r]:r in ts?ts[r](e):void 0,has:(e,t)=>t in e||t in ts}))}function rJ(e,t=!0){return(0,p.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}let rQ=(e,t)=>(0,u.computed)(e,t,rG);function r0(e,t,r){let s=arguments.length;return 2!==s?(s>3?r=Array.prototype.slice.call(arguments,2):3===s&&rx(r)&&(r=[r]),rI(e,t,r)):!(0,p.isObject)(t)||(0,p.isArray)(t)?rI(e,null,t):rx(t)?rI(e,null,[t]):rI(e,t)}let r1=Symbol.for("v-scx"),r2=()=>{{let e=tz(r1);return e}};function r3(){}function r4(e,t,r,s){let n=r[s];if(n&&r5(n,e))return n;let a=t();return a.memo=e.slice(),r[s]=a}function r5(e,t){let r=e.memo;if(r.length!=t.length)return!1;for(let e=0;e<r.length;e++)if((0,p.hasChanged)(r[e],t[e]))return!1;return rd>0&&ru&&ru.push(e),!0}let r6="3.3.4",r9={createComponentInstance:rz,setupComponent:rW,renderComponentRoot:J,setCurrentRenderingInstance:K,isVNode:rx,normalizeVNode:rE},r8=null,r7=null},{"@vue/reactivity":"1N18n","@vue/shared":"i9PY1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1N18n":[function(e,t,r){let s,n;var a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"EffectScope",()=>i),a.export(r,"ITERATE_KEY",()=>j),a.export(r,"ReactiveEffect",()=>k),a.export(r,"computed",()=>e3),a.export(r,"customRef",()=>eY),a.export(r,"deferredComputed",()=>te),a.export(r,"effect",()=>w),a.export(r,"effectScope",()=>l),a.export(r,"enableTracking",()=>E),a.export(r,"getCurrentScope",()=>p),a.export(r,"isProxy",()=>eA),a.export(r,"isReactive",()=>eN),a.export(r,"isReadonly",()=>eE),a.export(r,"isRef",()=>eO),a.export(r,"isShallow",()=>eF),a.export(r,"markRaw",()=>eD),a.export(r,"onScopeDispose",()=>c),a.export(r,"pauseTracking",()=>N),a.export(r,"proxyRefs",()=>eH),a.export(r,"reactive",()=>eI),a.export(r,"readonly",()=>eC),a.export(r,"ref",()=>eL),a.export(r,"resetTracking",()=>F),a.export(r,"shallowReactive",()=>ew),a.export(r,"shallowReadonly",()=>eS),a.export(r,"shallowRef",()=>eB),a.export(r,"stop",()=>C),a.export(r,"toRaw",()=>eR),a.export(r,"toRef",()=>e0),a.export(r,"toRefs",()=>eZ),a.export(r,"toValue",()=>eq),a.export(r,"track",()=>A),a.export(r,"trigger",()=>D),a.export(r,"triggerRef",()=>eG),a.export(r,"unref",()=>eW);var o=e("@vue/shared");class i{constructor(e=!1){this.detached=e,/**
     * @internal
     */this._active=!0,/**
     * @internal
     */this.effects=[],/**
     * @internal
     */this.cleanups=[],this.parent=s,!e&&s&&(this.index=(s.scopes||(s.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){let t=s;try{return s=this,e()}finally{s=t}}}/**
   * This should only be called on non-detached scopes
   * @internal
   */on(){s=this}/**
   * This should only be called on non-detached scopes
   * @internal
   */off(){s=this.parent}stop(e){if(this._active){let t,r;for(t=0,r=this.effects.length;t<r;t++)this.effects[t].stop();for(t=0,r=this.cleanups.length;t<r;t++)this.cleanups[t]();if(this.scopes)for(t=0,r=this.scopes.length;t<r;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){let e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function l(e){return new i(e)}function u(e,t=s){t&&t.active&&t.effects.push(e)}function p(){return s}function c(e){s&&s.cleanups.push(e)}let d=e=>{let t=new Set(e);return t.w=0,t.n=0,t},h=e=>(e.w&y)>0,f=e=>(e.n&y)>0,m=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=y},g=e=>{let{deps:t}=e;if(t.length){let r=0;for(let s=0;s<t.length;s++){let n=t[s];h(n)&&!f(n)?n.delete(e):t[r++]=n,n.w&=~y,n.n&=~y}t.length=r}},x=/* @__PURE__ */new WeakMap,b=0,y=1,j=Symbol(""),_=Symbol("");class k{constructor(e,t=null,r){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,u(this,r)}run(){if(!this.active)return this.fn();let e=n,t=S;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=n,n=this,S=!0,y=1<<++b,b<=30?m(this):I(this),this.fn()}finally{b<=30&&g(this),y=1<<--b,n=this.parent,S=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){n===this?this.deferStop=!0:this.active&&(I(this),this.onStop&&this.onStop(),this.active=!1)}}function I(e){let{deps:t}=e;if(t.length){for(let r=0;r<t.length;r++)t[r].delete(e);t.length=0}}function w(e,t){e.effect&&(e=e.effect.fn);let r=new k(e);t&&((0,o.extend)(r,t),t.scope&&u(r,t.scope)),t&&t.lazy||r.run();let s=r.run.bind(r);return s.effect=r,s}function C(e){e.effect.stop()}let S=!0,T=[];function N(){T.push(S),S=!1}function E(){T.push(S),S=!0}function F(){let e=T.pop();S=void 0===e||e}function A(e,t,r){if(S&&n){let t=x.get(e);t||x.set(e,t=/* @__PURE__ */new Map);let s=t.get(r);s||t.set(r,s=d()),R(s,void 0)}}function R(e,t){let r=!1;b<=30?f(e)||(e.n|=y,r=!h(e)):r=!e.has(n),r&&(e.add(n),n.deps.push(e))}function D(e,t,r,s,n,a){let i=x.get(e);if(!i)return;let l=[];if("clear"===t)l=[...i.values()];else if("length"===r&&(0,o.isArray)(e)){let e=Number(s);i.forEach((t,r)=>{("length"===r||r>=e)&&l.push(t)})}else switch(void 0!==r&&l.push(i.get(r)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(r)&&l.push(i.get("length")):(l.push(i.get(j)),(0,o.isMap)(e)&&l.push(i.get(_)));break;case"delete":!(0,o.isArray)(e)&&(l.push(i.get(j)),(0,o.isMap)(e)&&l.push(i.get(_)));break;case"set":(0,o.isMap)(e)&&l.push(i.get(j))}if(1===l.length)l[0]&&$(l[0]);else{let e=[];for(let t of l)t&&e.push(...t);$(d(e))}}function $(e,t){let r=(0,o.isArray)(e)?e:[...e];for(let e of r)e.computed&&P(e,t);for(let e of r)e.computed||P(e,t)}function P(e,t){(e!==n||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}let z=/* @__PURE__ */(0,o.makeMap)("__proto__,__v_isRef,__isVue"),M=new Set(/* @__PURE__ */Object.getOwnPropertyNames(Symbol).filter(e=>"arguments"!==e&&"caller"!==e).map(e=>Symbol[e]).filter(o.isSymbol)),O=/* @__PURE__ */W(),L=/* @__PURE__ */W(!1,!0),B=/* @__PURE__ */W(!0),U=/* @__PURE__ */W(!0,!0),V=/* @__PURE__ */function(){let e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...e){let r=eR(this);for(let e=0,t=this.length;e<t;e++)A(r,"get",e+"");let s=r[t](...e);return -1===s||!1===s?r[t](...e.map(eR)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...e){N();let r=eR(this)[t].apply(this,e);return F(),r}}),e}();function G(e){let t=eR(this);return A(t,"has",e),t.hasOwnProperty(e)}function W(e=!1,t=!1){return function(r,s,n){if("__v_isReactive"===s)return!e;if("__v_isReadonly"===s)return e;if("__v_isShallow"===s)return t;if("__v_raw"===s&&n===(e?t?ek:e_:t?ej:ey).get(r))return r;let a=(0,o.isArray)(r);if(!e){if(a&&(0,o.hasOwn)(V,s))return Reflect.get(V,s,n);if("hasOwnProperty"===s)return G}let i=Reflect.get(r,s,n);return((0,o.isSymbol)(s)?M.has(s):z(s))?i:(e||A(r,"get",s),t)?i:eO(i)?a&&(0,o.isIntegerKey)(s)?i:i.value:(0,o.isObject)(i)?e?eC(i):eI(i):i}}let q=/* @__PURE__ */H(),K=/* @__PURE__ */H(!0);function H(e=!1){return function(t,r,s,n){let a=t[r];if(eE(a)&&eO(a)&&!eO(s))return!1;if(!e&&(eF(s)||eE(s)||(a=eR(a),s=eR(s)),!(0,o.isArray)(t)&&eO(a)&&!eO(s)))return a.value=s,!0;let i=(0,o.isArray)(t)&&(0,o.isIntegerKey)(r)?Number(r)<t.length:(0,o.hasOwn)(t,r),l=Reflect.set(t,r,s,n);return t===eR(n)&&(i?(0,o.hasChanged)(s,a)&&D(t,"set",r,s,a):D(t,"add",r,s)),l}}let X={get:O,set:q,deleteProperty:function(e,t){let r=(0,o.hasOwn)(e,t),s=e[t],n=Reflect.deleteProperty(e,t);return n&&r&&D(e,"delete",t,void 0,s),n},has:function(e,t){let r=Reflect.has(e,t);return(0,o.isSymbol)(t)&&M.has(t)||A(e,"has",t),r},ownKeys:function(e){return A(e,"iterate",(0,o.isArray)(e)?"length":j),Reflect.ownKeys(e)}},Y={get:B,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Z=/* @__PURE__ */(0,o.extend)({},X,{get:L,set:K}),J=/* @__PURE__ */(0,o.extend)({},Y,{get:U}),Q=e=>e,ee=e=>Reflect.getPrototypeOf(e);function et(e,t,r=!1,s=!1){e=e.__v_raw;let n=eR(e),a=eR(t);r||(t!==a&&A(n,"get",t),A(n,"get",a));let{has:o}=ee(n),i=s?Q:r?eP:e$;return o.call(n,t)?i(e.get(t)):o.call(n,a)?i(e.get(a)):void(e!==n&&e.get(t))}function er(e,t=!1){let r=this.__v_raw,s=eR(r),n=eR(e);return t||(e!==n&&A(s,"has",e),A(s,"has",n)),e===n?r.has(e):r.has(e)||r.has(n)}function es(e,t=!1){return e=e.__v_raw,t||A(eR(e),"iterate",j),Reflect.get(e,"size",e)}function en(e){e=eR(e);let t=eR(this),r=ee(t),s=r.has.call(t,e);return s||(t.add(e),D(t,"add",e,e)),this}function ea(e,t){t=eR(t);let r=eR(this),{has:s,get:n}=ee(r),a=s.call(r,e);a||(e=eR(e),a=s.call(r,e));let i=n.call(r,e);return r.set(e,t),a?(0,o.hasChanged)(t,i)&&D(r,"set",e,t,i):D(r,"add",e,t),this}function eo(e){let t=eR(this),{has:r,get:s}=ee(t),n=r.call(t,e);n||(e=eR(e),n=r.call(t,e));let a=s?s.call(t,e):void 0,o=t.delete(e);return n&&D(t,"delete",e,void 0,a),o}function ei(){let e=eR(this),t=0!==e.size,r=e.clear();return t&&D(e,"clear",void 0,void 0,void 0),r}function el(e,t){return function(r,s){let n=this,a=n.__v_raw,o=eR(a),i=t?Q:e?eP:e$;return e||A(o,"iterate",j),a.forEach((e,t)=>r.call(s,i(e),i(t),n))}}function eu(e,t,r){return function(...s){let n=this.__v_raw,a=eR(n),i=(0,o.isMap)(a),l="entries"===e||e===Symbol.iterator&&i,u="keys"===e&&i,p=n[e](...s),c=r?Q:t?eP:e$;return t||A(a,"iterate",u?_:j),{// iterator protocol
next(){let{value:e,done:t}=p.next();return t?{value:e,done:t}:{value:l?[c(e[0]),c(e[1])]:c(e),done:t}},// iterable protocol
[Symbol.iterator](){return this}}}}function ep(e){return function(...t){return"delete"!==e&&this}}let[ec,ed,eh,ef]=/* @__PURE__ */function(){let e={get(e){return et(this,e)},get size(){return es(this)},has:er,add:en,set:ea,delete:eo,clear:ei,forEach:el(!1,!1)},t={get(e){return et(this,e,!1,!0)},get size(){return es(this)},has:er,add:en,set:ea,delete:eo,clear:ei,forEach:el(!1,!0)},r={get(e){return et(this,e,!0)},get size(){return es(this,!0)},has(e){return er.call(this,e,!0)},add:ep("add"),set:ep("set"),delete:ep("delete"),clear:ep("clear"),forEach:el(!0,!1)},s={get(e){return et(this,e,!0,!0)},get size(){return es(this,!0)},has(e){return er.call(this,e,!0)},add:ep("add"),set:ep("set"),delete:ep("delete"),clear:ep("clear"),forEach:el(!0,!0)},n=["keys","values","entries",Symbol.iterator];return n.forEach(n=>{e[n]=eu(n,!1,!1),r[n]=eu(n,!0,!1),t[n]=eu(n,!1,!0),s[n]=eu(n,!0,!0)}),[e,r,t,s]}();function em(e,t){let r=t?e?ef:eh:e?ed:ec;return(t,s,n)=>"__v_isReactive"===s?!e:"__v_isReadonly"===s?e:"__v_raw"===s?t:Reflect.get((0,o.hasOwn)(r,s)&&s in t?r:t,s,n)}let eg={get:/* @__PURE__ */em(!1,!1)},ex={get:/* @__PURE__ */em(!1,!0)},ev={get:/* @__PURE__ */em(!0,!1)},eb={get:/* @__PURE__ */em(!0,!0)},ey=/* @__PURE__ */new WeakMap,ej=/* @__PURE__ */new WeakMap,e_=/* @__PURE__ */new WeakMap,ek=/* @__PURE__ */new WeakMap;function eI(e){return eE(e)?e:eT(e,!1,X,eg,ey)}function ew(e){return eT(e,!1,Z,ex,ej)}function eC(e){return eT(e,!0,Y,ev,e_)}function eS(e){return eT(e,!0,J,eb,ek)}function eT(e,t,r,s,n){if(!(0,o.isObject)(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;let a=n.get(e);if(a)return a;let i=e.__v_skip||!Object.isExtensible(e)?0/* INVALID */:function(e){switch(e){case"Object":case"Array":return 1/* COMMON */;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2/* COLLECTION */;default:return 0/* INVALID */}}((0,o.toRawType)(e));if(0/* INVALID */===i)return e;let l=new Proxy(e,2/* COLLECTION */===i?s:r);return n.set(e,l),l}function eN(e){return eE(e)?eN(e.__v_raw):!!(e&&e.__v_isReactive)}function eE(e){return!!(e&&e.__v_isReadonly)}function eF(e){return!!(e&&e.__v_isShallow)}function eA(e){return eN(e)||eE(e)}function eR(e){let t=e&&e.__v_raw;return t?eR(t):e}function eD(e){return(0,o.def)(e,"__v_skip",!0),e}let e$=e=>(0,o.isObject)(e)?eI(e):e,eP=e=>(0,o.isObject)(e)?eC(e):e;function ez(e){S&&n&&R((e=eR(e)).dep||(e.dep=d()))}function eM(e,t){e=eR(e);let r=e.dep;r&&$(r)}function eO(e){return!!(e&&!0===e.__v_isRef)}function eL(e){return eU(e,!1)}function eB(e){return eU(e,!0)}function eU(e,t){return eO(e)?e:new eV(e,t)}class eV{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:eR(e),this._value=t?e:e$(e)}get value(){return ez(this),this._value}set value(e){let t=this.__v_isShallow||eF(e)||eE(e);e=t?e:eR(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:e$(e),eM(this,e))}}function eG(e){eM(e,void 0)}function eW(e){return eO(e)?e.value:e}function eq(e){return(0,o.isFunction)(e)?e():eW(e)}let eK={get:(e,t,r)=>eW(Reflect.get(e,t,r)),set:(e,t,r,s)=>{let n=e[t];return eO(n)&&!eO(r)?(n.value=r,!0):Reflect.set(e,t,r,s)}};function eH(e){return eN(e)?e:new Proxy(e,eK)}class eX{constructor(e){this.dep=void 0,this.__v_isRef=!0;let{get:t,set:r}=e(()=>ez(this),()=>eM(this));this._get=t,this._set=r}get value(){return this._get()}set value(e){this._set(e)}}function eY(e){return new eX(e)}function eZ(e){let t=(0,o.isArray)(e)?Array(e.length):{};for(let r in e)t[r]=e1(e,r);return t}class eJ{constructor(e,t,r){this._object=e,this._key=t,this._defaultValue=r,this.__v_isRef=!0}get value(){let e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){var e,t,r;return e=eR(this._object),t=this._key,null==(r=x.get(e))?void 0:r.get(t)}}class eQ{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function e0(e,t,r){return eO(e)?e:(0,o.isFunction)(e)?new eQ(e):(0,o.isObject)(e)&&arguments.length>1?e1(e,t,r):eL(e)}function e1(e,t,r){let s=e[t];return eO(s)?s:new eJ(e,t,r)}class e2{constructor(e,t,r,s){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new k(e,()=>{this._dirty||(this._dirty=!0,eM(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=r}get value(){let e=eR(this);return ez(e),(e._dirty||!e._cacheable)&&(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function e3(e,t,r=!1){let s,n;let a=(0,o.isFunction)(e);a?(s=e,n=o.NOOP):(s=e.get,n=e.set);let i=new e2(s,n,a||!n,r);return i}let e4=/* @__PURE__ */Promise.resolve(),e5=[],e6=!1,e9=e=>{e5.push(e),e6||(e6=!0,e4.then(e8))},e8=()=>{for(let e=0;e<e5.length;e++)e5[e]();e5.length=0,e6=!1};class e7{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this.__v_isReadonly=!0;let r=!1,s=!1;this.effect=new k(e,e=>{if(this.dep){if(e)t=this._value,r=!0;else if(!s){let e=r?t:this._value;s=!0,r=!1,e9(()=>{this.effect.active&&this._get()!==e&&eM(this),s=!1})}for(let e of this.dep)e.computed instanceof e7&&e.scheduler(!0)}this._dirty=!0}),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return ez(this),eR(this)._get()}}function te(e){return new e7(e)}},{"@vue/shared":"i9PY1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i9PY1:[function(e,t,r){let s;var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),n.export(r,"EMPTY_ARR",()=>l),n.export(r,"EMPTY_OBJ",()=>i),n.export(r,"NO",()=>p),n.export(r,"NOOP",()=>u),n.export(r,"PatchFlagNames",()=>Z),n.export(r,"camelize",()=>M),n.export(r,"capitalize",()=>B),n.export(r,"def",()=>W),n.export(r,"escapeHtml",()=>ek),n.export(r,"escapeHtmlComment",()=>ew),n.export(r,"extend",()=>f),n.export(r,"genPropsAccessExp",()=>Y),n.export(r,"generateCodeFrame",()=>ee),n.export(r,"getGlobalThis",()=>H),n.export(r,"hasChanged",()=>V),n.export(r,"hasOwn",()=>x),n.export(r,"hyphenate",()=>L),n.export(r,"includeBooleanAttr",()=>em),n.export(r,"invokeArrayFns",()=>G),n.export(r,"isArray",()=>b),n.export(r,"isBooleanAttr",()=>ef),n.export(r,"isBuiltInDirective",()=>$),n.export(r,"isDate",()=>_),n.export(r,"isFunction",()=>I),n.export(r,"isGloballyWhitelisted",()=>Q),n.export(r,"isHTMLTag",()=>eu),n.export(r,"isIntegerKey",()=>R),n.export(r,"isKnownHtmlAttr",()=>ey),n.export(r,"isKnownSvgAttr",()=>ej),n.export(r,"isMap",()=>y),n.export(r,"isModelListener",()=>h),n.export(r,"isObject",()=>S),n.export(r,"isOn",()=>d),n.export(r,"isPlainObject",()=>A),n.export(r,"isPromise",()=>T),n.export(r,"isRegExp",()=>k),n.export(r,"isReservedProp",()=>D),n.export(r,"isSSRSafeAttrName",()=>ev),n.export(r,"isSVGTag",()=>ep),n.export(r,"isSet",()=>j),n.export(r,"isSpecialBooleanAttr",()=>eh),n.export(r,"isString",()=>w),n.export(r,"isSymbol",()=>C),n.export(r,"isVoidTag",()=>ec),n.export(r,"looseEqual",()=>eC),n.export(r,"looseIndexOf",()=>eS),n.export(r,"looseToNumber",()=>q),n.export(r,"makeMap",()=>o),n.export(r,"normalizeClass",()=>ei),n.export(r,"normalizeProps",()=>el),n.export(r,"normalizeStyle",()=>et),n.export(r,"objectToString",()=>N),n.export(r,"parseStringStyle",()=>ea),n.export(r,"propsToAttrMap",()=>eb),n.export(r,"remove",()=>m),n.export(r,"slotFlagsText",()=>J),n.export(r,"stringifyStyle",()=>eo),n.export(r,"toDisplayString",()=>eT),n.export(r,"toHandlerKey",()=>U),n.export(r,"toNumber",()=>K),n.export(r,"toRawType",()=>F),n.export(r,"toTypeString",()=>E);var a=arguments[3];function o(e,t){let r=/* @__PURE__ */Object.create(null),s=e.split(",");for(let e=0;e<s.length;e++)r[s[e]]=!0;return t?e=>!!r[e.toLowerCase()]:e=>!!r[e]}let i={},l=[],u=()=>{},p=()=>!1,c=/^on[^a-z]/,d=e=>c.test(e),h=e=>e.startsWith("onUpdate:"),f=Object.assign,m=(e,t)=>{let r=e.indexOf(t);r>-1&&e.splice(r,1)},g=Object.prototype.hasOwnProperty,x=(e,t)=>g.call(e,t),b=Array.isArray,y=e=>"[object Map]"===E(e),j=e=>"[object Set]"===E(e),_=e=>"[object Date]"===E(e),k=e=>"[object RegExp]"===E(e),I=e=>"function"==typeof e,w=e=>"string"==typeof e,C=e=>"symbol"==typeof e,S=e=>null!==e&&"object"==typeof e,T=e=>S(e)&&I(e.then)&&I(e.catch),N=Object.prototype.toString,E=e=>N.call(e),F=e=>E(e).slice(8,-1),A=e=>"[object Object]"===E(e),R=e=>w(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,D=/* @__PURE__ */o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$=/* @__PURE__ */o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),P=e=>{let t=/* @__PURE__ */Object.create(null);return r=>{let s=t[r];return s||(t[r]=e(r))}},z=/-(\w)/g,M=P(e=>e.replace(z,(e,t)=>t?t.toUpperCase():"")),O=/\B([A-Z])/g,L=P(e=>e.replace(O,"-$1").toLowerCase()),B=P(e=>e.charAt(0).toUpperCase()+e.slice(1)),U=P(e=>e?`on${B(e)}`:""),V=(e,t)=>!Object.is(e,t),G=(e,t)=>{for(let r=0;r<e.length;r++)e[r](t)},W=(e,t,r)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r})},q=e=>{let t=parseFloat(e);return isNaN(t)?e:t},K=e=>{let t=w(e)?Number(e):NaN;return isNaN(t)?e:t},H=()=>s||(s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==a?a:{}),X=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function Y(e){return X.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}let Z={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"HYDRATE_EVENTS",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},J={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},Q=/* @__PURE__ */o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console");function ee(e,t=0,r=e.length){let s=e.split(/(\r?\n)/),n=s.filter((e,t)=>t%2==1);s=s.filter((e,t)=>t%2==0);let a=0,o=[];for(let e=0;e<s.length;e++)if((a+=s[e].length+(n[e]&&n[e].length||0))>=t){for(let i=e-2;i<=e+2||r>a;i++){if(i<0||i>=s.length)continue;let l=i+1;o.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${s[i]}`);let u=s[i].length,p=n[i]&&n[i].length||0;if(i===e){let e=t-(a-(u+p)),s=Math.max(1,r>a?u-e:r-t);o.push("   |  "+" ".repeat(e)+"^".repeat(s))}else if(i>e){if(r>a){let e=Math.max(Math.min(r-a,u),1);o.push("   |  "+"^".repeat(e))}a+=u+p}}break}return o.join("\n")}function et(e){if(b(e)){let t={};for(let r=0;r<e.length;r++){let s=e[r],n=w(s)?ea(s):et(s);if(n)for(let e in n)t[e]=n[e]}return t}if(w(e)||S(e))return e}let er=/;(?![^(]*\))/g,es=/:([^]+)/,en=/\/\*[^]*?\*\//g;function ea(e){let t={};return e.replace(en,"").split(er).forEach(e=>{if(e){let r=e.split(es);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function eo(e){let t="";if(!e||w(e))return t;for(let r in e){let s=e[r],n=r.startsWith("--")?r:L(r);(w(s)||"number"==typeof s)&&(t+=`${n}:${s};`)}return t}function ei(e){let t="";if(w(e))t=e;else if(b(e))for(let r=0;r<e.length;r++){let s=ei(e[r]);s&&(t+=s+" ")}else if(S(e))for(let r in e)e[r]&&(t+=r+" ");return t.trim()}function el(e){if(!e)return null;let{class:t,style:r}=e;return t&&!w(t)&&(e.class=ei(t)),r&&(e.style=et(r)),e}let eu=/* @__PURE__ */o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),ep=/* @__PURE__ */o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),ec=/* @__PURE__ */o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),ed="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",eh=/* @__PURE__ */o(ed),ef=/* @__PURE__ */o(ed+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function em(e){return!!e||""===e}let eg=/[>/="'\u0009\u000a\u000c\u0020]/,ex={};function ev(e){if(ex.hasOwnProperty(e))return ex[e];let t=eg.test(e);return t&&console.error(`unsafe attribute name: ${e}`),ex[e]=!t}let eb={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},ey=/* @__PURE__ */o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),ej=/* @__PURE__ */o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan"),e_=/["'&<>]/;function ek(e){let t,r;let s=""+e,n=e_.exec(s);if(!n)return s;let a="",o=0;for(r=n.index;r<s.length;r++){switch(s.charCodeAt(r)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#39;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==r&&(a+=s.slice(o,r)),o=r+1,a+=t}return o!==r?a+s.slice(o,r):a}let eI=/^-?>|<!--|-->|--!>|<!-$/g;function ew(e){return e.replace(eI,"")}function eC(e,t){if(e===t)return!0;let r=_(e),s=_(t);if(r||s)return!!r&&!!s&&e.getTime()===t.getTime();if(r=C(e),s=C(t),r||s)return e===t;if(r=b(e),s=b(t),r||s)return!!r&&!!s&&function(e,t){if(e.length!==t.length)return!1;let r=!0;for(let s=0;r&&s<e.length;s++)r=eC(e[s],t[s]);return r}(e,t);if(r=S(e),s=S(t),r||s){if(!r||!s)return!1;let n=Object.keys(e).length,a=Object.keys(t).length;if(n!==a)return!1;for(let r in e){let s=e.hasOwnProperty(r),n=t.hasOwnProperty(r);if(s&&!n||!s&&n||!eC(e[r],t[r]))return!1}}return String(e)===String(t)}function eS(e,t){return e.findIndex(e=>eC(e,t))}let eT=e=>w(e)?e:null==e?"":b(e)||S(e)&&(e.toString===N||!I(e.toString))?JSON.stringify(e,eN,2):String(e),eN=(e,t)=>t&&t.__v_isRef?eN(e,t.value):y(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((e,[t,r])=>(e[`${t} =>`]=r,e),{})}:j(t)?{[`Set(${t.size})`]:[...t.values()]}:!S(t)||b(t)||A(t)?t:String(t)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jiucr:[function(e,t,r){r.interopDefault=function(e){return e&&e.__esModule?e:{default:e}},r.defineInteropFlag=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.exportAll=function(e,t){return Object.keys(e).forEach(function(r){"default"===r||"__esModule"===r||t.hasOwnProperty(r)||Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[r]}})}),t},r.export=function(e,t,r){Object.defineProperty(e,t,{enumerable:!0,get:r})}},{}],"1Te0D":[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("25201c8a45fd2895")).__esModule&&(s=s.default),s.render=e("d76bdad551e36d0b").render,s.__cssModules=e("df1241266ad8b5b2").default,e("741d7b2f117c0595").default(s),s.__scopeId="data-v-f8822d",s.__file="App.vue",r.default=s},{"25201c8a45fd2895":"dj413",d76bdad551e36d0b:"h48dc",df1241266ad8b5b2:"VaPpt","741d7b2f117c0595":"1MbKh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dj413:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./MolInput"),a=s.interopDefault(n),o=e("./results/TfPrediction"),i=s.interopDefault(o),l=e("./Reference"),u=s.interopDefault(l),p=e("../../package.json"),c=s.interopDefault(p),d=e("./SmilesViewer.vue"),h=s.interopDefault(d);r.default={name:"App",components:{TfPrediction:i.default,MolInput:a.default,Reference:u.default,SmilesViewer:h.default},data:()=>({selfies:"",smiles:"",viewWidth:800,selectedIndex:-1,version:c.default.version,past:[],resultsReady:!1}),mounted:function(){this.viewWidth=this.$refs.inputcontainer.clientWidth},computed:{screen:()=>screen},methods:{pushSelfies(){this.resultsReady&&this.past.push({selfies:this.selfies})}}}},{"./MolInput":"lH5rn","./results/TfPrediction":"4TxZV","./Reference":"1BoZH","../../package.json":"hfJpU","./SmilesViewer.vue":"kqzyW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lH5rn:[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("ba4f7d1e58bbf20b")).__esModule&&(s=s.default),s.render=e("d2d6edf8083b52f0").render,s.__cssModules=e("46ee6e13e4b5e3ef").default,e("1b5ac438aaab1375").default(s),s.__scopeId="data-v-aa362a",s.__file="MolInput.vue",r.default=s},{ba4f7d1e58bbf20b:"6BK3Z",d2d6edf8083b52f0:"dnZ5s","46ee6e13e4b5e3ef":"gTWBO","1b5ac438aaab1375":"fAkCX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6BK3Z":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./lib/selfies/selfies.js"),a=s.interopDefault(n);r.default={name:"SequenceInput",props:{ready:!1},data:()=>({smiles_str:"",selfies_str:"",loadingMessage:"Loading",edit_mode:"SMILES",view_mode:"SELFIES",url:window.location.href.split("?")[0],selfiesStatus:!1,error:!1,parserError:!1}),mounted:function(){// convert pattern to list of integers
(0,a.default).startSelfiesWorker(),this.checkSelfies()},computed:{internalSMILES:{get:function(){return this.smiles_str},set:function(e){e=e.trim(),this.smiles_str=e,this.$emit("smiles-update",this.smiles_str),(0,a.default).encoder(e).then(e=>{e?(this.selfies_str=e,this.$emit("smiles-update",this.smiles_str),this.$emit("selfies-update",this.selfies_str),this.parserError=!1):this.parserError=!0})}},internalSELFIES:{get:function(){return this.selfies_str},set:function(e){e=e.trim(),this.selfies_str=e,(0,a.default).decoder(e).then(e=>{e?(this.smiles_str=e,this.$emit("smiles-update",this.smiles_str),this.$emit("selfies-update",this.selfies_str),this.parserError=!1):this.parserError=!0})}}},methods:{finishMol:function(){this.$emit("selfies-push")},discardKeys:function(e){e.preventDefault()},checkSelfies:async function(){let e=await (0,a.default).selfiesLoadStatus();if("loaded"===e.selfies){this.selfiesStatus=!0;let e=new URLSearchParams(window.location.search).get("s");e&&(this.internalSELFIES=e)}else if("failed"===e.selfies)throw this.error=!0,Error("Selfies failed to load");else this.loadingMessage+=".",setTimeout(this.checkSelfies,100)}}}},{"./lib/selfies/selfies.js":"b7BEu","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],b7BEu:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r);let s=null,n={},a=0;r.default={startSelfiesWorker:()=>{if(null!==s)return;"file:///src/components/lib/selfies/selfies.js".replace(/[^/]*$/,"");///const worker_url = new URL(file_dir + 'selfies_worker.js');
let t=new URL(e("4f63009708c259b5"));(s=new Worker(t)).onmessage=e=>{let t=e.data,r=t[1],s=t[2];n[r](s),delete n[r]}},selfiesLoadStatus:()=>null===s?new Promise(e=>e({pyodide:"waiting",selfies:"waiting"})):(a=(a+1)%1024,s.postMessage(["loading-status",a,null]),new Promise(e=>n[a]=e)),decoder:e=>null===s?new Promise((e,t)=>t(Error("Must call startSelfiesWorker() first"))):(a=(a+1)%1024,s.postMessage(["decoder",a,e]),new Promise(e=>n[a]=e)),encoder:e=>null===s?new Promise((e,t)=>t(Error("Must call startSelfiesWorker() first"))):(a=(a+1)%1024,s.postMessage(["encoder",a,e]),new Promise(e=>n[a]=e))}},{"4f63009708c259b5":"lIIez","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lIIez:[function(e,t,r){t.exports=e("220b305aead7a4c9").getBundleURL("6oyoe")+e("72c3a0d61b580c4e").resolve("l3Aob")},{"220b305aead7a4c9":"a2ypy","72c3a0d61b580c4e":"gSiLw"}],a2ypy:[function(e,t,r){var s={};function n(e){return(""+e).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/,"$1")+"/"}r.getBundleURL=function(e){var t=s[e];return t||(t=function(){try{throw Error()}catch(t){var e=(""+t.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);if(e)// Use the 3rd one, which will be a runtime in the original bundle.
return n(e[2])}return"/"}(),s[e]=t),t},r.getBaseURL=n,r.getOrigin=// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function(e){var t=(""+e).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);if(!t)throw Error("Origin not found");return t[0]}},{}],dnZ5s:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>f);var n=e("vue");let a={class:"is-size-4 is-spaced bd-anchor-title"},o={key:0},i={key:1},l={class:"field has-addons"},u=["readonly","placeholder"],p={class:"field has-addons"},c=["readonly","placeholder"],d={key:0,id:"seq-link",class:"help is-pulled-right"},h=["href"];function f(e,t,r,s,f,m){return(0,n.openBlock)(),(0,n.createElementBlock)("div",null,[(0,n.createElementVNode)("h1",a,[f.selfiesStatus?((0,n.openBlock)(),(0,n.createElementBlock)("span",o,"Enter Molecule")):((0,n.openBlock)(),(0,n.createElementBlock)("span",i,"Loading Parser (wait 5-10 seconds)"))]),(0,n.createElementVNode)("div",l,[(0,n.createElementVNode)("div",{class:(0,n.normalizeClass)(["control is-expanded",{"is-loading":!f.selfiesStatus}])},[(0,n.withDirectives)((0,n.createElementVNode)("input",{id:"smiles-input",readonly:!f.selfiesStatus||null,"aria-label":"SMILES input",class:(0,n.normalizeClass)({input:!0,"is-danger":f.parserError}),spellcheck:"false",autocorrect:"off",type:"text",placeholder:f.selfiesStatus?"SMILES":f.loadingMessage,"onUpdate:modelValue":t[0]||(t[0]=e=>m.internalSMILES=e),autofocus:"",onKeyup:t[1]||(t[1]=(0,n.withKeys)((...t)=>e.updateSMILES&&e.updateSMILES(...t),["enter"]))},null,42,u),[[n.vModelText,m.internalSMILES]])],2)]),(0,n.createElementVNode)("div",p,[(0,n.createElementVNode)("div",{class:(0,n.normalizeClass)(["control is-expanded",{"is-loading":!f.selfiesStatus}])},[(0,n.withDirectives)((0,n.createElementVNode)("input",{id:"selfies-input",readonly:!f.selfiesStatus||null,"aria-label":"SELFIES input",class:(0,n.normalizeClass)({input:!0,"is-danger":f.parserError}),spellcheck:"false",autocorrect:"off",type:"text",placeholder:f.selfiesStatus?"SELFIES":f.loadingMessage,"onUpdate:modelValue":t[2]||(t[2]=e=>m.internalSELFIES=e),autofocus:"",onKeyup:t[3]||(t[3]=(0,n.withKeys)((...t)=>e.updateSELFIES&&e.updateSELFIES(...t),["enter"]))},null,42,c),[[n.vModelText,m.internalSELFIES]])],2)]),f.selfies_str.length>0?((0,n.openBlock)(),(0,n.createElementBlock)("p",d,[(0,n.createTextVNode)(" Shareable Link: "),(0,n.createElementVNode)("a",{href:f.url+"?s="+f.selfies_str,target:"_blank"},(0,n.toDisplayString)(f.url+"?s="+f.selfies_str),9,h)])):(0,n.createCommentVNode)("",!0)])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gTWBO:[function(){},{}],fAkCX:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4TxZV":[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("b001daf667040403")).__esModule&&(s=s.default),s.render=e("13f8d1c48288f3c4").render,e("7a7f7a8d596525ff").default(s),s.__scopeId="data-v-734670",s.__file="TfPrediction.vue",r.default=s},{b001daf667040403:"jOZkj","13f8d1c48288f3c4":"6YQNR","7a7f7a8d596525ff":"7dmuM","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jOZkj:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./TfResult"),a=s.interopDefault(n),o=e("../lib/tf-models"),i=e("./ModelCard.vue"),l=s.interopDefault(i),u=e("lodash-es");r.default={name:"TfPrediction",components:{TfResult:a.default,ModelCard:l.default},props:{sequence:String,url:String,adjective:String,modelNumber:Number,width:{type:Number,default:300}},data(){return{status:"loading",rnn:null,predictions:Array(this.modelNumber).fill({name:"Loading ",mu:0,var:0,high:0,low:0,weight:0})}},created:function(){this.debouncedPredict=(0,u.debounce)(this.predict,500)},mounted:async function(){this.rnn=[];for(let e=0;e<this.modelNumber;e++){let t=Object.freeze(await (0,o.loadModel)(this.url+"/"+e+"/model.json"));this.rnn.push(t)}},watch:{sequence:function(e){this.debouncedPredict(e)}},computed:{overall:function(){let e={name:"Waiting",mu:0,var:0,low:0,high:0},t=this.predictions.reduce((e,t)=>e+t.weight,0);return t>0&&(t==this.modelNumber?e.name="Overall ":e.name="Computing ",e.mu=this.predictions.reduce((e,t)=>e+t.mu*t.weight,0)/t,e.var=this.predictions.reduce((e,t)=>e+(t.var+t.mu*t.mu)*t.weight,0)/t-e.mu*e.mu,e.low=Math.pow(10,e.mu-Math.sqrt(e.var)),e.high=Math.pow(10,e.mu+Math.sqrt(e.var))),e}},methods:{predict:async function(e){if(e.length>=1){for(let e=0;e<this.modelNumber;e++)this.predictions[e]={...this.predictions[e],name:"Computing ",weight:0};let t=(0,o.seq2vec)(e);for(let e=0;e<this.rnn.length;e++){let r=await this.rnn[e].predict(t);if(r){let t=await (0,o.parseResult)(r),s={name:"Model "+(e+1),mu:t.mu,var:t.var,low:Math.pow(10,t.mu-Math.sqrt(t.var)),high:Math.pow(10,t.mu+Math.sqrt(t.var)),weight:1};this.predictions[e]=s}}t.dispose()}}}}},{"./TfResult":"eYBe8","../lib/tf-models":"2BsBf","./ModelCard.vue":"i29vj","lodash-es":"ld8fl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eYBe8:[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("3c7eb5ad9e1f97e")).__esModule&&(s=s.default),s.render=e("e41b393b2aa44e00").render,s.__cssModules=e("86ade316d95c0757").default,e("55d6585f16377c0b").default(s),s.__scopeId="data-v-d1ab3a",s.__file="TfResult.vue",r.default=s},{"3c7eb5ad9e1f97e":"48nRu",e41b393b2aa44e00:"7oyUy","86ade316d95c0757":"gHqs9","55d6585f16377c0b":"4NBtR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"48nRu":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default={name:"TfResult",props:{predictions:Array,overall:Object,ready:Boolean,title:String,adjective:String},data:()=>({display:!1})}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7oyUy":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>g);var n=e("vue");let a={class:"prediction-table"},o=/*#__PURE__*/(0,n.createElementVNode)("tr",null,[/*#__PURE__*/(0,n.createElementVNode)("td",{class:"has-text-left"},"Solubility"),/*#__PURE__*/(0,n.createElementVNode)("td",{class:"has-text-centered"}," mol / l"),/*#__PURE__*/(0,n.createElementVNode)("td",{class:"has-text-centered"}," logS")],-1),i={class:"has-text-left"},l={class:"has-text-centered"},u={class:"has-text-centered"},p=/*#__PURE__*/(0,n.createElementVNode)("td",null,null,-1),c={style:{"text-align":"center"}},d=/*#__PURE__*/(0,n.createElementVNode)("td",null,null,-1),h={class:"has-text-left"},f={class:"has-text-centered"},m={class:"has-text-centered"};function g(e,t,r,s,g,x){return(0,n.openBlock)(),(0,n.createElementBlock)("div",a,[(0,n.createElementVNode)("table",{class:(0,n.normalizeClass)(["table",{"has-background-white-ter":!r.ready}])},[(0,n.createElementVNode)("tbody",null,[o,(0,n.createElementVNode)("tr",{class:(0,n.normalizeClass)({"has-background-primary":"Overall "===r.overall.name,"has-background-warning":"Computing "===r.overall.name})},[(0,n.createElementVNode)("td",i,(0,n.toDisplayString)(r.overall.name),1),(0,n.createElementVNode)("td",l,[(0,n.createElementVNode)("span",null,(0,n.toDisplayString)(r.overall.low.toExponential(2))+" to "+(0,n.toDisplayString)(r.overall.high.toExponential(2)),1),(0,n.createTextVNode)("\xa0 ")]),(0,n.createElementVNode)("td",u,[(0,n.createElementVNode)("span",null,(0,n.toDisplayString)(r.overall.mu.toFixed(2))+" \xb1 "+(0,n.toDisplayString)(Math.sqrt(r.overall.var).toFixed(2)),1),(0,n.createTextVNode)("\xa0 ")])],2),(0,n.createElementVNode)("tr",{onClick:t[0]||(t[0]=e=>g.display=!g.display)},[p,(0,n.createElementVNode)("td",c,"Expand "+(0,n.toDisplayString)(g.display?"\uD83D\uDD3D":"▶️"),1),d]),g.display?((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,{key:0},(0,n.renderList)(r.predictions,e=>((0,n.openBlock)(),(0,n.createElementBlock)("tr",{class:(0,n.normalizeClass)({"has-background-warning":"Computing "===e.name})},[(0,n.createElementVNode)("td",h,(0,n.toDisplayString)(e.name),1),(0,n.createElementVNode)("td",f,[(0,n.createElementVNode)("span",null,(0,n.toDisplayString)(e.low.toExponential(2))+" to "+(0,n.toDisplayString)(e.high.toExponential(2)),1),(0,n.createTextVNode)("\xa0 ")]),(0,n.createElementVNode)("td",m,[(0,n.createElementVNode)("span",null,(0,n.toDisplayString)(e.mu.toFixed(2))+" \xb1 "+(0,n.toDisplayString)(Math.sqrt(e.var).toFixed(2)),1),(0,n.createTextVNode)("\xa0 ")])],2))),256)):(0,n.createCommentVNode)("",!0)])],2)])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gHqs9:[function(){},{}],"4NBtR":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2BsBf":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"loadModel",()=>i),s.export(r,"parseResult",()=>l),s.export(r,"seq2vec",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("@tensorflow/tfjs-layers");e("@tensorflow/tfjs-backend-webgl"),e("@tensorflow/tfjs-backend-cpu");var o=e("./vocab.json");async function i(e){let t=await (0,a.loadLayersModel)(e,// determine which fetch to use otherwise
{fetchFunc:(e,t=RequestInit)=>fetch(e,t)});return t}async function l(e){let t=n.squeeze(e[0]),r=n.squeeze(e[1]),s=await t.array(),a=await r.array();return t.dispose(),r.dispose(),e[0].dispose(),e[1].dispose(),{mu:s,var:a}}function u(e){let t=[],r=!1,s="";for(let n=0;n<e.length;n++)"["==e[n]?r=!0:"]"==e[n]?(r=!1,t.push(o.vocab_stoi["["+s+"]"]),s=""):"."==e[n]?t.push(o.vocab_stoi["."]):r&&(s+=e[n]);let a=n.tensor(t,[1,t.length]);return a}},{"@tensorflow/tfjs-core":"U1ela","@tensorflow/tfjs-layers":"9klHr","@tensorflow/tfjs-backend-webgl":"kCH7U","@tensorflow/tfjs-backend-cpu":"hvf4f","./vocab.json":"jinHn","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],U1ela:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Required side effectful code.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),e("./base_side_effects");// All exports from this package should be in base.
var n=e("./base");s.exportAll(n,r)},{"./base_side_effects":"l9BQJ","./base":"3n3SF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l9BQJ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Required side effectful code for tfjs-core
// Set up Engine and ENV
var s=e("./engine");e("./flags"),e("./platforms/platform_browser"),e("./platforms/platform_node");// Set up OpHandler
var n=e("./ops/buffer"),a=e("./ops/cast"),o=e("./ops/clone"),i=e("./ops/print"),l=e("./tensor");(0,s.getOrMakeEngine)();let u={buffer:n.buffer,cast:a.cast,clone:o.clone,print:i.print};(0,l.setOpHandler)(u)},{"./engine":"ldVRX","./flags":"dupjs","./platforms/platform_browser":"5QZ0x","./platforms/platform_node":"4J49Q","./ops/buffer":"bnrDL","./ops/cast":"7e2UZ","./ops/clone":"ljPJN","./ops/print":"juqZ2","./tensor":"j4V3y"}],ldVRX:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Engine",()=>x),s.export(r,"getOrMakeEngine",()=>b),s.export(r,"ENGINE",()=>y),/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */s.export(r,"add",()=>j);var n=e("./backends/backend"),a=e("./environment"),o=e("./global_util"),i=e("./kernel_names"),l=e("./kernel_registry"),u=e("./log"),p=e("./profiler"),c=e("./tape"),d=e("./tensor"),h=e("./tensor_util"),f=e("./util");function m(e){return null!=e.kernelName}class g{constructor(){// Public since optimizers will use it.
this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,// Number of nested tf.grad() statements when computing higher-order
// gradients. E.g. `1` for first-order gradients and `2` for second-order
// gradients. Used to track if the tape should be removed after a backprop.
this.gradientDepth=0,// Number of nested kernel calls. When kernel depth is greater than 1, we turn
// off the tape.
this.kernelDepth=0,this.scopeStack=[],/**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}}class x{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new g}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t],s=await this.initializeBackend(r).success;if(s){await this.setBackend(r);return}}throw Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){// If the backend hasn't been initialized but we have a registry entry for
// it, initialize it and return it.
if(!(e in this.registryFactory))return null;{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(u.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(null==this.registryFactory[e])throw Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:r}=this.initializeBackend(e),s=r?await t:t;if(!s)return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),// Reset the profiler.
this.profiler=new p.Profiler(this.backendInstance),!0}setupRegisteredKernels(){let e=(0,l.getKernelsForBackend)(this.backendName);e.forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){let t=(0,l.getKernelsForBackend)(e);t.forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}/**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw Error(`Cannot initialize backend ${e}, no registration found.`);try{let r=t.factory();/* Test if the factory returns a promise.
            Done in a more liberal way than
            previous 'Promise.resolve(backend)===backend'
            as we needed to account for custom Promise
            implementations (e.g. Angular) */if(!r||r instanceof n.KernelBackend||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,s=r.then(r=>// Outdated promise. Another backend was set in the meantime.
    !(t<this.pendingBackendInitId)&&(this.registry[e]=r,this.pendingBackendInit=null,!0)).catch(r=>// Outdated promise. Another backend was set in the meantime.
    !(t<this.pendingBackendInitId)&&(this.pendingBackendInit=null,u.warn(`Initialization of backend ${e} failed`),u.warn(r.stack||r.message),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return u.warn(`Initialization of backend ${e} failed`),u.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&// obsolete.
this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t],{success:s,asyncInit:n}=this.initializeBackend(r);if(n||s)return{name:r,asyncInit:n}}throw Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let r=this.state.tensorInfo.get(t),s=r.backend,n=this.readSync(t),a=s.refCount(t);// Delete the tensor from the old backend and move it to the new
// backend.
s.disposeData(t,!0),r.backend=e,e.move(t,n,r.shape,r.dtype,a),this.shouldCheckForMemLeaks()&&// detect memory leaks.
this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r,s=null;if(null==t){// Called with only 1 argument.
if("function"!=typeof e)throw Error("Please provide a function to tidy()");t=e}else{// Called with 2 arguments.
if("string"!=typeof e&&!(e instanceof String))throw Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e;// TODO(nsthorat,smilkov): Do operation logging and performance
// profiling.
}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(r),()=>((r=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r))}scopedRun(e,t,r){e();try{let e=r();return t(),e}catch(e){throw t(),e}}nextTensorId(){return x.nextTensorId++}nextVariableId(){return x.nextVariableId++}/**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     */clone(e){let t=y.runKernel(i.Identity,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>y.runKernel(i.Cast,{x:e},{dtype:"float32"})}),[],{}),t}/**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */runKernel(e,t,r){null==this.backendName&&// can be deferred until an op/ kernel is run).
// The below getter has side effects that will try to initialize the
// backend and set properties like this.backendName
// tslint:disable-next-line: no-unused-expression
this.backend;let s=null!=(0,l.getKernel)(e,this.backendName);if(!s)throw Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){let s=this.backend.numDataIds(),n=0;r.forEach(e=>{// Complex numbers allocate 3 data ids, one for 'real', one for
// 'imaginary', and one for the container that holds the former two.
n+="complex64"===e.dtype?3:1});// Account for the number of moves during kernel execution. A "data move"
// can happen in the middle of a kernel execution, placing a new (key,value)
// pair in the data storage. Since data moves have net zero effect (we
// always remove the data from the old backend), we have to cancel them out
// when detecting memory leaks.
let a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=s-t-n-a;if(o>0)throw Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}/**
     * Internal helper method to execute a kernel Func
     *
     * Use `runKernel` to execute kernels from outside of engine.
     */runKernelFunc(e){let t,r,s,n;let a=[],o=this.isTapeOn(),i=this.state.numBytes,u=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&// can be deferred until an op/ kernel is run).
// The below getter has side effects that will try to initialize the
// backend and set properties like this.backendName
// tslint:disable-next-line: no-unused-expression
this.backend;let p=m(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";// Create the kernelFunc from either a registered kernel OR passed in
// forward/backward functions (used by custom grad). In this context a
// kernelFunc wraps a kernel implementation with some bookkeeping.
if(m(e)){let{kernelName:t,inputs:n,attrs:i}=e;null==this.backendName&&// can be deferred until an op/ kernel is run).
// The below getter has side effects that will try to initialize the
// backend and set properties like this.backendName
// tslint:disable-next-line: no-unused-expression
this.backend;let u=(0,l.getKernel)(t,this.backendName);f.assert(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),r=()=>{let e=this.backend.numDataIds();s=u.kernelFunc({inputs:n,attrs:i,backend:this.backend});let r=Array.isArray(s)?s:[s];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,r);let l=r.map(e=>// todo (yassogba) remove this option (Tensor) when node backend
    // methods have been modularized and they all return tensorInfo.
    // TensorInfos do not have a rank attribute.
    null!=e.rank?e:this.makeTensorFromTensorInfo(e));// Save any required inputs and outputs.
// Do not save unless we are recording to the tape. Otherwise it would
// cause a mem leak since there would be no backprop for these tensors
// (which would otherwise dispose them).
if(o){let e=this.getTensorsForGradient(t,n,l);a=this.saveTensorsForBackwardMode(e)}return l}}else{let{forwardFunc:t}=e,n=e=>{o&&(a=e.map(e=>this.keep(this.clone(e))))};r=()=>{let e=this.backend.numDataIds();s=this.tidy(()=>t(this.backend,n));let r=Array.isArray(s)?s:[s];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(p,e,r),r}}//
// Run the kernelFunc. Optionally profiling it.
//
let{inputs:c,attrs:d}=e,h=m(e)?null:e.backwardsFunc;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(n=this.profiler.profileKernel(p,c,()=>r()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(n),t=n.outputs):t=r()}),o&&this.addTapeNode(p,c,t,h,a,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:p,bytesAdded:this.state.numBytes-i,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-u,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(e=>null!=c[e]?c[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:n.timeMs,extraInfo:n.extraInfo}),Array.isArray(s)?t:t[0]}/**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */saveTensorsForBackwardMode(e){let t=e.map(e=>this.keep(this.clone(e)));return t}/**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */getTensorsForGradient(e,t,r){let s=(0,l.getGradient)(e);if(null!=s){let e;let n=s.inputsToSave||[],a=s.outputsToSave||[];s.saveAllInputs?(f.assert(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),e=Object.keys(t).map(e=>t[e])):e=n.map(e=>t[e]);let o=r.filter((e,t)=>a[t]);return e.concat(o)}// We return an empty list rather than throw an error because the kernel we
// are looking up may not actually be relevant to backproping through the
// overall function
//
// See 'does not error if irrelevant (pruned) ops are missing grads' test
// in gradients_test.ts for an example.
return[]}/**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */makeTensor(e,t,r,s){if(null==e)throw Error("Values passed to engine.makeTensor() are null");r=r||"float32",s=s||this.backend;let n=e;"string"===r&&f.isString(e[0])&&(n=e.map(e=>f.encodeString(e)));let a=s.write(n,t,r),o=new d.Tensor(t,r,a,this.nextTensorId());// Count bytes for string tensors.
if(this.trackTensor(o,s),"string"===r){let e=this.state.tensorInfo.get(a),t=(0,f.bytesFromStringArray)(n);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}/**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     * @deprecated
     */makeTensorFromDataId(e,t,r,s){r=r||"float32";let n={dataId:e,shape:t,dtype:r};return this.makeTensorFromTensorInfo(n,s)}/**
     * Internal method used by backends. Makes a new tensor that is a wrapper
     * around an existing data id in TensorInfo. It doesn't create a new data id,
     * only increments the ref count used in memory tracking.
     */makeTensorFromTensorInfo(e,t){let{dataId:r,shape:s,dtype:n}=e,a=new d.Tensor(s,n,r,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,r,s){r=r||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));let n=new d.Variable(e,t,r,this.nextTensorId());if(null!=this.state.registeredVariables[n.name])throw Error(`Variable with name ${n.name} was already registered`);return this.state.registeredVariables[n.name]=n,this.incRef(n,this.backend),n}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;// Bytes for complex numbers are counted by their components. Bytes for
// string tensors are counted when writing values.
let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*f.bytesPerElement(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof d.Variable||this.track(e)}// Track the tensor by dataId and increase the refCount for the dataId in the
// backend.
// TODO(pyu10055): This is currently used by makeVariable method, to increase
// refCount on the backend for the dataId. It can potentially be replaced with
// Identity op indead of calling backend directly.
incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);// Don't count bytes for complex numbers as they are counted by their
// components.
if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*f.bytesPerElement(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend);// TODO(nsthorat): Construct an error and save the stack trace for
// debugging when in debug mode. Creating a stack trace is too expensive
// to do unconditionally.
}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,r=this.state.numTensors;for(let s of(this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r,this.state.activeProfile.kernels))s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,r,s,n,a){let o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:n},i=(0,l.getGradient)(e);null!=i&&(s=i.gradFunc),null!=s&&(o.gradient=e=>(// TODO(smilkov): To optimize back-prop, pass dys that are not used in
    // the backprop graph to the user as null instead of zeros
    e=e.map((e,t)=>{if(null==e){let e=r[t],s=f.makeZerosTypedArray(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e}),s(e.length>1?e:e[0],n,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}/**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}/**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */endScope(e){let t=(0,h.getTensorsInContainer)(e),r=new Set(t.map(e=>e.id));// Dispose the arrays tracked in this scope.
for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];t.kept||r.has(t.id)||t.dispose()}let s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],// Track the current result in the parent scope.
t.forEach(e=>{e.kept||e.scopeId!==s.id||this.track(e)})}/**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */gradients(e,t,r,s=!1){if(f.assert(t.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);let n=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));f.assert(n instanceof d.Tensor,()=>"The result y returned by f() must be a tensor.");// Filter out the nodes that don't connect x => y.
let a=(0,c.getFilteredNodesXToY)(this.state.activeTape,t,n);if(!s&&0===a.length&&t.length>0)throw Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let e={};e[n.id]=null==r?function(e){let t=(0,f.makeOnesTypedArray)((0,f.sizeFromShape)(e),"float32");return y.makeTensor(t,e,"float32")}(n.shape):r,// Backprop gradients through the filtered nodes.
(0,c.backpropagateGradients)(e,a,e=>this.tidy(e),j);let s=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(// This means that we are not computing higher-order gradients
// and can clean up the tape.
this.state.activeTape.forEach(e=>{for(let t of e.saved)t.dispose()}),this.state.activeTape=null),{value:n,grads:s}})}customGrad(e){return f.assert(f.isFunction(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let r;f.assert(t.every(e=>e instanceof d.Tensor),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let s={};return t.forEach((e,t)=>{s[t]=e}),this.runKernelFunc({forwardFunc:(s,n)=>(r=e(...[...t,n]),f.assert(r.value instanceof d.Tensor,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),f.assert(f.isFunction(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(e,s)=>{let n=r.gradFunc(e,s),a=Array.isArray(n)?n:[n];f.assert(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),f.assert(a.every(e=>e instanceof d.Tensor),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let o={};return a.forEach((e,t)=>{o[t]=()=>e}),o},inputs:s})}}readSync(e){// Route the read to the correct backend.
let t=this.state.tensorInfo.get(e);return t.backend.readSync(e)}read(e){// Route the read to the correct backend.
let t=this.state.tensorInfo.get(e);return t.backend.read(e)}readToGPU(e,t){// Route the read to the correct backend.
let r=this.state.tensorInfo.get(e);return r.backend.readToGPU(e,t)}async time(e){let t=(0,f.now)(),r=await this.backend.time(e);return r.wallMs=(0,f.now)()-t,r}/**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}/**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */reset(){for(let e in // Make any pending promise obsolete.
this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new g,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function b(){let e=(0,o.getGlobalNamespace)();if(null==e._tfengine){let t=new a.Environment(e);e._tfengine=new x(t)}return(0,a.setEnvironmentGlobal)(e._tfengine.ENV),// Tell the current tensor interface that the global engine is responsible
// for tracking.
(0,d.setTensorTracker)(()=>e._tfengine),e._tfengine}x.nextTensorId=0,x.nextVariableId=0;let y=b();function j(e,t){return y.runKernel(i.Add,{a:e,b:t})}},{"./backends/backend":"8QMPY","./environment":"j2c6C","./global_util":"1G3vY","./kernel_names":"3i501","./kernel_registry":"dGfMo","./log":"1unlX","./profiler":"5BU6Q","./tape":"c4Dut","./tensor":"j4V3y","./tensor_util":"5jYPc","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8QMPY":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EPSILON_FLOAT32",()=>n),s.export(r,"EPSILON_FLOAT16",()=>a),/** Convenient class for storing tensor-related data. */s.export(r,"DataStorage",()=>o),/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */s.export(r,"KernelBackend",()=>i);let n=1e-7,a=1e-4;class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class i{refCount(e){return l("refCount")}incRef(e){return l("incRef")}timerAvailable(){return!0}time(e){return l("time")}read(e){return l("read")}readSync(e){return l("readSync")}readToGPU(e,t){return l("readToGPU")}numDataIds(){return l("numDataIds")}disposeData(e,t){return l("disposeData")}write(e,t,r){return l("write")}move(e,t,r,s,n){return l("move")}memory(){return l("memory")}/** Returns the highest precision for floats in bits (e.g. 16 or 32) */floatPrecision(){return l("floatPrecision")}/** Returns the smallest representable number.  */epsilon(){return 32===this.floatPrecision()?n:a}dispose(){return l("dispose")}}function l(e){throw Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j2c6C:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"Environment",()=>i),s.export(r,"getQueryParams",()=>l),/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"env",()=>u),s.export(r,"ENV",()=>p),s.export(r,"setEnvironmentGlobal",()=>c);var n=e("./util_base"),a=arguments[3];// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
let o="tfjsflags";class i{// tslint:disable-next-line: no-any
constructor(e){this.global=a,this.flags={},this.flagRegistry={},this.urlFlags={},// Jasmine spies on this in 'environment_test.ts'
this.getQueryParams=l,this.populateURLFlags()}setPlatform(e,t){null==this.platform||p.getBool("IS_TEST")||p.getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=e,this.platform=t}registerFlag(e,t,r){// Override the flag value from the URL. This has to happen here because
// the environment is initialized before flags get registered.
if(this.flagRegistry[e]={evaluationFn:t,setHook:r},null!=this.urlFlags[e]){let t=this.urlFlags[e];p.getBool("IS_TEST")||p.getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if((0,n.isPromise)(t))throw Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}// For backwards compatibility.
get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);if(o in e){let t=e[o].split(",");t.forEach(e=>{let[t,r]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(`${+t}`===t)return+t;throw Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,r)})}}}function l(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...r)=>{var s,n;return s=r[0],n=r[1],t[decodeURIComponent(s)]=decodeURIComponent(n||""),r.join("=")}),t}function u(){return p}let p=null;function c(e){p=e}},{"./util_base":"hdTgZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hdTgZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */// tslint:disable-next-line:no-any
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e){let t=e.length,r=0;// While there are elements in the array
for(;t>0;)// Pick a random index
r=Math.random()*t|0,// And swap the last element with it
l(e,--t,r)}function a(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let r=e.length,s=0;// While there are elements in the array
for(;r>0;)// Pick a random index
s=Math.random()*r|0,// And swap the last element of each array with it
l(e,--r,s),l(t,r,s)}function o(e,t,r){return Math.max(e,Math.min(t,r))}function i(e){return e%2==0?e:e+1}function l(e,t,r){let s=e[t];e[t]=e[r],e[r]=s}function u(e){let t=0;for(let r=0;r<e.length;r++)t+=e[r];return t}function p(e,t){let r=Math.random();return t*r+(1-r)*e}function c(e,t){let r=0;for(let s=0;s<e.length;s++){let n=Number(e[s])-Number(t[s]);r+=n*n}return r}function d(e,t){if(!e)throw Error("string"==typeof t?t:t())}function h(e,t,r=""){d(x(e,t),()=>r+` Shapes ${e} and ${t} must match`)}function f(e){d(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function m(e){if(0===e.length)return 1;let t=e[0];for(let r=1;r<e.length;r++)t*=e[r];return t}function g(e){return 0===e.length}function x(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}function b(e){return e%1==0}function y(e){// tslint:disable-next-line:no-any
if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;{if(e===-1/0)return -1;let t=Math.exp(2*e);return(t-1)/(t+1)}}function j(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function _(e){let t=new Uint32Array(e);for(let r=0;r<e;++r)t[r]=r;return n(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function I(e,t=e=>0,r,s=setTimeout){return new Promise((n,a)=>{let o=0,i=()=>{if(e()){n();return}o++;let l=t(o);if(null!=r&&o>=r){a();return}s(i,l)};i()})}function w(e,t){let r=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)r*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==r)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===r)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%r!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${r}`);let n=e.slice();return n[s]=t/r,n}function C(e,t){let r=t.length;// Handle negative axis.
return(// Check for valid range
d(// Normalize input
(e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-r&&e<r),()=>`All values in axis param must be in range [-${r}, ${r}) but got axis ${e}`),// Check for only integers
d(e.every(e=>b(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?r+e:e))}function S(e,t){let r=[],s=[],n=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||n?null:C(t,e).sort(),o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(r.push(e[t]),s.push(t)),a[o]<=t&&o++}1!==e[t]&&(r.push(e[t]),s.push(t))}return{newShape:r,keptDims:s}}function T(e,t){let r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else if("bool"===e)r=new Uint8Array(t);else throw Error(`Unknown data type ${e}`);return r}function N(e,t){let r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else if("bool"===e)r=new Uint8Array(t);else if("string"===e)r=Array(t);else throw Error(`Unknown data type ${e}`);return r}function E(e,t){for(let r=0;r<e.length;r++){let s=e[r];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function F(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function A(e,t){return"complex64"!==t&&("float32"!==t||"complex64"===e)&&("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)}function R(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function D(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw Error(`Unknown dtype ${e}`)}function $(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function P(e){return"string"==typeof e||e instanceof String}function z(e){return"boolean"==typeof e}function M(e){return"number"==typeof e}function O(e){return!!(e&&e.constructor&&e.call&&e.apply)}function L(e,t){for(let r=t;r<e;++r)if(e%r==0)return r;return e}function B(e){let t=e.length;if(t<2)return[];// Last dimension has implicit stride of 1, thus having D-1 (instead of D)
// strides.
let r=Array(t-1);r[t-2]=e[t-1];for(let s=t-3;s>=0;--s)r[s]=r[s+1]*e[s+1];return r}function U(e,t,r=!1){if(0===e.length)return t[0];let s=e.reduce((e,t)=>e*t)*(r?2:1);if(0===s)return[];if(s!==t.length)throw Error(`[${e}] does not match the input size ${t.length}${r?" for a complex tensor":""}.`);return function e(t,r,s,n=!1){let a=[];if(1===r.length){let e=r[0]*(n?2:1);for(let r=0;r<e;r++)a[r]=s[t+r]}else{let o=r[0],i=r.slice(1),l=i.reduce((e,t)=>e*t)*(n?2:1);for(let r=0;r<o;r++)a[r]=e(t+r*l,i,s,n)}return a}(0,e,t,r)}function V(e,t){let r=G(e,t);for(let e=0;e<r.length;e++)r[e]=1;return r}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw Error(`Unknown data type ${t}`)}function W(e,t){let r=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return U(e,new Float32Array(r));if("int32"===t)return U(e,new Int32Array(r));if("bool"===t)return U(e,new Uint8Array(r));throw Error(`Unknown data type ${t}`)}function q(e){e.forEach(t=>{d(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function K(e,t,r){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=r[t]*e[t];return s}function H(e,t,r){if(0===t)return[];if(1===t)return[e];let s=Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/r[t]),e-=s[t]*r[t];return s[s.length-1]=e,s}function X(e){//  We chose to not use 'obj instanceOf Promise' for two reasons:
//  1. It only reliably works for es6 Promise, not other Promise
//  implementations.
//  2. It doesn't work with framework that uses zone.js. zone.js monkey
//  patch the async calls, so it is possible the obj (patched) is
//  comparing to a pre-patched Promise.
return e&&e.then&&"function"==typeof e.then}s.defineInteropFlag(r),s.export(r,"shuffle",()=>n),/**
 * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1,2,3,4,5];
 * const b = [11,22,33,44,55];
 * tf.util.shuffleCombo(a, b);
 * console.log(a, b);
 * ```
 *
 * @param array The first array to shuffle in-place.
 * @param array2 The second array to shuffle in-place with the same permutation
 *     as the first array.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"shuffleCombo",()=>a),/** Clamps a value to a specified range. */s.export(r,"clamp",()=>o),s.export(r,"nearestLargerEven",()=>i),s.export(r,"swap",()=>l),s.export(r,"sum",()=>u),/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */s.export(r,"randUniform",()=>p),/** Returns the squared Euclidean distance between two vectors. */s.export(r,"distSquared",()=>c),/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"assert",()=>d),s.export(r,"assertShapesMatch",()=>h),s.export(r,"assertNonNull",()=>f),// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"flatten",()=>function e(t,r=[],s=!1){if(null==r&&(r=[]),Array.isArray(t)||R(t)&&!s)for(let n=0;n<t.length;++n)e(t[n],r,s);else r.push(t);return r}),/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"sizeFromShape",()=>m),s.export(r,"isScalarShape",()=>g),s.export(r,"arraysEqual",()=>x),s.export(r,"isInt",()=>b),s.export(r,"tanh",()=>y),s.export(r,"sizeToSquarishShape",()=>j),/**
 * Creates a new array with randomized indices to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indices to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"createShuffledIndices",()=>_),s.export(r,"rightPad",()=>k),s.export(r,"repeatedTry",()=>I),/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */s.export(r,"inferFromImplicitShape",()=>w),s.export(r,"parseAxisParam",()=>C),/** Reduces the shape by removing all dimensions of shape 1. */s.export(r,"squeezeShape",()=>S),s.export(r,"getTypedArrayFromDType",()=>T),s.export(r,"getArrayFromDType",()=>N),s.export(r,"checkConversionForErrors",()=>E),/** Returns true if the dtype is valid. */s.export(r,"isValidDtype",()=>F),/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */s.export(r,"hasEncodingLoss",()=>A),s.export(r,"isTypedArray",()=>R),s.export(r,"bytesPerElement",()=>D),/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS
 * is not possible since it depends on the encoding of the html page that
 * serves the website.
 */s.export(r,"bytesFromStringArray",()=>$),/** Returns true if the value is a string. */s.export(r,"isString",()=>P),s.export(r,"isBoolean",()=>z),s.export(r,"isNumber",()=>M),s.export(r,"inferDtype",()=>function e(t){if(Array.isArray(t))return e(t[0]);if(t instanceof Float32Array);else if(t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray)return"int32";else if(M(t));else if(P(t))return"string";else if(z(t))return"bool";return"float32"}),s.export(r,"isFunction",()=>O),s.export(r,"nearestDivisor",()=>L),s.export(r,"computeStrides",()=>B),// Provide a nested array of TypedArray in given shape.
s.export(r,"toNestedArray",()=>U),s.export(r,"makeOnesTypedArray",()=>V),s.export(r,"makeZerosTypedArray",()=>G),/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */s.export(r,"makeZerosNestedTypedArray",()=>W),s.export(r,"assertNonNegativeIntegerDimensions",()=>q),/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */s.export(r,"locToIndex",()=>K),/**
 * Computes the location (multidimensional index) in a
 * tensor/multidimentional array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */s.export(r,"indexToLoc",()=>H),/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */// tslint:disable-next-line: no-any
s.export(r,"isPromise",()=>X)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1G3vY":[function(e,t,r){let s;/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),// tslint:disable-next-line:no-any
n.export(r,"getGlobalNamespace",()=>i),/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */n.export(r,"getGlobal",()=>l);var a=arguments[3],o=e("585141946453e563");function i(){if(null==s){// tslint:disable-next-line:no-any
let e;if("undefined"!=typeof window)e=window;else if(void 0!==a)e=a;else if(void 0!==o)e=o;else if("undefined"!=typeof self)e=self;else throw Error("Could not find a global object");s=e}return s}function l(e,t){let r=// tslint:disable-next-line:no-any
function(){let e=i();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(r.has(e))return r.get(e);{let s=t();return r.set(e,s),r.get(e)}}},{"585141946453e563":"aBjM4","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aBjM4:[function(e,t,r){},{}],"3i501":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Abs",()=>n),s.export(r,"Acos",()=>a),s.export(r,"Acosh",()=>o),s.export(r,"Add",()=>i),s.export(r,"AddN",()=>l),s.export(r,"All",()=>u),s.export(r,"Any",()=>p),s.export(r,"ArgMax",()=>c),s.export(r,"ArgMin",()=>d),s.export(r,"Asin",()=>h),s.export(r,"Asinh",()=>f),s.export(r,"Atan",()=>m),s.export(r,"Atanh",()=>g),s.export(r,"Atan2",()=>x),s.export(r,"AvgPool",()=>b),s.export(r,"AvgPoolGrad",()=>y),s.export(r,"AvgPool3D",()=>j),s.export(r,"AvgPool3DGrad",()=>_),s.export(r,"BatchMatMul",()=>k),s.export(r,"BatchToSpaceND",()=>I),s.export(r,"Bincount",()=>w),s.export(r,"BroadcastTo",()=>C),s.export(r,"BroadcastArgs",()=>S),s.export(r,"Cast",()=>T),s.export(r,"Ceil",()=>N),s.export(r,"ClipByValue",()=>E),s.export(r,"Complex",()=>F),s.export(r,"ComplexAbs",()=>A),s.export(r,"Concat",()=>R),s.export(r,"Conv2D",()=>D),s.export(r,"Conv2DBackpropFilter",()=>$),s.export(r,"Conv2DBackpropInput",()=>P),s.export(r,"Conv3D",()=>z),s.export(r,"Conv3DBackpropFilterV2",()=>M),s.export(r,"Conv3DBackpropInputV2",()=>O),s.export(r,"Cos",()=>L),s.export(r,"Cosh",()=>B),s.export(r,"Cumprod",()=>U),s.export(r,"Cumsum",()=>V),s.export(r,"CropAndResize",()=>G),s.export(r,"DenseBincount",()=>W),s.export(r,"DepthToSpace",()=>q),s.export(r,"DepthwiseConv2dNative",()=>K),s.export(r,"DepthwiseConv2dNativeBackpropFilter",()=>H),s.export(r,"DepthwiseConv2dNativeBackpropInput",()=>X),s.export(r,"Diag",()=>Y),s.export(r,"Dilation2D",()=>Z),s.export(r,"Dilation2DBackpropInput",()=>J),s.export(r,"Dilation2DBackpropFilter",()=>Q),s.export(r,"RealDiv",()=>ee),s.export(r,"Einsum",()=>et),s.export(r,"Elu",()=>er),s.export(r,"EluGrad",()=>es),s.export(r,"Erf",()=>en),s.export(r,"Equal",()=>ea),s.export(r,"Exp",()=>eo),s.export(r,"ExpandDims",()=>ei),s.export(r,"Expm1",()=>el),s.export(r,"FFT",()=>eu),s.export(r,"Fill",()=>ep),s.export(r,"FlipLeftRight",()=>ec),s.export(r,"Floor",()=>ed),s.export(r,"FloorDiv",()=>eh),s.export(r,"FusedBatchNorm",()=>ef),s.export(r,"GatherV2",()=>em),s.export(r,"GatherNd",()=>eg),s.export(r,"Greater",()=>ex),s.export(r,"GreaterEqual",()=>ev),s.export(r,"Identity",()=>eb),s.export(r,"IFFT",()=>ey),s.export(r,"Imag",()=>ej),s.export(r,"IsFinite",()=>e_),s.export(r,"IsInf",()=>ek),s.export(r,"IsNan",()=>eI),s.export(r,"LeakyRelu",()=>ew),s.export(r,"Less",()=>eC),s.export(r,"LessEqual",()=>eS),s.export(r,"LinSpace",()=>eT),s.export(r,"Log",()=>eN),s.export(r,"Log1p",()=>eE),s.export(r,"LogicalAnd",()=>eF),s.export(r,"LogicalNot",()=>eA),s.export(r,"LogicalOr",()=>eR),s.export(r,"LogicalXor",()=>eD),s.export(r,"LogSoftmax",()=>e$),s.export(r,"LowerBound",()=>eP),s.export(r,"LRN",()=>ez),s.export(r,"LRNGrad",()=>eM),s.export(r,"Max",()=>eO),s.export(r,"Maximum",()=>eL),s.export(r,"MaxPool",()=>eB),s.export(r,"MaxPoolGrad",()=>eU),s.export(r,"MaxPool3D",()=>eV),s.export(r,"MaxPool3DGrad",()=>eG),s.export(r,"MaxPoolWithArgmax",()=>eW),s.export(r,"Mean",()=>eq),s.export(r,"Min",()=>eK),s.export(r,"Minimum",()=>eH),s.export(r,"MirrorPad",()=>eX),s.export(r,"Mod",()=>eY),s.export(r,"Multinomial",()=>eZ),s.export(r,"Multiply",()=>eJ),s.export(r,"Neg",()=>eQ),s.export(r,"NotEqual",()=>e0),s.export(r,"NonMaxSuppressionV3",()=>e1),s.export(r,"NonMaxSuppressionV4",()=>e2),s.export(r,"NonMaxSuppressionV5",()=>e3),s.export(r,"OnesLike",()=>e4),s.export(r,"OneHot",()=>e5),s.export(r,"Pack",()=>e6),s.export(r,"PadV2",()=>e9),s.export(r,"Pool",()=>e8),s.export(r,"Pow",()=>e7),s.export(r,"Prelu",()=>te),s.export(r,"Prod",()=>tt),s.export(r,"RaggedGather",()=>tr),s.export(r,"RaggedTensorToTensor",()=>ts),s.export(r,"Range",()=>tn),s.export(r,"Real",()=>ta),s.export(r,"Reciprocal",()=>to),s.export(r,"Relu",()=>ti),s.export(r,"Reshape",()=>tl),s.export(r,"ResizeNearestNeighbor",()=>tu),s.export(r,"ResizeNearestNeighborGrad",()=>tp),s.export(r,"ResizeBilinear",()=>tc),s.export(r,"ResizeBilinearGrad",()=>td),s.export(r,"Relu6",()=>th),s.export(r,"Reverse",()=>tf),s.export(r,"Round",()=>tm),s.export(r,"Rsqrt",()=>tg),s.export(r,"ScatterNd",()=>tx),s.export(r,"SearchSorted",()=>tv),s.export(r,"Select",()=>tb),s.export(r,"Selu",()=>ty),s.export(r,"Slice",()=>tj),s.export(r,"Sin",()=>t_),s.export(r,"Sinh",()=>tk),s.export(r,"Sign",()=>tI),s.export(r,"Sigmoid",()=>tw),s.export(r,"Softplus",()=>tC),s.export(r,"Sqrt",()=>tS),s.export(r,"Sum",()=>tT),s.export(r,"SpaceToBatchND",()=>tN),s.export(r,"SplitV",()=>tE),s.export(r,"Softmax",()=>tF),s.export(r,"SparseFillEmptyRows",()=>tA),s.export(r,"SparseReshape",()=>tR),s.export(r,"SparseSegmentMean",()=>tD),s.export(r,"SparseSegmentSum",()=>t$),s.export(r,"SparseToDense",()=>tP),s.export(r,"SquaredDifference",()=>tz),s.export(r,"Square",()=>tM),s.export(r,"StridedSlice",()=>tO),s.export(r,"StringNGrams",()=>tL),s.export(r,"StringSplit",()=>tB),s.export(r,"StringToHashBucketFast",()=>tU),s.export(r,"Sub",()=>tV),s.export(r,"Tan",()=>tG),s.export(r,"Tanh",()=>tW),s.export(r,"Tile",()=>tq),s.export(r,"TopK",()=>tK),s.export(r,"Transform",()=>tH),s.export(r,"Transpose",()=>tX),s.export(r,"Unique",()=>tY),s.export(r,"Unpack",()=>tZ),s.export(r,"UnsortedSegmentSum",()=>tJ),s.export(r,"UpperBound",()=>tQ),s.export(r,"ZerosLike",()=>t0),s.export(r,"Step",()=>t1),s.export(r,"FromPixels",()=>t2),s.export(r,"RotateWithOffset",()=>t3),s.export(r,"_FusedMatMul",()=>t4),s.export(r,"FusedConv2D",()=>t5),s.export(r,"FusedDepthwiseConv2D",()=>t6);let n="Abs",a="Acos",o="Acosh",i="Add",l="AddN",u="All",p="Any",c="ArgMax",d="ArgMin",h="Asin",f="Asinh",m="Atan",g="Atanh",x="Atan2",b="AvgPool",y="AvgPoolGrad",j="AvgPool3D",_="AvgPool3DGrad",k="BatchMatMul",I="BatchToSpaceND",w="Bincount",C="BroadcastTo",S="BroadcastArgs",T="Cast",N="Ceil",E="ClipByValue",F="Complex",A="ComplexAbs",R="Concat",D="Conv2D",$="Conv2DBackpropFilter",P="Conv2DBackpropInput",z="Conv3D",M="Conv3DBackpropFilterV2",O="Conv3DBackpropInputV2",L="Cos",B="Cosh",U="Cumprod",V="Cumsum",G="CropAndResize",W="DenseBincount",q="DepthToSpace",K="DepthwiseConv2dNative",H="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",Y="Diag",Z="Dilation2D",J="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",ee="RealDiv",et="Einsum",er="Elu",es="EluGrad",en="Erf",ea="Equal",eo="Exp",ei="ExpandDims",el="Expm1",eu="FFT",ep="Fill",ec="FlipLeftRight",ed="Floor",eh="FloorDiv",ef="FusedBatchNorm",em="GatherV2",eg="GatherNd",ex="Greater",ev="GreaterEqual",eb="Identity",ey="IFFT",ej="Imag",e_="IsFinite",ek="IsInf",eI="IsNan",ew="LeakyRelu",eC="Less",eS="LessEqual",eT="LinSpace",eN="Log",eE="Log1p",eF="LogicalAnd",eA="LogicalNot",eR="LogicalOr",eD="LogicalXor",e$="LogSoftmax",eP="LowerBound",ez="LRN",eM="LRNGrad",eO="Max",eL="Maximum",eB="MaxPool",eU="MaxPoolGrad",eV="MaxPool3D",eG="MaxPool3DGrad",eW="MaxPoolWithArgmax",eq="Mean",eK="Min",eH="Minimum",eX="MirrorPad",eY="Mod",eZ="Multinomial",eJ="Multiply",eQ="Neg",e0="NotEqual",e1="NonMaxSuppressionV3",e2="NonMaxSuppressionV4",e3="NonMaxSuppressionV5",e4="OnesLike",e5="OneHot",e6="Pack",e9="PadV2",e8="Pool",e7="Pow",te="Prelu",tt="Prod",tr="RaggedGather",ts="RaggedTensorToTensor",tn="Range",ta="Real",to="Reciprocal",ti="Relu",tl="Reshape",tu="ResizeNearestNeighbor",tp="ResizeNearestNeighborGrad",tc="ResizeBilinear",td="ResizeBilinearGrad",th="Relu6",tf="Reverse",tm="Round",tg="Rsqrt",tx="ScatterNd",tv="SearchSorted",tb="Select",ty="Selu",tj="Slice",t_="Sin",tk="Sinh",tI="Sign",tw="Sigmoid",tC="Softplus",tS="Sqrt",tT="Sum",tN="SpaceToBatchND",tE="SplitV",tF="Softmax",tA="SparseFillEmptyRows",tR="SparseReshape",tD="SparseSegmentMean",t$="SparseSegmentSum",tP="SparseToDense",tz="SquaredDifference",tM="Square",tO="StridedSlice",tL="StringNGrams",tB="StringSplit",tU="StringToHashBucketFast",tV="Sub",tG="Tan",tW="Tanh",tq="Tile",tK="TopK",tH="Transform",tX="Transpose",tY="Unique",tZ="Unpack",tJ="UnsortedSegmentSum",tQ="UpperBound",t0="ZerosLike",t1="Step",t2="FromPixels",t3="RotateWithOffset",t4="_FusedMatMul",t5="FusedConv2D",t6="FusedDepthwiseConv2D"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dGfMo:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */s.export(r,"getKernel",()=>u),/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */s.export(r,"getGradient",()=>p),s.export(r,"getKernelsForBackend",()=>c),/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */s.export(r,"registerKernel",()=>d),/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */s.export(r,"registerGradient",()=>h),/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */s.export(r,"unregisterKernel",()=>f),/** Removes the registered gradient from the global registry. */s.export(r,"unregisterGradient",()=>m),/**
 * Finds kernels that have already been registered to a backend and re-registers
 * them for a new backend. Useful for registering custom backends.
 * @param registeredBackendName Already registered backend.
 * @param newBackendName New backend.
 */s.export(r,"copyRegisteredKernels",()=>g);var n=e("./environment"),a=e("./global_util"),o=e("./log");let i=(0,a.getGlobal)("kernelRegistry",()=>new Map),l=(0,a.getGlobal)("gradRegistry",()=>new Map);function u(e,t){let r=x(e,t);return i.get(r)}function p(e){return l.get(e)}function c(e){let t=i.entries(),r=[];for(;;){let{done:s,value:n}=t.next();if(s)break;let[a,o]=n,[i]=a.split("_");i===e&&r.push(o)}return r}function d(e){let{kernelName:t,backendName:r}=e,s=x(t,r);i.has(s)&&o.warn(`The kernel '${t}' for backend '${r}' is already registered`),i.set(s,e)}function h(e){let{kernelName:t}=e;l.has(t)&&(0,n.env)().getBool("DEBUG")&&o.warn(`Overriding the gradient for '${t}'`),l.set(t,e)}function f(e,t){let r=x(e,t);if(!i.has(r))throw Error(`The kernel '${e}' for backend '${t}' is not registered`);i.delete(r)}function m(e){if(!l.has(e))throw Error(`The gradient '${e}' for backend is not registered`);l.delete(e)}function g(e,t){let r=c(e);r.forEach(e=>{let r=Object.assign({},e,{backendName:t});d(r)})}function x(e,t){return`${t}_${e}`}},{"./environment":"j2c6C","./global_util":"1G3vY","./log":"1unlX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1unlX":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"warn",()=>a),s.export(r,"log",()=>o);var n=e("./environment");function a(...e){(0,n.env)().getBool("IS_TEST")||(0,n.env)().getBool("PROD")||console.warn(...e)}function o(...e){(0,n.env)().getBool("IS_TEST")||(0,n.env)().getBool("PROD")||console.log(...e)}},{"./environment":"j2c6C","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5BU6Q":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Profiler",()=>o),s.export(r,"checkComputationForErrors",()=>i),s.export(r,"Logger",()=>l);var n=e("./environment"),a=e("./util");class o{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new l)}profileKernel(e,t,r){let s,o;let l=()=>{s=r()},u=a.now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(l);else{for(let e of(l(),s))e.dataSync();o=Promise.resolve({kernelMs:a.now()-u})}if((0,n.env)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){let r=s[t];// Dangling promise here because we don't want to propagate up
// asynchronicity.
r.data().then(t=>{i(t,r.dtype,e)})}let p={kernelName:e,outputs:s,inputs:t,timeMs:o.then(e=>e.kernelMs),extraInfo:o.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")};return p}logKernelProfile(e){let{kernelName:t,outputs:r,timeMs:s,inputs:n,extraInfo:a}=e;r.forEach(e=>{Promise.all([e.data(),s,a]).then(r=>{this.logger.logKernelProfile(t,e,r[0],r[1],n,r[2])})})}}function i(e,t,r){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){let s=e[t];if(isNaN(s)||!isFinite(s))return(// Throwing custom exception so behavior is testable.
console.warn(`Found ${s} in the result of '${r}'`),!0)}return!1}class l{logKernelProfile(e,t,r,s,n,o){let i="number"==typeof s?a.rightPad(`${s}ms`,9):s.error,l=a.rightPad(e,25),u=t.rank,p=t.size,c=a.rightPad(t.shape.toString(),14),d="";for(let e in n){let r=n[e];if(null!=r){// The input might be a non-tensor (e.g HTMLImageElement), in which case
// we claim the output shape as input shape.
let s=r.shape||t.shape,n=s.length;d+=`${e}: ${n}D ${n>0?s:""} `}}console.log(`%c${l}	%c${i}	%c${u}D ${c}	%c${p}	%c${d}	%c${o}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}},{"./environment":"j2c6C","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6bzqD":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Create typed array for scalar value. Used for storing in `DataStorage`.
 */s.export(r,"createScalarValue",()=>i),s.export(r,"toTypedArray",()=>l),/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */s.export(r,"now",()=>u),/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */s.export(r,"fetch",()=>p),/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */s.export(r,"encodeString",()=>c),/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */s.export(r,"decodeString",()=>d);var n=e("./environment"),a=e("./util_base");s.exportAll(a,r);var o=e("./hash_util");function i(e,t){return"string"===t?c(e):l([e],t)}function l(e,t){var r;if("string"===t)throw Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.flatten(e)),(0,n.env)().getBool("DEBUG")&&a.checkConversionForErrors(e,t),(r=e)instanceof Float32Array&&"float32"===t||r instanceof Int32Array&&"int32"===t||r instanceof Uint8Array&&"bool"===t)return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let r=0;r<t.length;++r)0!==Math.round(e[r])&&(t[r]=1);return t}throw Error(`Unknown data type ${t}`)}function u(){return(0,n.env)().platform.now()}function p(e,t){return(0,n.env)().platform.fetch(e,t)}function c(e,t="utf-8"){return t=t||"utf-8",(0,n.env)().platform.encode(e,t)}function d(e,t="utf-8"){return t=t||"utf-8",(0,n.env)().platform.decode(e,t)}s.exportAll(o,r)},{"./environment":"j2c6C","./util_base":"hdTgZ","./hash_util":"3qRxz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3qRxz":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Workaround for allowing cjs module to be included in bundle created by
// rollup.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"hexToLong",()=>o),s.export(r,"fingerPrint64",()=>g);var n=e("long");// tslint:disable-next-line
let a=n.default||n;function o(e){return a.fromString(e,!0,16)}// Some primes between 2^63 and 2^64 for various uses.
// Hex 0xc3a5c85c97cb3127
let i=o("c3a5c85c97cb3127"),l=o("b492b66fbe98f273"),u=o("9ae16a3b2f90404f");function p(e){return e.xor(e.shru(47))}function c(e,t,r){let s=e.slice(t,t+r);return a.fromBytes(Array.from(s),!0,!0)}function d(e,t){return c(e,t,8)}function h(e,t){// Avoid shifting by 64: doing so yields an undefined result.
return 0===t?e:e.shru(t).or(e.shl(64-t))}function f(e,t,r=o("9ddfea08eb382d69")){// Murmur-inspired hashing.
let s=e.xor(t).mul(r);s=s.xor(s.shru(47));let n=t.xor(s).mul(r);return(n=n.xor(n.shru(47))).mul(r)}function m(e,t,r,s){return(// Return a 16-byte hash for 48 bytes.  Quick and dirty.
// Callers do best to use "random-looking" values for a and b.
function(e,t,r,s,n,a){n=n.add(e),a=h(a.add(n).add(s),21);let o=n;return n=(n=n.add(t)).add(r),a=a.add(h(n,44)),[n.add(s),a.add(o)]}(d(e,t),d(e,t+8),d(e,t+16),d(e,t+24),r,s))}function g(e,t=e.length){let r=a.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){let r=u.add(2*t),s=d(e,0).add(u),n=d(e,t-8),a=h(n,37).mul(r).add(s),o=h(s,25).add(n).mul(r);return f(a,o,r)}if(t>=4){let r=u.add(2*t),s=c(e,0,4);return f(s.shl(3).add(t),c(e,t-4,4),r)}if(t>0){let r=e[0],s=e[t>>1],n=e[t-1],a=t+(n<<2);return p(u.mul(r+(s<<8)).xor(i.mul(a))).mul(u)}return u}(e,t):function(e,t=e.length){let r=u.add(2*t),s=d(e,0).mul(l),n=d(e,8),a=d(e,t-8).mul(r),o=d(e,t-16).mul(u);return f(h(s.add(n),43).add(h(a,30)).add(o),s.add(h(n.add(u),18)).add(a),r)}(e,t);if(t<=64)return function(e,t=e.length){let r=u.add(2*t),s=d(e,0).mul(u),n=d(e,8),a=d(e,t-8).mul(r),o=d(e,t-16).mul(u),i=h(s.add(n),43).add(h(a,30)).add(o),l=f(i,s.add(h(n.add(u),18)).add(a),r),p=d(e,16).mul(r),c=d(e,24),m=i.add(d(e,t-32)).mul(r),g=l.add(d(e,t-24)).mul(r);return f(h(p.add(c),43).add(h(m,30)).add(g),p.add(h(c.add(s),18)).add(m),r)}(e,t);// For strings over 64 bytes we loop.  Internal state consists of
// 56 bytes: v, w, x, y, and z.
let s=r,n=r.mul(l).add(113),o=p(n.mul(u).add(113)).mul(u),g=[a.UZERO,a.UZERO],x=[a.UZERO,a.UZERO];s=s.mul(u).add(d(e,0));let b=0,y=(t-1>>6)*64,j=y+(t-1&63)-63;do s=h(s.add(n).add(g[0]).add(d(e,b+8)),37).mul(l),n=h(n.add(g[1]).add(d(e,b+48)),42).mul(l),s=s.xor(x[1]),n=n.add(g[0]).add(d(e,b+40)),o=h(o.add(x[0]),33).mul(l),g=m(e,b,g[1].mul(l),s.add(x[0])),x=m(e,b+32,o.add(x[1]),n.add(d(e,b+16))),[o,s]=[s,o],b+=64;while(b!==y)let _=l.add(o.and(255).shl(1));return(// Point to the last 64 bytes of input.
b=j,x[0]=x[0].add(t-1&63),g[0]=g[0].add(x[0]),x[0]=x[0].add(g[0]),s=h(s.add(n).add(g[0]).add(d(e,b+8)),37).mul(_),n=h(n.add(g[1]).add(d(e,b+48)),42).mul(_),s=s.xor(x[1].mul(9)),n=n.add(g[0].mul(9).add(d(e,b+40))),o=h(o.add(x[0]),33).mul(_),g=m(e,b,g[1].mul(_),s.add(x[0])),x=m(e,b+32,o.add(x[1]),n.add(d(e,b+16))),[o,s]=[s,o],f(f(g[0],x[0],_).add(p(n).mul(i)).add(o),f(g[1],x[1],_).add(s),_))}},{long:"73pYi","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"73pYi":[function(e,t,r){t.exports=n;/**
 * wasm optimizations, to do native i64 multiplication and divide
 */var s=null;try{s=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){// no wasm support :(
}/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */function n(e,t,r){/**
     * The low 32 bits as a signed value.
     * @type {number}
     */this.low=0|e,/**
     * The high 32 bits as a signed value.
     * @type {number}
     */this.high=0|t,/**
     * Whether unsigned or not.
     * @type {boolean}
     */this.unsigned=!!r}/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */function a(e){return!0===(e&&e.__isLong__)}// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.
/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */n.isLong=a;/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */var o={},i={};/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */function l(e,t){var r,s,n;return t?(e>>>=0,(n=0<=e&&e<256)&&(s=i[e]))?s:(r=p(e,(0|e)<0?-1:0,!0),n&&(i[e]=r),r):(e|=0,(n=-128<=e&&e<128)&&(s=o[e]))?s:(r=p(e,e<0?-1:0,!1),n&&(o[e]=r),r)}/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */function u(e,t){if(isNaN(e))return t?y:b;if(t){if(e<0)return y;if(e>=m)return w}else{if(e<=-g)return C;if(e+1>=g)return I}return e<0?u(-e,t).neg():p(e%f|0,e/f|0,t)}/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */function p(e,t,r){return new n(e,t,r)}/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */n.fromInt=l,/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */n.fromNumber=u,/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */n.fromBits=p;/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */var c=Math.pow;// Used 4 times (4*8 to 15+4)
/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */function d(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return b;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return d(e.substring(1),t,r).neg();for(var s,n=u(c(r,8)),a=b,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),l=parseInt(e.substring(o,o+i),r);if(i<8){var p=u(c(r,i));a=a.mul(p).add(u(l))}else a=(a=a.mul(n)).add(u(l))}return a.unsigned=t,a}/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */function h(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?d(e,t):p(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */n.fromString=d,/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */n.fromValue=h;/**
 * @type {number}
 * @const
 * @inner
 */var f=4294967296,m=18446744073709552e3,g=0x7fffffffffffffff,x=l(16777216),b=l(0);/**
 * Signed zero.
 * @type {!Long}
 */n.ZERO=b;/**
 * @type {!Long}
 * @inner
 */var y=l(0,!0);/**
 * Unsigned zero.
 * @type {!Long}
 */n.UZERO=y;/**
 * @type {!Long}
 * @inner
 */var j=l(1);/**
 * Signed one.
 * @type {!Long}
 */n.ONE=j;/**
 * @type {!Long}
 * @inner
 */var _=l(1,!0);/**
 * Unsigned one.
 * @type {!Long}
 */n.UONE=_;/**
 * @type {!Long}
 * @inner
 */var k=l(-1);/**
 * Signed negative one.
 * @type {!Long}
 */n.NEG_ONE=k;/**
 * @type {!Long}
 * @inner
 */var I=p(-1,2147483647,!1);/**
 * Maximum signed value.
 * @type {!Long}
 */n.MAX_VALUE=I;/**
 * @type {!Long}
 * @inner
 */var w=p(-1,-1,!0);/**
 * Maximum unsigned value.
 * @type {!Long}
 */n.MAX_UNSIGNED_VALUE=w;/**
 * @type {!Long}
 * @inner
 */var C=p(0,-2147483648,!1);/**
 * Minimum signed value.
 * @type {!Long}
 */n.MIN_VALUE=C;/**
 * @alias Long.prototype
 * @inner
 */var S=n.prototype;/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */S.toInt=function(){return this.unsigned?this.low>>>0:this.low},/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */S.toNumber=function(){return this.unsigned?(this.high>>>0)*f+(this.low>>>0):this.high*f+(this.low>>>0)},/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(!this.eq(C))return"-"+this.neg().toString(e);// We need to change the Long value before it can be negated, so we remove
// the bottom-most digit in this base and then recurse to do the rest.
var t=u(e),r=this.div(t),s=r.mul(t).sub(this);return r.toString(e)+s.toInt().toString(e)}for(// Do several (6) digits each time through the loop, so as to
// minimize the calls to the very expensive emulated div.
var n=u(c(e,6),this.unsigned),a=this,o="";;){var i=a.div(n),l=(a.sub(i.mul(n)).toInt()>>>0).toString(e);if((a=i).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */S.getHighBits=function(){return this.high},/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */S.getHighBitsUnsigned=function(){return this.high>>>0},/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */S.getLowBits=function(){return this.low},/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */S.getLowBitsUnsigned=function(){return this.low>>>0},/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(C)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return 0!=this.high?t+33:t+1},/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */S.isZero=function(){return 0===this.high&&0===this.low},/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */S.eqz=S.isZero,/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */S.isNegative=function(){return!this.unsigned&&this.high<0},/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */S.isPositive=function(){return this.unsigned||this.high>=0},/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */S.isOdd=function(){return(1&this.low)==1},/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */S.isEven=function(){return(1&this.low)==0},/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.equals=function(e){return a(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.eq=S.equals,/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.notEquals=function(e){return!this.eq(/* validates */e)},/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.neq=S.notEquals,/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.ne=S.notEquals,/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.lessThan=function(e){return 0>this.comp(/* validates */e)},/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.lt=S.lessThan,/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.lessThanOrEqual=function(e){return 0>=this.comp(/* validates */e)},/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.lte=S.lessThanOrEqual,/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.le=S.lessThanOrEqual,/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.greaterThan=function(e){return this.comp(/* validates */e)>0},/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.gt=S.greaterThan,/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.greaterThanOrEqual=function(e){return this.comp(/* validates */e)>=0},/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.gte=S.greaterThanOrEqual,/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */S.ge=S.greaterThanOrEqual,/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */S.compare=function(e){if(a(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */S.comp=S.compare,/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */S.negate=function(){return!this.unsigned&&this.eq(C)?C:this.not().add(j)},/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */S.neg=S.negate,/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */S.add=function(e){a(e)||(e=h(e));// Divide each number into 4 chunks of 16 bits, and then sum the chunks.
var t,r,s=this.high>>>16,n=65535&this.high,o=this.low>>>16,i=65535&this.low,l=e.high>>>16,u=65535&e.high,c=e.low>>>16,d=65535&e.low,f=0,m=0;return t=0+((r=0+(i+d))>>>16),r&=65535,t+=o+c,m+=t>>>16,t&=65535,m+=n+u,f+=m>>>16,m&=65535,f+=s+l,p(t<<16|r,(f&=65535)<<16|m,this.unsigned)},/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */S.subtract=function(e){return a(e)||(e=h(e)),this.add(e.neg())},/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */S.sub=S.subtract,/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */S.multiply=function(e){if(this.isZero())return b;// use wasm support if present
if(a(e)||(e=h(e)),s)return p(s.mul(this.low,this.high,e.low,e.high),s.get_high(),this.unsigned);if(e.isZero())return b;if(this.eq(C))return e.isOdd()?C:b;if(e.eq(C))return this.isOdd()?C:b;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();// If both longs are small, use float multiplication
if(this.lt(x)&&e.lt(x))return u(this.toNumber()*e.toNumber(),this.unsigned);// Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
// We can skip products that would overflow.
var t,r,n=this.high>>>16,o=65535&this.high,i=this.low>>>16,l=65535&this.low,c=e.high>>>16,d=65535&e.high,f=e.low>>>16,m=65535&e.low,g=0,y=0;return t=0+((r=0+l*m)>>>16),r&=65535,t+=i*m,y+=t>>>16,t&=65535,t+=l*f,y+=t>>>16,t&=65535,y+=o*m,g+=y>>>16,y&=65535,y+=i*f,g+=y>>>16,y&=65535,y+=l*d,g+=y>>>16,y&=65535,g+=n*m+o*f+i*d+l*c,p(t<<16|r,(g&=65535)<<16|y,this.unsigned)},/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */S.mul=S.multiply,/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */S.divide=function(e){if(a(e)||(e=h(e)),e.isZero())throw Error("division by zero");// use wasm support if present
if(s){var t,r,n;return(// guard against signed division overflow: the largest
// negative number / -1 would be 1 larger than the largest
// positive number, due to two's complement.
this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?p((this.unsigned?s.div_u:s.div_s)(this.low,this.high,e.low,e.high),s.get_high(),this.unsigned):this)}if(this.isZero())return this.unsigned?y:b;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return _;n=y}else{// This section is only relevant for signed longs and is derived from the
// closure library as a whole.
if(this.eq(C))return e.eq(j)||e.eq(k)?C:e.eq(C)?j:(t=this.shr(1).div(e).shl(1)).eq(b)?e.isNegative()?j:k:(r=this.sub(e.mul(t)),n=t.add(r.div(e)));if(e.eq(C))return this.unsigned?y:b;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();n=b}for(// Repeat the following until the remainder is less than other:  find a
// floating-point that approximates remainder / other *from below*, add this
// into the result, and subtract it from the remainder.  It is critical that
// the approximate value is less than or equal to the real value so that the
// remainder never becomes negative.
r=this;r.gte(e);){for(// We will tweak the approximate result by changing it in the 48-th digit or
// the smallest non-fractional digit, whichever is larger.
var o=Math.ceil(Math.log(// Approximate the result of division. This may be a little greater or
// smaller than the actual value.
t=Math.max(1,Math.floor(r.toNumber()/e.toNumber())))/Math.LN2),i=o<=48?1:c(2,o-48),// that if it is too large, the product overflows and is negative.
l=u(t),d=l.mul(e);d.isNegative()||d.gt(r);)t-=i,d=(l=u(t,this.unsigned)).mul(e);l.isZero()&&(l=j),n=n.add(l),r=r.sub(d)}return n},/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */S.div=S.divide,/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */S.modulo=function(e){return(// use wasm support if present
(a(e)||(e=h(e)),s)?p((this.unsigned?s.rem_u:s.rem_s)(this.low,this.high,e.low,e.high),s.get_high(),this.unsigned):this.sub(this.div(e).mul(e)))},/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */S.mod=S.modulo,/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */S.rem=S.modulo,/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */S.not=function(){return p(~this.low,~this.high,this.unsigned)},/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */S.and=function(e){return a(e)||(e=h(e)),p(this.low&e.low,this.high&e.high,this.unsigned)},/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */S.or=function(e){return a(e)||(e=h(e)),p(this.low|e.low,this.high|e.high,this.unsigned)},/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */S.xor=function(e){return a(e)||(e=h(e)),p(this.low^e.low,this.high^e.high,this.unsigned)},/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shiftLeft=function(e){return(a(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?p(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):p(0,this.low<<e-32,this.unsigned)},/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shl=S.shiftLeft,/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shiftRight=function(e){return(a(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?p(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):p(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shr=S.shiftRight,/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shiftRightUnsigned=function(e){if(a(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?p(this.low>>>e|t<<32-e,t>>>e,this.unsigned):32===e?p(t,0,this.unsigned):p(t>>>e-32,0,this.unsigned)},/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shru=S.shiftRightUnsigned,/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */S.shr_u=S.shiftRightUnsigned,/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */S.toSigned=function(){return this.unsigned?p(this.low,this.high,!1):this},/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */S.toUnsigned=function(){return this.unsigned?this:p(this.low,this.high,!0)},/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},{}],c4Dut:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */s.export(r,"getFilteredNodesXToY",()=>a),/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */s.export(r,"backpropagateGradients",()=>o);var n=e("./util");function a(e,t,r){// Forward pass to compute all the nodes and Tensors that are transitively a
// function of x.
let s={},n={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let r=0;r<e.length;r++){let a=e[r],o=a.inputs;for(let e in o){let r=o[e],i=!1;for(let e=0;e<t.length;e++)if(s[r.id]){a.outputs.forEach(e=>s[e.id]=!0),i=!0,n[a.id]=!0;break}if(i)break}}// Backward pass to find all of the nodes and Tensors that lead to y.
let a={};a[r.id]=!0;let o={};for(let t=e.length-1;t>=0;t--){let r=e[t],s=r.inputs;// If any of the outputs lead to y, mark all of the inputs as leading to y.
for(let e=0;e<r.outputs.length;e++)if(a[r.outputs[e].id]){for(let e in s)a[s[e].id]=!0,o[r.id]=!0;break}}// Return the paths that come from x and lead to y.
let i=[];for(let t=0;t<e.length;t++){let r=e[t];if(n[r.id]&&o[r.id]){// Prune the inputs from the node that aren't a function of x.
let e={};for(let t in r.inputs){let n=r.inputs[t];s[n.id]&&(e[t]=n)}// Copy the node and overwrite inputsAndArgs to the pruned version.
let t=Object.assign({},r);t.inputs=e,t.outputs=r.outputs,i.push(t)}}return i}function o(e,t,r,s){// Walk the tape backward and keep a map of Tensor to its gradient.
for(let a=t.length-1;a>=0;a--){let o=t[a],i=[];if(o.outputs.forEach(t=>{let r=e[t.id];null!=r?i.push(r):// does not affect the final output, thus we put null for its dy.
i.push(null)}),null==o.gradient)throw Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);// Backprop dy through this node and accumulate gradients over the inputs.
let l=o.gradient(i);for(let t in o.inputs){if(!(t in l))throw Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(l)}.`);// Call the gradient function.
let a=r(()=>l[t]());if("float32"!==a.dtype)throw Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);let i=o.inputs[t];if(!n.arraysEqual(a.shape,i.shape))throw Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{let t=e[i.id];e[i.id]=s(t,a),t.dispose()}}}}},{"./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j4V3y:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="@webgpu/types/dist" />
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */s.export(r,"TensorBuffer",()=>i),/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */s.export(r,"setTensorTracker",()=>p),/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */s.export(r,"setOpHandler",()=>c),/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */s.export(r,"setDeprecationWarningFn",()=>d),/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * For performance reasons, functions that create tensors do not necessarily
 * perform a copy of the data passed to them (e.g. if the data is passed as a
 * `Float32Array`), and changes to the data will change the tensor. This is not
 * a feature and is not supported. To avoid this behavior, use the tensor before
 * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */s.export(r,"Tensor",()=>h),s.export(r,"getGlobalTensorClass",()=>f),/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */s.export(r,"Variable",()=>m);var n=e("./global_util"),a=e("./tensor_format"),o=e("./util");class i{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=o.sizeFromShape(e),null!=r){let e=r.length;o.assert(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||o.getArrayFromDType(t,this.size),this.strides=(0,o.computeStrides)(e)}/**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */set(e,...t){0===t.length&&(t=[0]),o.assert(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let r=this.locToIndex(t);this.values[r]=e}/**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */get(...e){0===e.length&&(e=[0]);let t=0;for(let r of e){if(r<0||r>=this.shape[t]){let t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw Error(t)}t++}let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=this.strides[t]*e[t];return this.values[r]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}/**
     * Creates an immutable `tf.Tensor` object from the buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */toTensor(){return l().makeTensor(this.values,this.shape,this.dtype)}}// For tracking tensor creation and disposal.
let l=null,u=null;function p(e){l=e}function c(e){u=e}function d(e){}class h{constructor(e,t,r,s){/** Whether this tensor has been globally kept. */this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=o.sizeFromShape(e),this.strides=(0,o.computeStrides)(e),this.dataId=r,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}/**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */async buffer(){let e=await this.data();return u.buffer(this.shape,this.dtype,e)}/**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */bufferSync(){return u.buffer(this.shape,this.dtype,this.dataSync())}/**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */async array(){let e=await this.data();return(0,o.toNestedArray)(this.shape,e,"complex64"===this.dtype)}/**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */arraySync(){return(0,o.toNestedArray)(this.shape,this.dataSync(),"complex64"===this.dtype)}/**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */async data(){this.throwIfDisposed();let e=l().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map(e=>o.decodeString(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}/**
     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
     * and `data()`, this method prevents data from being downloaded to CPU.
     *
     * For WebGL backend, the data will be stored on a densely packed texture.
     * This means that the texture will use the RGBA channels to store value.
     *
     * For WebGPU backend, the data will be stored on a buffer. There is no
     * parameter, so can not use a user-defined size to create the buffer.
     *
     * @param options:
     *     For WebGL,
     *         - customTexShape: Optional. If set, will use the user defined
     *     texture shape to create the texture.
     *
     * @returns For WebGL backend, a GPUData contains the new texture and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this texture,
     *        texture: WebGLTexture,
     *        texShape: [number, number] // [height, width]
     *     }
     *
     *     For WebGPU backend, a GPUData contains the new buffer and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this buffer,
     *        buffer: GPUBuffer,
     *        bufSize: number
     *     }
     *
     *     Remember to dispose the GPUData after it is used by
     *     `res.tensorRef.dispose()`.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */dataToGPU(e){return this.throwIfDisposed(),l().readToGPU(this.dataId,e)}/**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */dataSync(){this.throwIfDisposed();let e=l().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>o.decodeString(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}/** Returns the underlying bytes of the tensor's data. */async bytes(){this.throwIfDisposed();let e=await l().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}/**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */dispose(){this.isDisposed||(l().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw Error("Tensor is disposed.")}/**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */print(e=!1){return u.print(this,e)}/**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */clone(){return this.throwIfDisposed(),u.clone(this)}/**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */toString(e=!1){let t=this.dataSync();return(0,a.tensorToString)(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),u.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),l().makeVariable(this,e,t,r)}}function f(){// Use getGlobal so that we can augment the Tensor class across package
// boundaries becase the node resolution alg may result in different modules
// being returned for this file depending on the path they are loaded from.
return(0,n.getGlobal)("Tensor",()=>h)}Object.defineProperty(h,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),// Global side effect. Cache global reference to Tensor class
f();class m extends h{constructor(e,t,r,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=r}/**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */assign(e){if(e.dtype!==this.dtype)throw Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!o.arraysEqual(e.shape,this.shape))throw Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);l().disposeTensor(this),this.dataId=e.dataId,l().incRef(this,null)}dispose(){l().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(m,Symbol.hasInstance,{value:e=>e instanceof h&&null!=e.assign&&e.assign instanceof Function})},{"./global_util":"1G3vY","./tensor_format":"gVXkv","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gVXkv:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tensorToString",()=>a);var n=e("./util");function a(e,t,r,s){let a=(0,n.computeStrides)(t),u=function(e,t,r,s){let a=(0,n.sizeFromShape)(t),i=s[s.length-1],u=Array(i).fill(0),p=t.length,c="complex64"===r?l(e):e;if(p>1)for(let e=0;e<a/i;e++){let t=e*i;for(let e=0;e<i;e++)u[e]=Math.max(u[e],o(c[t+e],0,r).length)}return u}(e,t,r,a),p=t.length,c=function e(t,r,s,n,a,u=!0){let p="complex64"===s?2:1,c=r[0],d=r.length;if(0===d){if("complex64"===s){let e=l(t);return[o(e[0],0,s)]}return"bool"===s?[i(t[0])]:[t[0].toString()]}if(1===d){if(c>20){let e=3*p,r=Array.from(t.slice(0,e)),n=Array.from(t.slice((c-3)*p,c*p));return"complex64"===s&&(r=l(r),n=l(n)),["["+r.map((e,t)=>o(e,a[t],s)).join(", ")+", ..., "+n.map((e,t)=>o(e,a[c-3+t],s)).join(", ")+"]"]}let e="complex64"===s?l(t):Array.from(t);return["["+e.map((e,t)=>o(e,a[t],s)).join(", ")+"]"]}// The array is rank 2 or more.
let h=r.slice(1),f=n.slice(1),m=n[0]*p,g=[];if(c>20){for(let r=0;r<3;r++){let n=r*m,o=n+m;g.push(...e(t.slice(n,o),h,s,f,a,!1))}g.push("...");for(let r=c-3;r<c;r++){let n=r*m,o=n+m;g.push(...e(t.slice(n,o),h,s,f,a,r===c-1/* isLast */))}}else for(let r=0;r<c;r++){let n=r*m,o=n+m;g.push(...e(t.slice(n,o),h,s,f,a,r===c-1/* isLast */))}let x=2===d?",":"";g[0]="["+g[0]+x;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+x;let b=",\n";for(let e=2;e<d;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(u?"":b),g}(e,t,r,a,u),d=["Tensor"];return s&&(d.push(`  dtype: ${r}`),d.push(`  rank: ${p}`),d.push(`  shape: [${t}]`),d.push("  values:")),d.push(c.map(e=>"    "+e).join("\n")),d.join("\n")}function o(e,t,r){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,n.isString)(e)?`'${e}'`:"bool"===r?i(e):parseFloat(e.toFixed(7)).toString(),(0,n.rightPad)(s,t)}function i(e){return 0===e?"false":"true"}function l(e){let t=[];for(let r=0;r<e.length;r+=2)t.push([e[r],e[r+1]]);return t}},{"./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5jYPc":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"makeTypesMatch",()=>i),s.export(r,"assertTypesMatch",()=>l),s.export(r,"isTensorInList",()=>u),/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */s.export(r,"getTensorsInContainer",()=>p);var n=e("./tensor"),a=e("./types"),o=e("./util");function i(e,t){if(e.dtype===t.dtype)return[e,t];let r=(0,a.upcastType)(e.dtype,t.dtype);return[e.cast(r),t.cast(r)]}function l(e,t){(0,o.assert)(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function u(e,t){return t.some(t=>t.id===e.id)}function p(e){let t=[],r=new Set;return function e(t,r,s){if(null!=t){if(t instanceof n.Tensor){r.push(t);return}if(Array.isArray(t)||"object"==typeof t)for(let n in t){let a=t[n];s.has(a)||(s.add(a),e(a,r,s))}}}(e,t,r),t}},{"./tensor":"j4V3y","./types":"4gWh6","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4gWh6":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s,n,a,o,i,l,u,p,c,d,h=e("@parcel/transformer-js/src/esmodule-helpers.js");h.defineInteropFlag(r),h.export(r,"Rank",()=>l),h.export(r,"upcastType",()=>m),/** Returns the output type after summation. */h.export(r,"sumOutType",()=>g),(s=l||(l={})).R0="R0",s.R1="R1",s.R2="R2",s.R3="R3",s.R4="R4",s.R5="R5",s.R6="R6",(n=u||(u={})).float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",(a=p||(p={})).float32="float32",a.int32="int32",a.bool="bool",a.complex64="complex64",(o=c||(c={})).float32="float32",o.int32="float32",o.bool="float32",o.complex64="complex64",(i=d||(d={})).float32="complex64",i.int32="complex64",i.bool="complex64",i.complex64="complex64";let f={float32:c,int32:u,bool:p,complex64:d};function m(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw Error(`Can not upcast ${e} with ${t}`)}return f[e][t]}function g(e){return m(e,"int32")}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dupjs:[function(e,t,r){e("./engine");var s=e("./device_util"),n=e("./environment"),a=e("329ebbdb86789035");let o=(0,n.env)();/**
 * This file contains environment-related flag registrations.
 *//** Whether to enable debug mode. */o.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),/** Whether we are in a browser (as versus, say, node.js) environment. */o.registerFlag("IS_BROWSER",()=>s.isBrowser()),/** Whether we are in a browser (as versus, say, node.js) environment. */o.registerFlag("IS_NODE",()=>void 0!==a&&void 0!==a.versions&&void 0!==a.versions.node),/** Whether this browser is Chrome. */o.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */o.registerFlag("PROD",()=>!1),/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>o.getBool("DEBUG")),/** Whether deprecation warnings are enabled. */o.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),/** True if running unit tests. */o.registerFlag("IS_TEST",()=>!1),/** Whether to check computation result for errors. */o.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),/** Whether the backend needs to wrap input to imageBitmap. */o.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),/** Experimental flag, whether enter compile only phase. */o.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),/** Whether to enable canvas2d willReadFrequently for GPU backends */o.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),/** Whether to use setTimeoutCustom */o.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1)},{"329ebbdb86789035":"aBjM4","./engine":"ldVRX","./device_util":"1GYkw","./environment":"j2c6C"}],"1GYkw":[function(e,t,r){let s;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// tslint:disable-next-line:no-any
var n=e("@parcel/transformer-js/src/esmodule-helpers.js");function a(e){s=e}function o(e){if(void 0!==s)return s;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||// tslint:disable-next-line:no-any
("undefined"!=typeof window?window.opera:"");// Use `navigator.userAgentData.mobile` as fallback.
if(!t){// tslint:disable-next-line:no-any
let t=e;return t.userAgentData&&t.userAgentData.mobile}// tslint:disable-next-line:max-line-length
return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||// tslint:disable-next-line:max-line-length
/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function i(){return"undefined"!=typeof window&&null!=window.document||//@ts-ignore
"undefined"!=typeof WorkerGlobalScope}n.defineInteropFlag(r),n.export(r,"mockIsMobile",()=>a),n.export(r,"isMobile",()=>o),n.export(r,"isBrowser",()=>i)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5QZ0x":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PlatformBrowser",()=>l),e("../flags");var n=e("../environment"),a=e("../io/indexed_db"),o=e("../io/local_storage"),i=e("../io/model_management");class l{constructor(){// For setTimeoutCustom
this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}// If the setTimeout nesting level is greater than 5 and timeout is less
// than 4ms, timeout will be clamped to 4ms, which hurts the perf.
// Interleaving window.postMessage and setTimeout will trick the browser and
// avoid the clamp.
setTimeoutCustom(e,t){if(!window||!(0,n.env)().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();let t=this.functionRefs[e.data.index];t(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}}if((0,n.env)().get("IS_BROWSER")){(0,n.env)().setPlatform("browser",new l);// Register LocalStorage IOHandler
try{(0,i.ModelStoreManagerRegistry).registerManager(o.BrowserLocalStorage.URL_SCHEME,new o.BrowserLocalStorageManager)}catch(e){}// Register IndexedDB IOHandler
try{(0,i.ModelStoreManagerRegistry).registerManager(a.BrowserIndexedDB.URL_SCHEME,new a.BrowserIndexedDBManager)}catch(e){}}},{"../flags":"dupjs","../environment":"j2c6C","../io/indexed_db":"53mi8","../io/local_storage":"glJMc","../io/model_management":"lPc6S","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"53mi8":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Delete the entire database for tensorflow.js, including the models store.
 */s.export(r,"deleteDatabase",()=>p),/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */s.export(r,"BrowserIndexedDB",()=>h),s.export(r,"indexedDBRouter",()=>f),/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */s.export(r,"browserIndexedDB",()=>m),s.export(r,"BrowserIndexedDBManager",()=>g),e("../flags");var n=e("../environment"),a=e("./io_utils"),o=e("./router_registry");let i="tensorflowjs",l="models_store",u="model_info_store";async function p(){let e=c();return new Promise((t,r)=>{let s=e.deleteDatabase(i);s.onsuccess=()=>t(),s.onerror=e=>r(e)})}function c(){if(!(0,n.env)().getBool("IS_BROWSER"))//   Maybe point to a doc page on the web and/or automatically determine
//   the available IOHandlers and print them in the error message.
throw Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");// tslint:disable-next-line:no-any
let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw Error("The current browser does not appear to support IndexedDB.");return t}function d(e){let t=e.result;t.createObjectStore(l,{keyPath:"modelPath"}),t.createObjectStore(u,{keyPath:"modelPath"})}class h{constructor(e){if(this.indexedDB=c(),null==e||!e)throw Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){// TODO(cais): Support saving GraphDef models.
if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}/**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */databaseAction(e,t){return new Promise((e,r)=>{let s=this.indexedDB.open(i,1);s.onupgradeneeded=()=>d(s),s.onsuccess=()=>{let n=s.result;if(null==t){// Read model out from object store.
let t=n.transaction(l,"readonly"),s=t.objectStore(l),a=s.get(this.modelPath);a.onsuccess=()=>{if(null==a.result)return n.close(),r(Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(a.result.modelArtifacts)},a.onerror=e=>(n.close(),r(a.error)),t.oncomplete=()=>n.close()}else{let s;// Put model into object store.
let o=(0,a.getModelArtifactsInfoForJSON)(t),i=n.transaction(u,"readwrite"),p=i.objectStore(u),c=p.put({modelPath:this.modelPath,modelArtifactsInfo:o});c.onsuccess=()=>{// Second, put model data into model store.
s=n.transaction(l,"readwrite");let a=s.objectStore(l),c=a.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:o});c.onsuccess=()=>e({modelArtifactsInfo:o}),c.onerror=e=>{// If the put-model request fails, roll back the info entry as
// well.
p=i.objectStore(u);let t=p.delete(this.modelPath);t.onsuccess=()=>(n.close(),r(c.error)),t.onerror=e=>(n.close(),r(c.error))}},c.onerror=e=>(n.close(),r(c.error)),i.oncomplete=()=>{null==s?n.close():s.oncomplete=()=>n.close()}}},s.onerror=e=>r(s.error)})}}h.URL_SCHEME="indexeddb://";let f=e=>(0,n.env)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(h.URL_SCHEME)?m(e.slice(h.URL_SCHEME.length)):null;function m(e){return new h(e)}(0,o.IORouterRegistry).registerSaveRouter(f),(0,o.IORouterRegistry).registerLoadRouter(f);class g{constructor(){this.indexedDB=c()}async listModels(){return new Promise((e,t)=>{let r=this.indexedDB.open(i,1);r.onupgradeneeded=()=>d(r),r.onsuccess=()=>{let s=r.result,n=s.transaction(u,"readonly"),a=n.objectStore(u),o=a.getAll();o.onsuccess=()=>{let t={};for(let e of o.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},o.onerror=e=>(s.close(),t(o.error)),n.oncomplete=()=>s.close()},r.onerror=e=>t(r.error)})}async removeModel(e){var t;return e=(t=e).startsWith(h.URL_SCHEME)?t.slice(h.URL_SCHEME.length):t,new Promise((t,r)=>{let s=this.indexedDB.open(i,1);s.onupgradeneeded=()=>d(s),s.onsuccess=()=>{let n;let a=s.result,o=a.transaction(u,"readwrite"),i=o.objectStore(u),p=i.get(e);p.onsuccess=()=>{if(null==p.result)return a.close(),r(Error(`Cannot find model with path '${e}' in IndexedDB.`));{// First, delete the entry in the info store.
let s=i.delete(e),o=()=>{// Second, delete the entry in the model store.
n=a.transaction(l,"readwrite");let s=n.objectStore(l),o=s.delete(e);o.onsuccess=()=>t(p.result.modelArtifactsInfo),o.onerror=e=>r(p.error)};// Proceed with deleting model data regardless of whether deletion
// of info data succeeds or not.
s.onsuccess=o,s.onerror=e=>(o(),a.close(),r(p.error))}},p.onerror=e=>(a.close(),r(p.error)),o.oncomplete=()=>{null==n?a.close():n.oncomplete=()=>a.close()}},s.onerror=e=>r(s.error)})}}},{"../flags":"dupjs","../environment":"j2c6C","./io_utils":"1TR1m","./router_registry":"2YvQb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1TR1m":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */s.export(r,"encodeWeights",()=>u),/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */s.export(r,"decodeWeights",()=>p),/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */s.export(r,"concatenateTypedArrays",()=>c),/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */s.export(r,"stringByteLength",()=>h),/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */s.export(r,"arrayBufferToBase64String",()=>f),/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */s.export(r,"base64StringToArrayBuffer",()=>m),/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */s.export(r,"concatenateArrayBuffers",()=>g),/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */s.export(r,"basename",()=>x),/**
 * Create `ModelJSON` from `ModelArtifacts`.
 *
 * @param artifacts Model artifacts, describing the model and its weights.
 * @param manifest Weight manifest, describing where the weights of the
 *     `ModelArtifacts` are stored, and some metadata about them.
 * @returns Object representing the `model.json` file describing the model
 *     artifacts and weights
 */s.export(r,"getModelJSONForModelArtifacts",()=>b),/**
 * Create `ModelArtifacts` from a JSON file and weights.
 *
 * @param modelJSON Object containing the parsed JSON of `model.json`
 * @param weightSpecs The list of WeightsManifestEntry for the model. Must be
 *     passed if the modelJSON has a weightsManifest.
 * @param weightData An ArrayBuffer of weight data for the model corresponding
 *     to the weights in weightSpecs. Must be passed if the modelJSON has a
 *     weightsManifest.
 * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.
 */s.export(r,"getModelArtifactsForJSONSync",()=>y),/**
 * Create `ModelArtifacts` from a JSON file.
 *
 * @param modelJSON Object containing the parsed JSON of `model.json`
 * @param loadWeights Function that takes the JSON file's weights manifest,
 *     reads weights from the listed path(s), and returns a Promise of the
 *     weight manifest entries along with the weights data.
 * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.
 */s.export(r,"getModelArtifactsForJSON",()=>j),/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */s.export(r,"getModelArtifactsInfoForJSON",()=>_),/**
 * Concatenate the weights stored in a WeightsManifestConfig into a list of
 * WeightsManifestEntry
 *
 * @param weightsManifest The WeightsManifestConfig to extract weights from.
 * @returns A list of WeightsManifestEntry of the weights in the weightsManifest
 */s.export(r,"getWeightSpecs",()=>k),/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */s.export(r,"getFloat16Decoder",()=>I);var n=e("../ops/complex"),a=e("../ops/tensor"),o=e("../util"),i=e("./types"),l=e("cc5f092a6233570f").Buffer;async function u(e,t){// TODO(adarob, cais): Support quantization.
let r=[],s=[],n=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<n.length;++a){let o=n[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);let l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){let e=new Promise(async e=>{let t=await i.bytes(),r=t.reduce((e,t)=>e+t.length,0)+4*t.length,s=new Uint8Array(r),n=0;for(let e=0;e<t.length;e++){let r=t[e],a=new Uint8Array(new Uint32Array([r.length]).buffer);s.set(a,n),n+=4,s.set(r,n),n+=r.length}e(s)});s.push(e)}else s.push(i.data());null!=t&&(l.group=t),r.push(l)}let a=await Promise.all(s);return{data:c(a),specs:r}}function p(e,t){let r;// TODO(adarob, cais): Support quantization.
let s={},l=0;for(let u of t){let t;let p=u.name,c=u.dtype,d=u.shape,h=(0,o.sizeFromShape)(d);if("quantization"in u){let s=u.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s&&"scale"in s))throw Error(`Weight ${u.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else if("float16"===s.dtype){if("float32"!==c)throw Error(`Weight ${u.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${c}.`)}else throw Error(`Weight ${u.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let n=i.DTYPE_VALUE_SIZE_MAP[s.dtype],a=e.slice(l,l+h*n),o="uint8"===s.dtype?new Uint8Array(a):new Uint16Array(a);if("float32"===c){if("uint8"===s.dtype||"uint16"===s.dtype){t=new Float32Array(o.length);for(let e=0;e<o.length;e++){let r=o[e];t[e]=r*s.scale+s.min}}else if("float16"===s.dtype)void 0===r&&(r=I()),t=r(o);else throw Error(`Unsupported quantization type ${s.dtype} for weight type float32.`)}else if("int32"===c){if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);t=new Int32Array(o.length);for(let e=0;e<o.length;e++){let r=o[e];t[e]=Math.round(r*s.scale+s.min)}}else throw Error(`Unsupported dtype in weight '${p}': ${c}`);l+=h*n}else if("string"===c){let r=(0,o.sizeFromShape)(u.shape);t=[];for(let s=0;s<r;s++){let r=new Uint32Array(e.slice(l,l+4))[0];l+=4;let s=new Uint8Array(e.slice(l,l+r));t.push(s),l+=r}}else{let r=i.DTYPE_VALUE_SIZE_MAP[c],o=e.slice(l,l+h*r);if("float32"===c)t=new Float32Array(o);else if("int32"===c)t=new Int32Array(o);else if("bool"===c)t=new Uint8Array(o);else if("complex64"===c){t=new Float32Array(o);let e=new Float32Array(t.length/2),r=new Float32Array(t.length/2);for(let s=0;s<e.length;s++)e[s]=t[2*s],r[s]=t[2*s+1];let i=(0,a.tensor)(e,d,"float32"),l=(0,a.tensor)(r,d,"float32");s[p]=(0,n.complex)(i,l),i.dispose(),l.dispose()}else throw Error(`Unsupported dtype in weight '${p}': ${c}`);l+=h*r}"complex64"!==c&&(s[p]=(0,a.tensor)(t,d,c))}return s}function c(e){// TODO(adarob, cais): Support quantization.
if(null===e)throw Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,r=[];e.forEach(e=>{if(t+=e.byteLength,// tslint:disable:no-any
r.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw Error(`Unsupported TypedArray subtype: ${e.constructor.name}`);// tslint:enable:no-any
});let s=new Uint8Array(t),n=0;return r.forEach(e=>{s.set(new Uint8Array(e.buffer),n),n+=e.byteLength}),s.buffer}// Use Buffer on Node.js instead of Blob/atob/btoa
let d=void 0!==l&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function h(e){return d?l.byteLength(e):new Blob([e]).size}function f(e){if(d)return l.from(e).toString("base64");let t=new Uint8Array(e),r="";for(let e=0,s=t.length;e<s;e++)r+=String.fromCharCode(t[e]);return btoa(r)}function m(e){if(d){let t=l.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r.set([t.charCodeAt(e)],e);return r.buffer}function g(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});let r=new Uint8Array(t),s=0;return e.forEach(e=>{r.set(new Uint8Array(e),s),s+=e.byteLength}),r.buffer}function x(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function b(e,t){let r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),r}function y(e,t,r){let s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw Error("modelJSON has weightsManifest but weightSpecs is null");if(!r)throw Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=r}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),s}async function j(e,t){let r,s;return null!=e.weightsManifest&&([r,s]=await t(e.weightsManifest)),y(e,r,s)}function _(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:h(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:h(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function k(e){let t=[];for(let r of e)t.push(...r.weights);return t}function I(){// Algorithm is based off of
// http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
// Cache lookup tables
let e=/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */function(){let e=e=>{let t=e<<13,r=0;for(;(8388608&t)==0;)r-=8388608,t<<=1;return(t&=-8388609)|(r+=947912704)},t=new Uint32Array(2048);t[0]=0;for(let r=1;r<1024;r++)t[r]=e(r);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */function(){let e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),r=/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{let n=new ArrayBuffer(4*s.length),a=new Uint32Array(n);for(let n=0;n<s.length;n++){let o=s[n],i=e[r[o>>10]+(1023&o)]+t[o>>10];a[n]=i}return new Float32Array(n)}}},{cc5f092a6233570f:"dB11O","../ops/complex":"i0i48","../ops/tensor":"1tgxn","../util":"6bzqD","./types":"ejFGq","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dB11O:[function(e,t,r){let s=e("9c62938f1dccc73c"),n=e("aceacb6a4531a9d2"),a="function"==typeof Symbol&&"function"// eslint-disable-line dot-notation
==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom")// eslint-disable-line dot-notation
:null;function o(e){if(e>2147483647)throw RangeError('The value "'+e+'" is invalid for option "size"');// Return an augmented `Uint8Array` instance
let t=new Uint8Array(e);return Object.setPrototypeOf(t,i.prototype),t}/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */function i(e,t,r){// Common case.
if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return p(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if(("string"!=typeof t||""===t)&&(t="utf8"),!i.isEncoding(t))throw TypeError("Unknown encoding: "+t);let r=0|f(e,t),s=o(r),n=s.write(e,t);return n!==r&&// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
(s=s.slice(0,n)),s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(M(e,Uint8Array)){let t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return c(e)}(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(M(e,ArrayBuffer)||e&&M(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(M(e,SharedArrayBuffer)||e&&M(e.buffer,SharedArrayBuffer)))return d(e,t,r);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return i.from(s,t,r);let n=function(e){var t;if(i.isBuffer(e)){let t=0|h(e.length),r=o(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||(t=e.length)!=t// eslint-disable-line no-self-compare
?o(0):c(e):"Buffer"===e.type&&Array.isArray(e.data)?c(e.data):void 0}(e);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return i.from(e[Symbol.toPrimitive]("string"),t,r);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return u(e),o(e<0?0:0|h(e))}function c(e){let t=e.length<0?0:0|h(e.length),r=o(t);for(let s=0;s<t;s+=1)r[s]=255&e[s];return r}function d(e,t,r){let s;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw RangeError('"length" is outside of buffer bounds');return(// Return an augmented `Uint8Array` instance
Object.setPrototypeOf(s=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),i.prototype),s)}function h(e){// Note: cannot use `length < K_MAX_LENGTH` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(e>=2147483647)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function f(e,t){if(i.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||M(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===r)return 0;// Use a for loop to avoid recursion
let n=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return $(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return P(e).length;default:if(n)return s?-1:$(e).length// assume utf8
;t=(""+t).toLowerCase(),n=!0}}function m(e,t,r){let n=!1;// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0||// Force coercion to uint32. This will also coerce falsey/NaN values to 0.
(r>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,r){let s=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>s)&&(r=s);let n="";for(let s=t;s<r;++s)n+=O[e[s]];return n}(this,t,r);case"utf8":case"utf-8":return y(this,t,r);case"ascii":return function(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(127&e[n]);return s}(this,t,r);case"latin1":case"binary":return function(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(e[n]);return s}(this,t,r);case"base64":var a,o;return a=t,o=r,0===a&&o===this.length?s.fromByteArray(this):s.fromByteArray(this.slice(a,o));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,r){let s=e.slice(t,r),n="";// If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
for(let e=0;e<s.length-1;e+=2)n+=String.fromCharCode(s[e]+256*s[e+1]);return n}(this,t,r);default:if(n)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){let s=e[t];e[t]=e[r],e[r]=s}// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function x(e,t,r,s,n){var a;// Empty buffer means no match
if(0===e.length)return -1;if("string"==typeof r?(s=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),(a=r=+r// Coerce to Number.
)!=a&&(r=n?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(n)return -1;r=e.length-1}else if(r<0){if(!n)return -1;r=0}// Finally, search either indexOf (if dir is true) or lastIndexOf
if("string"==typeof t&&(t=i.from(t,s)),i.isBuffer(t))return(// Special case: looking for empty string/buffer always fails
0===t.length?-1:b(e,t,r,s,n));if("number"==typeof t)return(t&=255// Search for a byte value [0-255]
,"function"==typeof Uint8Array.prototype.indexOf)?n?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,s,n);throw TypeError("val must be string, number or Buffer")}function b(e,t,r,s,n){let a,o=1,i=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return -1;o=2,i/=2,l/=2,r/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(n){let s=-1;for(a=r;a<i;a++)if(u(e,a)===u(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===l)return s*o}else -1!==s&&(a-=a-s),s=-1}else for(r+l>i&&(r=i-l),a=r;a>=0;a--){let r=!0;for(let s=0;s<l;s++)if(u(e,a+s)!==u(t,s)){r=!1;break}if(r)return a}return -1}function y(e,t,r){r=Math.min(e.length,r);let s=[],n=t;for(;n<r;){let t=e[n],a=null,o=t>239?4:t>223?3:t>191?2:1;if(n+o<=r){let r,s,i,l;switch(o){case 1:t<128&&(a=t);break;case 2:(192&(r=e[n+1]))==128&&(l=(31&t)<<6|63&r)>127&&(a=l);break;case 3:r=e[n+1],s=e[n+2],(192&r)==128&&(192&s)==128&&(l=(15&t)<<12|(63&r)<<6|63&s)>2047&&(l<55296||l>57343)&&(a=l);break;case 4:r=e[n+1],s=e[n+2],i=e[n+3],(192&r)==128&&(192&s)==128&&(192&i)==128&&(l=(15&t)<<18|(63&r)<<12|(63&s)<<6|63&i)>65535&&l<1114112&&(a=l)}}null===a?(// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
a=65533,o=1):a>65535&&(// encode to utf16 (surrogate pair dance)
a-=65536,s.push(a>>>10&1023|55296),a=56320|1023&a),s.push(a),n+=o}return function(e){let t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e)// avoid extra slice()
;// Decode in chunks to avoid "call stack size exceeded".
let r="",s=0;for(;s<t;)r+=String.fromCharCode.apply(String,e.slice(s,s+=4096));return r}(s)}/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */function j(e,t,r){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>r)throw RangeError("Trying to access beyond buffer length")}function _(e,t,r,s,n,a){if(!i.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<a)throw RangeError('"value" argument is out of bounds');if(r+s>e.length)throw RangeError("Index out of range")}function k(e,t,r,s,n){F(t,s,n,e,r,7);let a=Number(t&BigInt(4294967295));e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a,a>>=8,e[r++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function I(e,t,r,s,n){F(t,s,n,e,r,7);let a=Number(t&BigInt(4294967295));e[r+7]=a,a>>=8,e[r+6]=a,a>>=8,e[r+5]=a,a>>=8,e[r+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function w(e,t,r,s,n,a){if(r+s>e.length||r<0)throw RangeError("Index out of range")}function C(e,t,r,s,a){return t=+t,r>>>=0,a||w(e,t,r,4,34028234663852886e22,-34028234663852886e22),n.write(e,t,r,s,23,4),r+4}function S(e,t,r,s,a){return t=+t,r>>>=0,a||w(e,t,r,8,17976931348623157e292,-17976931348623157e292),n.write(e,t,r,s,52,8),r+8}r.Buffer=i,r.SlowBuffer=function(e){return+e!=e&&(e=0),i.alloc(+e)},r.INSPECT_MAX_BYTES=50,r.kMaxLength=2147483647,/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */i.TYPED_ARRAY_SUPPORT=function(){// Can typed array instances can be augmented?
try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),i.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(i.prototype,"parent",{enumerable:!0,get:function(){if(i.isBuffer(this))return this.buffer}}),Object.defineProperty(i.prototype,"offset",{enumerable:!0,get:function(){if(i.isBuffer(this))return this.byteOffset}}),i.poolSize=8192// not used by this implementation
,/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/i.from=function(e,t,r){return l(e,t,r)},// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(i.prototype,Uint8Array.prototype),Object.setPrototypeOf(i,Uint8Array),/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/i.alloc=function(e,t,r){return(u(e),e<=0)?o(e):void 0!==t?"string"==typeof r?o(e).fill(t,r):o(e).fill(t):o(e)},/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */i.allocUnsafe=function(e){return p(e)},/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */i.allocUnsafeSlow=function(e){return p(e)},i.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==i.prototype// so Buffer.isBuffer(Buffer.prototype) will be false
},i.compare=function(e,t){if(M(e,Uint8Array)&&(e=i.from(e,e.offset,e.byteLength)),M(t,Uint8Array)&&(t=i.from(t,t.offset,t.byteLength)),!i.isBuffer(e)||!i.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,s=t.length;for(let n=0,a=Math.min(r,s);n<a;++n)if(e[n]!==t[n]){r=e[n],s=t[n];break}return r<s?-1:s<r?1:0},i.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},i.concat=function(e,t){let r;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return i.alloc(0);if(void 0===t)for(r=0,t=0;r<e.length;++r)t+=e[r].length;let s=i.allocUnsafe(t),n=0;for(r=0;r<e.length;++r){let t=e[r];if(M(t,Uint8Array))n+t.length>s.length?(i.isBuffer(t)||(t=i.from(t)),t.copy(s,n)):Uint8Array.prototype.set.call(s,t,n);else if(i.isBuffer(t))t.copy(s,n);else throw TypeError('"list" argument must be an Array of Buffers');n+=t.length}return s},i.byteLength=f,// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
i.prototype._isBuffer=!0,i.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},i.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},i.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},i.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?y(this,0,e):m.apply(this,arguments)},i.prototype.toLocaleString=i.prototype.toString,i.prototype.equals=function(e){if(!i.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===i.compare(this,e)},i.prototype.inspect=function(){let e="",t=r.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},a&&(i.prototype[a]=i.prototype.inspect),i.prototype.compare=function(e,t,r,s,n){if(M(e,Uint8Array)&&(e=i.from(e,e.offset,e.byteLength)),!i.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===s&&(s=0),void 0===n&&(n=this.length),t<0||r>e.length||s<0||n>this.length)throw RangeError("out of range index");if(s>=n&&t>=r)return 0;if(s>=n)return -1;if(t>=r)return 1;if(t>>>=0,r>>>=0,s>>>=0,n>>>=0,this===e)return 0;let a=n-s,o=r-t,l=Math.min(a,o),u=this.slice(s,n),p=e.slice(t,r);for(let e=0;e<l;++e)if(u[e]!==p[e]){a=u[e],o=p[e];break}return a<o?-1:o<a?1:0},i.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},i.prototype.indexOf=function(e,t,r){return x(this,e,t,r,!0)},i.prototype.lastIndexOf=function(e,t,r){return x(this,e,t,r,!1)},i.prototype.write=function(e,t,r,s){var n,a,o,i,l,u,p,c;// Buffer#write(string)
if(void 0===t)s="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)s=t,r=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(r)?(r>>>=0,void 0===s&&(s="utf8")):(s=r,r=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let d=this.length-t;if((void 0===r||r>d)&&(r=d),e.length>0&&(r<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let h=!1;for(;;)switch(s){case"hex":return function(e,t,r,s){let n;r=Number(r)||0;let a=e.length-r;s?(s=Number(s))>a&&(s=a):s=a;let o=t.length;for(s>o/2&&(s=o/2),n=0;n<s;++n){let s=parseInt(t.substr(2*n,2),16);if(s!=s)break;e[r+n]=s}return n}(this,e,t,r);case"utf8":case"utf-8":return n=t,a=r,z($(e,this.length-n),this,n,a);case"ascii":case"latin1":case"binary":return o=t,i=r,z(function(e){let t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(e),this,o,i);case"base64":// Warning: maxLength not taken into account in base64Write
return l=t,u=r,z(P(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return p=t,c=r,z(function(e,t){let r,s;let n=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)s=(r=e.charCodeAt(a))>>8,n.push(r%256),n.push(s);return n}(e,this.length-p),this,p,c);default:if(h)throw TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),h=!0}},i.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},i.prototype.slice=function(e,t){let r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let s=this.subarray(e,t);return(// Return an augmented `Uint8Array` instance
Object.setPrototypeOf(s,i.prototype),s)},i.prototype.readUintLE=i.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||j(e,t,this.length);let s=this[e],n=1,a=0;for(;++a<t&&(n*=256);)s+=this[e+a]*n;return s},i.prototype.readUintBE=i.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||j(e,t,this.length);let s=this[e+--t],n=1;for(;t>0&&(n*=256);)s+=this[e+--t]*n;return s},i.prototype.readUint8=i.prototype.readUInt8=function(e,t){return e>>>=0,t||j(e,1,this.length),this[e]},i.prototype.readUint16LE=i.prototype.readUInt16LE=function(e,t){return e>>>=0,t||j(e,2,this.length),this[e]|this[e+1]<<8},i.prototype.readUint16BE=i.prototype.readUInt16BE=function(e,t){return e>>>=0,t||j(e,2,this.length),this[e]<<8|this[e+1]},i.prototype.readUint32LE=i.prototype.readUInt32LE=function(e,t){return e>>>=0,t||j(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},i.prototype.readUint32BE=i.prototype.readUInt32BE=function(e,t){return e>>>=0,t||j(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},i.prototype.readBigUInt64LE=L(function(e){A(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&R(e,this.length-8);let s=t+256*this[++e]+65536*this[++e]+16777216*this[++e],n=this[++e]+256*this[++e]+65536*this[++e]+16777216*r;return BigInt(s)+(BigInt(n)<<BigInt(32))}),i.prototype.readBigUInt64BE=L(function(e){A(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&R(e,this.length-8);let s=16777216*t+65536*this[++e]+256*this[++e]+this[++e],n=16777216*this[++e]+65536*this[++e]+256*this[++e]+r;return(BigInt(s)<<BigInt(32))+BigInt(n)}),i.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||j(e,t,this.length);let s=this[e],n=1,a=0;for(;++a<t&&(n*=256);)s+=this[e+a]*n;return s>=(n*=128)&&(s-=Math.pow(2,8*t)),s},i.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||j(e,t,this.length);let s=t,n=1,a=this[e+--s];for(;s>0&&(n*=256);)a+=this[e+--s]*n;return a>=(n*=128)&&(a-=Math.pow(2,8*t)),a},i.prototype.readInt8=function(e,t){return(e>>>=0,t||j(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},i.prototype.readInt16LE=function(e,t){e>>>=0,t||j(e,2,this.length);let r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},i.prototype.readInt16BE=function(e,t){e>>>=0,t||j(e,2,this.length);let r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},i.prototype.readInt32LE=function(e,t){return e>>>=0,t||j(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},i.prototype.readInt32BE=function(e,t){return e>>>=0,t||j(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},i.prototype.readBigInt64LE=L(function(e){A(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&R(e,this.length-8);let s=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24// Overflow
);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+16777216*this[++e])}),i.prototype.readBigInt64BE=L(function(e){A(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&R(e,this.length-8);let s=(t<<24)+// Overflow
65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(16777216*this[++e]+65536*this[++e]+256*this[++e]+r)}),i.prototype.readFloatLE=function(e,t){return e>>>=0,t||j(e,4,this.length),n.read(this,e,!0,23,4)},i.prototype.readFloatBE=function(e,t){return e>>>=0,t||j(e,4,this.length),n.read(this,e,!1,23,4)},i.prototype.readDoubleLE=function(e,t){return e>>>=0,t||j(e,8,this.length),n.read(this,e,!0,52,8)},i.prototype.readDoubleBE=function(e,t){return e>>>=0,t||j(e,8,this.length),n.read(this,e,!1,52,8)},i.prototype.writeUintLE=i.prototype.writeUIntLE=function(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){let s=Math.pow(2,8*r)-1;_(this,e,t,r,s,0)}let n=1,a=0;for(this[t]=255&e;++a<r&&(n*=256);)this[t+a]=e/n&255;return t+r},i.prototype.writeUintBE=i.prototype.writeUIntBE=function(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){let s=Math.pow(2,8*r)-1;_(this,e,t,r,s,0)}let n=r-1,a=1;for(this[t+n]=255&e;--n>=0&&(a*=256);)this[t+n]=e/a&255;return t+r},i.prototype.writeUint8=i.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,1,255,0),this[t]=255&e,t+1},i.prototype.writeUint16LE=i.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},i.prototype.writeUint16BE=i.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},i.prototype.writeUint32LE=i.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},i.prototype.writeUint32BE=i.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},i.prototype.writeBigUInt64LE=L(function(e,t=0){return k(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),i.prototype.writeBigUInt64BE=L(function(e,t=0){return I(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),i.prototype.writeIntLE=function(e,t,r,s){if(e=+e,t>>>=0,!s){let s=Math.pow(2,8*r-1);_(this,e,t,r,s-1,-s)}let n=0,a=1,o=0;for(this[t]=255&e;++n<r&&(a*=256);)e<0&&0===o&&0!==this[t+n-1]&&(o=1),this[t+n]=(e/a>>0)-o&255;return t+r},i.prototype.writeIntBE=function(e,t,r,s){if(e=+e,t>>>=0,!s){let s=Math.pow(2,8*r-1);_(this,e,t,r,s-1,-s)}let n=r-1,a=1,o=0;for(this[t+n]=255&e;--n>=0&&(a*=256);)e<0&&0===o&&0!==this[t+n+1]&&(o=1),this[t+n]=(e/a>>0)-o&255;return t+r},i.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},i.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},i.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},i.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},i.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||_(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},i.prototype.writeBigInt64LE=L(function(e,t=0){return k(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),i.prototype.writeBigInt64BE=L(function(e,t=0){return I(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),i.prototype.writeFloatLE=function(e,t,r){return C(this,e,t,!0,r)},i.prototype.writeFloatBE=function(e,t,r){return C(this,e,t,!1,r)},i.prototype.writeDoubleLE=function(e,t,r){return S(this,e,t,!0,r)},i.prototype.writeDoubleBE=function(e,t,r){return S(this,e,t,!1,r)},// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
i.prototype.copy=function(e,t,r,s){if(!i.isBuffer(e))throw TypeError("argument should be a Buffer");// Copy 0 bytes; we're done
if(r||(r=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<r&&(s=r),s===r||0===e.length||0===this.length)return 0;// Fatal error conditions
if(t<0)throw RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw RangeError("Index out of range");if(s<0)throw RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-r&&(s=e.length-t+r);let n=s-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,s):Uint8Array.prototype.set.call(e,this.subarray(r,s),t),n},// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
i.prototype.fill=function(e,t,r,s){let n;// Handle string cases:
if("string"==typeof e){if("string"==typeof t?(s=t,t=0,r=this.length):"string"==typeof r&&(s=r,r=this.length),void 0!==s&&"string"!=typeof s)throw TypeError("encoding must be a string");if("string"==typeof s&&!i.isEncoding(s))throw TypeError("Unknown encoding: "+s);if(1===e.length){let t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));// Invalid ranges are not set to a default, so can range check early.
if(t<0||this.length<t||this.length<r)throw RangeError("Out of range index");if(r<=t)return this;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(n=t;n<r;++n)this[n]=e;else{let a=i.isBuffer(e)?e:i.from(e,s),o=a.length;if(0===o)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(n=0;n<r-t;++n)this[n+t]=a[n%o]}return this};// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
let T={};function N(e,t,r){T[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),// Add the error code to the name to include it in the stack trace.
this.name=`${this.name} [${e}]`,// Access the stack to generate the error message including the error code
// from the name.
this.stack// eslint-disable-line no-unused-expressions
,// Reset the name to the actual name.
delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function E(e){let t="",r=e.length,s="-"===e[0]?1:0;for(;r>=s+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function F(e,t,r,s,n,a){if(e>r||e<t){let s;let n="bigint"==typeof t?"n":"";throw s=a>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${(a+1)*8}${n}`:`>= -(2${n} ** ${(a+1)*8-1}${n}) and < 2 ** ${(a+1)*8-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new T.ERR_OUT_OF_RANGE("value",s,e)}A(n,"offset"),(void 0===s[n]||void 0===s[n+a])&&R(n,s.length-(a+1))}function A(e,t){if("number"!=typeof e)throw new T.ERR_INVALID_ARG_TYPE(t,"number",e)}function R(e,t,r){if(Math.floor(e)!==e)throw A(e,r),new T.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new T.ERR_BUFFER_OUT_OF_BOUNDS;throw new T.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}N("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),N("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),N("ERR_OUT_OF_RANGE",function(e,t,r){let s=`The value of "${e}" is out of range.`,n=r;return Number.isInteger(r)&&Math.abs(r)>4294967296?n=E(String(r)):"bigint"==typeof r&&(n=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(n=E(n)),n+="n"),s+=` It must be ${t}. Received ${n}`},RangeError);// HELPER FUNCTIONS
// ================
let D=/[^+/0-9A-Za-z-_]/g;function $(e,t){let r;t=t||1/0;let s=e.length,n=null,a=[];for(let o=0;o<s;++o){// is surrogate component
if((r=e.charCodeAt(o))>55295&&r<57344){// last char was a lead
if(!n){// no lead yet
if(r>56319||o+1===s){(t-=3)>-1&&a.push(239,191,189);continue}// valid lead
n=r;continue}// 2 leads in a row
if(r<56320){(t-=3)>-1&&a.push(239,191,189),n=r;continue}// valid surrogate pair
r=(n-55296<<10|r-56320)+65536}else n&&(t-=3)>-1&&a.push(239,191,189);// encode utf8
if(n=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else if(r<1114112){if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else throw Error("Invalid code point")}return a}function P(e){return s.toByteArray(function(e){// Node converts strings with length < 2 to ''
if(// Node strips out invalid characters like \n and \t from the string, base64-js does not
(e=// Node takes equal signs as end of the Base64 encoding
(e=e.split("=")[0]).trim().replace(D,"")).length<2)return"";// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,r,s){let n;for(n=0;n<s&&!(n+r>=t.length)&&!(n>=e.length);++n)t[n+r]=e[n];return n}// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function M(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
let O=function(){let e="0123456789abcdef",t=Array(256);for(let r=0;r<16;++r){let s=16*r;for(let n=0;n<16;++n)t[s+n]=e[r]+e[n]}return t}();// Return not function with Error if BigInt not supported
function L(e){return"undefined"==typeof BigInt?B:e}function B(){throw Error("BigInt not supported")}},{"9c62938f1dccc73c":"ettWx",aceacb6a4531a9d2:"6DXND"}],ettWx:[function(e,t,r){r.byteLength=// base64 is 4/3 + up to two characters of the original data
function(e){var t=u(e),r=t[0],s=t[1];return(r+s)*3/4-s},r.toByteArray=function(e){var t,r,s=u(e),o=s[0],i=s[1],l=new a((o+i)*3/4-i),p=0,c=i>0?o-4:o;for(r=0;r<c;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[p++]=t>>16&255,l[p++]=t>>8&255,l[p++]=255&t;return 2===i&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[p++]=255&t),1===i&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[p++]=t>>8&255,l[p++]=255&t),l},r.fromByteArray=function(e){// go through the array every three bytes, we'll deal with trailing stuff later
for(var t,r=e.length,n=r%3// if we have 1 byte left, pad 2 bytes
,a=[],o=0,i=r-n;o<i;o+=16383// must be multiple of 3
)a.push(function(e,t,r){for(var n,a=[],o=t;o<r;o+=3)a.push(s[(n=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]))>>18&63]+s[n>>12&63]+s[n>>6&63]+s[63&n]);return a.join("")}(e,o,o+16383>i?i:o+16383));return 1===n?a.push(s[(t=e[r-1])>>2]+s[t<<4&63]+"=="):2===n&&a.push(s[(t=(e[r-2]<<8)+e[r-1])>>10]+s[t>>4&63]+s[t<<2&63]+"="),a.join("")};for(var s=[],n=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,l=o.length;i<l;++i)s[i]=o[i],n[o.charCodeAt(i)]=i;function u(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");// Trim off extra bytes after placeholder bytes are found
// See: https://github.com/beatgammit/base64-js/issues/42
var r=e.indexOf("=");-1===r&&(r=t);var s=r===t?0:4-r%4;return[r,s]}// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},{}],"6DXND":[function(e,t,r){/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */r.read=function(e,t,r,s,n){var a,o,i=8*n-s-1,l=(1<<i)-1,u=l>>1,p=-7,c=r?n-1:0,d=r?-1:1,h=e[t+c];for(c+=d,a=h&(1<<-p)-1,h>>=-p,p+=i;p>0;a=256*a+e[t+c],c+=d,p-=8);for(o=a&(1<<-p)-1,a>>=-p,p+=s;p>0;o=256*o+e[t+c],c+=d,p-=8);if(0===a)a=1-u;else{if(a===l)return o?NaN:(h?-1:1)*(1/0);o+=Math.pow(2,s),a-=u}return(h?-1:1)*o*Math.pow(2,a-s)},r.write=function(e,t,r,s,n,a){var o,i,l,u=8*a-n-1,p=(1<<u)-1,c=p>>1,d=23===n?5960464477539062e-23:0,h=s?0:a-1,f=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(isNaN(t=Math.abs(t))||t===1/0?(i=isNaN(t)?1:0,o=p):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),o+c>=1?t+=d/l:t+=d*Math.pow(2,1-c),t*l>=2&&(o++,l/=2),o+c>=p?(i=0,o=p):o+c>=1?(i=(t*l-1)*Math.pow(2,n),o+=c):(i=t*Math.pow(2,c-1)*Math.pow(2,n),o=0));n>=8;e[r+h]=255&i,h+=f,i/=256,n-=8);for(o=o<<n|i,u+=n;u>0;e[r+h]=255&o,h+=f,o/=256,u-=8);e[r+h-f]|=128*m}},{}],i0i48:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"complex",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({complex_:/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"real","complex"),s=(0,o.convertToTensor)(t,"imag","complex");return i.assertShapesMatch(r.shape,s.shape,`real and imag shapes, ${r.shape} and ${s.shape}, must match in call to tf.complex().`),(0,n.ENGINE).runKernel(a.Complex,{real:r,imag:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9iWFD":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"inferShape",()=>l),s.export(r,"convertToTensor",()=>p),s.export(r,"convertToTensorArray",()=>c);var n=e("./engine"),a=e("./environment"),o=e("./tensor"),i=e("./util");function l(e,t){let r=e;if((0,i.isTypedArray)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];// Scalar.
let s=[];for(;Array.isArray(r)||(0,i.isTypedArray)(r)&&"string"!==t;)s.push(r.length),r=r[0];return Array.isArray(e)&&(0,a.env)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,r,s){if(s=s||[],!Array.isArray(t)&&!(0,i.isTypedArray)(t)){(0,i.assert)(0===r.length,()=>`Element arr[${s.join("][")}] is a primitive, but should be an array/TypedArray of ${r[0]} elements`);return}(0,i.assert)(r.length>0,()=>`Element arr[${s.join("][")}] should be a primitive, but is an array of ${t.length} elements`),(0,i.assert)(t.length===r[0],()=>`Element arr[${s.join("][")}] should have ${r[0]} elements, but has ${t.length} elements`);let n=r.slice(1);for(let r=0;r<t.length;++r)e(t[r],n,s.concat(r))}(e,s,[]),s}function u(e,t,r,s){if("string_or_numeric"!==e){if(null==e)throw Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw Error(`Argument '${r}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function p(e,t,r,s="numeric"){if(e instanceof o.Tensor)return u(s,e.dtype,t,r),e;let a=(0,i.inferDtype)(e);if("string"!==a&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),u(s,a,t,r),null==e||!(0,i.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let s=null==e?"null":e.constructor.name;throw Error(`Argument '${t}' passed to '${r}' must be a Tensor or TensorLike, but got '${s}'`)}let p=l(e,a);(0,i.isTypedArray)(e)||Array.isArray(e)||(e=[e]);let c="string"!==a?(0,i.toTypedArray)(e,a):(0,i.flatten)(e,[],!0);return(0,n.ENGINE).makeTensor(c,p,a)}function c(e,t,r,s="numeric"){if(!Array.isArray(e))throw Error(`Argument ${t} passed to ${r} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,n)=>p(e,`${t}[${n}]`,r,s))}},{"./engine":"ldVRX","./environment":"j2c6C","./tensor":"j4V3y","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],htqKz:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"OP_SCOPE_SUFFIX",()=>o),/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */s.export(r,"op",()=>i);var n=e("../engine"),a=e("../util");let o="__op";function i(e){let t=Object.keys(e);if(1!==t.length)throw Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let r=t[0],s=e[r];r.endsWith("_")&&(r=r.substring(0,r.length-1)),// add an __op suffix to distinguish ops from kernels in tf.profile
r+=o;// tslint:disable-next-line:no-any
let i=(...e)=>{(0,n.ENGINE).startScope(r);try{let t=s(...e);return(0,a.isPromise)(t)&&console.error("Cannot return a Promise inside of tidy."),(0,n.ENGINE).endScope(t),t}catch(e){throw(0,n.ENGINE).endScope(null),e}};// tslint:disable-next-line:no-any
return Object.defineProperty(i,"name",{value:r,configurable:!0}),i}},{"../engine":"ldVRX","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1tgxn":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor",()=>o);var n=e("../tensor_util_env"),a=e("./tensor_ops_util");function o(e,t,r){let s=(0,n.inferShape)(e,r);return(0,a.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9UCaT":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** This is shared code across all tensor creation methods. */s.export(r,"makeTensor",()=>o);var n=e("../engine"),a=e("../util");function o(e,t,r,s){if(null==s&&(s=(0,a.inferDtype)(e)),"complex64"===s)throw Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.assertNonNegativeIntegerDimensions)(t);let e=(0,a.sizeFromShape)(t),s=(0,a.sizeFromShape)(r);(0,a.assert)(e===s,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`);for(let e=0;e<r.length;++e){let s=r[e],n=e!==r.length-1||s!==(0,a.sizeFromShape)(t.slice(e));(0,a.assert)(r[e]===t[e]||!n,()=>`Error creating a new Tensor. Inferred shape (${r}) does not match the provided shape (${t}). `)}}return(0,a.isTypedArray)(e)||Array.isArray(e)||(e=[e]),t=t||r,e="string"!==s?(0,a.toTypedArray)(e,s):(0,a.flatten)(e,[],!0),(0,n.ENGINE).makeTensor(e,t,s)}},{"../engine":"ldVRX","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ejFGq:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//* Type definitions for exporting and importing of models. *//**
 * A map from Tensor dtype to number of bytes per element of the Tensor.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DTYPE_VALUE_SIZE_MAP",()=>n);let n={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2YvQb":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"IORouterRegistry",()=>n),s.export(r,"registerSaveRouter",()=>a),s.export(r,"registerLoadRouter",()=>o),s.export(r,"getSaveHandlers",()=>i),s.export(r,"getLoadHandlers",()=>l);class n{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==n.instance&&(n.instance=new n),n.instance}/**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */static registerSaveRouter(e){n.getInstance().saveRouters.push(e)}/**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */static registerLoadRouter(e){n.getInstance().loadRouters.push(e)}/**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */static getSaveHandlers(e){return n.getHandlers(e,"save")}/**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */static getLoadHandlers(e,t){return n.getHandlers(e,"load",t)}static getHandlers(e,t,r){let s=[],a="load"===t?n.getInstance().loadRouters:n.getInstance().saveRouters;return a.forEach(t=>{let n=t(e,r);null!==n&&s.push(n)}),s}}let a=e=>n.registerSaveRouter(e),o=e=>n.registerLoadRouter(e),i=e=>n.getSaveHandlers(e),l=(e,t)=>n.getLoadHandlers(e,t)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],glJMc:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */s.export(r,"purgeLocalStorageArtifacts",()=>p),/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */s.export(r,"BrowserLocalStorage",()=>f),s.export(r,"localStorageRouter",()=>m),/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */s.export(r,"browserLocalStorage",()=>g),s.export(r,"BrowserLocalStorageManager",()=>x),e("../flags");var n=e("../environment"),a=e("../util"),o=e("./io_utils"),i=e("./router_registry");let l="tensorflowjs_models",u="info";function p(){if(!(0,n.env)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw Error("purgeLocalStorageModels() cannot proceed because local storage is unavailable in the current environment.");let e=window.localStorage,t=[];for(let r=0;r<e.length;++r){let s=e.key(r),n=l+"/";if(s.startsWith(n)&&s.length>n.length){e.removeItem(s);let r=h(s);-1===t.indexOf(r)&&t.push(r)}}return t}function c(e){return{info:[l,e,u].join("/"),topology:[l,e,"model_topology"].join("/"),weightSpecs:[l,e,"weight_specs"].join("/"),weightData:[l,e,"weight_data"].join("/"),modelMetadata:[l,e,"model_metadata"].join("/")}}function d(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */function h(e){let t=e.split("/");if(t.length<3)throw Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class f{constructor(e){if(!(0,n.env)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)// available.
//   Maybe point to a doc page on the web and/or automatically determine
//   the available IOHandlers and print them in the error message.
throw Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=c(this.modelPath)}/**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=(0,o.getModelArtifactsInfoForJSON)(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,(0,o.arrayBufferToBase64String)(e.weightData));// Note that JSON.stringify doesn't write out keys that have undefined
// values, so for some keys, we set undefined instead of a null-ish
// value.
let n={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(n)),{modelArtifactsInfo:s}}catch(e){throw(// If saving failed, clean up all items saved so far.
d(this.keys),Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`))}}}/**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(null==r)throw Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;// Load weight specs.
let s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;// Load meta-data fields.
let n=this.LS.getItem(this.keys.modelMetadata);if(null!=n){let e=JSON.parse(n);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}// Load weight data.
let a=this.LS.getItem(this.keys.weightData);if(null==a)throw Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=(0,o.base64StringToArrayBuffer)(a),t}}f.URL_SCHEME="localstorage://";let m=e=>(0,n.env)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(f.URL_SCHEME)?g(e.slice(f.URL_SCHEME.length)):null;function g(e){return new f(e)}(0,i.IORouterRegistry).registerSaveRouter(m),(0,i.IORouterRegistry).registerLoadRouter(m);class x{constructor(){(0,a.assert)((0,n.env)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),(0,a.assert)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=l+"/",r="/"+u;for(let s=0;s<this.LS.length;++s){let n=this.LS.key(s);if(n.startsWith(t)&&n.endsWith(r)){let t=h(n);e[t]=JSON.parse(this.LS.getItem(n))}}return e}async removeModel(e){var t;e=(t=e).startsWith(f.URL_SCHEME)?t.slice(f.URL_SCHEME.length):t;let r=c(e);if(null==this.LS.getItem(r.info))throw Error(`Cannot find model at path '${e}'`);let s=JSON.parse(this.LS.getItem(r.info));return d(r),s}}},{"../flags":"dupjs","../environment":"j2c6C","../util":"6bzqD","./io_utils":"1TR1m","./router_registry":"2YvQb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lPc6S:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ModelStoreManagerRegistry",()=>o),s.export(r,"moveModel",()=>d),s.export(r,"copyModel",()=>c),s.export(r,"removeModel",()=>p),s.export(r,"listModels",()=>u);var n=e("../util"),a=e("./router_registry");class o{constructor(){this.managers={}}static getInstance(){return null==o.instance&&(o.instance=new o),o.instance}/**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */static registerManager(e,t){(0,n.assert)(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),(0,n.assert)(e.length>0,()=>"scheme must not be an empty string.");let r=o.getInstance();(0,n.assert)(null==r.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){let t=o.getInstance().managers[e];if(null==t)throw Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(o.getInstance().managers)}}/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */function i(e){if(-1===e.indexOf("://"))throw Error(`The url string provided does not contain a scheme. Supported schemes are: ${o.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function l(e,t,r=!1){(0,n.assert)(e!==t,()=>`Old path and new path are the same: '${e}'`);let s=(0,a.IORouterRegistry).getLoadHandlers(e);(0,n.assert)(s.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),(0,n.assert)(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`);let l=s[0],u=(0,a.IORouterRegistry).getSaveHandlers(t);(0,n.assert)(u.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),(0,n.assert)(u.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);let p=u[0],c=i(e).scheme,d=i(e).path,h=c===i(e).scheme,f=await l.load();r&&h&&await o.getManager(c).removeModel(d);let m=await p.save(f);return r&&!h&&await o.getManager(c).removeModel(d),m.modelArtifactsInfo}/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */async function u(){let e=o.getSchemes(),t={};for(let r of e){let e=await o.getManager(r).listModels();for(let s in e){let n=r+"://"+s;t[n]=e[s]}}return t}/**
 * Remove a model specified by URL from a registered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */async function p(e){let t=i(e),r=o.getManager(t.scheme);return r.removeModel(t.path)}/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */async function c(e,t){return l(e,t,!1)}/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */async function d(e,t){return l(e,t,!0)}},{"../util":"6bzqD","./router_registry":"2YvQb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4J49Q":[function(e,t,r){let s;/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),n.export(r,"getNodeFetch",()=>i),// These getters and setters are for testing so we don't export a mutable
// variable.
n.export(r,"resetSystemFetch",()=>l),n.export(r,"setSystemFetch",()=>u),n.export(r,"getSystemFetch",()=>p),n.export(r,"PlatformNode",()=>c);var a=e("../environment"),o=e("9eae209353a3d608");let i={// tslint:disable-next-line:no-require-imports
importFetch:()=>e("dfcdb939bb56fbb8")};function l(){s=null}function u(e){s=e}function p(){return s}class c{constructor(){// tslint:disable-next-line:no-require-imports
this.util=e("3818a9dc927c4605"),// According to the spec, the built-in encoder can do only UTF-8 encoding.
// https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,a.env)().global.fetch?(0,a.env)().global.fetch(e,t):(null==s&&(s=i.importFetch()),s(e,t))}now(){let e=o.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}(0,a.env)().get("IS_NODE")&&!(0,a.env)().get("IS_BROWSER")&&(0,a.env)().setPlatform("node",new c)},{"9eae209353a3d608":"aBjM4","../environment":"j2c6C",dfcdb939bb56fbb8:"aBjM4","3818a9dc927c4605":"aBjM4","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bnrDL:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"buffer",()=>o);var n=e("../tensor"),a=e("../util");function o(e,t="float32",r){return t=t||"float32",a.assertNonNegativeIntegerDimensions(e),new n.TensorBuffer(e,t,r)}},{"../tensor":"j4V3y","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7e2UZ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cast",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({cast_:/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"x","cast");// Sanity checks.
if(!i.isValidDtype(t))throw Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==r.dtype||"string"!==t&&"string"===r.dtype)throw Error("Only strings can be casted to strings");return(0,n.ENGINE).runKernel(a.Cast,{x:r},{dtype:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ljPJN:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clone",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({clone_:/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","clone","string_or_numeric");// Note this op is called tf.identity in python. Hence the kernel name used
// here.
return(0,n.ENGINE).runKernel(a.Identity,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],juqZ2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t=!1){console.log(e.toString(t))}s.defineInteropFlag(r),s.export(r,"print",()=>n)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3n3SF":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// base.ts is tfjs-core without auto registration of things like flags,
// gradients, chained ops or the opHandler. See base_side_effects.ts for parts
// tfjs core that are required side effects.
/**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */// Serialization.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AdadeltaOptimizer",()=>g.AdadeltaOptimizer),s.export(r,"AdagradOptimizer",()=>x.AdagradOptimizer),s.export(r,"AdamOptimizer",()=>b.AdamOptimizer),s.export(r,"AdamaxOptimizer",()=>y.AdamaxOptimizer),s.export(r,"MomentumOptimizer",()=>j.MomentumOptimizer),s.export(r,"Optimizer",()=>_.Optimizer),// Optimizers.
s.export(r,"OptimizerConstructors",()=>k.OptimizerConstructors),s.export(r,"RMSPropOptimizer",()=>I.RMSPropOptimizer),s.export(r,"SGDOptimizer",()=>w.SGDOptimizer),s.export(r,"Tensor",()=>C.Tensor),s.export(r,"TensorBuffer",()=>C.TensorBuffer),s.export(r,"Variable",()=>C.Variable),s.export(r,"Rank",()=>S.Rank),s.export(r,"sumOutType",()=>S.sumOutType),s.export(r,"upcastType",()=>S.upcastType),s.export(r,"Reduction",()=>N.Reduction),s.export(r,"customGrad",()=>R.customGrad),s.export(r,"grad",()=>R.grad),s.export(r,"grads",()=>R.grads),s.export(r,"valueAndGrad",()=>R.valueAndGrad),s.export(r,"valueAndGrads",()=>R.valueAndGrads),s.export(r,"variableGrads",()=>R.variableGrads),s.export(r,"Environment",()=>D.Environment),s.export(r,"env",()=>D.env),s.export(r,"ENV",()=>D.ENV),// Top-level method exports.
s.export(r,"nextFrame",()=>$.nextFrame),// Backend specific.
s.export(r,"KernelBackend",()=>O.KernelBackend),s.export(r,"DataStorage",()=>O.DataStorage),s.export(r,"version_core",()=>m.version),s.export(r,"browser",()=>i),s.export(r,"io",()=>n),s.export(r,"math",()=>a),s.export(r,"serialization",()=>c),s.export(r,"test_util",()=>h),s.export(r,"util",()=>f),s.export(r,"backend_util",()=>P),s.export(r,"broadcast_util",()=>o),s.export(r,"tensor_util",()=>d),s.export(r,"slice_util",()=>p),s.export(r,"gather_util",()=>l),s.export(r,"scatter_util",()=>u),s.export(r,"device_util",()=>z),s.export(r,"kernel_impls",()=>M);var n=e("./io/io"),a=e("./math"),o=e("./ops/broadcast_util"),i=e("./ops/browser"),l=e("./ops/gather_nd_util"),u=e("./ops/scatter_nd_util"),p=e("./ops/slice_util"),c=e("./serialization"),d=e("./tensor_util"),h=e("./test_util"),f=e("./util"),m=e("./version"),g=e("./optimizers/adadelta_optimizer"),x=e("./optimizers/adagrad_optimizer"),b=e("./optimizers/adam_optimizer"),y=e("./optimizers/adamax_optimizer"),j=e("./optimizers/momentum_optimizer"),_=e("./optimizers/optimizer"),k=e("./optimizers/optimizer_constructors"),I=e("./optimizers/rmsprop_optimizer"),w=e("./optimizers/sgd_optimizer"),C=e("./tensor"),S=e("./types"),T=e("./ops/ops");s.exportAll(T,r);var N=e("./ops/loss_ops_utils"),E=e("./train");s.exportAll(E,r);var F=e("./globals");s.exportAll(F,r);var A=e("./kernel_registry");s.exportAll(A,r);var R=e("./gradients"),D=e("./environment"),$=e("./browser_util"),P=e("./backends/backend_util"),z=e("./device_util"),M=e("./backends/kernel_impls"),O=e("./backends/backend"),L=e("./kernel_names");s.exportAll(L,r)},{"./io/io":"7nGNQ","./math":"9JVMR","./ops/broadcast_util":"jK3Iv","./ops/browser":"depSV","./ops/gather_nd_util":"dxOzC","./ops/scatter_nd_util":"64SNi","./ops/slice_util":"gE25O","./serialization":"jZUhL","./tensor_util":"5jYPc","./test_util":"4cgWI","./util":"6bzqD","./version":"1KizZ","./optimizers/adadelta_optimizer":"bjl4q","./optimizers/adagrad_optimizer":"ePsdH","./optimizers/adam_optimizer":"jeFGD","./optimizers/adamax_optimizer":"zCNEi","./optimizers/momentum_optimizer":"kU5Zz","./optimizers/optimizer":"ib0QT","./optimizers/optimizer_constructors":"fEyJz","./optimizers/rmsprop_optimizer":"7pOOq","./optimizers/sgd_optimizer":"hxaNx","./tensor":"j4V3y","./types":"4gWh6","./ops/ops":"iXIBS","./ops/loss_ops_utils":"2h8jj","./train":"lpkM3","./globals":"75Rqm","./kernel_registry":"dGfMo","./gradients":"dqgxj","./environment":"j2c6C","./browser_util":"hXpMe","./backends/backend_util":"ajgZQ","./device_util":"1GYkw","./backends/kernel_impls":"2Q3sv","./backends/backend":"8QMPY","./kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7nGNQ":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Importing local_storage and indexed_db is necessary for the routers to be
// registered.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"copyModel",()=>p.copyModel),s.export(r,"listModels",()=>p.listModels),s.export(r,"moveModel",()=>p.moveModel),s.export(r,"removeModel",()=>p.removeModel),s.export(r,"browserFiles",()=>n.browserFiles),s.export(r,"browserHTTPRequest",()=>a.browserHTTPRequest),s.export(r,"concatenateArrayBuffers",()=>o.concatenateArrayBuffers),s.export(r,"decodeWeights",()=>o.decodeWeights),s.export(r,"encodeWeights",()=>o.encodeWeights),s.export(r,"fromMemory",()=>i.fromMemory),s.export(r,"fromMemorySync",()=>i.fromMemorySync),s.export(r,"getLoadHandlers",()=>l.getLoadHandlers),s.export(r,"getModelArtifactsForJSON",()=>o.getModelArtifactsForJSON),s.export(r,"getModelArtifactsForJSONSync",()=>o.getModelArtifactsForJSONSync),s.export(r,"getModelArtifactsInfoForJSON",()=>o.getModelArtifactsInfoForJSON),s.export(r,"getSaveHandlers",()=>l.getSaveHandlers),s.export(r,"getWeightSpecs",()=>o.getWeightSpecs),s.export(r,"http",()=>a.http),s.export(r,"isHTTPScheme",()=>a.isHTTPScheme),s.export(r,"loadWeights",()=>u.loadWeights),s.export(r,"registerLoadRouter",()=>l.registerLoadRouter),s.export(r,"registerSaveRouter",()=>l.registerSaveRouter),s.export(r,"weightsLoaderFactory",()=>u.weightsLoaderFactory),s.export(r,"withSaveHandler",()=>i.withSaveHandler),s.export(r,"withSaveHandlerSync",()=>i.withSaveHandlerSync),e("./indexed_db"),e("./local_storage");var n=e("./browser_files"),a=e("./http"),o=e("./io_utils"),i=e("./passthrough"),l=e("./router_registry"),u=e("./weights_loader"),p=e("./model_management")},{"./indexed_db":"53mi8","./local_storage":"glJMc","./browser_files":"docKv","./http":"8BH4u","./io_utils":"1TR1m","./passthrough":"l9cn1","./router_registry":"2YvQb","./weights_loader":"gm7nU","./model_management":"lPc6S","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],docKv:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"BrowserDownloads",()=>l),s.export(r,"browserDownloadsRouter",()=>p),/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */s.export(r,"browserDownloads",()=>c),/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, one or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */s.export(r,"browserFiles",()=>d),e("../flags");var n=e("../environment"),a=e("./io_utils"),o=e("./router_registry");function i(e){return new Promise(e=>setTimeout(e)).then(e)}class l{constructor(e){if(!(0,n.env)().getBool("IS_BROWSER"))//   current environment.
throw Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(l.URL_SCHEME)&&(e=e.slice(l.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw Error("Browser downloads are not supported in this environment since `document` is not present");let t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let r=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s=(0,a.getModelJSONForModelArtifacts)(e,r),n=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),o=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(o.download=this.modelJsonFileName,o.href=n,// Trigger downloads by evoking a click event on the download anchors.
// When multiple downloads are started synchronously, Firefox will only
// save the last one.
await i(()=>o.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await i(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:(0,a.getModelArtifactsInfoForJSON)(e)}}}}l.URL_SCHEME="downloads://";class u{constructor(e){if(null==e||e.length<1)throw Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let r=new FileReader;r.onload=r=>{// tslint:disable-next-line:no-any
let s=JSON.parse(r.target.result),n=s.modelTopology;if(null==n){t(Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}let o=s.weightsManifest;if(null==o){t(Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(0===this.weightsFiles.length){e({modelTopology:n});return}let i=(0,a.getModelArtifactsForJSON)(s,e=>this.loadWeights(e));e(i)},r.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(this.jsonFile)})}loadWeights(e){let t=[],r=[];for(let s of e)t.push(...s.weights),r.push(...s.paths);let s=this.checkManifestAndWeightFiles(e),n=r.map(e=>this.loadWeightsFile(e,s[e]));return Promise.all(n).then(e=>[t,(0,a.concatenateArrayBuffers)(e)])}loadWeightsFile(e,t){return new Promise((r,s)=>{let n=new FileReader;n.onload=e=>{// tslint:disable-next-line:no-any
let t=e.target.result;r(t)},n.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),n.readAsArrayBuffer(t)})}/**
     * Check the compatibility between weights manifest and weight files.
     */checkManifestAndWeightFiles(e){let t=[],r=this.weightsFiles.map(e=>(0,a.basename)(e.name)),s={};for(let n of e)n.paths.forEach(e=>{let n=(0,a.basename)(e);if(-1!==t.indexOf(n))throw Error(`Duplicate file basename found in weights manifest: '${n}'`);if(t.push(n),-1===r.indexOf(n))throw Error(`Weight file with basename '${n}' is not provided.`);s[e]=this.weightsFiles[r.indexOf(n)]});if(t.length!==this.weightsFiles.length)throw Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}let p=e=>(0,n.env)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(l.URL_SCHEME)?c(e.slice(l.URL_SCHEME.length)):null;function c(e="model"){return new l(e)}function d(e){return new u(e)}(0,o.IORouterRegistry).registerSaveRouter(p)},{"../flags":"dupjs","../environment":"j2c6C","./io_utils":"1TR1m","./router_registry":"2YvQb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8BH4u":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"HTTPRequest",()=>u),/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */s.export(r,"parseUrl",()=>p),s.export(r,"isHTTPScheme",()=>c),s.export(r,"httpRouter",()=>d),/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconstitutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */s.export(r,"http",()=>h),/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */s.export(r,"browserHTTPRequest",()=>f);var n=e("../environment"),a=e("../util"),o=e("./io_utils"),i=e("./router_registry"),l=e("./weights_loader");class u{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,a.assert)("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=(0,n.env)().platform.fetch,(0,a.assert)(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&(0,a.assert)(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let r=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s=(0,o.getModelJSONForModelArtifacts)(e,r);t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");let n=await this.fetch(this.path,t);if(n.ok)return{modelArtifactsInfo:(0,o.getModelArtifactsInfoForJSON)(e),responses:[n]};throw Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${n.status}.`)}/**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */async load(){let e;let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",Error(e)}// We do not allow both modelTopology and weightsManifest to be missing.
let r=e.modelTopology,s=e.weightsManifest;if(null==r&&null==s)throw Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return(0,o.getModelArtifactsForJSON)(e,e=>this.loadWeights(e))}async loadWeights(e){let t=Array.isArray(this.path)?this.path[1]:this.path,[r,s]=p(t),n=this.weightPathPrefix||r,a=(0,o.getWeightSpecs)(e),i=[],u=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?u.push(this.weightUrlConverter(e)):i.push(n+e+s);this.weightUrlConverter&&i.push(...await Promise.all(u));let c=await (0,l.loadWeightsAsArrayBuffer)(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[a,(0,o.concatenateArrayBuffers)(c)]}}function p(e){let t=e.lastIndexOf("/"),r=e.lastIndexOf("?"),s=e.substring(0,t),n=r>t?e.substring(r):"";return[s+"/",n]}function c(e){return null!=e.match(u.URL_SCHEME_REGEX)}u.URL_SCHEME_REGEX=/^https?:\/\//;let d=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc));else if(Array.isArray(e)?e.every(e=>c(e)):c(e))return h(e,t);return null};function h(e,t){return new u(e,t)}function f(e,t){return h(e,t)}(0,i.IORouterRegistry).registerSaveRouter(d),(0,i.IORouterRegistry).registerLoadRouter(d)},{"../environment":"j2c6C","../util":"6bzqD","./io_utils":"1TR1m","./router_registry":"2YvQb","./weights_loader":"gm7nU","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gm7nU:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */s.export(r,"loadWeightsAsArrayBuffer",()=>u),/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */s.export(r,"loadWeights",()=>p),/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */s.export(r,"weightsLoaderFactory",()=>c);var n=e("../environment"),a=e("../util"),o=e("./io_utils"),i=e("./progress"),l=e("./types");async function u(e,t){null==t&&(t={});let r=null==t.fetchFunc?(0,n.env)().platform.fetch:t.fetchFunc,s=e.map(e=>r(e,t.requestInit,{isBinary:!0})),a=null==t.onProgress?await Promise.all(s):await (0,i.monitorPromisesProgress)(s,t.onProgress,0,.5),o=a.map(e=>e.arrayBuffer()),l=null==t.onProgress?await Promise.all(o):await (0,i.monitorPromisesProgress)(o,t.onProgress,.5,1);return l}async function p(e,t="",r,s){let n=c(e=>u(e,{requestInit:s}));return n(e,t,r)}function c(e){return async(t,r="",s)=>{// Collect all the groups, weights, and their relative offsets to be
// fetched.
let n=t.map(()=>!1),i={},u=null!=s?s.map(()=>!1):[],p=[];if(t.forEach((e,t)=>{let r=0;e.weights.forEach(e=>{let o="quantization"in e?e.quantization.dtype:e.dtype,c=l.DTYPE_VALUE_SIZE_MAP[o]*a.sizeFromShape(e.shape),d=()=>{n[t]=!0,null==i[t]&&(i[t]=[]),i[t].push({manifestEntry:e,groupOffset:r,sizeBytes:c})};null!=s?s.forEach((t,r)=>{t===e.name&&(d(),u[r]=!0)}):d(),p.push(e.name),r+=c})}),!u.every(e=>e)){let e=s.filter((e,t)=>!u[t]);throw Error(`Could not find weights in manifest with names: ${e.join(", ")}. 
Manifest JSON has weights with names: ${p.join(", ")}.`)}// Convert the one-hot boolean groupId => shouldFetch map to a list of group
// IDs.
let c=n.reduce((e,t,r)=>(t&&e.push(r),e),[]),d=[];c.forEach(e=>{t[e].paths.forEach(e=>{let t=r+(r.endsWith("/")?"":"/")+e;d.push(t)})});let h=await e(d),f={},m=0;return c.forEach(e=>{let r=t[e].paths.length,s=0;for(let e=0;e<r;e++)s+=h[m+e].byteLength;// Create a buffer for the whole group.
let n=new ArrayBuffer(s),a=new Uint8Array(n),l=0;for(let e=0;e<r;e++){let t=new Uint8Array(h[m+e]);a.set(t,l),l+=t.byteLength}let u=i[e];u.forEach(e=>{let t=n.slice(e.groupOffset,e.groupOffset+e.sizeBytes),r=(0,o.decodeWeights)(t,[e.manifestEntry]);for(let e in r)f[e]=r[e]}),m+=r}),f}}},{"../environment":"j2c6C","../util":"6bzqD","./io_utils":"1TR1m","./progress":"i3Dh0","./types":"ejFGq","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i3Dh0:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */s.export(r,"monitorPromisesProgress",()=>a);var n=e("../util");function a(e,t,r,s){var a,o;(0,n.assert)(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array"),a=r=null==r?0:r,o=s=null==s?1:s,(0,n.assert)(a>=0&&a<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`),(0,n.assert)(o>=0&&o<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${o}`),(0,n.assert)(o>=a,()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${o}`);let i=0;return Promise.all(e.map(n=>(n.then(n=>{let a=r+ ++i/e.length*(s-r);return(// pass fraction as parameter to callback function.
    t(a),n)}),n)))}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l9cn1:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data. Optional.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs. Optional.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */s.export(r,"fromMemory",()=>i),/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data. Optional.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs. Optional.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandlerSync` that simply loads the provided data.
 */s.export(r,"fromMemorySync",()=>l),/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     promise that resolves to a `SaveResult`.
 */s.export(r,"withSaveHandler",()=>u),/**
 * Creates an IOHandlerSync that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */s.export(r,"withSaveHandlerSync",()=>p);class n{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class a{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class o{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function i(e,t,r,s){let n=arguments;return new o(l(...n))}function l(e,t,r,s){if(1!=arguments.length)return(// Legacy support.
// TODO(cais): Remove this deprecated API.
console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new n({modelTopology:e,weightSpecs:t,weightData:r,trainingConfig:s}));{let t=null!=e.modelTopology||null!=e.weightSpecs;return t?new n(e):(// Legacy support: with only modelTopology.
// TODO(cais): Remove this deprecated API.
console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new n({modelTopology:e}))}}function u(e){return new a(e)}function p(e){return new a(e)}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9JVMR":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Exports under the tf.math.* namespace.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"confusionMatrix",()=>n.confusionMatrix);var n=e("./ops/confusion_matrix")},{"./ops/confusion_matrix":"4DRPQ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4DRPQ":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */s.export(r,"confusionMatrix_",()=>c),s.export(r,"confusionMatrix",()=>d);var n=e("../tensor_util_env"),a=e("../util"),o=e("./cast"),i=e("./mat_mul"),l=e("./one_hot"),u=e("./operation"),p=e("./transpose");function c(e,t,r){let s=(0,n.convertToTensor)(e,"labels","confusionMatrix"),u=(0,n.convertToTensor)(t,"predictions","confusionMatrix");a.assert(null==r||r>0&&Number.isInteger(r),()=>`If provided, numClasses must be a positive integer, but got ${r}`),a.assert(1===s.rank,()=>`Expected the rank of labels to be 1, but got ${s.rank}`),a.assert(1===u.rank,()=>`Expected the rank of predictions to be 1, but got ${u.rank}`),a.assert(s.shape[0]===u.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${u.shape[0]}. Labels and predictions should have the same number of elements.`),a.assert(r>0&&Number.isInteger(r),()=>`numClasses is required to be a positive integer, but got ${r}`);// TODO(cais): In the future, if oneHot supports tensors inputs for
//   `numClasses`, `confusionMatrix` can make `numClasses` optional.
let c=(0,l.oneHot)((0,o.cast)(s,"int32"),r),d=(0,l.oneHot)((0,o.cast)(u,"int32"),r),h=(0,p.transpose)(c),f=(0,i.matMul)(h,d);return(0,o.cast)(f,"int32")}let d=(0,u.op)({confusionMatrix_:c})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./cast":"7e2UZ","./mat_mul":"dpVGA","./one_hot":"lxcni","./operation":"htqKz","./transpose":"lWGmK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dpVGA:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"matMul",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({matMul_:/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t,r=!1,s=!1){let l=(0,i.convertToTensor)(e,"a","matMul"),u=(0,i.convertToTensor)(t,"b","matMul");[l,u]=(0,o.makeTypesMatch)(l,u);let p={a:l,b:u};return(0,n.ENGINE).runKernel(a.BatchMatMul,p,{transposeA:r,transposeB:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lxcni:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"oneHot",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({oneHot_:/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 * `indices` used to encode prediction class must start from 0. For example,
 *  if you have 3 classes of data, class 1 should be encoded as 0, class 2
 *  should be 1, and class 3 should be 2.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must
 * start from 0.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 * @param dtype The dtype of the output tensor, default to 'int32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e,t,r=1,s=0,i="int32"){if(t<2)throw Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let l=(0,o.convertToTensor)(e,"indices","oneHot","int32");return(0,n.ENGINE).runKernel(a.OneHot,{indices:l},{dtype:i,depth:t,onValue:r,offValue:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lWGmK:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transpose",()=>f);var n=e("../engine"),a=e("../globals"),o=e("../kernel_names"),i=e("../tensor_util_env"),l=e("../util"),u=e("./complex"),p=e("./imag"),c=e("./neg"),d=e("./operation"),h=e("./real");let f=(0,d.op)({transpose_:/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 * @param conjugate Will conjugate complex input if true.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t,r){let s=(0,i.convertToTensor)(e,"x","transpose");if(null==t&&(t=s.shape.map((e,t)=>t).reverse()),l.assert(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(e=>{l.assert(e>=0&&e<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();let d={perm:t};return"complex64"===s.dtype?(0,a.tidy)(()=>{let e=(0,h.real)(s),t=(0,p.imag)(s);return e=(0,n.ENGINE).runKernel(o.Transpose,{x:e},d),t=(0,n.ENGINE).runKernel(o.Transpose,{x:t},d),r&&(t=(0,c.neg)(t)),(0,u.complex)(e,t)}):(0,n.ENGINE).runKernel(o.Transpose,{x:s},d)}})},{"../engine":"ldVRX","../globals":"75Rqm","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./complex":"i0i48","./imag":"c6DsY","./neg":"gRzxs","./operation":"htqKz","./real":"hZNER","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"75Rqm":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"enableProdMode",()=>l),/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"enableDebugMode",()=>u),/** Globally disables deprecation warnings */s.export(r,"disableDeprecationWarnings",()=>p),/** Warn users about deprecated functionality. */s.export(r,"deprecationWarn",()=>c),/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"disposeVariables",()=>d),/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */s.export(r,"engine",()=>h),/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */s.export(r,"memory",()=>f),/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 * - `kernelNames`: an array of unique strings with just the names of the
 * kernels in the `kernels` array.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */s.export(r,"profile",()=>m),/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */s.export(r,"tidy",()=>g),/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */s.export(r,"dispose",()=>x),/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */s.export(r,"keep",()=>b),/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */s.export(r,"time",()=>y),/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"setBackend",()=>j),/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"ready",()=>_),/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"getBackend",()=>k),/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"removeBackend",()=>I),/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */s.export(r,"findBackend",()=>w),/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */s.export(r,"findBackendFactory",()=>C),/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"registerBackend",()=>S),/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */s.export(r,"backend",()=>T),/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */s.export(r,"setPlatform",()=>N);var n=e("./engine"),a=e("./environment"),o=e("./tensor"),i=e("./tensor_util");function l(){(0,a.env)().set("PROD",!0)}function u(){(0,a.env)().set("DEBUG",!0)}function p(){(0,a.env)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.env)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function d(){(0,n.ENGINE).disposeVariables()}function h(){return n.ENGINE}function f(){return(0,n.ENGINE).memory()}function m(e){return(0,n.ENGINE).profile(e)}function g(e,t){return(0,n.ENGINE).tidy(e,t)}function x(e){let t=(0,i.getTensorsInContainer)(e);t.forEach(e=>e.dispose())}function b(e){return(0,n.ENGINE).keep(e)}function y(e){return(0,n.ENGINE).time(e)}function j(e){return(0,n.ENGINE).setBackend(e)}function _(){return(0,n.ENGINE).ready()}function k(){return n.ENGINE.backendName}function I(e){(0,n.ENGINE).removeBackend(e)}function w(e){return(0,n.ENGINE).findBackend(e)}function C(e){return(0,n.ENGINE).findBackendFactory(e)}function S(e,t,r=1){return(0,n.ENGINE).registerBackend(e,t,r)}function T(){return n.ENGINE.backend}function N(e,t){(0,a.env)().setPlatform(e,t)}(0,o.setDeprecationWarningFn)(c)},{"./engine":"ldVRX","./environment":"j2c6C","./tensor":"j4V3y","./tensor_util":"5jYPc","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c6DsY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"imag",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({imag_:/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"input","imag");return(0,n.ENGINE).runKernel(a.Imag,{input:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gRzxs:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"neg",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({neg_:/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","neg");return(0,n.ENGINE).runKernel(a.Neg,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hZNER:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"real",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({real_:/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"input","real");return(0,n.ENGINE).runKernel(a.Real,{input:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jK3Iv:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t){let r=e.length,s=[];for(let n=0;n<r;n++){let a=r-1-n,o=e[a]||1,i=t[t.length-1-n]||1;i>1&&1===o&&s.unshift(a)}return s}function a(e,t){let r=[];for(let s=0;s<t.length;s++){let n=e[e.length-s-1],a=t.length-s-1,o=t[a];(null==n||1===n&&o>1)&&r.unshift(a)}return r}function o(e,t){let r=[],s=Math.max(e.length,t.length);for(let n=0;n<s;n++){let s=e[e.length-n-1];null==s&&(s=1);let a=t[t.length-n-1];if(null==a&&(a=1),1===s)r.unshift(a);else if(1===a)r.unshift(s);else if(s!==a){let r=`Operands could not be broadcast together with shapes ${e} and ${t}.`;throw Error(r)}else r.unshift(s)}return r}s.defineInteropFlag(r),s.export(r,"getBroadcastDims",()=>n),/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */s.export(r,"getReductionAxes",()=>a),s.export(r,"assertAndGetBroadcastShape",()=>o)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],depSV:[function(e,t,r){let s;/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),/**
 * Creates a `tf.Tensor` from an image in async way.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * (await tf.browser.fromPixelsAsync(image)).print();
 * ```
 * This API is the async version of fromPixels. The API will first
 * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to
 * imageBitmap if the flag is set to true.
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */n.export(r,"fromPixelsAsync",()=>m),/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor
 * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If
 * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */n.export(r,"toPixels",()=>g),n.export(r,"fromPixels",()=>x);var a=e("../engine"),o=e("../environment"),i=e("../kernel_names"),l=e("../kernel_registry"),u=e("../tensor"),p=e("../tensor_util_env"),c=e("./cast"),d=e("./operation"),h=e("./tensor3d");/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @returns A Tensor3D with the shape `[height, width, numChannels]`.
 *
 * Note: fromPixels can be lossy in some cases, same image may result in
 * slightly different tensor values, if rendered by different rendering
 * engines. This means that results from different browsers, or even same
 * browser with CPU and GPU rendering engines can be different. See discussion
 * in details:
 * https://github.com/tensorflow/tfjs/issues/5482
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */function f(e,t=3){let r,n;// Sanity checks.
if(t>4)throw Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let o=!1,u=!1,p=!1,c=!1,d=!1,f=!1;if(e.data instanceof Uint8Array)o=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)u=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)p=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)c=!0;else if(null!=e.getContext)d=!0;else if("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap)f=!0;else throw Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);// If the current backend has 'FromPixels' registered, it has a more
// efficient way of handling pixel uploads, so we call that.
let m=(0,l.getKernel)(i.FromPixels,a.ENGINE.backendName);if(null!=m)return(0,a.ENGINE).runKernel(i.FromPixels,{pixels:e},{numChannels:t});let[g,x]=p?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(d)r=e.getContext("2d").getImageData(0,0,g,x).data;else if(u||o)r=e.data;else if(c||p||f){if(null==s){if("undefined"==typeof document){if("undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof OffscreenCanvasRenderingContext2D)s=new OffscreenCanvas(1,1).getContext("2d");else throw Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.")}else s=document.createElement("canvas").getContext("2d",{willReadFrequently:!0})}s.canvas.width=g,s.canvas.height=x,s.drawImage(e,0,0,g,x),r=s.getImageData(0,0,g,x).data}if(4===t)n=new Int32Array(r);else{let e=g*x;n=new Int32Array(e*t);for(let s=0;s<e;s++)for(let e=0;e<t;++e)n[s*t+e]=r[4*s+e]}let b=[x,g,t];return(0,h.tensor3d)(n,b,"int32")}async function m(e,t=3){var r;let s=null;// Check whether the backend needs to wrap |pixels| to imageBitmap and
// whether |pixels| can be wrapped to imageBitmap.
if((0,o.env)().getBool("WRAP_TO_IMAGEBITMAP")&&"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(r=e)&&0!==r.width&&0!==r.height&&!(null!=e&&e.data instanceof Uint8Array)){// Force the imageBitmap creation to not do any premultiply alpha
// ops.
let t;try{// wrap in try-catch block, because createImageBitmap may not work
// properly in some browsers, e.g.
// https://bugzilla.mozilla.org/show_bug.cgi?id=1335594
// tslint:disable-next-line: no-any
t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}s=null!=t&&t.width===e.width&&t.height===e.height?t:e}else s=e;return f(s,t)}async function g(e,t){let r=(0,p.convertToTensor)(e,"img","toPixels");if(!(e instanceof u.Tensor)){// Assume int32 if user passed a native array.
let e=r;r=(0,c.cast)(e,"int32"),e.dispose()}if(2!==r.rank&&3!==r.rank)throw Error(`toPixels only supports rank 2 or 3 tensors, got rank ${r.rank}.`);let[s,n]=r.shape.slice(0,2),a=2===r.rank?1:r.shape[2];if(a>4||2===a)throw Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==r.dtype&&"int32"!==r.dtype)throw Error(`Unsupported type for toPixels: ${r.dtype}. Please use float32 or int32 tensors.`);let o=await r.data(),i="float32"===r.dtype?255:1,l=new Uint8ClampedArray(n*s*4);for(let e=0;e<s*n;++e){let t=[0,0,0,255];for(let s=0;s<a;s++){let n=o[e*a+s];if("float32"===r.dtype){if(n<0||n>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${n}.`)}else if("int32"===r.dtype&&(n<0||n>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${n}.`);1===a?(t[0]=n*i,t[1]=n*i,t[2]=n*i):t[s]=n*i}let s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=n,t.height=s;let e=t.getContext("2d"),r=new ImageData(l,n,s);e.putImageData(r,0,0)}return r!==e&&r.dispose(),l}let x=(0,d.op)({fromPixels_:f})},{"../engine":"ldVRX","../environment":"j2c6C","../kernel_names":"3i501","../kernel_registry":"dGfMo","../tensor":"j4V3y","../tensor_util_env":"9iWFD","./cast":"7e2UZ","./operation":"htqKz","./tensor3d":"kmNes","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kmNes:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor3d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t,r){if((0,a.assertNonNull)(e),null!=t&&3!==t.length)throw Error("tensor3d() requires shape to have three numbers");let s=(0,n.inferShape)(e,r);if(3!==s.length&&1!==s.length)throw Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,o.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dxOzC:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */s.export(r,"prepareAndValidate",()=>a);var n=e("../util");function a(e,t){let r=e.shape.length,s=t.shape.length;if(r<1)throw Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${r}.`);if(s<1)throw Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>r)throw Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${r}`);if(0===(0,n.sizeFromShape)(e.shape))throw Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let a=t.shape,o=a[a.length-1],i=1;for(let e=0;e<a.length-1;++e)i*=a[e];let l=e.shape,u=a.slice();u.pop();let p=1;for(let e=o;e<r;++e)p*=l[e],u.push(l[e]);let c=[...(0,n.computeStrides)(e.shape).map(e=>e/p),1].slice(0,o);return[u,i,p,c]}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"64SNi":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */s.export(r,"validateUpdateShape",()=>a),/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */s.export(r,"validateInput",()=>o),/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */s.export(r,"calculateShapes",()=>i);var n=e("../util");function a(e,t,r){let s=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${r.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${n}.`;if(r.rank<n)throw Error(a+` update.rank < ${n}. `);if(e.length<s+(r.rank-n))throw Error(a+` Output shape length < ${s+(r.rank-n)}`);if(r.rank!==n+e.length-s)throw Error(a+` update.rank != ${n+e.length-s}`);for(let e=0;e<n;++e)if(r.shape[e]!==t.shape[e])throw Error(a+` updates.shape[${e}] (${r.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<r.rank-n;++t)if(r.shape[t+n]!==e[t+s])throw Error(a+` updates.shape[${t+n}] (${r.shape[t+n]}) != shape[${t+n}] (${e[t+n]})`)}function o(e,t,r){if(t.rank<1)throw Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(r.length<1)throw Error(`Output rank must be greater or equal to 1, but got shape: ${r}`);if(0===r.length){if(0===t.size)throw Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(r,t,e)}function i(e,t,r){// Calculate the number of dimensions in indices
let s=t.shape.length,a=s>1?t.shape[s-1]:1,o=r.length,i=1;for(let e=a;e<o;++e)i*=r[e];let l=a<1?1:a,u=(0,n.sizeFromShape)(t.shape)/l,p=[...(0,n.computeStrides)(r.slice(0,a)),1],c=(0,n.sizeFromShape)(r);return{sliceRank:a,numUpdates:u,sliceSize:i,strides:p,outputSize:c}}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gE25O:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"assertParamsValid",()=>a),/** Converts a binary mask to an array of axes. Used in stridedSlice(). */s.export(r,"maskToAxes",()=>o),/** Computes the output shape given the strided slice params. */s.export(r,"computeOutShape",()=>i),// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.
s.export(r,"stridesWithElidedDims",()=>l),// Normalize the start, end and strides.
s.export(r,"getNormalizedAxes",()=>p),// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.
s.export(r,"startIndicesWithElidedDims",()=>c),// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.
s.export(r,"stopIndicesWithElidedDims",()=>d),s.export(r,"stridesForAxis",()=>h),s.export(r,"startForAxis",()=>f),s.export(r,"stopForAxis",()=>m),/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */s.export(r,"isSliceContinous",()=>g),s.export(r,"computeFlatOffset",()=>x),s.export(r,"parseSliceParams",()=>b),// Convert the slicing specification from a sparse representation to a dense
// representation. This means that all ellipses and newaxis are expanded out.
s.export(r,"sliceInfo",()=>y);var n=e("../util");function a(e,t,r){let s=e.shape.length;n.assert(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),n.assert(s===r.length,()=>`Error in slice${s}D: Length of size ${r} must match the rank of the array (${s}).`);for(let a=0;a<s;++a)n.assert(t[a]+r[a]<=e.shape[a],()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+r[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function o(e){let t=[],r=0;for(;e>0;)1&e&&t.push(r),e/=2,r++;return t}function i(e,t,r){let s=[];for(let n=0;n<e.length;n++)s[n]=Math.ceil((t[n]-e[n])/r[n]);return s}function l(e,t,r,s){let n=[...e];for(let e=n.length;e<s.length;e++)n.push(1);for(let e=0;e<r;e++)0===e?n[t]=1:(n.splice(t,0/* num elements to delete */,1/* element to add */),n.pop());return n}function u(e,t){let r=[];for(let s=0;s<e;s++)r.push(t+s);return r}function p(e,t,r,s,n,a,o,i,u){let p=e.length,g=Array(p),x=Array(p),b=Array(p);if(t.length&&r>0){let u=t[0],p=r+1;g=c(o,u,p,s,e),x=d(i,u,p,n,e),b=l(a,u,p,e)}else for(let t=0;t<p;t++)g[t]=f(o,s,a,e,t,u),x[t]=m(i,n,a,e,t,u),b[t]=h(a,t,u);return{begin:g,end:x,strides:b}}function c(e,t,r,s,n){let a=[...n],o=u(r,t);for(let n=0;n<a.length;n++)if(o.indexOf(n)>-1)a[n]=0;else{var i;let o=(i=n)<=t?i:i-(r-1),l=s[o];e&1<<o&&(l=0),a[n]=l}return a}function d(e,t,r,s,a){let o=[...a],i=u(r,t);for(let n=0;n<o.length;n++)if(i.indexOf(n)>-1)o[n]=Number.MAX_SAFE_INTEGER;else{var l;let a=(l=n)<=t?l:l-(r-1),i=s[a];e&1<<a&&(i=Number.MAX_SAFE_INTEGER),o[n]=i}for(let e=0;e<o.length;e++){// Handle negative indices
let t=a[e];o[e]<0&&(o[e]+=t),o[e]=n.clamp(0,o[e],a[e])}return o}function h(e,t,r){let s=e[t];return(r&1<<t||null==s)&&(s=1),s}function f(e,t,r,s,a,o){// Begin with the specified index
let i=t[a],l=r[a]||1;(e&1<<a||o&1<<a||null==i)&&(// clamped below (Note: We could have set them to 0 and axis_size-1, but
// use lowest() and max() to maintain symmetry with StopForAxis())
i=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);// Handle negative indices
let u=s[a];return i<0&&(i+=u),// Clamping
i=n.clamp(0,i,u-1)}function m(e,t,r,s,a,o){// Begin with the specified index
let i=t[a],l=r[a]||1;(e&1<<a||o&1<<a||null==i)&&(// clamped below
i=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);// Handle negative indices
let u=s[a];return i<0&&(i+=u),i=l>0?n.clamp(0,i,u):n.clamp(-1,i,u-1)}function g(e,t,r){// Index of the first axis that has size > 1.
let s=r.length;for(let e=0;e<r.length;e++)if(r[e]>1){s=e;break}for(let n=s+1;n<r.length;n++)if(t[n]>0||r[n]!==e[n])return!1;return!0}function x(e,t){let r=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)r+=e[s]*t[s];return r}function b(e,t,r){let s,a;let o=e.shape.length;return(s="number"==typeof t?[t,...Array(o-1).fill(0)]:t.length<o?t.concat(Array(o-t.length).fill(0)):t.slice()).forEach(e=>{n.assert(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==r?Array(o).fill(-1):"number"==typeof r?[r,...Array(o-1).fill(-1)]:r.length<o?r.concat(Array(o-r.length).fill(-1)):r).map((t,r)=>t>=0?t:(n.assert(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${r}.`),e.shape[r]-s[r])),[s,a]}function y(e,t,r,s,n,a,o,i,l){let u;// Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask
// is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power
// of 2. When i is a power of 2, i & (i - 1) is always 0.
// Also ref:
// https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
if(null==s?(u=Array(t.length)).fill(1):u=s,null!=o&&(o&o-1)!=0)throw Error("Multiple ellipses in slice is not allowed.");// Step 1: Account for ellipsis and new axis.
// Check for ellipsis and count how many non-newaxis there are after.
let p=!1,c={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:r.slice(),strides:u.slice(),beginMask:n,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<c.dims;e++)p&&(1<<e&i)!=0&&c.numAddAxisAfterEllipsis++,1<<e&o&&(p=!0);!p&&(c.ellipsisMask|=1<<c.dims,c.dims++);// Step 2: Make a sparse spec into a full index spec.
//
// The sparse spec deos not correspond to the number of dimensions.
// Make a dense spec that cooresponds to the number of dimensions.
//
// For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to
// produce the missing beginMask for the first two dimensions i.e. from
// beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),
// endMask = 7 (111).
let d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let r=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=Array(t.dims),t.end=Array(t.dims),t.strides=Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){// Only the bit that has ellipsis will fall in this condition.
// Expand the ellipsis into the appropriate indices
// Note: this only works because we guaranteed one ellipsis.
let n=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;r<n;r++)// newAxis aren't real axis so you have to skip.
t.begin[r]=0,t.end[r]=0,t.strides[r]=1,t.beginMask|=1<<r,t.endMask|=1<<r,t.finalShapeGatherIndices.push(r),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[r]=s}else if(1<<s&e.newAxisMask)// Only the bit that has newAxis will fall in this condition.
t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(r===t.begin.length)throw Error(`Index out of range using input dim ${r}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[r]=e.begin[s]),null!=e.end&&(t.end[r]=e.end[s]),t.strides[r]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<r),e.endMask&1<<s&&(t.endMask|=1<<r),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<r):(t.finalShapeGatherIndices.push(r),// Remember that where in the sparse shape the dense dim comes from.
t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[r]=s,r++}}(c,d);// Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit
// and bounds check.
let h=!0,f=!0,m=!0,g=[],x=[];for(let t=0;t<e.length;++t){let r;if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);let s=!!(d.shrinkAxisMask&1<<t),n=e[t];if(-1===n){g.push(s?1:-1);continue}let a=[d.beginMask&1<<t,d.endMask&1<<t],o=[d.strides[t]>0?0:-1,d.strides[t]>0?n:n-1];if(s&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];let i=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(s){// If we are shrinking, the end index is now possibly incorrect. In
// particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.
// and canonical puts these to n-1 and 0, which implies a degenerate
// interval. Fortunately, it is now safe to re-create end as begin + 1.
let e=d.begin[t]<0?n+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=n)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=j(d.begin[t],0,d.strides[t],n,a,o),d.end[t]=j(d.end[t],1,d.strides[t],n,a,o);// Update optimization values
let e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===n;h=h&&e,f=f&&(0===t&&1===d.strides[t]||e)}else h=h&&1===d.strides[t]&&i,f=f&&(0===t&&1===d.strides[t]||i);let l=!1;if(d.beginValid&&d.endValid?(r=d.end[t]-d.begin[t],l=!0):s?(// The dimension is still known as 1 for the processingShape, but will be
// discarded for the final shape.
r=1,l=!0):i&&n>=0&&(r=d.strides[t]<0?-n:n,l=!0),l){let e;e=0===r||r<0!=d.strides[t]<0?0:Math.trunc(r/d.strides[t])+(r%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}// Step 4: Compute the final shape
//
// newAxis will increase dimension by 1 (with a one-size dimension)
// slices like foo[3, ...] will reduce dimension by 1.
// This cannot be done earlier, because it depends on Step 3.
for(let e=0;e<d.finalShapeGatherIndices.length;++e){let t=d.finalShapeGatherIndices[e];t>=0?x.push(g[t]):-2===t&&x.push(1)}let b=x.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]);return{finalShapeSparse:b,finalShape:x,isIdentity:h,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function j(e,t,r,s,n,a){if(n[t])return r>0?a[t]:a[t+1&1];{let t=e<0?s+e:e;// make negative indices positive
return t<a[0]?a[0]:t>a[1]?a[1]:t}}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jZUhL:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */s.export(r,"Serializable",()=>a),/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */s.export(r,"SerializationMap",()=>o),/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */s.export(r,"registerClass",()=>i);var n=e("./util");class a{/**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */getClassName(){return this.constructor.className}/**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     *//** @nocollapse */static fromConfig(e,t){return new e(t)}}class o{constructor(){this.classNameMap={}}/**
     * Returns the singleton instance of the map.
     */static getMap(){return null==o.instance&&(o.instance=new o),o.instance}/**
     * Registers the class as serializable.
     */static register(e){o.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function i(e){(0,n.assert)(null!=e.className,()=>"Class being registered does not have the static className property defined."),(0,n.assert)("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),(0,n.assert)(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),o.register(e)}},{"./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4cgWI":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TEST_EPSILON_FLOAT16",()=>i),s.export(r,"expectArraysClose",()=>l),s.export(r,"testEpsilon",()=>u),s.export(r,"expectPromiseToFail",()=>c),s.export(r,"expectArraysEqual",()=>d),s.export(r,"expectNumbersClose",()=>h),s.export(r,"expectValuesInRange",()=>m),s.export(r,"expectArrayBuffersEqual",()=>g),/** Encodes strings into utf-8 bytes. */s.export(r,"encodeStrings",()=>function e(t){for(let r=0;r<t.length;r++){let s=t[r];Array.isArray(s)?e(s):t[r]=(0,o.encodeString)(s)}return t}),/** Creates an HTMLVideoElement with autoplay-friendly default settings. */s.export(r,"createVideoElement",()=>x),s.export(r,"play",()=>b);var n=e("./engine"),a=e("./tensor_util_env"),o=e("./util");let i=.1;function l(e,t,r){return null==r&&(r=u()),p(e,t,(e,t)=>f(e,t,r))}function u(){return 32===(0,n.ENGINE).backend.floatPrecision()?.001:i}function p(e,t,r){let s=!0;if(((0,o.isTypedArray)(e)||(0,o.isTypedArray)(t))&&(s=!1),(0,o.isTypedArray)(e)&&(0,o.isTypedArray)(t)&&(s=!0),s){let r=e.constructor.name,s=t.constructor.name;if(r!==s)throw Error(`Arrays are of different type. Actual: ${r}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){let r=(0,a.inferShape)(e),s=(0,a.inferShape)(t);if(!(0,o.arraysEqual)(r,s))throw Error(`Arrays have different shapes. Actual: [${r}]. Expected: [${s}]`)}let n=(0,o.isTypedArray)(e)?e:(0,o.flatten)(e),i=(0,o.isTypedArray)(t)?t:(0,o.flatten)(t);if(n.length!==i.length)throw Error(`Arrays have different lengths actual: ${n.length} vs expected: ${i.length}.
Actual:   ${n}.
Expected: ${i}.`);for(let e=0;e<i.length;++e){let t=n[e],s=i[e];if(!r(t,s))throw Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.
Actual:   ${n}.
Expected: ${i}.`)}"undefined"!=typeof expect&&expect().nothing()}function c(e,t){e().then(()=>t.fail(),()=>t()),"undefined"!=typeof expect&&expect().nothing()}function d(e,t){let r="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,o.isString)(e)||(0,o.isString)(e[0])||(0,o.isString)(t)||(0,o.isString)(t[0])?p(e,r,(e,t)=>e==t):p(e,t,(e,t)=>f(e,t,0))}function h(e,t,r){if(null==r&&(r=u()),!f(e,t,r))throw Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function f(e,t,r){return!(isFinite(e)||isFinite(t))||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>r)}function m(e,t,r){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>r)throw Error(`Value out of range:${e[s]} low: ${t}, high: ${r}`)}function g(e,t){// Safari does not like comparing ArrayBuffers directly. Wrapping in
// a Float32Array solves this issue.
let r=new Float32Array(e),s=new Float32Array(t);if(r.length!==s.length)throw Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${r.length}`);for(let e=0;e<s.length;e++)if(r[e]!==s[e])throw Error(`Expected ArrayBuffer value at ${e} to be ${s[e]} but got ${r[e]} instead`)}function x(e){let t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise(e=>{t.addEventListener("loadeddata",r=>e(t)),t.load()})}async function b(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise(t=>{// tslint:disable-next-line:no-any
e.requestVideoFrameCallback(t)})}},{"./engine":"ldVRX","./tensor_util_env":"9iWFD","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1KizZ":[function(e,t,r){/** @license See the LICENSE file. */// This code is auto-generated, do not modify this file!
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"version",()=>n);let n="3.21.0"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bjl4q:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doclink Optimizer */s.export(r,"AdadeltaOptimizer",()=>f);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/ops"),p=e("../ops/square"),c=e("../ops/zeros_like"),d=e("../serialization"),h=e("./optimizer");class f extends h.Optimizer{constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=(0,n.ENGINE).backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,r)=>{let s=n.ENGINE.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accum_grad`,variable:(0,a.tidy)(()=>(0,c.zerosLike)(s).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${t}/accum_var`,variable:(0,a.tidy)(()=>(0,c.zerosLike)(s).variable(!1))});let d=Array.isArray(e)?e[r].tensor:e[t];if(null==d)return;let h=this.accumulatedGrads[r].variable,f=this.accumulatedUpdates[r].variable;(0,a.tidy)(()=>{let e=(0,o.add)((0,l.mul)(h,this.rho),(0,l.mul)((0,p.square)(d),1-this.rho)),t=(0,l.mul)((0,i.div)((0,u.sqrt)((0,o.add)(f,this.epsilon)),(0,u.sqrt)((0,o.add)(h,this.epsilon))),d),r=(0,o.add)((0,l.mul)(f,this.rho),(0,l.mul)((0,p.square)(t),1-this.rho));h.assign(e),f.assign(r);let n=(0,o.add)((0,l.mul)(t,-this.learningRate),s);s.assign(n)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,a.dispose)(this.accumulatedGrads.map(e=>e.variable)),(0,a.dispose)(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){// Order matters for Python compatibility.
let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=e.length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}/** @nocollapse */f.className="Adadelta",(0,d.registerClass)(f)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/ops":"iXIBS","../ops/square":"3G5yp","../ops/zeros_like":"lVjfh","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lQRCK:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"add",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({add_:/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","add"),s=(0,i.convertToTensor)(t,"b","add");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Add,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9dy6L":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"div",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./floorDiv"),u=e("./operation");let p=(0,u.op)({div_:/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","div"),s=(0,i.convertToTensor)(t,"b","div");if([r,s]=(0,o.makeTypesMatch)(r,s),"int32"===r.dtype&&"int32"===s.dtype)return(0,l.floorDiv)(r,s);let u={a:r,b:s};// tslint:disable-next-line: no-unnecessary-type-assertion
return(0,n.ENGINE).runKernel(a.RealDiv,u,{})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./floorDiv":"7RK4c","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7RK4c":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorDiv",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({floorDiv_:/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","floorDiv"),s=(0,i.convertToTensor)(t,"b","floorDiv");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.FloorDiv,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9ihSJ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mul",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({mul_:/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","mul"),s=(0,i.convertToTensor)(t,"b","mul");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Multiply,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iXIBS:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Modularized ops.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"abs",()=>n.abs),s.export(r,"acos",()=>a.acos),s.export(r,"acosh",()=>o.acosh),s.export(r,"add",()=>i.add),s.export(r,"addN",()=>l.addN),s.export(r,"all",()=>u.all),s.export(r,"any",()=>p.any),s.export(r,"argMax",()=>c.argMax),s.export(r,"argMin",()=>d.argMin),s.export(r,"asin",()=>h.asin),s.export(r,"asinh",()=>f.asinh),s.export(r,"atan",()=>m.atan),s.export(r,"atan2",()=>g.atan2),s.export(r,"atanh",()=>x.atanh),s.export(r,"avgPool",()=>b.avgPool),s.export(r,"avgPool3d",()=>y.avgPool3d),s.export(r,"basicLSTMCell",()=>j.basicLSTMCell),s.export(r,"batchToSpaceND",()=>_.batchToSpaceND),s.export(r,"batchNorm",()=>k.batchNorm),s.export(r,"batchNorm2d",()=>I.batchNorm2d),s.export(r,"batchNorm3d",()=>w.batchNorm3d),s.export(r,"batchNorm4d",()=>C.batchNorm4d),s.export(r,"bincount",()=>S.bincount),s.export(r,"broadcastArgs",()=>T.broadcastArgs),s.export(r,"broadcastTo",()=>N.broadcastTo),s.export(r,"buffer",()=>E.buffer),s.export(r,"cast",()=>F.cast),s.export(r,"ceil",()=>A.ceil),s.export(r,"clipByValue",()=>R.clipByValue),s.export(r,"clone",()=>D.clone),s.export(r,"complex",()=>$.complex),s.export(r,"concat",()=>P.concat),s.export(r,"concat1d",()=>z.concat1d),s.export(r,"concat2d",()=>M.concat2d),s.export(r,"concat3d",()=>O.concat3d),s.export(r,"concat4d",()=>L.concat4d),s.export(r,"conv1d",()=>B.conv1d),s.export(r,"conv2d",()=>U.conv2d),s.export(r,"conv2dTranspose",()=>V.conv2dTranspose),s.export(r,"conv3d",()=>G.conv3d),s.export(r,"conv3dTranspose",()=>W.conv3dTranspose),s.export(r,"cos",()=>q.cos),s.export(r,"cosh",()=>K.cosh),s.export(r,"cumprod",()=>H.cumprod),s.export(r,"cumsum",()=>X.cumsum),s.export(r,"denseBincount",()=>Y.denseBincount),s.export(r,"depthToSpace",()=>Z.depthToSpace),s.export(r,"depthwiseConv2d",()=>J.depthwiseConv2d),s.export(r,"diag",()=>Q.diag),s.export(r,"dilation2d",()=>ee.dilation2d),s.export(r,"div",()=>et.div),s.export(r,"divNoNan",()=>er.divNoNan),s.export(r,"dot",()=>es.dot),s.export(r,"einsum",()=>en.einsum),s.export(r,"elu",()=>ea.elu),s.export(r,"equal",()=>eo.equal),s.export(r,"erf",()=>ei.erf),s.export(r,"euclideanNorm",()=>el.euclideanNorm),s.export(r,"exp",()=>eu.exp),s.export(r,"expandDims",()=>ep.expandDims),s.export(r,"expm1",()=>ec.expm1),s.export(r,"eye",()=>ed.eye),s.export(r,"fill",()=>eh.fill),s.export(r,"floor",()=>ef.floor),s.export(r,"floorDiv",()=>em.floorDiv),s.export(r,"gather",()=>eg.gather),s.export(r,"greater",()=>ex.greater),s.export(r,"greaterEqual",()=>ev.greaterEqual),s.export(r,"imag",()=>eb.imag),s.export(r,"isFinite",()=>ey.isFinite),s.export(r,"isInf",()=>ej.isInf),s.export(r,"isNaN",()=>e_.isNaN),s.export(r,"leakyRelu",()=>ek.leakyRelu),s.export(r,"less",()=>eI.less),s.export(r,"lessEqual",()=>ew.lessEqual),s.export(r,"linspace",()=>eC.linspace),s.export(r,"localResponseNormalization",()=>eS.localResponseNormalization),s.export(r,"log",()=>eT.log),s.export(r,"log1p",()=>eN.log1p),s.export(r,"logSigmoid",()=>eE.logSigmoid),s.export(r,"logSoftmax",()=>eF.logSoftmax),s.export(r,"logSumExp",()=>eA.logSumExp),s.export(r,"logicalAnd",()=>eR.logicalAnd),s.export(r,"logicalNot",()=>eD.logicalNot),s.export(r,"logicalOr",()=>e$.logicalOr),s.export(r,"logicalXor",()=>eP.logicalXor),s.export(r,"lowerBound",()=>ez.lowerBound),s.export(r,"matMul",()=>eM.matMul),s.export(r,"max",()=>eO.max),s.export(r,"maxPool",()=>eL.maxPool),s.export(r,"maxPool3d",()=>eB.maxPool3d),s.export(r,"maxPoolWithArgmax",()=>eU.maxPoolWithArgmax),s.export(r,"maximum",()=>eV.maximum),s.export(r,"mean",()=>eG.mean),s.export(r,"meshgrid",()=>eW.meshgrid),s.export(r,"min",()=>eq.min),s.export(r,"minimum",()=>eK.minimum),s.export(r,"mirrorPad",()=>eH.mirrorPad),s.export(r,"mod",()=>eX.mod),s.export(r,"moments",()=>eY.moments),s.export(r,"mul",()=>eZ.mul),s.export(r,"multiRNNCell",()=>eJ.multiRNNCell),s.export(r,"multinomial",()=>eQ.multinomial),s.export(r,"neg",()=>e0.neg),s.export(r,"notEqual",()=>e1.notEqual),s.export(r,"oneHot",()=>e2.oneHot),s.export(r,"ones",()=>e3.ones),s.export(r,"onesLike",()=>e4.onesLike),s.export(r,"outerProduct",()=>e5.outerProduct),s.export(r,"pad",()=>e6.pad),s.export(r,"pad1d",()=>e9.pad1d),s.export(r,"pad2d",()=>e8.pad2d),s.export(r,"pad3d",()=>e7.pad3d),s.export(r,"pad4d",()=>te.pad4d),s.export(r,"pool",()=>tt.pool),s.export(r,"pow",()=>tr.pow),s.export(r,"prelu",()=>ts.prelu),s.export(r,"print",()=>tn.print),s.export(r,"prod",()=>ta.prod),s.export(r,"raggedGather",()=>to.raggedGather),s.export(r,"raggedTensorToTensor",()=>ti.raggedTensorToTensor),s.export(r,"rand",()=>tl.rand),s.export(r,"randomGamma",()=>tu.randomGamma),s.export(r,"randomNormal",()=>tp.randomNormal),s.export(r,"randomStandardNormal",()=>tc.randomStandardNormal),s.export(r,"randomUniform",()=>td.randomUniform),s.export(r,"range",()=>th.range),s.export(r,"real",()=>tf.real),s.export(r,"reciprocal",()=>tm.reciprocal),s.export(r,"relu",()=>tg.relu),s.export(r,"relu6",()=>tx.relu6),s.export(r,"reshape",()=>tv.reshape),s.export(r,"reverse",()=>tb.reverse),s.export(r,"reverse1d",()=>ty.reverse1d),s.export(r,"reverse2d",()=>tj.reverse2d),s.export(r,"reverse3d",()=>t_.reverse3d),s.export(r,"reverse4d",()=>tk.reverse4d),s.export(r,"round",()=>tI.round),s.export(r,"rsqrt",()=>tw.rsqrt),s.export(r,"scalar",()=>tC.scalar),s.export(r,"selu",()=>tS.selu),s.export(r,"separableConv2d",()=>tT.separableConv2d),s.export(r,"setdiff1dAsync",()=>tN.setdiff1dAsync),s.export(r,"sigmoid",()=>tE.sigmoid),s.export(r,"sign",()=>tF.sign),s.export(r,"sin",()=>tA.sin),s.export(r,"sinh",()=>tR.sinh),s.export(r,"slice",()=>tD.slice),s.export(r,"slice1d",()=>t$.slice1d),s.export(r,"slice2d",()=>tP.slice2d),s.export(r,"slice3d",()=>tz.slice3d),s.export(r,"slice4d",()=>tM.slice4d),s.export(r,"softmax",()=>tO.softmax),s.export(r,"softplus",()=>tL.softplus),s.export(r,"spaceToBatchND",()=>tB.spaceToBatchND),s.export(r,"fft",()=>tU.fft),s.export(r,"ifft",()=>tV.ifft),s.export(r,"irfft",()=>tG.irfft),s.export(r,"rfft",()=>tW.rfft),s.export(r,"split",()=>tq.split),s.export(r,"sqrt",()=>tK.sqrt),s.export(r,"square",()=>tH.square),s.export(r,"squaredDifference",()=>tX.squaredDifference),s.export(r,"squeeze",()=>tY.squeeze),s.export(r,"stack",()=>tZ.stack),s.export(r,"step",()=>tJ.step),s.export(r,"stridedSlice",()=>tQ.stridedSlice),s.export(r,"sub",()=>t0.sub),s.export(r,"sum",()=>t1.sum),s.export(r,"tan",()=>t2.tan),s.export(r,"tanh",()=>t3.tanh),s.export(r,"tensor",()=>t4.tensor),s.export(r,"tensor1d",()=>t5.tensor1d),s.export(r,"tensor2d",()=>t6.tensor2d),s.export(r,"tensor3d",()=>t9.tensor3d),s.export(r,"tensor4d",()=>t8.tensor4d),s.export(r,"tensor5d",()=>t7.tensor5d),s.export(r,"tensor6d",()=>re.tensor6d),s.export(r,"tile",()=>rt.tile),s.export(r,"topk",()=>rr.topk),s.export(r,"truncatedNormal",()=>rs.truncatedNormal),s.export(r,"unique",()=>rn.unique),s.export(r,"unsortedSegmentSum",()=>ra.unsortedSegmentSum),s.export(r,"unstack",()=>ro.unstack),s.export(r,"upperBound",()=>ri.upperBound),s.export(r,"variable",()=>rl.variable),s.export(r,"where",()=>ru.where),s.export(r,"whereAsync",()=>rp.whereAsync),s.export(r,"zeros",()=>rc.zeros),s.export(r,"zerosLike",()=>rd.zerosLike),s.export(r,"op",()=>rI.op),s.export(r,"OP_SCOPE_SUFFIX",()=>rI.OP_SCOPE_SUFFIX),// Second level exports.
s.export(r,"image",()=>st),s.export(r,"linalg",()=>sr),s.export(r,"losses",()=>ss),s.export(r,"spectral",()=>r7),s.export(r,"fused",()=>rw),s.export(r,"signal",()=>se),s.export(r,"sparse",()=>sn),s.export(r,"string",()=>sa);var n=e("./abs"),a=e("./acos"),o=e("./acosh"),i=e("./add"),l=e("./add_n"),u=e("./all"),p=e("./any"),c=e("./arg_max"),d=e("./arg_min"),h=e("./asin"),f=e("./asinh"),m=e("./atan"),g=e("./atan2"),x=e("./atanh"),b=e("./avg_pool"),y=e("./avg_pool_3d"),j=e("./basic_lstm_cell"),_=e("./batch_to_space_nd"),k=e("./batchnorm"),I=e("./batchnorm2d"),w=e("./batchnorm3d"),C=e("./batchnorm4d"),S=e("./bincount"),T=e("./broadcast_args"),N=e("./broadcast_to"),E=e("./buffer"),F=e("./cast"),A=e("./ceil"),R=e("./clip_by_value"),D=e("./clone"),$=e("./complex"),P=e("./concat"),z=e("./concat_1d"),M=e("./concat_2d"),O=e("./concat_3d"),L=e("./concat_4d"),B=e("./conv1d"),U=e("./conv2d"),V=e("./conv2d_transpose"),G=e("./conv3d"),W=e("./conv3d_transpose"),q=e("./cos"),K=e("./cosh"),H=e("./cumprod"),X=e("./cumsum"),Y=e("./dense_bincount"),Z=e("./depth_to_space"),J=e("./depthwise_conv2d"),Q=e("./diag"),ee=e("./dilation2d"),et=e("./div"),er=e("./div_no_nan"),es=e("./dot"),en=e("./einsum"),ea=e("./elu"),eo=e("./equal"),ei=e("./erf"),el=e("./euclidean_norm"),eu=e("./exp"),ep=e("./expand_dims"),ec=e("./expm1"),ed=e("./eye"),eh=e("./fill"),ef=e("./floor"),em=e("./floorDiv"),eg=e("./gather"),ex=e("./greater"),ev=e("./greater_equal"),eb=e("./imag"),ey=e("./is_finite"),ej=e("./is_inf"),e_=e("./is_nan"),ek=e("./leaky_relu"),eI=e("./less"),ew=e("./less_equal"),eC=e("./linspace"),eS=e("./local_response_normalization"),eT=e("./log"),eN=e("./log1p"),eE=e("./log_sigmoid"),eF=e("./log_softmax"),eA=e("./log_sum_exp"),eR=e("./logical_and"),eD=e("./logical_not"),e$=e("./logical_or"),eP=e("./logical_xor"),ez=e("./lower_bound"),eM=e("./mat_mul"),eO=e("./max"),eL=e("./max_pool"),eB=e("./max_pool_3d"),eU=e("./max_pool_with_argmax"),eV=e("./maximum"),eG=e("./mean"),eW=e("./meshgrid"),eq=e("./min"),eK=e("./minimum"),eH=e("./mirror_pad"),eX=e("./mod"),eY=e("./moments"),eZ=e("./mul"),eJ=e("./multi_rnn_cell"),eQ=e("./multinomial"),e0=e("./neg"),e1=e("./not_equal"),e2=e("./one_hot"),e3=e("./ones"),e4=e("./ones_like"),e5=e("./outer_product"),e6=e("./pad"),e9=e("./pad1d"),e8=e("./pad2d"),e7=e("./pad3d"),te=e("./pad4d"),tt=e("./pool"),tr=e("./pow"),ts=e("./prelu"),tn=e("./print"),ta=e("./prod"),to=e("./ragged_gather"),ti=e("./ragged_tensor_to_tensor"),tl=e("./rand"),tu=e("./random_gamma"),tp=e("./random_normal"),tc=e("./random_standard_normal"),td=e("./random_uniform"),th=e("./range"),tf=e("./real"),tm=e("./reciprocal"),tg=e("./relu"),tx=e("./relu6"),tv=e("./reshape"),tb=e("./reverse"),ty=e("./reverse_1d"),tj=e("./reverse_2d"),t_=e("./reverse_3d"),tk=e("./reverse_4d"),tI=e("./round"),tw=e("./rsqrt"),tC=e("./scalar"),tS=e("./selu"),tT=e("./separable_conv2d"),tN=e("./setdiff1d_async"),tE=e("./sigmoid"),tF=e("./sign"),tA=e("./sin"),tR=e("./sinh"),tD=e("./slice"),t$=e("./slice1d"),tP=e("./slice2d"),tz=e("./slice3d"),tM=e("./slice4d"),tO=e("./softmax"),tL=e("./softplus"),tB=e("./space_to_batch_nd"),tU=e("./spectral/fft"),tV=e("./spectral/ifft"),tG=e("./spectral/irfft"),tW=e("./spectral/rfft"),tq=e("./split"),tK=e("./sqrt"),tH=e("./square"),tX=e("./squared_difference"),tY=e("./squeeze"),tZ=e("./stack"),tJ=e("./step"),tQ=e("./strided_slice"),t0=e("./sub"),t1=e("./sum"),t2=e("./tan"),t3=e("./tanh"),t4=e("./tensor"),t5=e("./tensor1d"),t6=e("./tensor2d"),t9=e("./tensor3d"),t8=e("./tensor4d"),t7=e("./tensor5d"),re=e("./tensor6d"),rt=e("./tile"),rr=e("./topk"),rs=e("./truncated_normal"),rn=e("./unique"),ra=e("./unsorted_segment_sum"),ro=e("./unstack"),ri=e("./upper_bound"),rl=e("./variable"),ru=e("./where"),rp=e("./where_async"),rc=e("./zeros"),rd=e("./zeros_like"),rh=e("./boolean_mask");s.exportAll(rh,r);var rf=e("./transpose");s.exportAll(rf,r);var rm=e("./norm");s.exportAll(rm,r);var rg=e("./moving_average");s.exportAll(rg,r);var rx=e("./scatter_nd");s.exportAll(rx,r);var rv=e("./search_sorted");s.exportAll(rv,r);var rb=e("./sparse_to_dense");s.exportAll(rb,r);var ry=e("./gather_nd");s.exportAll(ry,r);var rj=e("./dropout");s.exportAll(rj,r);var r_=e("./signal_ops_util");s.exportAll(r_,r);var rk=e("./in_top_k");s.exportAll(rk,r);var rI=e("./operation"),rw=e("./fused_ops"),rC=e("./signal/hamming_window"),rS=e("./signal/hann_window"),rT=e("./signal/frame"),rN=e("./signal/stft"),rE=e("./image/crop_and_resize"),rF=e("./image/flip_left_right"),rA=e("./image/grayscale_to_rgb"),rR=e("./image/rotate_with_offset"),rD=e("./image/non_max_suppression"),r$=e("./image/non_max_suppression_async"),rP=e("./image/non_max_suppression_with_score"),rz=e("./image/non_max_suppression_with_score_async"),rM=e("./image/non_max_suppression_padded"),rO=e("./image/non_max_suppression_padded_async"),rL=e("./image/resize_bilinear"),rB=e("./image/resize_nearest_neighbor"),rU=e("./image/threshold"),rV=e("./image/transform"),rG=e("./linalg/band_part"),rW=e("./linalg/gram_schmidt"),rq=e("./linalg/qr"),rK=e("./losses/absolute_difference"),rH=e("./losses/compute_weighted_loss"),rX=e("./losses/cosine_distance"),rY=e("./losses/hinge_loss"),rZ=e("./losses/huber_loss"),rJ=e("./losses/log_loss"),rQ=e("./losses/mean_squared_error"),r0=e("./losses/sigmoid_cross_entropy"),r1=e("./losses/softmax_cross_entropy"),r2=e("./sparse/sparse_fill_empty_rows"),r3=e("./sparse/sparse_reshape"),r4=e("./sparse/sparse_segment_mean"),r5=e("./sparse/sparse_segment_sum"),r6=e("./string/string_n_grams"),r9=e("./string/string_split"),r8=e("./string/string_to_hash_bucket_fast");let r7={fft:tU.fft,ifft:tV.ifft,rfft:tW.rfft,irfft:tG.irfft},se={hammingWindow:rC.hammingWindow,hannWindow:rS.hannWindow,frame:rT.frame,stft:rN.stft},st={flipLeftRight:rF.flipLeftRight,grayscaleToRGB:rA.grayscaleToRGB,resizeNearestNeighbor:rB.resizeNearestNeighbor,resizeBilinear:rL.resizeBilinear,rotateWithOffset:rR.rotateWithOffset,cropAndResize:rE.cropAndResize,nonMaxSuppression:rD.nonMaxSuppression,nonMaxSuppressionAsync:r$.nonMaxSuppressionAsync,nonMaxSuppressionWithScore:rP.nonMaxSuppressionWithScore,nonMaxSuppressionWithScoreAsync:rz.nonMaxSuppressionWithScoreAsync,nonMaxSuppressionPadded:rM.nonMaxSuppressionPadded,nonMaxSuppressionPaddedAsync:rO.nonMaxSuppressionPaddedAsync,threshold:rU.threshold,transform:rV.transform},sr={bandPart:rG.bandPart,gramSchmidt:rW.gramSchmidt,qr:rq.qr},ss={absoluteDifference:rK.absoluteDifference,computeWeightedLoss:rH.computeWeightedLoss,cosineDistance:rX.cosineDistance,hingeLoss:rY.hingeLoss,huberLoss:rZ.huberLoss,logLoss:rJ.logLoss,meanSquaredError:rQ.meanSquaredError,sigmoidCrossEntropy:r0.sigmoidCrossEntropy,softmaxCrossEntropy:r1.softmaxCrossEntropy},sn={sparseFillEmptyRows:r2.sparseFillEmptyRows,sparseReshape:r3.sparseReshape,sparseSegmentMean:r4.sparseSegmentMean,sparseSegmentSum:r5.sparseSegmentSum},sa={stringNGrams:r6.stringNGrams,stringSplit:r9.stringSplit,stringToHashBucketFast:r8.stringToHashBucketFast}},{"./abs":"j8viR","./acos":"khdph","./acosh":"kdXj6","./add":"lQRCK","./add_n":"jAS5M","./all":"jv391","./any":"6mjhP","./arg_max":"1vTL0","./arg_min":"bCVkX","./asin":"497Ei","./asinh":"82BQu","./atan":"g95y3","./atan2":"3skhV","./atanh":"cZsaY","./avg_pool":"jkLAh","./avg_pool_3d":"hsqPY","./basic_lstm_cell":"ktlaD","./batch_to_space_nd":"eJpWZ","./batchnorm":"gIn9u","./batchnorm2d":"1D9US","./batchnorm3d":"9YaQD","./batchnorm4d":"60m1D","./bincount":"gw67a","./broadcast_args":"1m6tp","./broadcast_to":"c4rWF","./buffer":"bnrDL","./cast":"7e2UZ","./ceil":"1pmdy","./clip_by_value":"1BbPI","./clone":"ljPJN","./complex":"i0i48","./concat":"k3qE8","./concat_1d":"7PFMm","./concat_2d":"1SFXT","./concat_3d":"bzZ7l","./concat_4d":"e3I6w","./conv1d":"kIuFu","./conv2d":"8DIXU","./conv2d_transpose":"csGUE","./conv3d":"sbr4O","./conv3d_transpose":"ai1JM","./cos":"43oKr","./cosh":"czPyA","./cumprod":"NJtBS","./cumsum":"7er4p","./dense_bincount":"4Gs6d","./depth_to_space":"afJfn","./depthwise_conv2d":"gYPBC","./diag":"3BDjJ","./dilation2d":"2sjZu","./div":"9dy6L","./div_no_nan":"1cGZh","./dot":"6jqww","./einsum":"e2SOn","./elu":"e9QZU","./equal":"1gQAF","./erf":"cFtC5","./euclidean_norm":"dKw0K","./exp":"1ctfc","./expand_dims":"99JBF","./expm1":"eMz4X","./eye":"4rEcG","./fill":"bXOoe","./floor":"iKvgL","./floorDiv":"7RK4c","./gather":"gHcvO","./greater":"ayzyA","./greater_equal":"h8ZY5","./imag":"c6DsY","./is_finite":"01DXR","./is_inf":"5kuU7","./is_nan":"bqBVg","./leaky_relu":"amVM0","./less":"8JxgH","./less_equal":"joVbJ","./linspace":"4elMk","./local_response_normalization":"aYm6a","./log":"agrA2","./log1p":"aALDF","./log_sigmoid":"5GEm3","./log_softmax":"6dlHI","./log_sum_exp":"f9G46","./logical_and":"fhBD8","./logical_not":"77vf6","./logical_or":"iuea3","./logical_xor":"gFm67","./lower_bound":"2FfJL","./mat_mul":"dpVGA","./max":"deiNR","./max_pool":"8uaoU","./max_pool_3d":"7hokL","./max_pool_with_argmax":"e3aee","./maximum":"jM2LY","./mean":"39LDA","./meshgrid":"2jriY","./min":"isLaT","./minimum":"9HraX","./mirror_pad":"dyjKX","./mod":"8f4iF","./moments":"lySWw","./mul":"9ihSJ","./multi_rnn_cell":"2Iqoh","./multinomial":"I1Ukz","./neg":"gRzxs","./not_equal":"8kzbl","./one_hot":"lxcni","./ones":"14B1F","./ones_like":"1UU7u","./outer_product":"hHTpK","./pad":"lzGpp","./pad1d":"kKiJU","./pad2d":"6x7pO","./pad3d":"1s51d","./pad4d":"foLjH","./pool":"cKD0q","./pow":"16YAi","./prelu":"hMoHx","./print":"juqZ2","./prod":"1uJ9R","./ragged_gather":"9x6QU","./ragged_tensor_to_tensor":"d1BZS","./rand":"jgrPG","./random_gamma":"6XkFa","./random_normal":"kcxuM","./random_standard_normal":"jxOPX","./random_uniform":"3PWOx","./range":"bEl6L","./real":"hZNER","./reciprocal":"hYsyq","./relu":"2Qfzv","./relu6":"7z2C2","./reshape":"hcB7g","./reverse":"d4KIg","./reverse_1d":"e5dVK","./reverse_2d":"lXc21","./reverse_3d":"778pQ","./reverse_4d":"7Z4zk","./round":"3FB8V","./rsqrt":"hWtbk","./scalar":"8NgrS","./selu":"48nEa","./separable_conv2d":"bBu5h","./setdiff1d_async":"ieoqB","./sigmoid":"773j8","./sign":"6ma8O","./sin":"2e5m1","./sinh":"cKBKr","./slice":"kcOYr","./slice1d":"45yTs","./slice2d":"3asvb","./slice3d":"kNctP","./slice4d":"32fSC","./softmax":"fyGfa","./softplus":"2NnUY","./space_to_batch_nd":"5fear","./spectral/fft":"lqzug","./spectral/ifft":"geVqz","./spectral/irfft":"jPLoA","./spectral/rfft":"lRuFr","./split":"3RBf7","./sqrt":"5Uzeg","./square":"3G5yp","./squared_difference":"fpHDE","./squeeze":"4V4Q8","./stack":"cd4pw","./step":"622xd","./strided_slice":"7Ap5a","./sub":"gYa0B","./sum":"nMRSa","./tan":"4YfVq","./tanh":"lVUan","./tensor":"1tgxn","./tensor1d":"7COb5","./tensor2d":"jrzat","./tensor3d":"kmNes","./tensor4d":"hDYuI","./tensor5d":"iPzXQ","./tensor6d":"kgcZL","./tile":"913ES","./topk":"d70D8","./truncated_normal":"5uE0n","./unique":"knFRp","./unsorted_segment_sum":"aMAvh","./unstack":"lbucv","./upper_bound":"fTAZW","./variable":"82ecW","./where":"kAiQD","./where_async":"6RnEc","./zeros":"8Iv9P","./zeros_like":"lVjfh","./boolean_mask":"j3g0N","./transpose":"lWGmK","./norm":"e1hji","./moving_average":"bVQtr","./scatter_nd":"3PuSK","./search_sorted":"6P4rg","./sparse_to_dense":"ewlXD","./gather_nd":"7rsub","./dropout":"jyt5y","./signal_ops_util":"8247j","./in_top_k":"ajsKT","./operation":"htqKz","./fused_ops":"Tv0Ol","./signal/hamming_window":"j3sCn","./signal/hann_window":"34Uxb","./signal/frame":"3IsWT","./signal/stft":"8iTF4","./image/crop_and_resize":"7F9oQ","./image/flip_left_right":"8DPOG","./image/grayscale_to_rgb":"9CXLz","./image/rotate_with_offset":"6yVzb","./image/non_max_suppression":"4fKuK","./image/non_max_suppression_async":"dPG7A","./image/non_max_suppression_with_score":"67mQJ","./image/non_max_suppression_with_score_async":"8222B","./image/non_max_suppression_padded":"bLEEZ","./image/non_max_suppression_padded_async":"cuqDY","./image/resize_bilinear":"1uKT8","./image/resize_nearest_neighbor":"3w2P5","./image/threshold":"9otRR","./image/transform":"8Z16n","./linalg/band_part":"fiK9x","./linalg/gram_schmidt":"inmku","./linalg/qr":"lpLtp","./losses/absolute_difference":"gI49a","./losses/compute_weighted_loss":"85xhD","./losses/cosine_distance":"ci5Y9","./losses/hinge_loss":"dYDyH","./losses/huber_loss":"dKSDS","./losses/log_loss":"lrbX5","./losses/mean_squared_error":"bOvi1","./losses/sigmoid_cross_entropy":"k4DgM","./losses/softmax_cross_entropy":"cq65e","./sparse/sparse_fill_empty_rows":"3OPSB","./sparse/sparse_reshape":"lrvgo","./sparse/sparse_segment_mean":"k3vOX","./sparse/sparse_segment_sum":"89ScX","./string/string_n_grams":"aX7IE","./string/string_split":"bVJrI","./string/string_to_hash_bucket_fast":"9fPqZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j8viR:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"abs",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({abs_:/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","abs");return"complex64"===t.dtype?(0,n.ENGINE).runKernel(a.ComplexAbs,{x:t}):(0,n.ENGINE).runKernel(a.Abs,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],khdph:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acos",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({acos_:/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","acos");return(0,n.ENGINE).runKernel(a.Acos,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kdXj6:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acosh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({acosh_:/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","acosh");return(0,n.ENGINE).runKernel(a.Acosh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jAS5M:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addN",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({addN_:/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e){i.assert(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),i.assert(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);let t=e.map((e,t)=>(0,o.convertToTensor)(e,`tensors${t}`,"addN")),r=t[0];return t.forEach(e=>{if(e.dtype!==r.dtype)throw Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!i.arraysEqual(e.shape,r.shape))throw Error("All tensors passed to tf.addN() must have the same shape")}),(0,n.ENGINE).runKernel(a.AddN,t)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jv391:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"all",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({all_:/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","all","bool");return(0,n.ENGINE).runKernel(a.All,{x:s},{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6mjhP":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"any",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({any_:/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","any","bool");return(0,n.ENGINE).runKernel(a.Any,{x:s},{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1vTL0":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMax",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({argMax_:/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","argMax");return(0,n.ENGINE).runKernel(a.ArgMax,{x:r},{axis:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bCVkX:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMin",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({argMin_:/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","argMin");return(0,n.ENGINE).runKernel(a.ArgMin,{x:r},{axis:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"497Ei":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asin",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({asin_:/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","asin");return(0,n.ENGINE).runKernel(a.Asin,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"82BQu":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asinh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({asinh_:/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","asinh");return(0,n.ENGINE).runKernel(a.Asinh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g95y3:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({atan_:/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","atan");return(0,n.ENGINE).runKernel(a.Atan,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3skhV":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan2",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({atan2_:/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","atan2"),s=(0,i.convertToTensor)(t,"b","atan2");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Atan2,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cZsaY:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atanh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({atanh_:/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","atanh");return(0,n.ENGINE).runKernel(a.Atanh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jkLAh:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool",()=>d);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./cast"),u=e("./conv_util"),p=e("./operation"),c=e("./reshape");let d=(0,p.op)({avgPool_:/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,p){let d=(0,o.convertToTensor)(e,"x","avgPool","float32");i.assert(u.eitherStridesOrDilationsAreOne(r,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`);let h=d,f=!1;3===d.rank&&(f=!0,h=(0,c.reshape)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.assert(4===h.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${h.rank}.`),u.checkPadOnDimRoundingMode("avgPool",s,p);let m={x:h},g=(0,n.ENGINE).runKernel(a.AvgPool,m,{filterSize:t,strides:r,pad:s,dimRoundingMode:p});return(g=(0,l.cast)(g,d.dtype),f)?(0,c.reshape)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./cast":"7e2UZ","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cCem6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */s.export(r,"computeDilation2DInfo",()=>a),s.export(r,"computePool2DInfo",()=>o),/**
 * Computes the information for a forward pass of a pooling3D operation.
 */s.export(r,"computePool3DInfo",()=>i),/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */s.export(r,"computeConv2DInfo",()=>l),/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */s.export(r,"computeConv3DInfo",()=>u),s.export(r,"computeDefaultPad",()=>p),s.export(r,"tupleValuesAreOne",()=>m),s.export(r,"eitherStridesOrDilationsAreOne",()=>g),/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */s.export(r,"convertConv2DDataFormat",()=>x),/**
 * Check validity of pad when using dimRoundingMode.
 * @param opDesc A string of op description
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @throws unknown padding parameter
 */s.export(r,"checkPadOnDimRoundingMode",()=>b);var n=e("../util");function a(e,t,r,s,n="NHWC",a){// `computerConv2DInfo` require filterShape to be in the dimension of:
// `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
// outDepth, it should have the same depth as the input.
// Input shape: [batch, height, width, inChannels]
let o=e[3],i=[...t,o],u=x(n);return l(e,i,r,a,s,null,null,u)}function o(e,t,r,s,n,a,o="channelsLast"){let i;let[u,p]=c(t);if("channelsLast"===o)i=[u,p,e[3],e[3]];else if("channelsFirst"===o)i=[u,p,e[1],e[1]];else throw Error(`Unknown dataFormat ${o}`);return l(e,i,r,s,n,a,!1,o)}function i(e,t,r,s,n,a,o="NDHWC"){let i,l;let[p,c,h]=d(t);if("NDHWC"===o)l="channelsLast",i=[p,c,h,e[4],e[4]];else if("NCDHW"===o)l="channelsFirst",i=[p,c,h,e[1],e[1]];else throw Error(`Unknown dataFormat ${o}`);return u(e,i,r,s,n,!1,l,a)}function l(e,t,r,s,n,a,o=!1,i="channelsLast"){let l,[u,d,m,g]=[-1,-1,-1,-1];if("channelsLast"===i)[u,d,m,g]=e;else if("channelsFirst"===i)[u,g,d,m]=e;else throw Error(`Unknown dataFormat ${i}`);let[x,b,,y]=t,[j,_]=c(r),[k,I]=c(s),w=h(x,k),C=h(b,I),{padInfo:S,outHeight:T,outWidth:N}=function(e,t,r,s,n,a,o,i,l){let u,c,d;if("number"==typeof e){let n=0===e?"VALID":"NUMBER";u={top:e,bottom:e,left:e,right:e,type:n};let o=function(e,t,r,s,n){null==s&&(s=p(e,t,r));let a=e[0],o=e[1],i=f((a-t+2*s)/r+1,n),l=f((o-t+2*s)/r+1,n);return[i,l]}([t,r],a,s,e,i);c=o[0],d=o[1]}else if("same"===e){c=Math.ceil(t/s),d=Math.ceil(r/n);let e=Math.max(0,(c-1)*s+a-t),i=Math.max(0,(d-1)*n+o-r),l=Math.floor(e/2),p=Math.floor(i/2);u={top:l,bottom:e-l,left:p,right:i-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),d=Math.ceil((r-o+1)/n);else if("object"==typeof e){let p="channelsLast"===l?e[1][0]:e[2][0],h="channelsLast"===l?e[1][1]:e[2][1],m="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1],x=0===p&&0===h&&0===m&&0===g?"VALID":"EXPLICIT";u={top:p,bottom:h,left:m,right:g,type:x},c=f((t-a+p+h)/s+1,i),d=f((r-o+m+g)/n+1,i)}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:u,outHeight:c,outWidth:d}}(n,d,m,j,_,w,C,a,i),E=o?y*g:y;return"channelsFirst"===i?l=[u,E,T,N]:"channelsLast"===i&&(l=[u,T,N,E]),{batchSize:u,dataFormat:i,inHeight:d,inWidth:m,inChannels:g,outHeight:T,outWidth:N,outChannels:E,padInfo:S,strideHeight:j,strideWidth:_,filterHeight:x,filterWidth:b,effectiveFilterHeight:w,effectiveFilterWidth:C,dilationHeight:k,dilationWidth:I,inShape:e,outShape:l,filterShape:t}}function u(e,t,r,s,n,a=!1,o="channelsLast",i){let l,[u,c,m,g,x]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,c,m,g,x]=e;else if("channelsFirst"===o)[u,x,c,m,g]=e;else throw Error(`Unknown dataFormat ${o}`);let[b,y,j,,_]=t,[k,I,w]=d(r),[C,S,T]=d(s),N=h(b,C),E=h(y,S),F=h(j,T),{padInfo:A,outDepth:R,outHeight:D,outWidth:$}=function(e,t,r,s,n,a,o,i,l,u,c){let d,h,m,g;if("number"==typeof e){let a=0===e?"VALID":"NUMBER";d={top:e,bottom:e,left:e,right:e,front:e,back:e,type:a};let o=function(e,t,r,s,n,a){null==n&&(n=p(e,t,s));let o=e[0],i=e[1],l=e[2],u=f((o-t+2*n)/s+1,a),c=f((i-t+2*n)/s+1,a),d=f((l-t+2*n)/s+1,a);return[u,c,d,1]}([t,r,s,1],i,0,n,e,c);h=o[0],m=o[1],g=o[2]}else if("same"===e){h=Math.ceil(t/n),m=Math.ceil(r/a),g=Math.ceil(s/o);let e=(h-1)*n+i-t,p=(m-1)*a+l-r,c=(g-1)*o+u-s,f=Math.floor(e/2),x=Math.floor(p/2),b=Math.floor(c/2);d={top:x,bottom:p-x,left:b,right:c-b,front:f,back:e-f,type:"SAME"}}else if("valid"===e)d={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/n),m=Math.ceil((r-l+1)/a),g=Math.ceil((s-u+1)/o);else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:d,outDepth:h,outHeight:m,outWidth:g}}(n,c,m,g,k,I,w,N,E,F,i),P=a?_*x:_;return"channelsFirst"===o?l=[u,P,R,D,$]:"channelsLast"===o&&(l=[u,R,D,$,P]),{batchSize:u,dataFormat:o,inDepth:c,inHeight:m,inWidth:g,inChannels:x,outDepth:R,outHeight:D,outWidth:$,outChannels:P,padInfo:A,strideDepth:k,strideHeight:I,strideWidth:w,filterDepth:b,filterHeight:y,filterWidth:j,effectiveFilterDepth:N,effectiveFilterHeight:E,effectiveFilterWidth:F,dilationDepth:C,dilationHeight:S,dilationWidth:T,inShape:e,outShape:l,filterShape:t}}function p(e,t,r,s=1){let n=h(t,s);return Math.floor((e[0]*(r-1)-r+n)/2)}function c(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function d(e){return"number"==typeof e?[e,e,e]:e}/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */function h(e,t){return t<=1?e:e+(e-1)*(t-1)}/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function f(e,t){if(!t)return Math.trunc(e);switch(t){case"round":// used for Caffe Conv
return Math.round(e);case"ceil":// used for Caffe Pool
return Math.ceil(e);case"floor":return Math.floor(e);default:throw Error(`Unknown roundingMode ${t}`)}}function m(e){let[t,r,s]=c(e);return 1===t&&1===r&&1===s}function g(e,t){return m(e)||m(t)}function x(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw Error(`Unknown dataFormat ${e}`)}function b(e,t,r){if(null!=r){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);if("number"==typeof t)n.assert(n.isInt(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);else if("object"==typeof t)t.forEach(t=>{t.forEach(t=>{n.assert(n.isInt(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`)})});else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)}}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hcB7g:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reshape",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({reshape_:/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"x","reshape","string_or_numeric");return(0,n.ENGINE).runKernel(a.Reshape,{x:r},{shape:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hsqPY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3d",()=>d);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./cast"),p=e("./operation"),c=e("./reshape");let d=(0,p.op)({avgPool3d_:/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,p,d="NDHWC"){let h=(0,o.convertToTensor)(e,"x","avgPool3d","float32"),f=h,m=!1;4===h.rank&&(m=!0,f=(0,c.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),i.assert(5===f.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${f.rank}.`),i.assert("NDHWC"===d,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${d}`),(0,l.checkPadOnDimRoundingMode)("avgPool3d",s,p);let g={x:f},x=(0,n.ENGINE).runKernel(a.AvgPool3D,g,{filterSize:t,strides:r,pad:s,dimRoundingMode:p,dataFormat:d});return(x=(0,u.cast)(x,f.dtype),m)?(0,c.reshape)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./cast":"7e2UZ","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ktlaD:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"basicLSTMCell",()=>h);var n=e("../tensor_util_env"),a=e("./add"),o=e("./concat"),i=e("./mat_mul"),l=e("./mul"),u=e("./operation"),p=e("./sigmoid"),c=e("./slice"),d=e("./tanh");let h=(0,u.op)({basicLSTMCell_:/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */function(e,t,r,s,u,h){let f=(0,n.convertToTensor)(e,"forgetBias","basicLSTMCell"),m=(0,n.convertToTensor)(t,"lstmKernel","basicLSTMCell"),g=(0,n.convertToTensor)(r,"lstmBias","basicLSTMCell"),x=(0,n.convertToTensor)(s,"data","basicLSTMCell"),b=(0,n.convertToTensor)(u,"c","basicLSTMCell"),y=(0,n.convertToTensor)(h,"h","basicLSTMCell"),j=(0,o.concat)([x,y],1),_=(0,i.matMul)(j,m),k=(0,a.add)(_,g),I=k.shape[0],w=k.shape[1]/4,C=[I,w],S=(0,c.slice)(k,[0,0],C),T=(0,c.slice)(k,[0,w],C),N=(0,c.slice)(k,[0,2*w],C),E=(0,c.slice)(k,[0,3*w],C),F=(0,a.add)((0,l.mul)((0,p.sigmoid)(S),(0,d.tanh)(T)),(0,l.mul)(b,(0,p.sigmoid)((0,a.add)(f,N)))),A=(0,l.mul)((0,d.tanh)(F),(0,p.sigmoid)(E));return[F,A]}})},{"../tensor_util_env":"9iWFD","./add":"lQRCK","./concat":"k3qE8","./mat_mul":"dpVGA","./mul":"9ihSJ","./operation":"htqKz","./sigmoid":"773j8","./slice":"kcOYr","./tanh":"lVUan","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k3qE8:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./clone"),u=e("./operation");let p=(0,u.op)({concat_:/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concatenate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t=0){(0,i.assert)(e.length>=1,()=>"Pass at least one tensor to concat");let r=(0,o.convertToTensorArray)(e,"tensors","concat","string_or_numeric");return("complex64"===r[0].dtype&&r.forEach(e=>{if("complex64"!==e.dtype)throw Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${e.dtype}. `)}),1===r.length)?(0,l.clone)(r[0]):(0,n.ENGINE).runKernel(a.Concat,r,{axis:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./clone":"ljPJN","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"773j8":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sigmoid",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({sigmoid_:/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","sigmoid","float32");return(0,n.ENGINE).runKernel(a.Sigmoid,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kcOYr:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({slice_:/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","slice","string_or_numeric");if(0===s.rank)throw Error("Slicing scalar is not possible");return(0,n.ENGINE).runKernel(a.Slice,{x:s},{begin:t,size:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lVUan:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tanh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({tanh_:/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","tanh","float32");return(0,n.ENGINE).runKernel(a.Tanh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eJpWZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchToSpaceND",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({batchToSpaceND_:/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped` to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","batchToSpaceND"),l=t.reduce((e,t)=>e*t);return i.assert(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),i.assert(r.length===t.length,()=>`crops.length is ${r.length} but should be equal to blockShape.length  ${t.length}`),i.assert(s.shape[0]%l==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${l}`),(0,n.ENGINE).runKernel(a.BatchToSpaceND,{x:s},{blockShape:t,crops:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gIn9u:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./batchnorm_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({batchNorm_:/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be a `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t,r,s,u,c){let d,h;null==c&&(c=.001);let f=(0,o.convertToTensor)(e,"x","batchNorm"),m=(0,o.convertToTensor)(t,"mean","batchNorm"),g=(0,o.convertToTensor)(r,"variance","batchNorm");null!=u&&(d=(0,o.convertToTensor)(u,"scale","batchNorm")),null!=s&&(h=(0,o.convertToTensor)(s,"offset","batchNorm")),i.assert(m.rank===g.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),i.assert(null==h||m.rank===h.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),i.assert(null==d||m.rank===d.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let x=(0,l.xAs4D)(f),b={x:x,scale:d,offset:h,mean:m,variance:g},y={varianceEpsilon:c},j=(0,n.ENGINE).runKernel(a.FusedBatchNorm,b,y);return(0,p.reshape)(j,f.shape)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./batchnorm_util":"aChPx","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aChPx:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"xAs4D",()=>a);var n=e("./reshape");function a(e){return 0===e.rank||1===e.rank?(0,n.reshape)(e,[1,1,1,e.size]):2===e.rank?(0,n.reshape)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,n.reshape)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e}},{"./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1D9US":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm2d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./batchnorm"),i=e("./operation");let l=(0,i.op)({batchNorm2d_:/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */function(e,t,r,s,i,l){let u,p;let c=(0,n.convertToTensor)(e,"x","batchNorm"),d=(0,n.convertToTensor)(t,"mean","batchNorm"),h=(0,n.convertToTensor)(r,"variance","batchNorm");return null!=i&&(u=(0,n.convertToTensor)(i,"scale","batchNorm")),null!=s&&(p=(0,n.convertToTensor)(s,"offset","batchNorm")),a.assert(2===c.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${c.rank}.`),a.assert(2===d.rank||1===d.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${d.rank}.`),a.assert(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${h.rank}.`),null!=u&&a.assert(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=p&&a.assert(2===p.rank||1===p.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`),(0,o.batchNorm)(c,d,h,p,u,l)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./batchnorm":"gIn9u","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9YaQD":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm3d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./batchnorm"),i=e("./operation");let l=(0,i.op)({batchNorm3d_:/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */function(e,t,r,s,i,l){let u,p;let c=(0,n.convertToTensor)(e,"x","batchNorm"),d=(0,n.convertToTensor)(t,"mean","batchNorm"),h=(0,n.convertToTensor)(r,"variance","batchNorm");return null!=i&&(u=(0,n.convertToTensor)(i,"scale","batchNorm")),null!=s&&(p=(0,n.convertToTensor)(s,"offset","batchNorm")),a.assert(3===c.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${c.rank}.`),a.assert(3===d.rank||1===d.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${d.rank}.`),a.assert(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${h.rank}.`),null!=u&&a.assert(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=p&&a.assert(3===p.rank||1===p.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`),(0,o.batchNorm)(c,d,h,p,u,l)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./batchnorm":"gIn9u","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"60m1D":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm4d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./batchnorm"),i=e("./operation");let l=(0,i.op)({batchNorm4d_:/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */function(e,t,r,s,i,l){let u,p;let c=(0,n.convertToTensor)(e,"x","batchNorm"),d=(0,n.convertToTensor)(t,"mean","batchNorm"),h=(0,n.convertToTensor)(r,"variance","batchNorm");return null!=i&&(u=(0,n.convertToTensor)(i,"scale","batchNorm")),null!=s&&(p=(0,n.convertToTensor)(s,"offset","batchNorm")),a.assert(4===c.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${c.rank}.`),a.assert(4===d.rank||1===d.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${d.rank}.`),a.assert(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${h.rank}.`),null!=u&&a.assert(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=p&&a.assert(4===p.rank||1===p.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`),(0,o.batchNorm)(c,d,h,p,u,l)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./batchnorm":"gIn9u","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gw67a:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"bincount",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({bincount_:/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","bincount"),l=(0,o.convertToTensor)(t,"weights","bincount");return i.assert("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),i.assert(r>=0,()=>`size must be non-negative, but got ${r}.`),i.assert(l.size===s.size||0===l.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${l.shape}.`),(0,n.ENGINE).runKernel(a.Bincount,{x:s,weights:l},{size:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1m6tp":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"broadcastArgs",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({broadcastArgs_:/**
 * Return the shape of s0 op s1 with broadcast.
 *
 * compute r0, the broadcasted shape as a tensor.
 * s0, s1 and r0 are all integer vectors.
 *
 * This function returns the shape of the result of an operation between
 * two tensors of size s0 and s1 performed with broadcast.
 *
 * @param s0 A tensor representing a shape
 * @param s1 A tensor representing a shape
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"s0","broadcastArgs","int32"),s=(0,o.convertToTensor)(t,"s1","broadcastArgs","int32");if(1!==r.rank)throw Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${r.rank}`);if(1!==s.rank)throw Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return(0,n.ENGINE).runKernel(a.BroadcastArgs,{s0:r,s1:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c4rWF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"broadcastTo",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./clone"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({broadcastTo_:/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until it has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"broadcastTo","x"),s=r.shape;if(t.some(e=>!(e>0)||e%1!=0))throw Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<r.rank)throw Error(`broadcastTo(): shape.length=${t.length} < input.rank=${r.rank}.`);if(t.length>r.rank){let e=r.shape.slice();for(;e.length<t.length;)e.unshift(1);r=(0,u.reshape)(r,e)}let l=r.shape,p=Array.from(t);for(let e=t.length-1;e>=0;e--)if(l[e]===t[e])p[e]=1;else if(1!==r.shape[e])throw Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);let c=p.map((e,t)=>e>1?t:-1).filter(e=>e>=0);if(0===c.length)return(0,i.clone)(r);// TODO call broadcastTo kernel directly once backends implement broadcstTo
let d={x:r};return(0,n.ENGINE).runKernel(a.Tile,d,{reps:p})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./clone":"ljPJN","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1pmdy":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ceil",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({ceil_:/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","ceil","float32");return(0,n.ENGINE).runKernel(a.Ceil,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1BbPI":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clipByValue",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./fill"),u=e("./operation");let p=(0,u.op)({clipByValue_:/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower bound of range to be clipped to.
 * @param clipValueMax Upper bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","clipByValue");return(i.assert(t<=r,()=>`Error in clip: min (${t}) must be less than or equal to max (${r}).`),t===r)?(0,l.fill)(s.shape,t,s.dtype):(0,n.ENGINE).runKernel(a.ClipByValue,{x:s},{clipValueMin:t,clipValueMax:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./fill":"bXOoe","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bXOoe:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fill",()=>o);var n=e("../engine"),a=e("../kernel_names");/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function o(e,t,r){return(0,n.ENGINE).runKernel(a.Fill,{},{shape:e,value:t,dtype:r})}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7PFMm":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat1d",()=>o);var n=e("./concat"),a=e("./operation");let o=(0,a.op)({concat1d_:/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */function(e){return(0,n.concat)(e,0/* axis */)}})},{"./concat":"k3qE8","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1SFXT":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat2d",()=>o);var n=e("./concat"),a=e("./operation");let o=(0,a.op)({concat2d_:/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */function(e,t){return(0,n.concat)(e,t)}})},{"./concat":"k3qE8","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bzZ7l:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat3d",()=>o);var n=e("./concat"),a=e("./operation");let o=(0,a.op)({concat3d_:/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */function(e,t){return(0,n.concat)(e,t)}})},{"./concat":"k3qE8","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e3I6w:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat4d",()=>o);var n=e("./concat"),a=e("./operation");let o=(0,a.op)({concat4d_:/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */function(e,t){return(0,n.concat)(e,t)}})},{"./concat":"k3qE8","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kIuFu:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv1d",()=>p);var n=e("../tensor_util_env"),a=e("../util"),o=e("./conv2d"),i=e("./conv_util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({conv1d_:/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,l="NWC",p=1,c){let d=(0,n.convertToTensor)(e,"x","conv1d"),h=(0,n.convertToTensor)(t,"filter","conv1d"),f=d,m=!1;2===d.rank&&(m=!0,f=(0,u.reshape)(d,[1,d.shape[0],d.shape[1]])),a.assert(3===f.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`),a.assert(3===h.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${h.rank}.`),i.checkPadOnDimRoundingMode("conv1d",s,c),a.assert(f.shape[2]===h.shape[1],()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${h.shape[1]}.`),a.assert(i.eitherStridesOrDilationsAreOne(r,p),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${r} and dilation '${p}'`),a.assert("NWC"===l,()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`);let g=(0,u.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),x=(0,u.reshape)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,r],y=[1,p],j=(0,o.conv2d)(x,g,b,s,"NHWC",y,c);return m?(0,u.reshape)(j,[j.shape[2],j.shape[3]]):(0,u.reshape)(j,[j.shape[0],j.shape[2],j.shape[3]])}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./conv2d":"8DIXU","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8DIXU":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2d",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({conv2d_:/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,u="NHWC",c=[1,1],d){let h=(0,o.convertToTensor)(e,"x","conv2d","float32"),f=(0,o.convertToTensor)(t,"filter","conv2d","float32"),m=h,g=!1;3===h.rank&&(g=!0,m=(0,p.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.assert(4===m.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`),i.assert(4===f.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`),l.checkPadOnDimRoundingMode("conv2d",s,d);let x="NHWC"===u?m.shape[3]:m.shape[1];i.assert(x===f.shape[2],()=>`Error in conv2d: depth of input (${x}) must match input depth for filter ${f.shape[2]}.`),i.assert(l.eitherStridesOrDilationsAreOne(r,c),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`);let b={x:m,filter:f},y=(0,n.ENGINE).runKernel(a.Conv2D,b,{strides:r,pad:s,dataFormat:u,dilations:c,dimRoundingMode:d});return g?(0,p.reshape)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],csGUE:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2dTranspose",()=>i);var n=e("../tensor_util_env"),a=e("./conv2d_backprop_input"),o=e("./operation");let i=(0,o.op)({conv2dTranspose_:/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,o,i){let l=(0,n.convertToTensor)(e,"x","conv2dTranspose"),u=(0,n.convertToTensor)(t,"filter","conv2dTranspose");return(0,a.conv2DBackpropInput)(r,l,u,s,o,"NHWC",i)}})},{"../tensor_util_env":"9iWFD","./conv2d_backprop_input":"eQKiV","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eQKiV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropInput",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../util"),i=e("./conv_util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({conv2DBackpropInput_:/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,l,p="NHWC",c){o.assert(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let d=e,h=t,f=!1;3===t.rank&&(f=!0,h=(0,u.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),d=[1,e[0],e[1],e[2]]),o.assert(4===d.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${d.length}.`),o.assert(4===h.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${h.rank}`),o.assert(4===r.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${r.rank}`);let m="NHWC"===p?d[3]:d[1],g="NHWC"===p?h.shape[3]:h.shape[1];o.assert(m===r.shape[2],()=>`Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${r.shape[2]}.`),o.assert(g===r.shape[3],()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${r.shape[3]}.`),i.checkPadOnDimRoundingMode("conv2dDerInput",l,c);let x={dy:h,filter:r},b={strides:s,pad:l,dataFormat:p,dimRoundingMode:c,inputShape:d},y=(0,n.ENGINE).runKernel(a.Conv2DBackpropInput,x,b);return f?(0,u.reshape)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},{"../engine":"ldVRX","../kernel_names":"3i501","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],sbr4O:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3d",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({conv3d_:/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,u="NDHWC",c=[1,1,1]){let d=(0,o.convertToTensor)(e,"x","conv3d"),h=(0,o.convertToTensor)(t,"filter","conv3d"),f=d,m=!1;4===d.rank&&(m=!0,f=(0,p.reshape)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),i.assert(5===f.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${f.rank}.`),i.assert(5===h.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${h.rank}.`),i.assert(f.shape[4]===h.shape[3],()=>`Error in conv3d: depth of input (${f.shape[4]}) must match input depth for filter ${h.shape[3]}.`),i.assert((0,l.eitherStridesOrDilationsAreOne)(r,c),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`),i.assert("NDHWC"===u,()=>`Error in conv3d: got dataFormat of ${u} but only NDHWC is currently supported.`);let g={x:f,filter:h},x=(0,n.ENGINE).runKernel(a.Conv3D,g,{strides:r,pad:s,dataFormat:u,dilations:c});return m?(0,p.reshape)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ai1JM:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3dTranspose",()=>i);var n=e("../tensor_util_env"),a=e("./conv3d_backprop_input"),o=e("./operation");let i=(0,o.op)({conv3dTranspose_:/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,o){let i=(0,n.convertToTensor)(e,"x","conv3dTranspose"),l=(0,n.convertToTensor)(t,"filter","conv3dTranspose");return(0,a.conv3DBackpropInput)(r,i,l,s,o)}})},{"../tensor_util_env":"9iWFD","./conv3d_backprop_input":"2XOxa","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2XOxa":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropInput",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../util"),i=e("./operation"),l=e("./reshape");let u=(0,i.op)({conv3DBackpropInput_:/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */function(e,t,r,s,i){o.assert(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let u=e,p=t,c=!1;4===t.rank&&(c=!0,p=(0,l.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),u=[1,e[0],e[1],e[2],e[3]]);let d=u[4],h=p.shape[4];o.assert(5===u.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${u.length}.`),o.assert(5===p.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${p.rank}`),o.assert(5===r.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${r.rank}`),o.assert(d===r.shape[3],()=>`Error in conv3dDerInput: depth of input (${d}) must match input depth for filter ${r.shape[3]}.`),o.assert(h===r.shape[4],()=>`Error in conv3dDerInput: depth of output (${h}) must match output depth for filter ${r.shape[4]}.`);let f={dy:p,filter:r},m={pad:i,strides:s,inputShape:u},g=(0,n.ENGINE).runKernel(a.Conv3DBackpropInputV2,f,m);return c?(0,l.reshape)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},{"../engine":"ldVRX","../kernel_names":"3i501","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"43oKr":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cos",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({cos_:/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor. Must be float32 type.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","cos","float32");return(0,n.ENGINE).runKernel(a.Cos,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],czPyA:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cosh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({cosh_:/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor. Must be float32 type.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","cosh","float32");return(0,n.ENGINE).runKernel(a.Cosh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],NJtBS:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumprod",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({cumprod_:/**
 * Computes the cumulative product of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumprod().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumprod().print();
 * ```
 *
 * @param x The input tensor to cumulatively multiply.
 * @param axis The axis along which to multiply. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative product. Optional.
 *     Defaults to false. If set to true then the product of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to multiply in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */function(e,t=0,r=!1,s=!1){let i=(0,o.convertToTensor)(e,"x","cumprod");return(0,n.ENGINE).runKernel(a.Cumprod,{x:i},{axis:t,exclusive:r,reverse:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7er4p":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumsum",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({cumsum_:/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */function(e,t=0,r=!1,s=!1){let i=(0,o.convertToTensor)(e,"x","cumsum");return(0,n.ENGINE).runKernel(a.Cumsum,{x:i},{axis:t,exclusive:r,reverse:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4Gs6d":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"denseBincount",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({denseBincount_:/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1 or rank 2.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 * @param binaryOutput Optional. Whether the kernel should count the appearance
 *     or number of occurrences. Defaults to False.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t,r,s=!1){let l=(0,o.convertToTensor)(e,"x","denseBincount"),u=(0,o.convertToTensor)(t,"weights","denseBincount");return i.assert("int32"===l.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${l.dtype}`),i.assert(l.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${l.rank}.`),i.assert(r>=0,()=>`size must be non-negative, but got ${r}.`),i.assert(u.size===l.size||0===u.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${l.shape}, weights shape: ${u.shape}.`),(0,n.ENGINE).runKernel(a.DenseBincount,{x:l,weights:u},{size:r,binaryOutput:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],afJfn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthToSpace",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({depthToSpace_:/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t,r="NHWC"){let s=(0,o.convertToTensor)(e,"x","depthToSpace","float32"),l="NHWC"===r?s.shape[1]:s.shape[2],u="NHWC"===r?s.shape[2]:s.shape[3],p="NHWC"===r?s.shape[3]:s.shape[1];return i.assert(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),i.assert(l*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${l} and ${t}  for depthToSpace with input shape
    ${s.shape}`),i.assert(u*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${u} and ${t} for depthToSpace with input shape
        ${s.shape}`),i.assert(p%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${p} for depthToSpace with input shape ${s.shape}`),(0,n.ENGINE).runKernel(a.DepthToSpace,{x:s},{blockSize:t,dataFormat:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gYPBC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2d",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({depthwiseConv2d_:/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,u="NHWC",c=[1,1],d){let h=(0,o.convertToTensor)(e,"x","depthwiseConv2d","float32"),f=(0,o.convertToTensor)(t,"filter","depthwiseConv2d","float32"),m=h,g=!1;3===h.rank&&(g=!0,m=(0,p.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.assert(4===m.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),i.assert(4===f.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`);let x="NHWC"===u?m.shape[3]:m.shape[1];i.assert(x===f.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${x}) must match the inChannels dimension in filter ${f.shape[2]}.`),l.checkPadOnDimRoundingMode("depthwiseConv2d",s,d);let b={x:m,filter:f},y=(0,n.ENGINE).runKernel(a.DepthwiseConv2dNative,b,{strides:r,pad:s,dataFormat:u,dilations:c,dimRoundingMode:d});return g?(0,p.reshape)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3BDjJ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"diag",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({diag_:/**
 * Returns a diagonal tensor with given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","diag");return(0,n.ENGINE).runKernel(a.Diag,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2sjZu":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2d",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({dilation2d_:/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,l=[1,1],p="NHWC"){let c=(0,o.convertToTensor)(e,"x","dilation2d"),d=(0,o.convertToTensor)(t,"filter","dilation2d");i.assert(3===c.rank||4===c.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${c.rank}.`),i.assert(3===d.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${d.rank}.`),i.assert("NHWC"===p,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${p}`);let h=c,f=!1;3===c.rank&&(h=(0,u.reshape)(c,[1,c.shape[0],c.shape[1],c.shape[2]]),f=!0);let m={x:h,filter:d},g=(0,n.ENGINE).runKernel(a.Dilation2D,m,{strides:r,pad:s,dilations:l});return f?(0,u.reshape)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1cGZh":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"divNoNan",()=>c);var n=e("../tensor_util"),a=e("../tensor_util_env"),o=e("./div"),i=e("./equal"),l=e("./operation"),u=e("./where"),p=e("./zeros_like");let c=(0,l.op)({divNoNan_:/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){// TODO: Make this into its own kernel.
let r=(0,a.convertToTensor)(e,"a","div"),s=(0,a.convertToTensor)(t,"b","div");[r,s]=(0,n.makeTypesMatch)(r,s);let l=(0,o.div)(r,s),c=(0,p.zerosLike)(l),d=(0,i.equal)(s,c);return(0,u.where)(d,c,l)}})},{"../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./div":"9dy6L","./equal":"1gQAF","./operation":"htqKz","./where":"kAiQD","./zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1gQAF":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"equal",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({equal_:/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","equal","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","equal","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.Equal,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kAiQD:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"where",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./broadcast_to"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({where_:/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t,r){let s=(0,o.convertToTensor)(t,"a","where"),u=(0,o.convertToTensor)(r,"b","where"),p=(0,o.convertToTensor)(e,"condition","where","bool"),c=(0,l.assertAndGetBroadcastShape)((0,l.assertAndGetBroadcastShape)(p.shape,s.shape),u.shape),d=(0,i.broadcastTo)(p,c),h=(0,i.broadcastTo)(s,c),f=(0,i.broadcastTo)(u,c);return(0,n.ENGINE).runKernel(a.Select,{condition:d,t:h,e:f})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./broadcast_to":"c4rWF","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lVjfh:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"zerosLike",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({zerosLike_:/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","zerosLike");return(0,n.ENGINE).runKernel(a.ZerosLike,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6jqww":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dot",()=>u);var n=e("../tensor_util_env"),a=e("../util"),o=e("./mat_mul"),i=e("./operation"),l=e("./reshape");let u=(0,i.op)({dot_:/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t){let r=(0,n.convertToTensor)(e,"t1","dot"),s=(0,n.convertToTensor)(t,"t2","dot");a.assert((1===r.rank||2===r.rank)&&(1===s.rank||2===s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${r.rank} and ${s.rank}.`);let i=1===r.rank?r.size:r.shape[1],u=1===s.rank?s.size:s.shape[0];if(a.assert(i===u,()=>`Error in dot: inner dimensions of inputs must match, but got ${i} and ${u}.`),1===r.rank&&1===s.rank){let e=(0,l.reshape)(r,[1,-1]),t=(0,l.reshape)(s,[-1,1]),n=(0,o.matMul)(e,t);return(0,l.reshape)(n,[])}if(1===r.rank&&2===s.rank){let e=(0,l.reshape)(r,[1,-1]),t=(0,l.reshape)(s,[s.shape[0],s.shape[1]]),n=(0,o.matMul)(e,t);return(0,l.reshape)(n,[n.size])}if(2===r.rank&&1===s.rank){let e=(0,l.reshape)(s,[-1,1]),t=(0,o.matMul)(r,e);return(0,l.reshape)(t,[t.size])}{let e=(0,l.reshape)(s,[s.shape[0],s.shape[1]]),t=(0,o.matMul)(r,e);return t}}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./mat_mul":"dpVGA","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e2SOn:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Tensor contraction over specified indices and outer product.
 *
 * `einsum` allows defining Tensors by defining their element-wise computation.
 * This computation is based on
 * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).
 *
 * Some special cases include:
 *
 * Matrix multiplication:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('ij,jk->ik', x, y).print();
 * ```
 *
 * Dot product:
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 * const y = tf.tensor1d([0, 1, 2]);
 * x.print();
 * y.print();
 * tf.einsum('i,i->', x, y).print();
 * ```
 *
 * Batch dot product:
 * ```js
 * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);
 * x.print();
 * y.print();
 * tf.einsum('bi,bi->b', x, y).print();
 * ```
 *
 * Outer prouduct:
 * ```js
 * const x = tf.tensor1d([1, 3, 5]);
 * const y = tf.tensor1d([2, 4, 6]);
 * x.print();
 * y.print();
 * tf.einsum('i,j->ij', x, y).print();
 * ```
 *
 * Matrix transpose:
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * x.print();
 * tf.einsum('ij->ji', x).print();
 * ```
 *
 * Batch matrix transpose:
 * ```js
 * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);
 * x.print();
 * tf.einsum('bij->bji', x).print();
 * ```
 *
 * Limitations:
 *
 * This implementation of einsum has the following limitations:
 *
 * - Does not support >2 input tensors.
 * - Does not support duplicate axes for any given input tensor. E.g., equation
 *   'ii->' is not supported.
 * - The `...` notation is not supported.
 *
 * @param equation a string describing the contraction, in the same format as
 * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).
 * @param tensors the input(s) to contract (each one a Tensor), whose shapes
 *     should be consistent with equation.
 * @returns The output tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Matrices'}
 */s.export(r,"einsum_",()=>l),s.export(r,"einsum",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");function l(e,...t){let r=t.map((e,t)=>(0,o.convertToTensor)(e,`tensors${t}`,"einsum"));return(0,n.ENGINE).runKernel(a.Einsum,r,{equation:e})}let u=(0,i.op)({einsum_:l})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e9QZU:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"elu",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({elu_:/**
 * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","elu","float32");return(0,n.ENGINE).runKernel(a.Elu,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cFtC5:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"erf",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./cast"),u=e("./operation");let p=(0,u.op)({erf_:/**
 * Computes Gauss error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","erf");i.assert("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=(0,l.cast)(t,"float32"));let r={x:t};return(0,n.ENGINE).runKernel(a.Erf,r)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./cast":"7e2UZ","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dKw0K:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"euclideanNorm",()=>o);var n=e("./norm"),a=e("./operation");let o=(0,a.op)({euclideanNorm_:/**
 * Computes the Euclidean norm of scalar, vectors, and matrices.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.euclideanNorm().print();  // or tf.euclideanNorm(x)
 * ```
 *
 * @param x The input array.
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. euclideanNorm(x) is equivalent
 * to euclideanNorm(x.reshape([-1])). If axis is an integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm has the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t=null,r=!1){return(0,n.norm)(e,"euclidean",t,r)}})},{"./norm":"e1hji","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e1hji:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"norm",()=>x);var n=e("../tensor_util_env"),a=e("../util"),o=e("./abs"),i=e("./axis_util"),l=e("./max"),u=e("./min"),p=e("./operation"),c=e("./pow"),d=e("./reshape"),h=e("./scalar"),f=e("./sqrt"),m=e("./square"),g=e("./sum");let x=(0,p.op)({norm_:/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^(1/2)
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is an integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm has the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t="euclidean",r=null,s=!1){e=(0,n.convertToTensor)(e,"x","norm");let p=function e(t,r,s=null){if(0===t.rank)return(0,o.abs)(t);// consider vector when no axis is specified
if(1!==t.rank&&null===s)return e((0,d.reshape)(t,[-1]),r,s);// vector
if(1===t.rank||"number"==typeof s||Array.isArray(s)&&1===s.length){if(1===r)return(0,g.sum)((0,o.abs)(t),s);if(r===1/0)return(0,l.max)((0,o.abs)(t),s);if(r===-1/0)return(0,u.min)((0,o.abs)(t),s);if("euclidean"===r||2===r)return(0,f.sqrt)((0,g.sum)((0,c.pow)((0,o.abs)(t),(0,h.scalar)(2,"int32")),s));throw Error(`Error in norm: invalid ord value: ${r}`)}// matrix (assumption axis[0] < axis[1])
if(Array.isArray(s)&&2===s.length){if(1===r)return(0,l.max)((0,g.sum)((0,o.abs)(t),s[0]),s[1]-1);if(r===1/0)return(0,l.max)((0,g.sum)((0,o.abs)(t),s[1]),s[0]);if(r===-1/0)return(0,u.min)((0,g.sum)((0,o.abs)(t),s[1]),s[0]);if("fro"===r||"euclidean"===r)return(0,f.sqrt)((0,g.sum)((0,m.square)(t),s));throw Error(`Error in norm: invalid ord value: ${r}`)}throw Error(`Error in norm: invalid axis: ${s}`)}(e,t,r),x=p.shape;if(s){let t=(0,a.parseAxisParam)(r,e.shape);x=i.expandShapeToKeepDim(p.shape,t)}return(0,d.reshape)(p,x)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./abs":"j8viR","./axis_util":"9ZcyD","./max":"deiNR","./min":"isLaT","./operation":"htqKz","./pow":"16YAi","./reshape":"hcB7g","./scalar":"8NgrS","./sqrt":"5Uzeg","./square":"3G5yp","./sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9ZcyD":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */s.export(r,"axesAreInnerMostDims",()=>a),s.export(r,"combineLocations",()=>o),s.export(r,"computeOutAndReduceShapes",()=>i),s.export(r,"expandShapeToKeepDim",()=>l),s.export(r,"assertAxesAreInnerMostDims",()=>u),/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */s.export(r,"getAxesPermutation",()=>p),/** Returns the axes permutation that undoes the original permutation. */s.export(r,"getUndoAxesPermutation",()=>c),s.export(r,"getInnerMostAxes",()=>d);var n=e("../util");function a(e,t){for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0}function o(e,t,r){let s=e.length+t.length,n=[],a=0,o=0;for(let i=0;i<s;i++)-1===r.indexOf(i)?n.push(e[a++]):n.push(t[o++]);return n}function i(e,t){let r=[],s=e.length;for(let n=0;n<s;n++)-1===t.indexOf(n)&&r.push(e[n]);let n=t.map(t=>e[t]);return[r,n]}function l(e,t){let r=t.map(e=>1);return o(e,r,t)}function u(e,t,r){n.assert(a(t,r),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${r} input.`)}function p(e,t){if(a(e,t))return null;let r=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&r.push(s);return e.forEach(e=>r.push(e)),r}function c(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function d(e,t){let r=[];for(let s=t-e;s<t;++s)r.push(s);return r}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],deiNR:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"max",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({max_:/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","max");return(0,n.ENGINE).runKernel(a.Max,{x:s},{reductionIndices:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],isLaT:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"min",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({min_:/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","min");// tslint:disable-next-line: no-unnecessary-type-assertion
return(0,n.ENGINE).runKernel(a.Min,{x:s},{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"16YAi":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pow",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({pow_:/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"base","pow"),s=(0,i.convertToTensor)(t,"exp","pow");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Pow,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8NgrS":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"scalar",()=>o);var n=e("../util"),a=e("./tensor_ops_util");function o(e,t){if(((0,n.isTypedArray)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,n.isTypedArray)(e)&&!(e instanceof Uint8Array))throw Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.makeTensor)(e,[],[],t)}},{"../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5Uzeg":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sqrt",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({sqrt_:/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","sqrt","float32");return(0,n.ENGINE).runKernel(a.Sqrt,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3G5yp":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"square",()=>i);var n=e("../engine"),a=e("../tensor_util_env"),o=e("./operation");let i=(0,o.op)({square_:/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,a.convertToTensor)(e,"x","square");return(0,n.ENGINE).runKernel("Square",{x:t},{})}})},{"../engine":"ldVRX","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],nMRSa:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sum",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./cast"),l=e("./operation");let u=(0,l.op)({sum_:/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","sum");"bool"===s.dtype&&(s=(0,i.cast)(s,"int32"));let l={x:s};return(0,n.ENGINE).runKernel(a.Sum,l,{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./cast":"7e2UZ","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1ctfc":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"exp",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({exp_:/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","exp");return(0,n.ENGINE).runKernel(a.Exp,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"99JBF":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expandDims",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({expandDims_:/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions are to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","expandDims","string_or_numeric");return i.assert(t<=r.rank,()=>"Axis must be <= rank of the tensor"),(0,n.ENGINE).runKernel(a.ExpandDims,{input:r},{dim:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eMz4X:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expm1",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({expm1_:/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","expm1");return(0,n.ENGINE).runKernel(a.Expm1,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4rEcG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"eye",()=>u);var n=e("./buffer"),a=e("./expand_dims"),o=e("./operation"),i=e("./reshape"),l=e("./tile");let u=(0,o.op)({eye_:/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e,t,r,s="float32"){null==t&&(t=e);let o=(0,n.buffer)([e,t],s),u=e<=t?e:t;for(let e=0;e<u;++e)o.set(1,e,e);let p=(0,i.reshape)(o.toTensor(),[e,t]);if(null==r)return p;if(1===r.length)return(0,l.tile)((0,a.expandDims)(p,0),[r[0],1,1]);if(2===r.length)return(0,l.tile)((0,a.expandDims)((0,a.expandDims)(p,0),0),[r[0],r[1],1,1]);if(3===r.length)return(0,l.tile)((0,a.expandDims)((0,a.expandDims)((0,a.expandDims)(p,0),0),0),[r[0],r[1],r[2],1,1]);throw Error(// tslint:disable-next-line:no-any
`eye() currently supports only 1D and 2D batchShapes, but received ${r.length}D.`)}})},{"./buffer":"bnrDL","./expand_dims":"99JBF","./operation":"htqKz","./reshape":"hcB7g","./tile":"913ES","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"913ES":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tile",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({tile_:/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's `i`th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the `i`th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"x","tile","string_or_numeric");return i.assert(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of reps ${t}.`),(0,n.ENGINE).runKernel(a.Tile,{x:r},{reps:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iKvgL:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floor",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({floor_:/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","floor","float32");return(0,n.ENGINE).runKernel(a.Floor,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gHcvO:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gather",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({gather_:/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices are to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 * @param batchDims Optional. The number of batch dimensions. It must be less
 *     than or equal to rank(indices). Defaults to 0.
 *     The output tensor will have shape of
 *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t,r=0,s=0){let i=(0,o.convertToTensor)(e,"x","gather"),l=(0,o.convertToTensor)(t,"indices","gather","int32");return(0,n.ENGINE).runKernel(a.GatherV2,{x:i,indices:l},{axis:r,batchDims:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ayzyA:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greater",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({greater_:/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","greater","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","greater","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.Greater,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h8ZY5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greaterEqual",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({greaterEqual_:/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","greaterEqual","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","greaterEqual","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.GreaterEqual,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"01DXR":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isFinite",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({isFinite_:/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","isFinite");return(0,n.ENGINE).runKernel(a.IsFinite,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5kuU7":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isInf",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({isInf_:/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","isInf");return(0,n.ENGINE).runKernel(a.IsInf,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bqBVg:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isNaN",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({isNaN_:/**
 * Returns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","isNaN");return(0,n.ENGINE).runKernel(a.IsNan,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],amVM0:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"leakyRelu",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({leakyRelu_:/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e,t=.2){let r=(0,o.convertToTensor)(e,"x","leakyRelu");return(0,n.ENGINE).runKernel(a.LeakyRelu,{x:r},{alpha:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8JxgH":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"less",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({less_:/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","less","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","less","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.Less,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],joVbJ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lessEqual",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({lessEqual_:/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","lessEqual","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","lessEqual","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.LessEqual,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4elMk":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"linspace",()=>o);var n=e("../engine"),a=e("../kernel_names");function o(e,t,r){if(r<=0)throw Error("The number of values should be positive.");return(0,n.ENGINE).runKernel(a.LinSpace,{},{start:e,stop:t,num:r})}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aYm6a:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"localResponseNormalization",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({localResponseNormalization_:/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t=5,r=1,s=1,l=.5){let p=(0,o.convertToTensor)(e,"x","localResponseNormalization");i.assert(4===p.rank||3===p.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${p.rank}.`),i.assert(i.isInt(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let c=p,d=!1;3===p.rank&&(d=!0,c=(0,u.reshape)(p,[1,p.shape[0],p.shape[1],p.shape[2]]));let h={x:c},f=(0,n.ENGINE).runKernel(a.LRN,h,{depthRadius:t,bias:r,alpha:s,beta:l});return d?(0,u.reshape)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],agrA2:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({log_:/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","log","float32");return(0,n.ENGINE).runKernel(a.Log,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aALDF:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log1p",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({log1p_:/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","log1p");return(0,n.ENGINE).runKernel(a.Log1p,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5GEm3":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logSigmoid",()=>c);var n=e("../gradients"),a=e("../tensor_util_env"),o=e("./mul"),i=e("./neg"),l=e("./operation"),u=e("./sigmoid"),p=e("./softplus");let c=(0,l.op)({logSigmoid_:/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,a.convertToTensor)(e,"x","logSigmoid"),r=(0,n.customGrad)(e=>{// TODO(yassogba) we can remove the chained softplus call here only
// after backends have modualrized softplus at which point we can call
// engine runKernel(..., Sotfplus, ...) directly.
let t=(0,i.neg)((0,p.softplus)((0,i.neg)(e)));return{value:t,gradFunc:t=>{let r=(0,o.mul)(t,(0,u.sigmoid)((0,i.neg)(e)));return r}}});return r(t)}})},{"../gradients":"dqgxj","../tensor_util_env":"9iWFD","./mul":"9ihSJ","./neg":"gRzxs","./operation":"htqKz","./sigmoid":"773j8","./softplus":"2NnUY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dqgxj:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"customGrad",()=>h),s.export(r,"variableGrads",()=>d),s.export(r,"valueAndGrad",()=>p),s.export(r,"valueAndGrads",()=>c),s.export(r,"grad",()=>l),s.export(r,"grads",()=>u);var n=e("./engine"),a=e("./tensor"),o=e("./tensor_util_env"),i=e("./util");/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function l(e){return i.assert(i.isFunction(e),()=>"The f passed in grad(f) must be a function"),(t,r)=>{// x can be of any dtype, thus null as the last argument.
let s=(0,o.convertToTensor)(t,"x","tf.grad","string_or_numeric"),a=null!=r?(0,o.convertToTensor)(r,"dy","tf.grad"):null;return(0,n.ENGINE).tidy(()=>{let{value:t,grads:r}=(0,n.ENGINE).gradients(()=>e(s),[s],a);return null!=a&&i.assertShapesMatch(t.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),f(r),r[0]})}}/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function u(e){return i.assert(i.isFunction(e),()=>"The f passed in grads(f) must be a function"),(t,r)=>{i.assert(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");// args can be of any dtype, thus null as the last argument.
let s=(0,o.convertToTensorArray)(t,"args","tf.grads","string_or_numeric"),a=null!=r?(0,o.convertToTensor)(r,"dy","tf.grads"):null;return(0,n.ENGINE).tidy(()=>{let{value:t,grads:r}=(0,n.ENGINE).gradients(()=>e(...s),s,a);return null!=a&&i.assertShapesMatch(t.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),f(r),r})}}/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t. `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function p(e){return i.assert(i.isFunction(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,r)=>{i.assert(t instanceof a.Tensor,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),i.assert(null==r||r instanceof a.Tensor,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");let{grads:s,value:o}=(0,n.ENGINE).gradients(()=>e(t),[t],r);return f(s),{grad:s[0],value:o}}}/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t. each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function c(e){return i.assert(i.isFunction(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,r)=>{i.assert(Array.isArray(t)&&t.every(e=>e instanceof a.Tensor),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),i.assert(null==r||r instanceof a.Tensor,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");let s=(0,n.ENGINE).gradients(()=>e(...t),t,r);return null!=r&&i.assertShapesMatch(s.value.shape,r.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),f(s.grads),s}}/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function d(e,t){i.assert(i.isFunction(e),()=>"The f passed in variableGrads(f) must be a function"),i.assert(null==t||Array.isArray(t)&&t.every(e=>e instanceof a.Variable),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let r=null!=t;if(!r)for(let e in // Get all of the trainable variables.
t=[],n.ENGINE.registeredVariables)t.push(n.ENGINE.registeredVariables[e]);let s=r?t.filter(e=>!e.trainable):null,o=t.length;t=t.filter(e=>e.trainable),i.assert(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);let{value:l,grads:u}=(0,n.ENGINE).gradients(e,t,null,!0);i.assert(u.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),i.assert(0===l.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`);let p={};return t.forEach((e,t)=>{null!=u[t]&&(p[e.name]=u[t])}),null!=s&&// add them to the returned gradients with `null` values.
s.forEach(e=>p[e.name]=null),{value:l,grads:p}}/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensors.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */function h(e){return(0,n.ENGINE).customGrad(e)}function f(e){let t=e.filter(e=>null==e).length;if(t>0)throw Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)}},{"./engine":"ldVRX","./tensor":"j4V3y","./tensor_util_env":"9iWFD","./util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2NnUY":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softplus",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({softplus_:/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","softplus");return(0,n.ENGINE).runKernel(a.Softplus,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6dlHI":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logSoftmax",()=>f);var n=e("../gradients"),a=e("../tensor_util_env"),o=e("./cast"),i=e("./exp"),l=e("./log"),u=e("./max"),p=e("./mul"),c=e("./operation"),d=e("./sub"),h=e("./sum");let f=(0,c.op)({logSoftmax_:/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t=-1){let r=(0,a.convertToTensor)(e,"logits","logSoftmax");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and axis was ${t}`);// const forward: ForwardFunc<Tensor> = (backend, save) => {
//   const keepDims = true;
//   const xMax = max(logits, axis, true);
//   const shifted = sub(logits, xMax);
//   const value =
//       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,
//       keepDims)));
//   save([value]);
//   return value;
// };
// Use a custom gradient for numerical stability.
let s=(0,n.customGrad)((e,r)=>{let s=(0,u.max)(e,t,!0),n=(0,d.sub)(e,s),a=(0,d.sub)((0,o.cast)(n,"float32"),(0,l.log)((0,h.sum)((0,i.exp)(n),t,!0)));return r([a]),{value:a,gradFunc:(e,r)=>{let[s]=r,n=(0,i.exp)(s);return(0,d.sub)(e,(0,p.mul)((0,h.sum)(e,t,!0),n))}}});return s(r);// TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.
// const inputs: LogSoftmaxInputs = {logits: $logits};
// const attrs: LogSoftmaxAttrs = {axis};
// return ENGINE.runKernel(
//            LogSoftmax, inputs as {} as NamedTensorMap,
//            attrs as {} as NamedAttrMap);
}})},{"../gradients":"dqgxj","../tensor_util_env":"9iWFD","./cast":"7e2UZ","./exp":"1ctfc","./log":"agrA2","./max":"deiNR","./mul":"9ihSJ","./operation":"htqKz","./sub":"gYa0B","./sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gYa0B:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sub",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({sub_:/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","sub"),s=(0,i.convertToTensor)(t,"b","sub");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Sub,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],f9G46:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logSumExp",()=>m);var n=e("../tensor_util_env"),a=e("../util"),o=e("./add"),i=e("./axis_util"),l=e("./exp"),u=e("./log"),p=e("./max"),c=e("./operation"),d=e("./reshape"),h=e("./sub"),f=e("./sum");let m=(0,c.op)({logSumExp_:/**
 * Computes the log(sum(exp(elements across the reduction dimensions))).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,n.convertToTensor)(e,"x","logSumExp"),c=(0,a.parseAxisParam)(t,s.shape),m=(0,p.max)(s,c,!0),g=(0,h.sub)(s,m),x=(0,l.exp)(g),b=(0,f.sum)(x,c),y=(0,u.log)(b),j=(0,o.add)((0,d.reshape)(m,y.shape),y);if(r){let e=(0,i.expandShapeToKeepDim)(j.shape,c);return(0,d.reshape)(j,e)}return j}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./add":"lQRCK","./axis_util":"9ZcyD","./exp":"1ctfc","./log":"agrA2","./max":"deiNR","./operation":"htqKz","./reshape":"hcB7g","./sub":"gYa0B","./sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fhBD8:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalAnd",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./broadcast_util"),l=e("./operation");let u=(0,l.op)({logicalAnd_:/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"a","logicalAnd","bool"),s=(0,o.convertToTensor)(t,"b","logicalAnd","bool");return(0,i.assertAndGetBroadcastShape)(r.shape,s.shape),(0,n.ENGINE).runKernel(a.LogicalAnd,{a:r,b:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"77vf6":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalNot",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({logicalNot_:/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","logicalNot","bool");return(0,n.ENGINE).runKernel(a.LogicalNot,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iuea3:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalOr",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./broadcast_util"),l=e("./operation");let u=(0,l.op)({logicalOr_:/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"a","logicalOr","bool"),s=(0,o.convertToTensor)(t,"b","logicalOr","bool");return(0,i.assertAndGetBroadcastShape)(r.shape,s.shape),(0,n.ENGINE).runKernel(a.LogicalOr,{a:r,b:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gFm67:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalXor",()=>p);var n=e("../tensor_util_env"),a=e("./broadcast_util"),o=e("./logical_and"),i=e("./logical_not"),l=e("./logical_or"),u=e("./operation");let p=(0,u.op)({logicalXor_:/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,n.convertToTensor)(e,"a","logicalXor","bool"),s=(0,n.convertToTensor)(t,"b","logicalXor","bool");// x ^ y = (x | y) & ~(x & y)
return(0,a.assertAndGetBroadcastShape)(r.shape,s.shape),(0,o.logicalAnd)((0,l.logicalOr)(e,t),(0,i.logicalNot)((0,o.logicalAnd)(e,t)))}})},{"../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./logical_and":"fhBD8","./logical_not":"77vf6","./logical_or":"iuea3","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2FfJL":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The index returned corresponds to the first edge greater than or equal to the
 * value.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'lowerBound' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);
 * let values = tf.tensor1d([0.0, 4.1, 12.0]);
 * const result1 = tf.lowerBound(edges, values);
 * result1.print(); // [1, 2, 4]
 *
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * values = tf.tensor1d([0, 4, 10]);
 * const result2 = tf.lowerBound(seq, values);
 * result2.print(); // [0, 2, 3]
 *
 * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],
 *                                     [1., 2., 3., 4., 5.]]);
 * values = tf.tensor2d([[9.8, 2.1, 4.3],
 *                       [0.1, 6.6, 4.5, ]]);
 * const result3 = tf.lowerBound(sortedSequence, values);
 * result3.print(); // [[4, 1, 2], [0, 5, 4]]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying lower bound to each value. The result is not a global index to
 *     the entire Tensor, but the index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */s.export(r,"lowerBound",()=>a);var n=e("./search_sorted");function a(e,t){return(0,n.searchSorted)(e,t,"left")}},{"./search_sorted":"6P4rg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6P4rg":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"searchSorted",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util_base"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({searchSorted_:/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The side argument controls which index is returned if a value lands exactly
 * on an edge.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'sortedSequence' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);
 * let values = tf.tensor1d([0.0, 4.1, 12.0]);
 * const result1 = tf.searchSorted(edges, values, 'left');
 * result1.print(); // [1, 2, 4]
 *
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * values = tf.tensor1d([0, 4, 10]);
 * const result2 = tf.searchSorted(seq, values, 'left');
 * result2.print(); // [0, 2, 3]
 * const result3 = tf.searchSorted(seq, values, 'right');
 * result3.print(); // [1, 2, 5]
 *
 * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],
 *                                     [1., 2., 3., 4., 5.]]);
 * values = tf.tensor2d([[9.8, 2.1, 4.3],
 *                       [0.1, 6.6, 4.5, ]]);
 * const result4 = tf.searchSorted(sortedSequence, values, 'left');
 * result4.print(); // [[4, 1, 2], [0, 5, 4]]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower
 *     bound and 'right' to upper bound.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying either lower bound or upper bound (depending on side) to each
 *     value. The result is not a global index to the entire Tensor, but the
 *     index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */function(e,t,r="left"){let s=(0,o.convertToTensor)(e,"sortedSequence","searchSorted"),l=(0,o.convertToTensor)(t,"values","searchSorted"),p=s.shape[s.shape.length-1],c=l.shape[l.shape.length-1],d=(0,u.reshape)(s,[-1,p]),h=(0,u.reshape)(l,[-1,c]);if(d.rank<2)throw Error("Sorted input argument must be at least 2-dimensional");if(d.shape[0]!==h.shape[0])throw Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,i.sizeFromShape)(h.shape)>=2147483648)throw Error("values tensor size must less than 2147483648");if(d.shape[1]>=2147483648)throw Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${d.shape[1]}`);return(0,n.ENGINE).runKernel(a.SearchSorted,{sortedSequence:d,values:h},{side:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util_base":"hdTgZ","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8uaoU":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({maxPool_:/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,u){let c=(0,o.convertToTensor)(e,"x","maxPool"),d=c,h=!1;3===c.rank&&(h=!0,d=(0,p.reshape)(c,[1,c.shape[0],c.shape[1],c.shape[2]])),i.assert(4===d.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${d.rank}.`),i.assert(l.eitherStridesOrDilationsAreOne(r,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`),l.checkPadOnDimRoundingMode("maxPool",s,u);let f={x:d},m=(0,n.ENGINE).runKernel(a.MaxPool,f,{filterSize:t,strides:r,pad:s,dimRoundingMode:u});return h?(0,p.reshape)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7hokL":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3d",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({maxPool3d_:/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t=[1,1,1],r,s,u,c="NDHWC"){let d=(0,o.convertToTensor)(e,"x","maxPool3d"),h=d,f=!1;4===d.rank&&(f=!0,h=(0,p.reshape)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),i.assert(5===h.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${h.rank}.`),i.assert("NDHWC"===c,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${c}`),(0,l.checkPadOnDimRoundingMode)("maxPool3d",s,u);let m={x:h},g=(0,n.ENGINE).runKernel(a.MaxPool3D,m,{filterSize:t,strides:r,pad:s,dimRoundingMode:u,dataFormat:c});return f?(0,p.reshape)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e3aee:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolWithArgmax",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({maxPoolWithArgmax_:/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,i=!1){let l=(0,o.convertToTensor)(e,"x","maxPoolWithArgmax"),u=(0,n.ENGINE).runKernel(a.MaxPoolWithArgmax,{x:l},{filterSize:t,strides:r,pad:s,includeBatchInIndex:i});return{result:u[0],indexes:u[1]}}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jM2LY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maximum",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./cast"),p=e("./operation");let c=(0,p.op)({maximum_:/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","maximum"),s=(0,i.convertToTensor)(t,"b","maximum");[r,s]=(0,o.makeTypesMatch)(r,s),"bool"===r.dtype&&(r=(0,u.cast)(r,"int32"),s=(0,u.cast)(s,"int32")),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let p={a:r,b:s};return(0,n.ENGINE).runKernel(a.Maximum,p)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./cast":"7e2UZ","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"39LDA":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mean",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({mean_:/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","mean");return(0,n.ENGINE).runKernel(a.Mean,{x:s},{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2jriY":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Broadcasts parameters for evaluation on an N-D grid.
 *
 * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`
 * of N-D coordinate arrays for evaluating expressions on an N-D grid.
 *
 * Notes:
 * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.
 * When the `indexing` argument is set to 'xy' (the default), the broadcasting
 * instructions for the first two dimensions are swapped.
 * Examples:
 * Calling `const [X, Y] = meshgrid(x, y)` with the tensors
 *
 * ```javascript
 * const x = [1, 2, 3];
 * const y = [4, 5, 6];
 * const [X, Y] = tf.meshgrid(x, y);
 * // X = [[1, 2, 3],
 * //      [1, 2, 3],
 * //      [1, 2, 3]]
 * // Y = [[4, 4, 4],
 * //      [5, 5, 5],
 * //      [6, 6, 6]]
 * ```
 *
 * @param x Tensor with rank geq 1.
 * @param y Tensor with rank geq 1.
 * @param indexing
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */s.export(r,"meshgrid",()=>p);var n=e("./mat_mul"),a=e("./ones"),o=e("./reshape"),i=e("../tensor"),l=e("../tensor_util_env"),u=e("../util_base");function p(e,t,{indexing:r="xy"}={}){if("xy"!==r&&"ij"!==r)throw TypeError(`${r} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=(0,l.convertToTensor)(e,"x","meshgrid",e instanceof i.Tensor?e.dtype:"float32");if(void 0===t)return[s];let p=(0,l.convertToTensor)(t,"y","meshgrid",t instanceof i.Tensor?t.dtype:"float32"),c=(0,u.sizeFromShape)(s.shape),d=(0,u.sizeFromShape)(p.shape);return"xy"===r?(s=(0,o.reshape)(s,[1,-1]),p=(0,o.reshape)(p,[-1,1]),[(0,n.matMul)((0,a.ones)([d,1],s.dtype),s),(0,n.matMul)(p,(0,a.ones)([1,c],p.dtype))]):(s=(0,o.reshape)(s,[-1,1]),p=(0,o.reshape)(p,[1,-1]),[(0,n.matMul)(s,(0,a.ones)([1,d],s.dtype)),(0,n.matMul)((0,a.ones)([c,1],p.dtype),p)])}},{"./mat_mul":"dpVGA","./ones":"14B1F","./reshape":"hcB7g","../tensor":"j4V3y","../tensor_util_env":"9iWFD","../util_base":"hdTgZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"14B1F":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"ones",()=>function e(t,r="float32"){if("complex64"===r){let r=e(t,"float32"),s=(0,i.zeros)(t,"float32");return(0,o.complex)(r,s)}let s=(0,a.makeOnesTypedArray)((0,a.sizeFromShape)(t),r);return(0,n.ENGINE).makeTensor(s,t,r)});var n=e("../engine"),a=e("../util"),o=e("./complex"),i=e("./zeros")},{"../engine":"ldVRX","../util":"6bzqD","./complex":"i0i48","./zeros":"8Iv9P","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8Iv9P":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"zeros",()=>function e(t,r="float32"){if("complex64"===r){let r=e(t,"float32"),s=e(t,"float32");return(0,o.complex)(r,s)}let s=(0,a.makeZerosTypedArray)((0,a.sizeFromShape)(t),r);return(0,n.ENGINE).makeTensor(s,t,r)});var n=e("../engine"),a=e("../util"),o=e("./complex")},{"../engine":"ldVRX","../util":"6bzqD","./complex":"i0i48","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9HraX":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"minimum",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./cast"),p=e("./operation");let c=(0,p.op)({minimum_:/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","minimum"),s=(0,i.convertToTensor)(t,"b","minimum");[r,s]=(0,o.makeTypesMatch)(r,s),"bool"===r.dtype&&(r=(0,u.cast)(r,"int32"),s=(0,u.cast)(s,"int32")),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let p={a:r,b:s};return(0,n.ENGINE).runKernel(a.Minimum,p)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./cast":"7e2UZ","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dyjKX:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mirrorPad",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({mirrorPad_:/**
 * Pads a `tf.Tensor` using mirror padding.
 *
 * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
 *
 * ```js
 * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
 * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * In "reflect" mode, the padded regions do not include the borders,
 * while in "symmetric" mode the padded regions do include the borders.
 * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
 * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
 * `[1, 2, 3, 3, 2]` in "symmetric" mode.
 * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
 * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
 * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
 * `x.shape[D]`
 * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
 *//** @doc {heading: 'Tensors', subheading: 'Transformations'} */function(e,t,r){i.assert("reflect"===r||"symmetric"===r,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${r}.`);let s=(0,o.convertToTensor)(e,"x","mirrorPad");if(0===s.rank)throw Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.assert(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);let l="reflect"===r?1:0;for(let e=0;e<s.rank;e++)i.assert(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),i.assert(t[e][0]>=0&&t[e][0]<=s.shape[e]-l&&t[e][1]>=0&&t[e][1]<=s.shape[e]-l,()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-l} or less than 0 for input of shape ${s.shape}`);return(0,n.ENGINE).runKernel(a.MirrorPad,{x:s},{paddings:t,mode:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8f4iF":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mod",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({mod_:/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","mod"),s=(0,i.convertToTensor)(t,"b","mod");[r,s]=(0,o.makeTypesMatch)(r,s);let l={a:r,b:s};return(0,n.ENGINE).runKernel(a.Mod,l)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lySWw:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"moments",()=>h);var n=e("../tensor_util_env"),a=e("../util"),o=e("./axis_util"),i=e("./cast"),l=e("./mean"),u=e("./operation"),p=e("./reshape"),c=e("./square"),d=e("./sub");let h=(0,u.op)({moments_:/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t=null,r=!1){e=(0,n.convertToTensor)(e,"x","moments");let s=(0,a.parseAxisParam)(t,e.shape),u=(0,l.mean)(e,s,r),h=u.shape;r||(h=(0,o.expandShapeToKeepDim)(u.shape,s));let f=(0,c.square)((0,d.sub)((0,i.cast)(e,"float32"),(0,p.reshape)(u,h))),m=(0,l.mean)(f,s,r);return{mean:u,variance:m}}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./axis_util":"9ZcyD","./cast":"7e2UZ","./mean":"39LDA","./operation":"htqKz","./reshape":"hcB7g","./square":"3G5yp","./sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Iqoh":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multiRNNCell",()=>o);var n=e("../tensor_util_env"),a=e("./operation");let o=(0,a.op)({multiRNNCell_:/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */function(e,t,r,s){let a=(0,n.convertToTensor)(t,"data","multiRNNCell"),o=(0,n.convertToTensorArray)(r,"c","multiRNNCell"),i=(0,n.convertToTensorArray)(s,"h","multiRNNCell"),l=a,u=[];for(let t=0;t<e.length;t++){let r=e[t](l,o[t],i[t]);u.push(r[0]),u.push(r[1]),l=r[1]}let p=[],c=[];for(let e=0;e<u.length;e+=2)p.push(u[e]),c.push(u[e+1]);return[p,c]}})},{"../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],I1Ukz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multinomial",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation"),l=e("./reshape");let u=(0,i.op)({multinomial_:/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t,r,s=!1){let i=(0,o.convertToTensor)(e,"logits","multinomial"),u=i.size,p=i.rank;if(u<2)throw Error(`Error in multinomial: you need at least 2 outcomes, but got ${u}.`);if(p>2)throw Error(`Rank of probabilities must be 1 or 2, but is ${p}`);// TODO(lina128): Investigate correct seed behavior. The code seems not allow
// setting see to 0.
r=r||Math.random();// The kernel only accepts (and returns) rank 2 tensors.
let c=1===p?(0,l.reshape)(i,[1,-1]):i,d={numSamples:t,seed:r,normalized:s},h=(0,n.ENGINE).runKernel(a.Multinomial,{logits:c},d);// tslint:disable-next-line:no-unnecessary-type-assertion
return 1===p?(0,l.reshape)(h,[h.size]):h}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8kzbl":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"notEqual",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({notEqual_:/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","notEqual","string_or_numeric"),s=(0,i.convertToTensor)(t,"b","notEqual","string_or_numeric");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.NotEqual,u)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1UU7u":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"onesLike",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({onesLike_:/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","onesLike");return(0,n.ENGINE).runKernel(a.OnesLike,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hHTpK:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"outerProduct",()=>u);var n=e("../tensor_util_env"),a=e("../util"),o=e("./mat_mul"),i=e("./operation"),l=e("./reshape");let u=(0,i.op)({outerProduct_:/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */function(e,t){let r=(0,n.convertToTensor)(e,"v1","outerProduct"),s=(0,n.convertToTensor)(t,"v2","outerProduct");a.assert(1===r.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${r.rank} and ${s.rank}.`);let i=(0,l.reshape)(r,[-1,1]),u=(0,l.reshape)(s,[1,-1]);return(0,o.matMul)(i,u)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./mat_mul":"dpVGA","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lzGpp:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pad",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({pad_:/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
 * refer to `tf.mirrorPad`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t,r=0){let s=(0,o.convertToTensor)(e,"x","pad");if(0===s.rank)throw Error("pad(scalar) is not defined. Pass non-scalar to pad");return(0,n.ENGINE).runKernel(a.PadV2,{x:s},{paddings:t,constantValue:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kKiJU:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pad1d",()=>i);var n=e("../util"),a=e("./operation"),o=e("./pad");let i=(0,a.op)({pad1d_:/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */function(e,t,r=0){return(0,n.assert)(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),(0,o.pad)(e,[t],r)}})},{"../util":"6bzqD","./operation":"htqKz","./pad":"lzGpp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6x7pO":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pad2d",()=>i);var n=e("../util"),a=e("./operation"),o=e("./pad");let i=(0,a.op)({pad2d_:/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */function(e,t,r=0){return(0,n.assert)(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,o.pad)(e,t,r)}})},{"../util":"6bzqD","./operation":"htqKz","./pad":"lzGpp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1s51d":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pad3d",()=>i);var n=e("../util"),a=e("./operation"),o=e("./pad");let i=(0,a.op)({pad3d_:/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */function(e,t,r=0){return(0,n.assert)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,o.pad)(e,t,r)}})},{"../util":"6bzqD","./operation":"htqKz","./pad":"lzGpp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],foLjH:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pad4d",()=>i);var n=e("../util"),a=e("./operation"),o=e("./pad");let i=(0,a.op)({pad4d_:/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */function(e,t,r=0){return(0,n.assert)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,o.pad)(e,t,r)}})},{"../util":"6bzqD","./operation":"htqKz","./pad":"lzGpp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cKD0q:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pool",()=>h);var n=e("../tensor_util_env"),a=e("../util"),o=e("./avg_pool"),i=e("./batch_to_space_nd"),l=e("./conv_util"),u=e("./max_pool"),p=e("./operation"),c=e("./reshape"),d=e("./space_to_batch_nd");let h=(0,p.op)({pool_:/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,p,h,f){let m;null==p&&(p=[1,1]),null==h&&(h=1),0===s&&(s="valid");let g=(0,n.convertToTensor)(e,"x","maxPool"),x=g,b=!1;3===g.rank&&(b=!0,x=(0,c.reshape)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),a.assert(l.eitherStridesOrDilationsAreOne(h,p),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${h} and dilations '${p}'`);let y=l.computePool2DInfo(x.shape,t,h,p,s),j=[y.dilationHeight,y.dilationWidth];m="same"===s?// Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
function(e,t){// Spatial dimensions of the filters and the upsampled filters in which we
// introduce (rate - 1) zeros between consecutive filter values.
let r=e.map((e,r)=>e+(e-1)*(t[r]-1)),s=r.map(e=>e-1),n=s.map(e=>Math.floor(e/2)),a=s.map((e,t)=>e-n[t]);return s.map((e,t)=>[n[t],a[t]])}([y.filterHeight,y.filterWidth],j):[[0,0],[0,0]];let _=1===j[0]&&1===j[1],[k,I]=// Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
function(e,t,r){let s=r.map(e=>e[0]),n=r.map(e=>e[1]),a=e.concat(s,n),o=t.map((e,t)=>(e-a[t]%e)%e),i=n.map((e,t)=>e+o[t]),l=t.map((e,t)=>[s[t],i[t]]),u=t.map((e,t)=>[0,o[t]]);return[l,u]}([y.inHeight,y.inWidth],j,m),w=_?s:"valid",C=_?x:(0,d.spaceToBatchND)(x,j,k),S="avg"===r?()=>(0,o.avgPool)(C,t,h,w,f):()=>(0,u.maxPool)(C,t,h,w,f),T=S(),N=_?T:(0,i.batchToSpaceND)(T,j,I);return b?(0,c.reshape)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./avg_pool":"jkLAh","./batch_to_space_nd":"eJpWZ","./conv_util":"cCem6","./max_pool":"8uaoU","./operation":"htqKz","./reshape":"hcB7g","./space_to_batch_nd":"5fear","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5fear":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"spaceToBatchND",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({spaceToBatchND_:/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","spaceToBatchND");return i.assert(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),i.assert(r.length===t.length,()=>`paddings.shape[0] ${r.length} must be equal to [blockShape] ${t.length}`),i.assert(s.shape.reduce((e,s,n)=>n>0&&n<=t.length?e&&(s+r[n-1][0]+r[n-1][1])%t[n-1]==0:e,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${r.toString()} must be divisible by blockShapes ${t.toString()}`),(0,n.ENGINE).runKernel(a.SpaceToBatchND,{x:s},{blockShape:t,paddings:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hMoHx:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prelu",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({prelu_:/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"x","prelu"),s=(0,o.convertToTensor)(t,"alpha","prelu");return(0,n.ENGINE).runKernel(a.Prelu,{x:r,alpha:s})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1uJ9R":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prod",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./cast"),l=e("./operation");let u=(0,l.op)({prod_:/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */function(e,t=null,r=!1){let s=(0,o.convertToTensor)(e,"x","prod");"bool"===s.dtype&&(s=(0,i.cast)(s,"int32"));let l={x:s};return(0,n.ENGINE).runKernel(a.Prod,l,{axis:t,keepDims:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./cast":"7e2UZ","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9x6QU":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedGather",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({raggedGather_:function(e,t,r,s){let i=e.map((e,t)=>(0,o.convertToTensor)(e,`tensors${t}`,"raggedGather","int32")),l=(0,o.convertToTensor)(t,"paramsDenseValues","raggedGather"),u=(0,o.convertToTensor)(r,"indices","raggedGather","int32"),p=(0,n.ENGINE).runKernel(a.RaggedGather,{paramsNestedSplits:i,paramsDenseValues:l,indices:u},{outputRaggedRank:s});return{outputNestedSplits:p.slice(0,p.length-1),outputDenseValues:p[p.length-1]}}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d1BZS:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedTensorToTensor",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({raggedTensorToTensor_:/**
 * Create a dense tensor from a ragged tensor, possibly altering its shape.
 *
 * The raggedTensorToTensor op creates a dense tensor from am array of row
 * partition tensors, a value vector, and default values. If the shape is
 * unspecified, the minimal shape required to contain all the elements in the
 * ragged tensor (the natural shape) will be used. If some dimensions are left
 * unspecified, then the size of the natural shape is used in that dimension.
 *
 * The defaultValue will be broadcast to the output shape. After that, the
 * values from the ragged tensor overwrite the default values. Note that the
 * defaultValue must have less dimensions than the value.
 *
 * The row partition tensors are in the order of the dimensions. At present, the
 * types can be: "ROW_SPLITS": the row_splits tensor from the ragged tensor.
 *   "VALUE_ROWIDS": the value_rowids tensor from the ragged tensor.
 *   "FIRST_DIM_SIZE": if value_rowids is used for the first dimension, then it
 * is preceded by "FIRST_DIM_SIZE".
 * ```
 * @param shape: A Tensor. Must be one of the following types: 'int32'. The
 *     desired shape of the output tensor. If left unspecified (empty), the
 *     minimal shape required to contain all the elements in the ragged tensor
 *     (the natural shape) will be used. If some dimensions are left
 *     unspecified, then the size of the natural shape is used in that
 *     dimension.
 *
 *     Note that dense dimensions cannot be modified by the shape argument.
 *     Trying to change the size of a dense dimension will cause the op to fail.
 *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]
 *
 *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]
 *
 *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]
 * @param values: A Tensor. A 1D tensor representing the values of the ragged
 *     tensor.
 * @param defaultValue: A Tensor. Must have the same type as values. The
 *     defaultValue when the shape is larger than the ragged tensor. The
 *     defaultValue is broadcast until it is the shape of the output tensor,
 *     and then overwritten by values in the ragged tensor. The default value
 *     must be compatible with this broadcast operation, and must have fewer
 *     dimensions than the value tensor.
 * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same
 *     type in: 'int32'.
 * @param rowPartitionTypes: A list of strings. The types of the row partition
 *     tensors. At present, these can be:
 *     "ROW_SPLITS": the row_splits tensor from the ragged tensor.
 *     "VALUE_ROWIDS": the value_rowids tensor from the ragged tensor.
 *     "FIRST_DIM_SIZE": if value_rowids is used for the first dimension, then
 *         it is preceeded by "FIRST_DIM_SIZE". The tensors are in the order of
 *         the dimensions.
 * @return A Tensor. Has the same type as values.
 * @doc {heading: 'Operations', subheading: 'Ragged'}
 */function(e,t,r,s,i){let l=(0,o.convertToTensor)(e,"shape","raggedTensorToTensor","int32"),u=(0,o.convertToTensor)(t,"values","raggedTensorToTensor"),p=(0,o.convertToTensor)(r,"defaultValue","raggedTensorToTensor",u.dtype),c=s.map((e,t)=>(0,o.convertToTensor)(e,`tensors${t}`,"raggedTensorToTensor","int32"));return(0,n.ENGINE).runKernel(a.RaggedTensorToTensor,{shape:l,values:u,defaultValue:p,rowPartitionTensors:c},{rowPartitionTypes:i})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jgrPG:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rand",()=>i);var n=e("../engine"),a=e("../util"),o=e("./operation");let i=(0,o.op)({rand_:/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t,r){let s=(0,a.sizeFromShape)(e),o=null;if(null==r||"float32"===r)o=new Float32Array(s);else if("int32"===r)o=new Int32Array(s);else if("bool"===r)o=new Uint8Array(s);else throw Error(`Unknown data type ${r}`);for(let e=0;e<s;e++)o[e]=t();return(0,n.ENGINE).makeTensor(o,e,r)}})},{"../engine":"ldVRX","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6XkFa":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"randomGamma",()=>i);var n=e("./buffer"),a=e("./operation"),o=e("./rand_util");let i=(0,a.op)({randomGamma_:/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t,r=1,s="float32",a){if(null==r&&(r=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw Error(`Unsupported data type ${s}`);let i=new o.RandGamma(t,r,s,a),l=(0,n.buffer)(e,s);for(let e=0;e<l.values.length;e++)l.values[e]=i.nextValue();return l.toTensor()}})},{"./buffer":"bnrDL","./operation":"htqKz","./rand_util":"8G9t8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8G9t8":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// https://en.wikipedia.org/wiki/Marsaglia_polar_method
s.export(r,"MPRandGauss",()=>o),// Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."
s.export(r,"RandGamma",()=>i),s.export(r,"UniformRandom",()=>l),s.export(r,"jarqueBeraNormalityTest",()=>u),s.export(r,"expectArrayInMeanStdRange",()=>p);var n=e("seedrandom"),a=e("../test_util");class o{constructor(e,t,r,s,a){this.mean=e,this.stdDev=t,this.dtype=r,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let o=a||Math.random();this.random=n.alea(o.toString())}/** Returns next sample from a Gaussian distribution. */nextValue(){let e,t;if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let r=!1;for(;!r;){let s,n,a;do a=(s=2*this.random()-1)*s+(n=2*this.random()-1)*n;while(a>=1||0===a)let o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*o,t=this.mean+this.stdDev*n*o,(!this.truncated||this.isValidTruncated(e))&&(r=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}/** Handles proper rounding for non-floating-point numbers. */convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}/** Returns true if less than 2-standard-deviations from the mean. */isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class i{constructor(e,t,r,s){this.alpha=e,this.beta=1/t,this.dtype=r;let a=s||Math.random();this.randu=n.alea(a.toString()),this.randn=new o(0,1,r,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}/** Returns next sample from a gamma distribution. */nextValue(){let e,t,r,s,n,a;for(;;){do s=this.randn.nextValue(),a=1+this.c*s;while(a<=0)if(a*=a*a,t=1-.331*(e=s*s)*e,r=.5*e+this.d*(1-a+Math.log(a)),(n=this.randu())<t||Math.log(n)<r)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}/** Handles proper rounding for non-floating-point numbers. */convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class l{constructor(e=0,t=1,r,s){if(/** Handles proper rounding for non floating point numbers. */this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=r,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=n.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}function u(e){// https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
let t=e.length,r=function(e){// https://en.wikipedia.org/wiki/Skewness
let t=c(e),r=e.length,s=0,n=0;for(let a=0;a<r;a++){let r=e[a]-t;s+=Math.pow(r,2),n+=Math.pow(r,3)}return 1/r*n/Math.pow(1/(r-1)*s,1.5)}(e),s=function(e){// https://en.wikipedia.org/wiki/Kurtosis
let t=c(e),r=e.length,s=0,n=0;for(let a=0;a<r;a++){let r=e[a]-t;s+=Math.pow(r,2),n+=Math.pow(r,4)}return 1/r*n/Math.pow(1/r*s,2)}(e),n=t/6*(Math.pow(r,2)+.25*Math.pow(s-3,2));if(n>5.991)throw Error(`Invalid p-value for JB: ${n}`)}function p(e,t,r,s){null==s&&(s=(0,a.testEpsilon)());let n=c(e);(0,a.expectNumbersClose)(n,t,s),(0,a.expectNumbersClose)(function(e,t){let r=0;for(let s=0;s<e.length;s++){let n=e[s]-t;r+=n*n}return Math.sqrt(r/e.length)}(e,n),r,s)}function c(e){let t=0;for(let r=0;r<e.length;r++)t+=e[r];return t/e.length}},{seedrandom:"lsyFP","../test_util":"4cgWI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lsyFP:[function(e,t,r){// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.
// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var s=e("12650d0e2f5e5e92"),n=e("2e9ff46cdee4aab4"),a=e("a04af32374227880"),o=e("65d05f6db8da652c"),i=e("1e972c6b140abbe7"),l=e("286eb9753e804cda"),u=e("a0d0bb1ebcf7d3f9");u.alea=s,u.xor128=n,u.xorwow=a,u.xorshift7=o,u.xor4096=i,u.tychei=l,t.exports=u},{"12650d0e2f5e5e92":"9V5kO","2e9ff46cdee4aab4":"kVrb1",a04af32374227880:"qYf8d","65d05f6db8da652c":"hjhKS","1e972c6b140abbe7":"5JMJC","286eb9753e804cda":"inDm2",a0d0bb1ebcf7d3f9:"1xPJg"}],"9V5kO":[function(e,t,r){!// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -
// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function(e,t,r){function s(e){var t,r=this,s=(t=4022871197,function(e){e=String(e);for(var r=0;r<e.length;r++){var s=.02519603282416938*(t+=e.charCodeAt(r));t=s>>>0,s-=t,s*=t,t=s>>>0,s-=t,t+=4294967296*s}return(t>>>0)*23283064365386963e-26;// 2^-32
});r.next=function(){var e=2091639*r.s0+23283064365386963e-26*r.c;// 2^-32
return r.s0=r.s1,r.s1=r.s2,r.s2=e-(r.c=0|e)},// Apply the seeding algorithm from Baagoe.
r.c=1,r.s0=s(" "),r.s1=s(" "),r.s2=s(" "),r.s0-=s(e),r.s0<0&&(r.s0+=1),r.s1-=s(e),r.s1<0&&(r.s1+=1),r.s2-=s(e),r.s2<0&&(r.s2+=1)}function n(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var r=new s(e),a=t&&t.state,o=r.next;return o.int32=function(){return 4294967296*r.next()|0},o.double=function(){return o()+(2097152*o()|0)*11102230246251565e-32;// 2^-53
},o.quick=o,a&&("object"==typeof a&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.alea=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],kVrb1:[function(e,t,r){!// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
function(e,t,r){function s(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,// Set up generator function.
t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;// Mix in string seed, then discard an initial batch of 64 values.
for(var s=0;s<r.length+64;s++)t.x^=0|r.charCodeAt(s),t.next()}function n(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var r=new s(e),a=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/4294967296,s=(e+t)/2097152;while(0===s)return s},o.int32=r.next,o.quick=o,a&&("object"==typeof a&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.xor128=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],qYf8d:[function(e,t,r){!// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper
function(e,t,r){function s(e){var t=this,r="";// Set up generator function.
t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^(e^e<<1))|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:r+=e;// Mix in string seed, then discard an initial batch of 64 values.
for(var s=0;s<r.length+64;s++)t.x^=0|r.charCodeAt(s),s==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function n(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var r=new s(e),a=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/4294967296,s=(e+t)/2097152;while(0===s)return s},o.int32=r.next,o.quick=o,a&&("object"==typeof a&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.xorwow=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],hjhKS:[function(e,t,r){!// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf
function(e,t,r){function s(e){var t=this;// Set up generator function.
t.next=function(){// Update xor generator.
var e,r,s=t.x,n=t.i;return e=s[n],e^=e>>>7,r=e^e<<24^((e=s[n+1&7])^e>>>10)^((e=s[n+3&7])^e>>>3)^((e=s[n+4&7])^e<<7),e=s[n+7&7],e^=e<<13,r^=e^e<<9,s[n]=r,t.i=n+1&7,r},function(e,t){var r,s=[];if(t===(0|t))s[0]=t;else for(r=0,// Seed state using a string.
t=""+t;r<t.length;++r)s[7&r]=s[7&r]<<15^t.charCodeAt(r)+s[r+1&7]<<13;// Enforce an array length of 8, not all zeroes.
for(;s.length<8;)s.push(0);for(r=0;r<8&&0===s[r];++r);// Discard an initial 256 values.
for(8==r?s[7]=-1:s[r],e.x=s,e.i=0,r=256;r>0;--r)e.next()}(t,e)}function n(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var r=new s(e),a=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/4294967296,s=(e+t)/2097152;while(0===s)return s},o.int32=r.next,o.quick=o,a&&(a.x&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.xorshift7=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],"5JMJC":[function(e,t,r){!// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().
function(e,t,r){function s(e){var t=this;// Set up generator function.
t.next=function(){var e,r,s=t.w,n=t.X,a=t.i;// Result is the combination.
return(// Update Weyl generator.
t.w=s=s+1640531527|0,// Update xor generator.
r=n[a+34&127],e=n[a=a+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,// Update Xor generator array state.
r=n[a]=r^e,t.i=a,r+(s^s>>>16)|0)},function(e,t){var r,s,n,a,o,i=[],l=128;// Initialize circular array and weyl value.
for(t===(0|t)?(// Numeric seeds initialize v, which is used to generates X.
s=t,t=null):(// String seeds are mixed into v and X one character at a time.
t+="\x00",s=0,l=Math.max(l,t.length)),n=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(o=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(o=o+1640531527|0,n=0==(r=i[127&a]^=s+o)?n+1:0);for(n>=128&&(i[127&(t&&t.length||0)]=-1),// Run the generator 512 times to further mix the state before using it.
// Factoring this as a function slows the main generator, so it is just
// unrolled here.  The weyl generator is not advanced while warming up.
n=127,a=512;a>0;--a)s=i[n+34&127],r=i[n=n+1&127],s^=s<<13,r^=r<<17,s^=s>>>15,r^=r>>>12,i[n]=s^r;// Storing state as object members is faster than using closure variables.
e.w=o,e.X=i,e.i=n}(t,e)}function n(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var r=new s(e),a=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/4294967296,s=(e+t)/2097152;while(0===s)return s},o.int32=r.next,o.quick=o,a&&(a.X&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.xor4096=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],inDm2:[function(e,t,r){!// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
function(e,t,r){function s(e){var t=this,r="";// Set up generator function.
t.next=function(){var e=t.b,r=t.c,s=t.d,n=t.a;return e=e<<25^e>>>7^r,r=r-s|0,s=s<<24^s>>>8^n,n=n-e|0,t.b=e=e<<20^e>>>12^r,t.c=r=r-s|0,t.d=s<<16^r>>>16^n,t.a=n-e|0},/* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(// Integer seed.
t.a=e/4294967296|0,t.b=0|e):r+=e;// Mix in string seed, then discard an initial batch of 64 values.
for(var s=0;s<r.length+20;s++)t.b^=0|r.charCodeAt(s),t.next()}function n(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var r=new s(e),a=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/4294967296,s=(e+t)/2097152;while(0===s)return s},o.int32=r.next,o.quick=o,a&&("object"==typeof a&&n(a,r),o.state=function(){return n(r,{})}),o}t&&t.exports?t.exports=a:r&&r.amd?r(function(){return a}):this.tychei=a}(0,t,"function"==typeof define&&define// present with an AMD loader
)},{}],"1xPJg":[function(e,t,r){!/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/function(r,s,n){//
// The following constants are related to IEEE 754 limits.
//
var a,o="random",i=n.pow(256,6),l=n.pow(2,52),u=2*l;// node.js crypto module, initialized at the bottom.
//
// seedrandom()
// This is the seedrandom function described above.
//
function p(e,t,p){var m=[],g=h(//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function e(t,r){var s,n=[],a=typeof t;if(r&&"object"==a)for(s in t)try{n.push(e(t[s],r-1))}catch(e){}return n.length?n:"string"==a?t:t+"\x00"}((t=!0==t?{entropy:!0}:t||{}).entropy?[e,f(s)]:null==e?//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function(){try{var e;return a&&(e=a.randomBytes)?e=e(256):(e=new Uint8Array(256),(r.crypto||r.msCrypto).getRandomValues(e)),f(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,f(s)]}}():e,3),m),x=new c(m),b=function(){for(var e=x.g(6),t=i,r=0;e<l;)e=(e+r)*256,t*=256,r=x.g(1);for(;e>=u;)e/=2,t/=2,r>>>=1;return(e+r)/t;// Form the number within [0, 1).
};// Calling convention: what to return as a function of prng, seed, is_math.
return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,// Mix the randomness into accumulated entropy.
h(f(x.S),s),(t.pass||p||function(e,t,r,s){return(// If called as a method of Math (Math.seedrandom()), mutate
// Math.random because that is how seedrandom.js has worked since v1.0.
(s&&(s.S&&d(s,x),// Only provide the .state method if requested via options.state.
e.state=function(){return d(x,{})}),r)?(n[o]=e,t):e)})(b,g,"global"in t?t.global:this==n,t.state)}//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function c(e){var t,r=e.length,s=this,n=0,a=s.i=s.j=0,o=s.S=[];// Set up S using the standard key scheduling algorithm.
for(r||(e=[r++]);n<256;)o[n]=n++;for(n=0;n<256;n++)o[n]=o[a=255&a+e[n%r]+(t=o[n])],o[a]=t;// The "g" method returns the next (count) outputs as one number.
(s.g=function(e){for(// Using instance members instead of closure state nearly doubles speed.
var t,r=0,n=s.i,a=s.j,o=s.S;e--;)t=o[n=255&n+1],r=256*r+o[255&(o[n]=o[a=255&a+t])+(o[a]=t)];return s.i=n,s.j=a,r;// For robust unpredictability, the function call below automatically
// discards an initial batch of values.  This is called RC4-drop[256].
// See http://google.com/search?q=rsa+fluhrer+response&btnI
})(256)}//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function h(e,t){for(var r,s=e+"",n=0;n<s.length;)t[255&n]=255&(r^=19*t[255&n])+s.charCodeAt(n++);return f(t)}//
// tostring()
// Converts an array of charcodes to a string
//
function f(e){return String.fromCharCode.apply(0,e)}//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if(//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
h(n.random(),s),t.exports){t.exports=p;// When in node.js, try using crypto package for autoseeding.
try{a=e("55ffaba5e09143c0")}catch(e){}}else"function"==typeof define&&define.amd?define(function(){return p}):n["seed"+o]=p;// End anonymous scope, and pass initial values.
}(// otherwise `this` in Node and other environments
"undefined"!=typeof self?self:this,[],Math// math: package containing random, pow, and seedrandom
)},{"55ffaba5e09143c0":"aBjM4"}],kcxuM:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"randomNormal",()=>i);var n=e("./buffer"),a=e("./operation"),o=e("./rand_util");let i=(0,a.op)({randomNormal_:/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t=0,r=1,s,a){if(null!=s&&"bool"===s)throw Error(`Unsupported data type ${s}`);let i=new o.MPRandGauss(t,r,s,!1,a),l=(0,n.buffer)(e,s);for(let e=0;e<l.values.length;e++)l.values[e]=i.nextValue();return l.toTensor()}})},{"./buffer":"bnrDL","./operation":"htqKz","./rand_util":"8G9t8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jxOPX:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"randomStandardNormal",()=>o);var n=e("./operation"),a=e("./random_normal");let o=(0,n.op)({randomStandardNormal_:/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * The generated values will have mean 0 and standard deviation 1.
 *
 * ```js
 * tf.randomStandardNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t,r){if(null!=t&&"bool"===t)throw Error(`Unsupported data type ${t}`);return(0,a.randomNormal)(e,0,1,t,r)}})},{"./operation":"htqKz","./random_normal":"kcxuM","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3PWOx":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"randomUniform",()=>i);var n=e("./buffer"),a=e("./operation"),o=e("./rand_util");let i=(0,a.op)({randomUniform_:/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */function(e,t=0,r=1,s="float32",a){let i=(0,n.buffer)(e,s),l=new o.UniformRandom(t,r,null,a);for(let e=0;e<i.values.length;e++)i.values[e]=l.nextValue();return i.toTensor()}})},{"./buffer":"bnrDL","./operation":"htqKz","./rand_util":"8G9t8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bEl6L:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"range",()=>o);var n=e("../engine"),a=e("../kernel_names");function o(e,t,r=1,s="float32"){if(0===r)throw Error("Cannot have a step of zero");return(0,n.ENGINE).runKernel(a.Range,{}/* inputs */,{start:e,stop:t,step:r,dtype:s})}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hYsyq:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reciprocal",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({reciprocal_:/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","reciprocal");return(0,n.ENGINE).runKernel(a.Reciprocal,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Qfzv":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({relu_:/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","relu");return(0,n.ENGINE).runKernel(a.Relu,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7z2C2":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu6",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({relu6_:/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","relu6");return(0,n.ENGINE).runKernel(a.Relu6,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d4KIg:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({reverse_:/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"x","reverse");return(0,n.ENGINE).runKernel(a.Reverse,{x:r},{dims:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e5dVK:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse1d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./reverse");let l=(0,o.op)({reverse1d_:/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */function(e){let t=(0,n.convertToTensor)(e,"x","reverse");return a.assert(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),(0,i.reverse)(t,0)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reverse":"d4KIg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lXc21:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse2d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./reverse");let l=(0,o.op)({reverse2d_:/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */function(e,t){let r=(0,n.convertToTensor)(e,"x","reverse");return a.assert(2===r.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${r.rank}.`),(0,i.reverse)(r,t)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reverse":"d4KIg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"778pQ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse3d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./reverse");let l=(0,o.op)({reverse3d_:/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */function(e,t){let r=(0,n.convertToTensor)(e,"x","reverse");return a.assert(3===r.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${r.rank}.`),(0,i.reverse)(r,t)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reverse":"d4KIg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7Z4zk":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse4d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./reverse");let l=(0,o.op)({reverse4d_:/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */function(e,t){let r=(0,n.convertToTensor)(e,"x","reverse");return a.assert(4===r.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${r.rank}.`),(0,i.reverse)(r,t)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reverse":"d4KIg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3FB8V":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"round",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({round_:/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","round");return(0,n.ENGINE).runKernel(a.Round,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hWtbk:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rsqrt",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({rsqrt_:/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","rsqrt","float32");return(0,n.ENGINE).runKernel(a.Rsqrt,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"48nEa":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"selu",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({selu_:/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : scale * x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","selu");return(0,n.ENGINE).runKernel(a.Selu,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bBu5h:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"separableConv2d",()=>p);var n=e("../tensor_util_env"),a=e("../util"),o=e("./conv2d"),i=e("./depthwise_conv2d"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({separableConv2d_:/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */function(e,t,r,s,l,p=[1,1],c="NHWC"){let d=(0,n.convertToTensor)(e,"x","separableConv2d"),h=(0,n.convertToTensor)(t,"depthwiseFilter","separableConv2d"),f=(0,n.convertToTensor)(r,"pointwiseFilter","separableConv2d"),m=d,g=!1;if(3===d.rank&&(g=!0,m=(0,u.reshape)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),"NCHW"===c)throw Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");a.assert(4===m.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`),a.assert(4===h.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${h.rank}.`),a.assert(4===f.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${h.rank}.`),a.assert(1===f.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`),a.assert(1===f.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`);let x=h.shape[2],b=h.shape[3];a.assert(f.shape[2]===x*b,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${x*b}, but got ${f.shape[2]}.`);let y=(0,i.depthwiseConv2d)(m,h,s,l,c,p),j=(0,o.conv2d)(y,f,1,"valid",c);return g?(0,u.reshape)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./conv2d":"8DIXU","./depthwise_conv2d":"gYPBC","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ieoqB:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"setdiff1dAsync",()=>l);var n=e("../tensor"),a=e("../tensor_util_env"),o=e("../util");/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */async function i(e,t){let r=(0,a.convertToTensor)(e,"x","setdiff1d"),s=(0,a.convertToTensor)(t,"y","setdiff1d");o.assert(r.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${r.dtype}) and y (${s.dtype}).`),o.assert(1===r.rank,()=>`x should be 1D tensor, but got x (${r.shape}).`),o.assert(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);let i=await r.data(),l=await s.data(),u=new Set(l),p=0;for(let e=0;e<i.length;e++)!u.has(i[e])&&p++;let c=new n.TensorBuffer([p],r.dtype),d=new n.TensorBuffer([p],"int32");for(let e=0,t=0;e<i.length;e++)!u.has(i[e])&&(c.values[t]=i[e],d.values[t]=e,t++);return[c.toTensor(),d.toTensor()]}let l=i},{"../tensor":"j4V3y","../tensor_util_env":"9iWFD","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6ma8O":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sign",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({sign_:/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","sign");return(0,n.ENGINE).runKernel(a.Sign,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2e5m1":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sin",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({sin_:/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","sin","float32");return(0,n.ENGINE).runKernel(a.Sin,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cKBKr:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sinh",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({sinh_:/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","sinh");return(0,n.ENGINE).runKernel(a.Sinh,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"45yTs":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice1d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./slice");let l=(0,o.op)({slice1d_:/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */function(e,t,r){let s=(0,n.convertToTensor)(e,"x","slice1d");return a.assert(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),(0,i.slice)(s,[t],[r])}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3asvb":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice2d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./slice");let l=(0,o.op)({slice2d_:/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */function(e,t,r){let s=(0,n.convertToTensor)(e,"x","slice2d");return a.assert(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),(0,i.slice)(s,t,r)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kNctP:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice3d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./slice");let l=(0,o.op)({slice3d_:/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */function(e,t,r){let s=(0,n.convertToTensor)(e,"x","slice3d");return a.assert(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),(0,i.slice)(s,t,r)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"32fSC":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice4d",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./slice");let l=(0,o.op)({slice4d_:/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */function(e,t,r){let s=(0,n.convertToTensor)(e,"x","slice4d");return a.assert(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),(0,i.slice)(s,t,r)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fyGfa:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softmax",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({softmax_:/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t=-1){let r=(0,o.convertToTensor)(e,"logits","softmax","float32");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and dim was ${t}`);let s={dim:t};return(0,n.ENGINE).runKernel(a.Softmax,{logits:r},s)}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lqzug:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fft",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../util"),i=e("../operation");let l=(0,i.op)({fft_:/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */function(e){return(0,o.assert)("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),(0,n.ENGINE).runKernel(a.FFT,{input:e})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],geVqz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ifft",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../util"),i=e("../operation");let l=(0,i.op)({ifft_:/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */function(e){return(0,o.assert)("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),(0,n.ENGINE).runKernel(a.IFFT,{input:e})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jPLoA:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"irfft",()=>m);var n=e("../complex"),a=e("../concat"),o=e("../imag"),i=e("../mul"),l=e("../operation"),u=e("../real"),p=e("../reshape"),c=e("../reverse"),d=e("../scalar"),h=e("../slice"),f=e("./ifft");let m=(0,l.op)({irfft_:/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */function(e){let t;let r=e.shape[e.shape.length-1],s=e.size/r;if(r<=2){let n=(0,p.reshape)(e,[s,r]);t=(0,f.ifft)(n)}else{// The length of unique components of the DFT of a real-valued signal
// is 2 * (input_len - 1)
let l=[s,2*(r-1)],m=(0,p.reshape)((0,u.real)(e),[s,r]),g=(0,p.reshape)((0,o.imag)(e),[s,r]),x=(0,c.reverse)((0,h.slice)(m,[0,1],[s,r-2]),1),b=(0,i.mul)((0,c.reverse)((0,h.slice)(g,[0,1],[s,r-2]),1),(0,d.scalar)(-1)),y=(0,a.concat)([m,x],1),j=(0,a.concat)([g,b],1),_=(0,p.reshape)((0,n.complex)(y,j),[l[0],l[1]]);t=(0,f.ifft)(_)}// reshape the result if the input is 3D tensor.
if(t=(0,u.real)(t),3===e.rank&&0!==e.shape[0]){let r=t,s=e.shape[0];t=(0,p.reshape)(t,[s,t.shape[0]/s,t.shape[1]]),r.dispose()}return t}})},{"../complex":"i0i48","../concat":"k3qE8","../imag":"c6DsY","../mul":"9ihSJ","../operation":"htqKz","../real":"hZNER","../reshape":"hcB7g","../reverse":"d4KIg","../scalar":"8NgrS","../slice":"kcOYr","./ifft":"geVqz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lRuFr:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rfft",()=>g);var n=e("../../util"),a=e("../complex"),o=e("../concat"),i=e("../imag"),l=e("../operation"),u=e("../real"),p=e("../reshape"),c=e("../slice"),d=e("../split"),h=e("../zeros"),f=e("../zeros_like"),m=e("./fft");let g=(0,l.op)({rfft_:/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */function(e,t){let r;(0,n.assert)("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let s=e.shape[e.shape.length-1],l=e.size/s;if(null!=t&&t<s){// Need to crop
let n=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,r=(0,c.slice)(e,n,a),s=t}else if(null!=t&&t>s){// Need to pad with zeros
let n=e.shape.map(e=>e);n[e.shape.length-1]=t-s,r=(0,o.concat)([e,(0,h.zeros)(n)],e.shape.length-1),s=t}else r=e;// Complement the input with zero imaginary numbers.
let g=(0,f.zerosLike)(r),x=(0,p.reshape)((0,a.complex)(r,g),[l,s]),b=(0,m.fft)(x),y=Math.floor(s/2)+1,j=(0,u.real)(b),_=(0,i.imag)(b),k=(0,d.split)(j,[y,s-y],j.shape.length-1),I=(0,d.split)(_,[y,s-y],_.shape.length-1),w=r.shape.slice();return w[r.shape.length-1]=y,(0,p.reshape)((0,a.complex)(k[0],I[0]),w)}})},{"../../util":"6bzqD","../complex":"i0i48","../concat":"k3qE8","../imag":"c6DsY","../operation":"htqKz","../real":"hZNER","../reshape":"hcB7g","../slice":"kcOYr","../split":"3RBf7","../zeros":"8Iv9P","../zeros_like":"lVjfh","./fft":"lqzug","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3RBf7":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"split",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({split_:/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t,r=0){let s=(0,o.convertToTensor)(e,"x","split");return(0,n.ENGINE).runKernel(a.SplitV,{x:s},{numOrSizeSplits:t,axis:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fpHDE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squaredDifference",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util"),i=e("../tensor_util_env"),l=e("./broadcast_util"),u=e("./operation");let p=(0,u.op)({squaredDifference_:/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */function(e,t){let r=(0,i.convertToTensor)(e,"a","squaredDifference"),s=(0,i.convertToTensor)(t,"b","squaredDifference");[r,s]=(0,o.makeTypesMatch)(r,s),(0,l.assertAndGetBroadcastShape)(r.shape,s.shape);let u={a:r,b:s};return(0,n.ENGINE).runKernel(a.SquaredDifference,u,{})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","./broadcast_util":"jK3Iv","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4V4Q8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squeeze",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./operation"),i=e("./reshape");let l=(0,o.op)({squeeze_:/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */function(e,t){let r=(0,n.convertToTensor)(e,"x","squeeze","string_or_numeric");return(0,i.reshape)(r,(0,a.squeezeShape)(r.shape,t).newShape)}})},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cd4pw:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stack",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({stack_:/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t=0){let r=(0,o.convertToTensorArray)(e,"tensors","stack","string_or_numeric");return i.assert(r.length>=1,()=>"Pass at least one tensor to tf.stack"),r.length>0&&i.assert(t<=r[0].rank,()=>"Axis must be <= rank of the tensor"),(0,n.ENGINE).runKernel(a.Pack,r,{axis:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"622xd":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"step",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({step_:/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","step");return(0,n.ENGINE).runKernel(a.Step,{x:r},{alpha:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7Ap5a":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stridedSlice",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({stridedSlice_:/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */function(e,t,r,s,i=0,l=0,u=0,p=0,c=0){let d=(0,o.convertToTensor)(e,"x","stridedSlice","string_or_numeric");return(0,n.ENGINE).runKernel(a.StridedSlice,{x:d},{begin:t,end:r,strides:s,beginMask:i,endMask:l,ellipsisMask:u,newAxisMask:p,shrinkAxisMask:c})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4YfVq":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tan",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({tan_:/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */function(e){let t=(0,o.convertToTensor)(e,"x","tan","float32");return(0,n.ENGINE).runKernel(a.Tan,{x:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7COb5":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor1d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t){(0,a.assertNonNull)(e);let r=(0,n.inferShape)(e,t);if(1!==r.length)throw Error("tensor1d() requires values to be a flat/TypedArray");return(0,o.makeTensor)(e,null,r,t)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jrzat:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor2d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t,r){if((0,a.assertNonNull)(e),null!=t&&2!==t.length)throw Error("tensor2d() requires shape to have two numbers");let s=(0,n.inferShape)(e,r);if(2!==s.length&&1!==s.length)throw Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,o.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hDYuI:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor4d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t,r){if((0,a.assertNonNull)(e),null!=t&&4!==t.length)throw Error("tensor4d() requires shape to have four numbers");let s=(0,n.inferShape)(e,r);if(4!==s.length&&1!==s.length)throw Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,o.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iPzXQ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor5d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t,r){if((0,a.assertNonNull)(e),null!=t&&5!==t.length)throw Error("tensor5d() requires shape to have five numbers");let s=(0,n.inferShape)(e,r);if(5!==s.length&&1!==s.length)throw Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,o.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kgcZL:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"tensor6d",()=>i);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor_ops_util");function i(e,t,r){if((0,a.assertNonNull)(e),null!=t&&6!==t.length)throw Error("tensor6d() requires shape to have six numbers");let s=(0,n.inferShape)(e,r);if(6!==s.length&&1!==s.length)throw Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||s,(0,o.makeTensor)(e,t,s,r)}},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor_ops_util":"9UCaT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d70D8:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"topk",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({topk_:/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */function(e,t=1,r=!0){let s=(0,o.convertToTensor)(e,"x","topk");if(0===s.rank)throw Error("topk() expects the input to be of rank 1 or higher");let i=s.shape[s.shape.length-1];if(t<0)throw Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>i)throw Error(`'k' passed to topk() must be <= the last dimension (${i}) but got ${t}`);let[l,u]=(0,n.ENGINE).runKernel(a.TopK,{x:s},{k:t,sorted:r});return{values:l,indices:u}}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5uE0n":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"truncatedNormal",()=>i);var n=e("./buffer"),a=e("./operation"),o=e("./rand_util");let i=(0,a.op)({truncatedNormal_:/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */function(e,t=0,r=1,s,a){if(null!=s&&"bool"===s)throw Error("Unsupported data type $ { dtype }");let i=new o.MPRandGauss(t,r,s,!0,a),l=(0,n.buffer)(e,s);for(let e=0;e<l.values.length;e++)l.values[e]=i.nextValue();return l.toTensor()}})},{"./buffer":"bnrDL","./operation":"htqKz","./rand_util":"8G9t8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],knFRp:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unique",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({unique_:/**
 * Finds unique elements along an axis of a tensor.
 *
 * It returns a tensor `values` containing all of the unique elements along the
 * `axis` of the given tensor `x` in the same order that they occur along the
 * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
 * `indices` the same size as the number of the elements in `x` along the `axis`
 * dimension. It contains the index in the unique output `values`.
 *
 * ```js
 * // A 1-D tensor
 * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
 * const {values, indices} = tf.unique(a);
 * values.print();   // [1, 2, 4, 7, 8,]
 * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=0
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 0)
 * values.print();   // [[1, 0, 0],
 *                   //  [2, 0, 0]]
 * indices.print();  // [0, 0, 1]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=1
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 1)
 * values.print();   // [[1, 0],
 *                   //  [1, 0],
 *                   //  [2, 0]]
 * indices.print();  // [0, 1, 1]
 * ```
 * @param x A tensor (int32, string, bool).
 * @param axis The axis of the tensor to find the unique elements.
 * @returns [uniqueElements, indices] (see above for details)
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","unique","string_or_numeric");(0,i.assert)(r.rank>0,()=>"The input tensor must be at least 1D");let[s,l]=(0,n.ENGINE).runKernel(a.Unique,{x:r},{axis:t});return{values:s,indices:l}}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aMAvh:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unsortedSegmentSum",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({unsortedSegmentSum_:/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"x","unsortedSegmentSum"),l=(0,o.convertToTensor)(t,"segmentIds","unsortedSegmentSum","int32");return(0,i.assert)((0,i.isInt)(r),()=>"numSegments must be of dtype int"),(0,n.ENGINE).runKernel(a.UnsortedSegmentSum,{x:s,segmentIds:l},{numSegments:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lbucv:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unstack",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation");let u=(0,l.op)({unstack_:/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */function(e,t=0){let r=(0,o.convertToTensor)(e,"x","unstack","string_or_numeric");return i.assert(t>=-r.shape.length&&t<r.shape.length,()=>`Axis = ${t} is not in [-${r.shape.length}, ${r.shape.length})`),(0,n.ENGINE).runKernel(a.Unpack,{value:r},{axis:t})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fTAZW:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Searches for where a value would go in a sorted sequence.
 *
 * This is not a method for checking containment (like javascript in).
 *
 * The typical use case for this operation is "binning", "bucketing", or
 * "discretizing". The values are assigned to bucket-indices based on the edges
 * listed in 'sortedSequence'. This operation returns the bucket-index for each
 * value.
 *
 * The index returned corresponds to the first edge greater than the value.
 *
 * The axis is not settable for this operation. It always operates on the
 * innermost dimension (axis=-1). The operation will accept any number of outer
 * dimensions.
 *
 * Note: This operation assumes that 'upperBound' is sorted along the
 * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not
 * sorted no error is raised and the content of the returned tensor is not well
 * defined.
 *
 * ```js
 * const seq = tf.tensor1d([0, 3, 9, 10, 10]);
 * const values = tf.tensor1d([0, 4, 10]);
 * const result = tf.upperBound(seq, values);
 * result.print(); // [1, 2, 5]
 * ```
 * @param sortedSequence: N-D. Sorted sequence.
 * @param values: N-D. Search values.
 * @return An N-D int32 tensor the size of values containing the result of
 *     applying upper bound to each value. The result is not a global index to
 *     the entire Tensor, but the index in the last dimension.
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */s.export(r,"upperBound",()=>a);var n=e("./search_sorted");function a(e,t){return(0,n.searchSorted)(e,t,"right")}},{"./search_sorted":"6P4rg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"82ecW":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */s.export(r,"variable",()=>a);var n=e("../engine");function a(e,t=!0,r,s){return(0,n.ENGINE).makeVariable(e,t,r,s)}},{"../engine":"ldVRX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6RnEc":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"whereAsync",()=>i);var n=e("../backends/where_impl"),a=e("../tensor_util_env");/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */async function o(e){let t=(0,a.convertToTensor)(e,"condition","whereAsync","bool"),r=await t.data(),s=(0,n.whereImpl)(t.shape,r);return e!==t&&t.dispose(),s}let i=o},{"../backends/where_impl":"gVSwl","../tensor_util_env":"9iWFD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gVSwl:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//** An implementation of the Where kernel shared between cpu and webgl */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"whereImpl",()=>a);var n=e("../ops/buffer");function a(e,t){let r=[];for(let e=0;e<t.length;e++)t[e]&&r.push(e);let s=(0,n.buffer)(e,"int32"),a=(0,n.buffer)([r.length,e.length],"int32");for(let t=0;t<r.length;t++){let n=s.indexToLoc(r[t]),o=t*e.length;a.values.set(n,o)}return a.toTensor()}},{"../ops/buffer":"bnrDL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j3g0N:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"booleanMaskAsync",()=>c);var n=e("../tensor_util_env"),a=e("../util"),o=e("./gather"),i=e("./reshape"),l=e("./squeeze"),u=e("./where_async");/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */async function p(e,t,r){let s=(0,n.convertToTensor)(e,"tensor","boolMask"),p=(0,n.convertToTensor)(t,"mask","boolMask","bool"),c=null==r?0:r,d=p.rank,h=s.shape;a.assert(d>0,()=>"mask cannot be scalar"),a.assertShapesMatch(h.slice(c,c+d),p.shape,"mask's shape must match the first K dimensions of tensor's shape,");let f=1;for(let e=c;e<c+d;e++)f*=h[e];let m=h.slice(0,c).concat([f],h.slice(c+d)),g=(0,i.reshape)(s,m),x=(0,i.reshape)(p,[-1]),b=await (0,u.whereAsync)(x),y=(0,l.squeeze)(b,[1]),j=(0,o.gather)(g,y,c);return e!==s&&s.dispose(),t!==p&&p.dispose(),y.dispose(),g.dispose(),x.dispose(),b.dispose(),j}let c=p},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./gather":"gHcvO","./reshape":"hcB7g","./squeeze":"4V4Q8","./where_async":"6RnEc","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bVQtr:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"movingAverage",()=>f);var n=e("../tensor_util"),a=e("../tensor_util_env"),o=e("../util"),i=e("./add"),l=e("./div"),u=e("./mul"),p=e("./operation"),c=e("./pow"),d=e("./scalar"),h=e("./sub");let f=(0,p.op)({movingAverage_:/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */function(e,t,r,s,p=!0){let f=(0,a.convertToTensor)(e,"v","movingAverage"),m=(0,a.convertToTensor)(t,"x","movingAverage"),g=(0,a.convertToTensor)(r,"decay","movingAverage");(0,n.assertTypesMatch)(f,m),o.assert(o.arraysEqual(f.shape,m.shape),()=>"Shape mismatch in v and x");let x=(0,d.scalar)(1),b=(0,h.sub)(x,g),y=(0,u.mul)((0,h.sub)(m,f),b);if(p){o.assert(null!=s,()=>"When using zeroDebias: true, step is required.");let e=(0,a.convertToTensor)(s,"step","movingAverage");y=(0,l.div)(y,(0,h.sub)(x,(0,c.pow)(g,e)))}return(0,i.add)(f,y)}})},{"../tensor_util":"5jYPc","../tensor_util_env":"9iWFD","../util":"6bzqD","./add":"lQRCK","./div":"9dy6L","./mul":"9ihSJ","./operation":"htqKz","./pow":"16YAi","./scalar":"8NgrS","./sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3PuSK":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"scatterND",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation"),l=e("./scatter_nd_util");let u=(0,i.op)({scatterND_:/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"indices","scatterND","int32"),i=(0,o.convertToTensor)(t,"updates","scatterND");return l.validateInput(i,s,r),(0,n.ENGINE).runKernel(a.ScatterNd,{indices:s,updates:i},{shape:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","./scatter_nd_util":"64SNi","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ewlXD:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseToDense",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../ops/sparse_to_dense_util"),i=e("../tensor_util_env"),l=e("./operation");let u=(0,l.op)({sparseToDense_:/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. The type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */function(e,t,r,s=0){let l=(0,i.convertToTensor)(e,"sparseIndices","sparseToDense","int32"),u=(0,i.convertToTensor)(t,"sparseValues","sparseToDense","string_or_numeric"),p=(0,i.convertToTensor)(s,"defaultValue","sparseToDense",u.dtype);return o.validateInput(l,u,r,p),(0,n.ENGINE).runKernel(a.SparseToDense,{sparseIndices:l,sparseValues:u,defaultValue:p},{outputShape:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../ops/sparse_to_dense_util":"2Dr2T","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Dr2T":[function(e,t,r){/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t,r,s){if("int32"!==e.dtype)throw Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);let n=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(r.length!==a)throw Error(`outputShape has incorrect number of elements:, ${r.length}, should be: ${a}.`);let o=t.size;if(!(0===t.rank||1===t.rank&&o===n))throw Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==s.dtype)throw Error("sparseValues.dtype must match defaultValues.dtype")}s.defineInteropFlag(r),s.export(r,"validateInput",()=>n)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7rsub":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherND",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("./operation");let l=(0,i.op)({gatherND_:/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is a K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */function(e,t){let r=(0,o.convertToTensor)(t,"indices","gatherND","int32"),s=(0,o.convertToTensor)(e,"x","gatherND","string_or_numeric");return(0,n.ENGINE).runKernel(a.GatherNd,{params:s,indices:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jyt5y:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dropout",()=>f);var n=e("../tensor"),a=e("../tensor_util_env"),o=e("../util"),i=e("./add"),l=e("./div"),u=e("./dropout_util"),p=e("./floor"),c=e("./mul"),d=e("./operation"),h=e("./random_uniform");let f=(0,d.op)({dropout_:/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */function(e,t,r,s){let d=(0,a.convertToTensor)(e,"x","dropout");if(o.assert("float32"===d.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${d.dtype} tensor instead.`),o.assert(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof n.Tensor?d.clone():d;let f=(0,u.getNoiseShape)(d,r),m=1-t,g=(0,l.div)((0,p.floor)((0,i.add)((0,h.randomUniform)(f,0,1,"float32",s),m)),m);return(0,c.mul)(d,g)}})},{"../tensor":"j4V3y","../tensor_util_env":"9iWFD","../util":"6bzqD","./add":"lQRCK","./div":"9dy6L","./dropout_util":"kssFE","./floor":"iKvgL","./mul":"9ihSJ","./operation":"htqKz","./random_uniform":"3PWOx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kssFE:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */s.export(r,"getNoiseShape",()=>a);var n=e("../util");function a(e,t){if(null==t)return e.shape.slice();if(n.arraysEqual(e.shape,t))return t;if(e.shape.length===t.length){let r=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?r.push(e.shape[s]):r.push(t[s]);return r}return t}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8247j":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"enclosingPowerOfTwo",()=>a),s.export(r,"cosineWindow",()=>o);var n=e("./tensor1d");function a(e){// Return 2**N for integer N such that 2**N >= value.
return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function o(e,t,r){let s=1-e%2,a=new Float32Array(e);for(let n=0;n<e;++n){let o=2*Math.PI*n/(e+s-1);a[n]=t-r*Math.cos(o)}return(0,n.tensor1d)(a,"float32")}},{"./tensor1d":"7COb5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ajsKT:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"inTopKAsync",()=>l);var n=e("../tensor_util_env"),a=e("../util"),o=e("./tensor");/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */async function i(e,t,r=1){let s=(0,n.convertToTensor)(e,"predictions","inTopK"),i=(0,n.convertToTensor)(t,"targets","inTopK");(0,a.assert)(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),(0,a.assert)(s.rank-1===i.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${i.rank}`),(0,a.assertShapesMatch)(s.shape.slice(0,s.shape.length-1),i.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let l=s.shape[s.shape.length-1];(0,a.assert)(r>0&&r<=l,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${l}), but got ${r}`);let u=await s.data(),p=await i.data(),[c,d]=[u.length/l,l],h=(0,a.getTypedArrayFromDType)("bool",c);for(let e=0;e<c;e++){let t=e*d,s=u.subarray(t,t+d),n=[];for(let e=0;e<s.length;e++)n.push({value:s[e],index:e});n.sort((e,t)=>t.value-e.value),h[e]=0;for(let t=0;t<r;t++)if(n[t].index===p[e]){h[e]=1;break}}// Output precision has the same shape as targets.
return e!==s&&s.dispose(),t!==i&&i.dispose(),(0,o.tensor)(h,i.shape,"bool")}let l=i},{"../tensor_util_env":"9iWFD","../util":"6bzqD","./tensor":"1tgxn","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],Tv0Ol:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2d",()=>n.conv2d),s.export(r,"depthwiseConv2d",()=>a.depthwiseConv2d),s.export(r,"matMul",()=>o.matMul);var n=e("./fused/conv2d"),a=e("./fused/depthwise_conv2d"),o=e("./fused/mat_mul")},{"./fused/conv2d":"7U6GR","./fused/depthwise_conv2d":"4qRLe","./fused/mat_mul":"2oJ7V","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7U6GR":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2d",()=>y);var n=e("../../engine"),a=e("../../gradients"),o=e("../../kernel_names"),i=e("../../tensor_util"),l=e("../../tensor_util_env"),u=e("../../util"),p=e("../add"),c=e("../broadcast_util"),d=e("../conv2d"),h=e("../conv2d_backprop_filter"),f=e("../conv2d_backprop_input"),m=e("../conv_util"),g=e("../fused_util"),x=e("../operation"),b=e("../reshape");let y=(0,x.op)({fusedConv2d_:/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */function({x:e,filter:t,strides:r,pad:s,dataFormat:x="NHWC",dilations:y=[1,1],dimRoundingMode:j,bias:_,activation:k="linear",preluActivationWeights:I,leakyreluAlpha:w}){let C,S;if(k=k||"linear",!1===(0,g.shouldFuse)(n.ENGINE.state.gradientDepth,k)){// TODO: Transpose bias and preluActivationWeights properly for NCHW
// format before computation.
u.assert("NHWC"===x,()=>`Error in fused conv2d: got dataFormat of ${x} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let n=(0,d.conv2d)(e,t,r,s,x,y,j);return null!=_&&(n=(0,p.add)(n,_)),(0,g.applyActivation)(n,k,I,w)}let T=(0,l.convertToTensor)(e,"x","conv2d","float32"),N=(0,l.convertToTensor)(t,"filter","conv2d","float32"),E=T,F=!1;3===T.rank&&(F=!0,E=(0,b.reshape)(T,[1,T.shape[0],T.shape[1],T.shape[2]])),u.assert(4===E.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${E.rank}.`),u.assert(4===N.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${N.rank}.`),m.checkPadOnDimRoundingMode("fused conv2d",s,j);let A="NHWC"===x?E.shape[3]:E.shape[1];u.assert(N.shape[2]===A,()=>`Error in conv2d: depth of input (${A}) must match input depth for filter ${N.shape[2]}.`),u.assert(m.eitherStridesOrDilationsAreOne(r,y),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${y}'`);let R=m.computeConv2DInfo(E.shape,N.shape,r,y,s,j);if(null!=_&&(C=(0,l.convertToTensor)(_,"bias","fused conv2d"),[C]=(0,i.makeTypesMatch)(C,T),"NHWC"===x?c.assertAndGetBroadcastShape(R.outShape,C.shape):(u.assert(C.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${C.shape.length}.`),u.assert(0===C.shape.length||C.shape[0]===R.outChannels||1===C.shape[0],()=>`Error in fused conv2d: bias shape (${C.shape}) is not compatible with the number of output channels (${R.outChannels})`))),null!=I){// PReLU's activation weights could be a scalar, a 1-D tensor or a 3-D
// tensor.
let e=I.shape;if(u.assert(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)// weights tensor should be aligned with the output channels of conv2d
// result.
u.assert(1===e[0]||e[0]===R.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${R.outChannels}).`);else if(3===e.length)// tensor should has the compatible shape with the result of conv2d.
try{c.assertAndGetBroadcastShape(e,R.outShape)}catch(r){let t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${R.outShape}).`;throw Error(t)}S=(0,l.convertToTensor)(I,"prelu weights","fused conv2d")}let D=(e,t)=>{u.assert("NHWC"===x,()=>`Error in gradient of fused conv2D: got dataFormat of ${x} but only NHWC is currently supported.`);let[n,a,o,i]=t,l=(0,g.getFusedDyActivation)(e,o,k);u.assert(m.tupleValuesAreOne(y),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${y}'`);let p=(0,f.conv2DBackpropInput)(a.shape,l,n,r,s),c=(0,h.conv2DBackpropFilter)(a,l,n.shape,r,s),d=[p,c];if(null!=i){let e=(0,g.getFusedBiasGradient)(i,l);d.push(e)}return d},$={x:E,filter:N,bias:C,preluActivationWeights:S},P={strides:r,pad:s,dataFormat:x,dilations:y,dimRoundingMode:j,activation:k,leakyreluAlpha:w};// Depending on the the params passed in we will have different number of
// inputs and thus a a different number of elements in the gradient.
if(null==_){let e=(0,a.customGrad)((e,t,r)=>{let s=(0,n.ENGINE).runKernel(o.FusedConv2D,$,P);return r([t,e,s]),F&&(s=(0,b.reshape)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:D}});return e(E,N)}{let e=(0,a.customGrad)((e,t,r,s)=>{let a=(0,n.ENGINE).runKernel(o.FusedConv2D,$,P);return s([t,e,a,r]),F&&(a=(0,b.reshape)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:D}});return e(E,N,C)}}})},{"../../engine":"ldVRX","../../gradients":"dqgxj","../../kernel_names":"3i501","../../tensor_util":"5jYPc","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../add":"lQRCK","../broadcast_util":"jK3Iv","../conv2d":"8DIXU","../conv2d_backprop_filter":"49VWR","../conv2d_backprop_input":"eQKiV","../conv_util":"cCem6","../fused_util":"6fYPP","../operation":"htqKz","../reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"49VWR":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropFilter",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../util"),i=e("./conv_util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({conv2DBackpropFilter_:/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,l,p="NHWC",c){let d=e;3===e.rank&&(d=(0,u.reshape)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,u.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),o.assert(4===d.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${d.shape}.`),o.assert(4===h.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${h.shape}.`),o.assert(4===r.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${r}.`);let f="NHWC"===p?d.shape[3]:d.shape[1],m="NHWC"===p?h.shape[3]:h.shape[1];o.assert(f===r[2],()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${r[2]}.`),o.assert(m===r[3],()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${r[3]}).`),i.checkPadOnDimRoundingMode("conv2dDerFilter",l,c);let g={x:d,dy:h};// tslint:disable-next-line: no-unnecessary-type-assertion
return(0,n.ENGINE).runKernel(a.Conv2DBackpropFilter,g,{strides:s,pad:l,dataFormat:p,dimRoundingMode:c,filterShape:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6fYPP":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// Returns gradient for fused activation.
s.export(r,"getFusedDyActivation",()=>m),// Returns gradient for fused bias.
s.export(r,"getFusedBiasGradient",()=>g),s.export(r,"applyActivation",()=>x),s.export(r,"shouldFuse",()=>b);var n=e("./broadcast_util"),a=e("./elu"),o=e("./leaky_relu"),i=e("./mul"),l=e("./prelu"),u=e("./relu"),p=e("./relu6"),c=e("./reshape"),d=e("./sigmoid"),h=e("./step"),f=e("./sum");function m(e,t,r){if(null==r||"linear"===r)return e;if("relu"===r)return(0,i.mul)(e,(0,h.step)(t));throw Error(`Cannot compute gradient for fused activation ${r}.`)}function g(e,t){let r=t,s=n.getReductionAxes(e.shape,t.shape);return s.length>0&&(r=(0,f.sum)(r,s)),(0,c.reshape)(r,e.shape)}function x(e,t,r,s){if("linear"===t)return e;if("relu"===t)return(0,u.relu)(e);if("elu"===t)return(0,a.elu)(e);if("relu6"===t)return(0,p.relu6)(e);if("prelu"===t)return(0,l.prelu)(e,r);if("leakyrelu"===t)return(0,o.leakyRelu)(e,s);if("sigmoid"===t)return(0,d.sigmoid)(e);throw Error(`Unknown fused activation ${t}.`)}let b=(e,t)=>!(e>0)||"linear"===t},{"./broadcast_util":"jK3Iv","./elu":"e9QZU","./leaky_relu":"amVM0","./mul":"9ihSJ","./prelu":"hMoHx","./relu":"2Qfzv","./relu6":"7z2C2","./reshape":"hcB7g","./sigmoid":"773j8","./step":"622xd","./sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4qRLe":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2d",()=>y);var n=e("../../engine"),a=e("../../gradients"),o=e("../../kernel_names"),i=e("../../tensor_util"),l=e("../../tensor_util_env"),u=e("../../util"),p=e("../add"),c=e("../broadcast_util"),d=e("../conv_util"),h=e("../depthwise_conv2d"),f=e("../depthwise_conv2d_native_backprop_filter"),m=e("../depthwise_conv2d_native_backprop_input"),g=e("../fused_util"),x=e("../operation"),b=e("../reshape");let y=(0,x.op)({fusedDepthwiseConv2d_:/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */function({x:e,filter:t,strides:r,pad:s,dataFormat:x="NHWC",dilations:y=[1,1],dimRoundingMode:j,bias:_,activation:k="linear",preluActivationWeights:I,leakyreluAlpha:w}){let C,S;if(!1===(0,g.shouldFuse)(n.ENGINE.state.gradientDepth,k)){let n=(0,h.depthwiseConv2d)(e,t,r,s,x,y,j);return null!=_&&(n=(0,p.add)(n,_)),(0,g.applyActivation)(n,k,I,w)}let T=(0,l.convertToTensor)(e,"x","depthwiseConv2d","float32"),N=(0,l.convertToTensor)(t,"filter","depthwiseConv2d","float32"),E=T,F=!1;3===T.rank&&(F=!0,E=(0,b.reshape)(T,[1,T.shape[0],T.shape[1],T.shape[2]])),u.assert(4===E.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${E.rank}.`),u.assert(4===N.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${N.rank}.`),u.assert(E.shape[3]===N.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${E.shape[3]}) must match the inChannels dimension in filter ${N.shape[2]}.`),null==y&&(y=[1,1]),u.assert(d.eitherStridesOrDilationsAreOne(r,y),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${y}'`),d.checkPadOnDimRoundingMode("fused depthwiseConv2d",s,j);let A=d.computeConv2DInfo(E.shape,N.shape,r,y,s,j,!0);null!=_&&(C=(0,l.convertToTensor)(_,"bias","fused conv2d"),[C]=(0,i.makeTypesMatch)(C,T),c.assertAndGetBroadcastShape(A.outShape,C.shape)),null!=I&&(S=(0,l.convertToTensor)(I,"prelu weights","fused depthwiseConv2d"));let R=(e,t)=>{u.assert(d.tupleValuesAreOne(y),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${y}'`);let[n,a,o,i]=t,l=(0,g.getFusedDyActivation)(e,o,k),p=(0,m.depthwiseConv2dNativeBackpropInput)(a.shape,l,n,r,s,y,j),c=(0,f.depthwiseConv2dNativeBackpropFilter)(a,l,n.shape,r,s,y,j);if(null!=i){let e=(0,g.getFusedBiasGradient)(C,l);return[p,c,e]}return[p,c]},D={x:E,filter:N,bias:C,preluActivationWeights:S},$={strides:r,pad:s,dataFormat:x,dilations:y,dimRoundingMode:j,activation:k,leakyreluAlpha:w};// Depending on the the params passed in we will have different number of
// inputs and thus a a different number of elements in the gradient.
if(null==_){let e=(0,a.customGrad)((e,t,r)=>{// tslint:disable-next-line: no-unnecessary-type-assertion
let s=(0,n.ENGINE).runKernel(o.FusedDepthwiseConv2D,D,$);return r([t,e,s]),F&&(s=(0,b.reshape)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:R}});return e(E,N)}{let e=(0,a.customGrad)((e,t,r,s)=>{// tslint:disable-next-line: no-unnecessary-type-assertion
let a=(0,n.ENGINE).runKernel(o.FusedDepthwiseConv2D,D,$);return s([t,e,a,r]),F&&(a=(0,b.reshape)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:R}});return e(E,N,C)}}})},{"../../engine":"ldVRX","../../gradients":"dqgxj","../../kernel_names":"3i501","../../tensor_util":"5jYPc","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../add":"lQRCK","../broadcast_util":"jK3Iv","../conv_util":"cCem6","../depthwise_conv2d":"gYPBC","../depthwise_conv2d_native_backprop_filter":"kJ7Bm","../depthwise_conv2d_native_backprop_input":"iphiQ","../fused_util":"6fYPP","../operation":"htqKz","../reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kJ7Bm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropFilter",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("./operation"),i=e("./reshape");let l=(0,o.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,r,s,o,l=[1,1],u){let p=e;3===e.rank&&(p=(0,i.reshape)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=(0,i.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let d={x:p,dy:c};// tslint:disable-next-line: no-unnecessary-type-assertion
return(0,n.ENGINE).runKernel(a.DepthwiseConv2dNativeBackpropFilter,d,{strides:s,pad:o,dimRoundingMode:u,dilations:l,filterShape:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iphiQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropInput",()=>l);var n=e("../engine"),a=e("../kernel_names"),o=e("./operation"),i=e("./reshape");let l=(0,o.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,r,s,o,l=[1,1],u){let p=t,c=!1;3===t.rank&&(c=!0,p=(0,i.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let d={dy:p,filter:r},h=(0,n.ENGINE).runKernel(a.DepthwiseConv2dNativeBackpropInput,d,{strides:s,pad:o,dimRoundingMode:u,dilations:l,inputShape:e});return c?(0,i.reshape)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}})},{"../engine":"ldVRX","../kernel_names":"3i501","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2oJ7V":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"matMul",()=>g);var n=e("../../engine"),a=e("../../gradients"),o=e("../../kernel_names"),i=e("../../tensor_util"),l=e("../../tensor_util_env"),u=e("../../util"),p=e("../add"),c=e("../broadcast_util"),d=e("../fused_util"),h=e("../mat_mul"),f=e("../operation"),m=e("../reshape");let g=(0,f.op)({fusedMatMul_:/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 * - `leakyreluAlpha` Alpha of leakyrelu.
 */function({a:e,b:t,transposeA:r=!1,transposeB:s=!1,bias:f,activation:g="linear",preluActivationWeights:x,leakyreluAlpha:b=.2}){let y,j;if(!1===(0,d.shouldFuse)(n.ENGINE.state.gradientDepth,g)){let n=(0,h.matMul)(e,t,r,s);return null!=f&&(n=(0,p.add)(n,f)),(0,d.applyActivation)(n,g,x,b)}let _=(0,l.convertToTensor)(e,"a","fused matMul"),k=(0,l.convertToTensor)(t,"b","fused matMul");[_,k]=(0,i.makeTypesMatch)(_,k);let I=r?_.shape[_.rank-2]:_.shape[_.rank-1],w=s?k.shape[k.rank-1]:k.shape[k.rank-2],C=r?_.shape[_.rank-1]:_.shape[_.rank-2],S=s?k.shape[k.rank-2]:k.shape[k.rank-1],T=_.shape.slice(0,-2),N=k.shape.slice(0,-2),E=u.sizeFromShape(T),F=u.sizeFromShape(N);u.assert(I===w,()=>`Error in fused matMul: inner shapes (${I}) and (${w}) of Tensors with shapes ${_.shape} and ${k.shape} and transposeA=${r} and transposeB=${s} must match.`);let A=c.assertAndGetBroadcastShape(_.shape.slice(0,-2),k.shape.slice(0,-2)),R=A.concat([C,S]),D=r?(0,m.reshape)(_,[E,I,C]):(0,m.reshape)(_,[E,C,I]),$=s?(0,m.reshape)(k,[F,S,w]):(0,m.reshape)(k,[F,w,S]);null!=f&&(y=(0,l.convertToTensor)(f,"bias","fused matMul"),[y]=(0,i.makeTypesMatch)(y,_),c.assertAndGetBroadcastShape(R,y.shape)),null!=x&&(j=(0,l.convertToTensor)(x,"prelu weights","fused matMul"));let P=(e,t)=>{let n,a;let[o,i,l,u]=t,p=(0,d.getFusedDyActivation)((0,m.reshape)(e,l.shape),l,g);if(r||s?!r&&s?(n=(0,h.matMul)(p,i,!1,!1),a=(0,h.matMul)(p,o,!0,!1)):r&&!s?(n=(0,h.matMul)(i,p,!1,!0),a=(0,h.matMul)(o,p,!1,!1)):(n=(0,h.matMul)(i,p,!0,!0),a=(0,h.matMul)(p,o,!0,!0)):(n=(0,h.matMul)(p,i,!1,!0),a=(0,h.matMul)(o,p,!0,!1)),null==f)return[n,a];{let e=(0,d.getFusedBiasGradient)(u,p);return[n,a,e]}},z={a:D,b:$,bias:y,preluActivationWeights:j},M={transposeA:r,transposeB:s,activation:g,leakyreluAlpha:b};// Depending on the the params passed in we will have different number of
// inputs and thus a a different number of elements in the gradient.
if(null==f){let e=(0,a.customGrad)((e,t,r)=>{let s=(0,n.ENGINE).runKernel(o._FusedMatMul,z,M);return r([e,t,s]),{value:(0,m.reshape)(s,R),gradFunc:P}});return e(D,$)}{let e=(0,a.customGrad)((e,t,r,s)=>{let a=(0,n.ENGINE).runKernel(o._FusedMatMul,z,M);return s([e,t,a,r]),{value:(0,m.reshape)(a,R),gradFunc:P}});return e(D,$,y)}}})},{"../../engine":"ldVRX","../../gradients":"dqgxj","../../kernel_names":"3i501","../../tensor_util":"5jYPc","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../add":"lQRCK","../broadcast_util":"jK3Iv","../fused_util":"6fYPP","../mat_mul":"dpVGA","../operation":"htqKz","../reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j3sCn:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"hammingWindow",()=>o);var n=e("../operation"),a=e("../signal_ops_util");let o=(0,n.op)({hammingWindow_:/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */function(e){return(0,a.cosineWindow)(e,.54,.46)}})},{"../operation":"htqKz","../signal_ops_util":"8247j","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"34Uxb":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"hannWindow",()=>o);var n=e("../operation"),a=e("../signal_ops_util");let o=(0,n.op)({hannWindow_:/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */function(e){return(0,a.cosineWindow)(e,.5,.5)}})},{"../operation":"htqKz","../signal_ops_util":"8247j","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3IsWT":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"frame",()=>p);var n=e("../concat"),a=e("../fill"),o=e("../operation"),i=e("../reshape"),l=e("../slice"),u=e("../tensor2d");let p=(0,o.op)({frame_:/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue A number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */function(e,t,r,s=!1,o=0){let p=0,c=[];for(;p+t<=e.size;)c.push((0,l.slice)(e,p,t)),p+=r;if(s)for(;p<e.size;){let s=p+t-e.size,i=(0,n.concat)([(0,l.slice)(e,p,t-s),(0,a.fill)([s],o)]);c.push(i),p+=r}return 0===c.length?(0,u.tensor2d)([],[0,t]):(0,i.reshape)((0,n.concat)(c),[c.length,t])}})},{"../concat":"k3qE8","../fill":"bXOoe","../operation":"htqKz","../reshape":"hcB7g","../slice":"kcOYr","../tensor2d":"jrzat","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8iTF4":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stft",()=>p);var n=e("../mul"),a=e("../operation"),o=e("../signal_ops_util"),i=e("../spectral/rfft"),l=e("./frame"),u=e("./hann_window");let p=(0,a.op)({stft_:/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */function(e,t,r,s,a=u.hannWindow){null==s&&(s=(0,o.enclosingPowerOfTwo)(t));let p=(0,l.frame)(e,t,r),c=(0,n.mul)(p,a(t));return(0,i.rfft)(c,s)}})},{"../mul":"9ihSJ","../operation":"htqKz","../signal_ops_util":"8247j","../spectral/rfft":"lRuFr","./frame":"3IsWT","./hann_window":"34Uxb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7F9oQ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cropAndResize",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation");let u=(0,l.op)({cropAndResize_:/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by cropSize.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the `boxInd[i]`th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r,s,l="bilinear",u=0){let p=(0,o.convertToTensor)(e,"image","cropAndResize"),c=(0,o.convertToTensor)(t,"boxes","cropAndResize","float32"),d=(0,o.convertToTensor)(r,"boxInd","cropAndResize","int32"),h=c.shape[0];i.assert(4===p.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${p.rank}.`),i.assert(2===c.rank&&4===c.shape[1],()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${c.shape}.`),i.assert(1===d.rank&&d.shape[0]===h,()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${c.shape}.`),i.assert(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),i.assert(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),i.assert("bilinear"===l||"nearest"===l,()=>`method must be bilinear or nearest, but was ${l}`);let f=(0,n.ENGINE).runKernel(a.CropAndResize,{image:p,boxes:c,boxInd:d},{method:l,extrapolationValue:u,cropSize:s});return f}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8DPOG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"flipLeftRight",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation");let u=(0,l.op)({flipLeftRight_:/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 *//** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */function(e){let t=(0,o.convertToTensor)(e,"image","flipLeftRight","float32");i.assert(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let r=(0,n.ENGINE).runKernel(a.FlipLeftRight,{image:t},{});return r}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9CXLz":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"grayscaleToRGB",()=>l);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../operation"),i=e("../tile");let l=(0,o.op)({grayscaleToRGB_:/**
 * Converts images from grayscale to RGB format.
 *
 * @param image A grayscale tensor to convert. The `image`'s last dimension must
 *     be size 1 with at least a two-dimensional shape.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e){let t=(0,n.convertToTensor)(e,"image","grayscaleToRGB"),r=t.rank-1,s=t.shape[r];a.assert(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),a.assert(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);let o=Array(t.rank);return o.fill(1,0,r),o[r]=3,(0,i.tile)(t,o)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","../tile":"913ES","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6yVzb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rotateWithOffset",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation");let u=(0,l.op)({rotateWithOffset_:/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r=0,s=.5){let l=(0,o.convertToTensor)(e,"image","rotateWithOffset","float32");i.assert(4===l.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${l.rank}.`);let u=(0,n.ENGINE).runKernel(a.RotateWithOffset,{image:l},{radians:t,fillValue:r,center:s});return u}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4fKuK":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppression",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../nonmax_util"),l=e("../operation");let u=(0,l.op)({nonMaxSuppression_:/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r,s=.5,l=Number.NEGATIVE_INFINITY){let u=(0,o.convertToTensor)(e,"boxes","nonMaxSuppression","float32"),p=(0,o.convertToTensor)(t,"scores","nonMaxSuppression","float32"),c=(0,i.nonMaxSuppSanityCheck)(u,p,r,s,l);r=c.maxOutputSize,s=c.iouThreshold,l=c.scoreThreshold;let d={maxOutputSize:r,iouThreshold:s,scoreThreshold:l};return(0,n.ENGINE).runKernel(a.NonMaxSuppressionV3,{boxes:u,scores:p},d)}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"83NUk":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppSanityCheck",()=>a);var n=e("../util");function a(e,t,r,s,a,o){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==o&&(o=0);let i=e.shape[0];return r=Math.min(r,i),n.assert(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),n.assert(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),n.assert(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),n.assert(1===t.rank,()=>"scores must be a 1D tensor"),n.assert(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),n.assert(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:r,iouThreshold:s,scoreThreshold:a,softNmsSigma:o}}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dPG7A:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionAsync",()=>u);var n=e("../../backends/non_max_suppression_impl"),a=e("../../tensor_util_env"),o=e("../nonmax_util"),i=e("../tensor1d");/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */async function l(e,t,r,s=.5,l=Number.NEGATIVE_INFINITY){let u=(0,a.convertToTensor)(e,"boxes","nonMaxSuppressionAsync"),p=(0,a.convertToTensor)(t,"scores","nonMaxSuppressionAsync"),c=(0,o.nonMaxSuppSanityCheck)(u,p,r,s,l);r=c.maxOutputSize,s=c.iouThreshold,l=c.scoreThreshold;let d=await Promise.all([u.data(),p.data()]),h=d[0],f=d[1],{selectedIndices:m}=(0,n.nonMaxSuppressionV3Impl)(h,f,r,s,l);return u!==e&&u.dispose(),p!==t&&p.dispose(),(0,i.tensor1d)(m,"int32")}let u=l},{"../../backends/non_max_suppression_impl":"bQ1Oy","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../tensor1d":"7COb5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bQ1Oy:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV3Impl",()=>a),s.export(r,"nonMaxSuppressionV4Impl",()=>o),s.export(r,"nonMaxSuppressionV5Impl",()=>i);var n=e("./non_max_suppression_util");function a(e,t,r,s,n){return l(e,t,r,s,n,0/* softNmsSigma */)}function o(e,t,r,s,n,a){return l(e,t,r,s,n,0/* softNmsSigma */,!1,a/* padToMaxOutputSize */,!0)}function i(e,t,r,s,n,a){return l(e,t,r,s,n,a,!0)}function l(e,t,r,s,a,o,i=!1,l=!1,p=!1){// The list is sorted in ascending order, so that we can always pop the
// candidate with the largest score in O(1) time.
let c=[];for(let e=0;e<t.length;e++)t[e]>a&&c.push({score:t[e],boxIndex:e,suppressBeginIndex:0});c.sort(u);// If softNmsSigma is 0, the outcome of this algorithm is exactly same as
// before.
let d=o>0?-.5/o:0,h=[],f=[];for(;h.length<r&&c.length>0;){let t=c.pop(),{score:r,boxIndex:o,suppressBeginIndex:i}=t;if(r<a)break;// Overlapping boxes are likely to have similar scores, therefore we
// iterate through the previously selected boxes backwards in order to
// see if candidate's score should be suppressed. We use
// suppressBeginIndex to track and ensure a candidate can be suppressed
// by a selected box no more than once. Also, if the overlap exceeds
// iouThreshold, we simply ignore the candidate.
let l=!1;for(let r=h.length-1;r>=i;--r){let n=function(e,t,r){let s=e.subarray(4*t,4*t+4),n=e.subarray(4*r,4*r+4),a=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(n[0],n[2]),p=Math.min(n[1],n[3]),c=Math.max(n[0],n[2]),d=Math.max(n[1],n[3]),h=(i-a)*(l-o),f=(c-u)*(d-p);if(h<=0||f<=0)return 0;let m=Math.max(a,u),g=Math.max(o,p),x=Math.min(i,c),b=Math.min(l,d),y=Math.max(x-m,0)*Math.max(b-g,0);return y/(h+f-y)}(e,o,h[r]);if(n>=s){l=!0;break}if(t.score=t.score*// A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.
function(e,t,r){let s=Math.exp(t*r*r);return r<=e?s:0}(s,d,n),t.score<=a)break}// At this point, if `candidate.score` has not dropped below
// `scoreThreshold`, then we know that we went through all of the
// previous selections and can safely update `suppressBeginIndex` to the
// end of the selected array. Then we can re-insert the candidate with
// the updated score and suppressBeginIndex back in the candidate list.
// If on the other hand, `candidate.score` has dropped below the score
// threshold, we will not add it back to the candidates list.
t.suppressBeginIndex=h.length,!l&&(t.score===r?(h.push(o),f.push(t.score)):t.score>a&&// considered, so add back to the candidates list.
(0,n.binaryInsert)(c,t,u))}// NonMaxSuppressionV4 feature: padding output to maxOutputSize.
let m=h.length,g=r-m;l&&g>0&&(h.push(...Array(g).fill(0)),f.push(...Array(g).fill(0)));let x={selectedIndices:h};return i&&(x.selectedScores=f),p&&(x.validOutputs=m),x}function u(e,t){// For objects with same scores, we make the object with the larger index go
// first. In an array that pops from the end, this means that the object with
// the smaller index will be popped first. This ensures the same output as
// the TensorFlow python version.
return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}},{"./non_max_suppression_util":"1Jeo8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1Jeo8":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t,r){let s=a(e,t,r),n=s<0?-(s+1):s;e.splice(n,0,t)}function a(e,t,r){return function(e,t,r){let s=0,n=e.length,a=0,o=!1;for(;s<n;){a=s+(n-s>>>1);let i=r(t,e[a]);i>0?s=a+1:(n=a,// If compareResult is 0, the value is found. We record it is found,
// and then keep looking because there may be duplicate.
o=!i)}return o?s:-s-1}(e,t,r||o)}/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */function o(e,t){return e>t?1:e<t?-1:0}s.defineInteropFlag(r),s.export(r,"binaryInsert",()=>n),/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */s.export(r,"binarySearch",()=>a)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"67mQJ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionWithScore",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../nonmax_util"),l=e("../operation");let u=(0,l.op)({nonMaxSuppressionWithScore_:/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (cf.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r,s=.5,l=Number.NEGATIVE_INFINITY,u=0){let p=(0,o.convertToTensor)(e,"boxes","nonMaxSuppression"),c=(0,o.convertToTensor)(t,"scores","nonMaxSuppression"),d=(0,i.nonMaxSuppSanityCheck)(p,c,r,s,l,u);r=d.maxOutputSize,s=d.iouThreshold,l=d.scoreThreshold,u=d.softNmsSigma;let h={maxOutputSize:r,iouThreshold:s,scoreThreshold:l,softNmsSigma:u},f=(0,n.ENGINE).runKernel(a.NonMaxSuppressionV5,{boxes:p,scores:c},h);return{selectedIndices:f[0],selectedScores:f[1]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8222B":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionWithScoreAsync",()=>u);var n=e("../../backends/non_max_suppression_impl"),a=e("../../tensor_util_env"),o=e("../nonmax_util"),i=e("../tensor1d");/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (cf.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */async function l(e,t,r,s=.5,l=Number.NEGATIVE_INFINITY,u=0){let p=(0,a.convertToTensor)(e,"boxes","nonMaxSuppressionAsync"),c=(0,a.convertToTensor)(t,"scores","nonMaxSuppressionAsync"),d=(0,o.nonMaxSuppSanityCheck)(p,c,r,s,l,u);r=d.maxOutputSize,s=d.iouThreshold,l=d.scoreThreshold,u=d.softNmsSigma;let h=await Promise.all([p.data(),c.data()]),f=h[0],m=h[1],{selectedIndices:g,selectedScores:x}=(0,n.nonMaxSuppressionV5Impl)(f,m,r,s,l,u);return p!==e&&p.dispose(),c!==t&&c.dispose(),{selectedIndices:(0,i.tensor1d)(g,"int32"),selectedScores:(0,i.tensor1d)(x)}}let u=l},{"../../backends/non_max_suppression_impl":"bQ1Oy","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../tensor1d":"7COb5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bLEEZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionPadded",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../nonmax_util"),l=e("../operation");let u=(0,l.op)({nonMaxSuppressionPadded_:/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defaults to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r,s=.5,l=Number.NEGATIVE_INFINITY,u=!1){let p=(0,o.convertToTensor)(e,"boxes","nonMaxSuppression"),c=(0,o.convertToTensor)(t,"scores","nonMaxSuppression"),d=(0,i.nonMaxSuppSanityCheck)(p,c,r,s,l,null),h=d.maxOutputSize,f=d.iouThreshold,m=d.scoreThreshold,g=(0,n.ENGINE).runKernel(a.NonMaxSuppressionV4,{boxes:p,scores:c},{maxOutputSize:h,iouThreshold:f,scoreThreshold:m,padToMaxOutputSize:u});return{selectedIndices:g[0],validOutputs:g[1]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cuqDY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionPaddedAsync",()=>p);var n=e("../../backends/non_max_suppression_impl"),a=e("../../tensor_util_env"),o=e("../nonmax_util"),i=e("../scalar"),l=e("../tensor1d");/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defaults to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */async function u(e,t,r,s=.5,u=Number.NEGATIVE_INFINITY,p=!1){let c=(0,a.convertToTensor)(e,"boxes","nonMaxSuppressionAsync"),d=(0,a.convertToTensor)(t,"scores","nonMaxSuppressionAsync"),h=(0,o.nonMaxSuppSanityCheck)(c,d,r,s,u,null),f=h.maxOutputSize,m=h.iouThreshold,g=h.scoreThreshold,[x,b]=await Promise.all([c.data(),d.data()]),{selectedIndices:y,validOutputs:j}=(0,n.nonMaxSuppressionV4Impl)(x,b,f,m,g,p);return c!==e&&c.dispose(),d!==t&&d.dispose(),{selectedIndices:(0,l.tensor1d)(y,"int32"),validOutputs:(0,i.scalar)(j,"int32")}}let p=u},{"../../backends/non_max_suppression_impl":"bQ1Oy","../../tensor_util_env":"9iWFD","../nonmax_util":"83NUk","../scalar":"8NgrS","../tensor1d":"7COb5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1uKT8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinear",()=>p);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation"),u=e("../reshape");let p=(0,l.op)({resizeBilinear_:/**
 * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to `false`. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers
 *     are at 0.5, which would make the floating point coordinates of the top
 *     left pixel 0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r=!1,s=!1){let l=(0,o.convertToTensor)(e,"images","resizeBilinear");i.assert(3===l.rank||4===l.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${l.rank}.`),i.assert(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),i.assert(!1===s||!1===r,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let p=l,c=!1;3===l.rank&&(c=!0,p=(0,u.reshape)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));let[]=t,d={images:p},h=(0,n.ENGINE).runKernel(a.ResizeBilinear,d,{alignCorners:r,halfPixelCenters:s,size:t});return c?(0,u.reshape)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","../reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3w2P5":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighbor",()=>p);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation"),u=e("../reshape");let p=(0,l.op)({resizeNearestNeighbor_:/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assume pixels are of
 *      half the actual dimensions, and yield more accurate resizes. This flag
 *      would also make the floating point coordinates of the top left pixel
 *      0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r=!1,s=!1){let l=(0,o.convertToTensor)(e,"images","resizeNearestNeighbor");i.assert(3===l.rank||4===l.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${l.rank}.`),i.assert(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),i.assert("float32"===l.dtype||"int32"===l.dtype,()=>"`images` must have `int32` or `float32` as dtype"),i.assert(!1===s||!1===r,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let p=l,c=!1;3===l.rank&&(c=!0,p=(0,u.reshape)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));let[]=t,d={images:p},h=(0,n.ENGINE).runKernel(a.ResizeNearestNeighbor,d,{alignCorners:r,halfPixelCenters:s,size:t});return c?(0,u.reshape)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","../reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9otRR":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"threshold",()=>w);var n=e("../tensor1d"),a=e("../operation"),o=e("../cast"),i=e("../split"),l=e("../bincount"),u=e("../less_equal"),p=e("../greater"),c=e("../sum"),d=e("../add"),h=e("../mul"),f=e("../div"),m=e("../sub"),g=e("../round"),x=e("../where"),b=e("../fill"),y=e("../slice"),j=e("../range"),_=e("../tensor"),k=e("../../util"),I=e("../../tensor_util_env");let w=(0,a.op)({threshold_:/**
 * Performs image binarization with corresponding threshold
 * (depends on the method)value, which creates a binary image from a grayscale.
 * @param image 3d tensor of shape [imageHeight,imageWidth, depth],
 * where imageHeight and imageWidth must be positive.The image color
 * range should be [0, 255].
 * @param method Optional string from `'binary' | 'otsu'`
 * which specifies the method for thresholding. Defaults to 'binary'.
 * @param inverted Optional boolean whichspecifies
 * if colours should be inverted. Defaults to false.
 * @param threshValue Optional number which defines threshold value from 0 to 1.
 * Defaults to 0.5.
 * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which
 * contains binarized image.
 */function(e,t="binary",r=!1,s=.5){let a,w,C,S;let T=(0,I.convertToTensor)(e,"image","threshold"),N=T.shape[0]*T.shape[1],E=(0,h.mul)((0,n.tensor1d)([s]),255);if(k.assert(3===T.rank,()=>`Error in threshold: image must be rank 3,but got rank ${T.rank}.`),k.assert(3===T.shape[2]||1===T.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${T.shape[2]}.`),k.assert("int32"===T.dtype||"float32"===T.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${T.dtype}.`),k.assert("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===T.shape[2]){[a,w,C]=(0,i.split)(T,[1,1,1],-1);let e=(0,h.mul)(a,.2989),t=(0,h.mul)(w,.587),r=(0,h.mul)(C,.114);S=(0,d.add)((0,d.add)(e,t),r)}else S=e;if("otsu"===t){let e=(0,l.bincount)((0,o.cast)((0,g.round)(S),"int32"),(0,_.tensor)([]),256);E=function(e,t){let r,s,a,o,i,l,u=(0,n.tensor1d)([-1]),g=(0,n.tensor1d)([0]),_=(0,n.tensor1d)([0]);for(let k=0;k<e.size-1;k++){r=(0,y.slice)(e,0,k+1),s=(0,y.slice)(e,k+1),i=(0,f.div)((0,c.sum)(r),t),l=(0,f.div)((0,c.sum)(s),t);let I=(0,c.sum)((0,h.mul)(r,(0,j.range)(0,r.size)));a=(0,f.div)(I,(0,c.sum)(r));let w=(0,b.fill)(s.shape,r.size),C=(0,d.add)((0,j.range)(0,s.size),w),S=(0,h.mul)(s,C);o=(0,f.div)((0,c.sum)(S),(0,c.sum)(s));let T=(0,m.sub)(a,o),N=(0,m.sub)(a,o),E=(0,h.mul)(i,l);_=(0,h.mul)((0,h.mul)(E,T),N);let F=(0,p.greater)(_,g);g=(0,x.where)(F,_,g),u=(0,x.where)(F,(0,n.tensor1d)([k]),u)}return u}(e,N)}let F=r?(0,u.lessEqual)(S,E):(0,p.greater)(S,E),A=(0,o.cast)((0,h.mul)(F,255),"int32");return A}})},{"../tensor1d":"7COb5","../operation":"htqKz","../cast":"7e2UZ","../split":"3RBf7","../bincount":"gw67a","../less_equal":"joVbJ","../greater":"ayzyA","../sum":"nMRSa","../add":"lQRCK","../mul":"9ihSJ","../div":"9dy6L","../sub":"gYa0B","../round":"3FB8V","../where":"kAiQD","../fill":"bXOoe","../slice":"kcOYr","../range":"bEl6L","../tensor":"1tgxn","../../util":"6bzqD","../../tensor_util_env":"9iWFD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8Z16n":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transform",()=>u);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../../util"),l=e("../operation");let u=(0,l.op)({transform_:/**
 * Applies the given transform(s) to the image(s).
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param transforms Projective transform matrix/matrices. A tensor1d of length
 *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0,
 *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed
 *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),
 *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the
 *     transform mapping input points to output points.
 * @param interpolation Interpolation mode.
 *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.
 * @param fillMode Points outside the boundaries of the input are filled
 *     according to the given mode, one of 'constant', 'reflect', 'wrap',
 *     'nearest'. Default to 'constant'.
 *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by
 *     reflecting about the edge of the last pixel.
 *     'constant': (k k k k | a b c d | k k k k) The input is extended by
 *     filling all values beyond the edge with the same constant value k.
 *     'wrap': (a b c d | a b c d | a b c d) The input is extended by
 *     wrapping around to the opposite edge.
 *     'nearest': (a a a a | a b c d | d d d d) The input is extended by
 *     the nearest pixel.
 * @param fillValue A float represents the value to be filled outside the
 *     boundaries when fillMode is 'constant'.
 * @param Output dimension after the transform, [height, width]. If undefined,
 *     output is the same size as input image.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */function(e,t,r="nearest",s="constant",l=0,u){let p=(0,o.convertToTensor)(e,"image","transform","float32"),c=(0,o.convertToTensor)(t,"transforms","transform","float32");return i.assert(4===p.rank,()=>`Error in transform: image must be rank 4,but got rank ${p.rank}.`),i.assert(2===c.rank&&(c.shape[0]===p.shape[0]||1===c.shape[0])&&8===c.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),i.assert(null==u||2===u.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${u}.`),(0,n.ENGINE).runKernel(a.Transform,{image:p,transforms:c},{interpolation:r,fillMode:s,fillValue:l,outputShape:u})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fiK9x:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"bandPart",()=>b);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../greater_equal"),i=e("../less_equal"),l=e("../logical_and"),u=e("../operation"),p=e("../range"),c=e("../reshape"),d=e("../scalar"),h=e("../stack"),f=e("../sub"),m=e("../unstack"),g=e("../where"),x=e("../zeros");let b=(0,u.op)({bandPart_:/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */function(e,t,r){(0,a.assert)(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),(0,a.assert)(r%1==0,()=>`bandPart(): numUpper must be an integer, got ${r}.`);let s=(0,n.convertToTensor)(e,"a","bandPart");(0,a.assert)(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);let u=s.shape,[b,y]=s.shape.slice(-2);if(!(t<=b))throw Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${b}).`);if(!(r<=y))throw Error(`bandPart(): numUpper (${r}) must not be greater than the number of columns (${y}).`);t<0&&(t=b),r<0&&(r=y);let j=(0,c.reshape)((0,p.range)(0,b,1,"int32"),[-1,1]),_=(0,p.range)(0,y,1,"int32"),k=(0,f.sub)(j,_),I=(0,l.logicalAnd)((0,i.lessEqual)(k,(0,d.scalar)(+t,"int32")),(0,o.greaterEqual)(k,(0,d.scalar)(-r,"int32"))),w=(0,x.zeros)([b,y],s.dtype);return(0,c.reshape)((0,h.stack)((0,m.unstack)((0,c.reshape)(s,[-1,b,y])).map(e=>(0,g.where)(I,e,w))),u)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../greater_equal":"h8ZY5","../less_equal":"joVbJ","../logical_and":"fhBD8","../operation":"htqKz","../range":"bEl6L","../reshape":"hcB7g","../scalar":"8NgrS","../stack":"cd4pw","../sub":"gYa0B","../unstack":"lbucv","../where":"kAiQD","../zeros":"8Iv9P","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],inmku:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gramSchmidt",()=>m);var n=e("../../engine"),a=e("../../util"),o=e("../div"),i=e("../mul"),l=e("../norm"),u=e("../operation"),p=e("../split"),c=e("../squeeze"),d=e("../stack"),h=e("../sub"),f=e("../sum");let m=(0,u.op)({gramSchmidt_:/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Orthogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */function(e){let t;if(Array.isArray(e)){t=!1,(0,a.assert)(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let r=e[0].shape[0];for(let t=1;t<e.length;++t)(0,a.assert)(e[t].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${r})`)}else t=!0,e=(0,p.split)(e,e.shape[0],0).map(e=>(0,c.squeeze)(e,[0]));(0,a.assert)(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);let r=[],s=e;for(let t=0;t<e.length;++t)r.push((0,n.ENGINE).tidy(()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){let t=(0,i.mul)((0,f.sum)((0,i.mul)(r[s],e)),r[s]);e=(0,h.sub)(e,t)}return(0,o.div)(e,(0,l.norm)(e,"euclidean"))}));return t?(0,d.stack)(r,0):r}})},{"../../engine":"ldVRX","../../util":"6bzqD","../div":"9dy6L","../mul":"9ihSJ","../norm":"e1hji","../operation":"htqKz","../split":"3RBf7","../squeeze":"4V4Q8","../stack":"cd4pw","../sub":"gYa0B","../sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lpLtp:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"qr",()=>S);var n=e("../../engine"),a=e("../../globals"),o=e("../../util"),i=e("../clone"),l=e("../concat"),u=e("../div"),p=e("../eye"),c=e("../greater"),d=e("../mat_mul"),h=e("../mul"),f=e("../neg"),m=e("../norm"),g=e("../operation"),x=e("../reshape"),b=e("../slice"),y=e("../stack"),j=e("../sub"),_=e("../tensor2d"),k=e("../transpose"),I=e("../unstack"),w=e("../where");function C(e,t=!1){return(0,n.ENGINE).tidy(()=>{(0,o.assert)(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);let r=e.shape[0],s=e.shape[1],g=(0,p.eye)(r),x=(0,i.clone)(e),y=(0,_.tensor2d)([[1]],[1,1]),I=(0,i.clone)(y),C=r>=s?s:r;for(let e=0;e<C;++e){// This tidy within the for-loop ensures we clean up temporary
// tensors as soon as they are no longer needed.
let t=x,o=I,p=g;[I,x,g]=(0,n.ENGINE).tidy(()=>{// Find H = I - tau * w * w', to put zeros below R(j, j).
let t=(0,b.slice)(x,[e,e],[r-e,1]),n=(0,m.norm)(t),a=(0,b.slice)(x,[e,e],[1,1]),o=(0,w.where)((0,c.greater)(a,0),(0,_.tensor2d)([[-1]]),(0,_.tensor2d)([[1]])),p=(0,j.sub)(a,(0,h.mul)(o,n)),C=(0,u.div)(t,p);I=1===C.shape[0]?(0,i.clone)(y):(0,l.concat)([y,(0,b.slice)(C,[1,0],[C.shape[0]-1,C.shape[1]])],0);let S=(0,f.neg)((0,u.div)((0,d.matMul)(o,p),n)),T=(0,b.slice)(x,[e,0],[r-e,s]),N=(0,h.mul)(S,I),E=(0,k.transpose)(I);if(0===e)x=(0,j.sub)(T,(0,d.matMul)(N,(0,d.matMul)(E,T)));else{let t=(0,j.sub)(T,(0,d.matMul)(N,(0,d.matMul)(E,T)));x=(0,l.concat)([(0,b.slice)(x,[0,0],[e,s]),t],0)}let F=(0,k.transpose)(N),A=(0,b.slice)(g,[0,e],[r,g.shape[1]-e]);if(0===e)g=(0,j.sub)(A,(0,d.matMul)((0,d.matMul)(A,I),F));else{let t=(0,j.sub)(A,(0,d.matMul)((0,d.matMul)(A,I),F));g=(0,l.concat)([(0,b.slice)(g,[0,0],[r,e]),t],1)}return[I,x,g]}),(0,a.dispose)([t,o,p])}return!t&&r>s&&(g=(0,b.slice)(g,[0,0],[r,s]),x=(0,b.slice)(x,[0,0],[s,s])),[g,x]})}let S=(0,g.op)({qr_:/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */function(e,t=!1){if((0,o.assert)(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return C(e,t);{// Rank > 2.
// TODO(cais): Below we split the input into individual 2D tensors,
//   perform QR decomposition on them and then stack the results back
//   together. We should explore whether this can be parallelized.
let r=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),s=(0,I.unstack)((0,x.reshape)(e,[r,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),n=[],a=[];s.forEach(e=>{let[r,s]=C(e,t);n.push(r),a.push(s)});let o=(0,x.reshape)((0,y.stack)(n,0),e.shape),i=(0,x.reshape)((0,y.stack)(a,0),e.shape);return[o,i]}}})},{"../../engine":"ldVRX","../../globals":"75Rqm","../../util":"6bzqD","../clone":"ljPJN","../concat":"k3qE8","../div":"9dy6L","../eye":"4rEcG","../greater":"ayzyA","../mat_mul":"dpVGA","../mul":"9ihSJ","../neg":"gRzxs","../norm":"e1hji","../operation":"htqKz","../reshape":"hcB7g","../slice":"kcOYr","../stack":"cd4pw","../sub":"gYa0B","../tensor2d":"jrzat","../transpose":"lWGmK","../unstack":"lbucv","../where":"kAiQD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gI49a:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"absoluteDifference",()=>c);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../abs"),i=e("../loss_ops_utils"),l=e("../operation"),u=e("../sub"),p=e("./compute_weighted_loss");let c=(0,l.op)({absoluteDifference_:/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s=i.Reduction.SUM_BY_NONZERO_WEIGHTS){let l=(0,n.convertToTensor)(e,"labels","absoluteDifference"),c=(0,n.convertToTensor)(t,"predictions","absoluteDifference"),d=null;null!=r&&(d=(0,n.convertToTensor)(r,"weights","absoluteDifference")),(0,a.assertShapesMatch)(l.shape,c.shape,"Error in absoluteDifference: ");let h=(0,o.abs)((0,u.sub)(l,c));return(0,p.computeWeightedLoss)(h,d,s)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../abs":"j8viR","../loss_ops_utils":"2h8jj","../operation":"htqKz","../sub":"gYa0B","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2h8jj":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s,n,a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"Reduction",()=>n),(s=n||(n={}))[s.NONE=0]="NONE",s[s.MEAN=1]="MEAN",s[s.SUM=2]="SUM",s[s.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"85xhD":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"computeWeightedLoss",()=>m);var n=e("../../tensor_util_env"),a=e("../cast"),o=e("../div"),i=e("../loss_ops_utils"),l=e("../mean"),u=e("../mul"),p=e("../not_equal"),c=e("../ones"),d=e("../operation"),h=e("../scalar"),f=e("../sum");let m=(0,d.op)({computeWeightedLoss_:/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ..., dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r=i.Reduction.SUM_BY_NONZERO_WEIGHTS){let s=(0,n.convertToTensor)(e,"losses","computeWeightedLoss"),d=null;null!=t&&(d=(0,n.convertToTensor)(t,"weights","computeWeightedLoss"));let m=null==d?s:(0,u.mul)(s,d);if(r===i.Reduction.NONE)return m;if(r===i.Reduction.SUM)return(0,f.sum)(m);if(r===i.Reduction.MEAN){if(null==d)return(0,l.mean)(m);{let e=s.size/d.size,t=(0,o.div)((0,f.sum)(m),(0,f.sum)(d));return e>1?(0,o.div)(t,(0,h.scalar)(e)):t}}if(r===i.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==d)return(0,o.div)((0,f.sum)(m),(0,h.scalar)(s.size));{let e=(0,u.mul)(d,(0,c.ones)(s.shape)),t=(0,a.cast)((0,f.sum)((0,p.notEqual)(e,(0,h.scalar)(0))),"float32");return(0,o.div)((0,f.sum)(m),t)}}throw Error(`Unknown reduction: ${r}`)}})},{"../../tensor_util_env":"9iWFD","../cast":"7e2UZ","../div":"9dy6L","../loss_ops_utils":"2h8jj","../mean":"39LDA","../mul":"9ihSJ","../not_equal":"8kzbl","../ones":"14B1F","../operation":"htqKz","../scalar":"8NgrS","../sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ci5Y9:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cosineDistance",()=>h);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../loss_ops_utils"),i=e("../mul"),l=e("../operation"),u=e("../scalar"),p=e("../sub"),c=e("../sum"),d=e("./compute_weighted_loss");let h=(0,l.op)({cosineDistance_:/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s,l=o.Reduction.SUM_BY_NONZERO_WEIGHTS){let h=(0,n.convertToTensor)(e,"labels","cosineDistance"),f=(0,n.convertToTensor)(t,"predictions","cosineDistance"),m=null;null!=s&&(m=(0,n.convertToTensor)(s,"weights","cosineDistance")),(0,a.assertShapesMatch)(h.shape,f.shape,"Error in cosineDistance: ");let g=(0,u.scalar)(1),x=(0,p.sub)(g,(0,c.sum)((0,i.mul)(h,f),r,!0));return(0,d.computeWeightedLoss)(x,m,l)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../loss_ops_utils":"2h8jj","../mul":"9ihSJ","../operation":"htqKz","../scalar":"8NgrS","../sub":"gYa0B","../sum":"nMRSa","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dYDyH:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"hingeLoss",()=>h);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../loss_ops_utils"),i=e("../mul"),l=e("../operation"),u=e("../relu"),p=e("../scalar"),c=e("../sub"),d=e("./compute_weighted_loss");let h=(0,l.op)({hingeLoss_:/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s=o.Reduction.SUM_BY_NONZERO_WEIGHTS){let l=(0,n.convertToTensor)(e,"labels","hingeLoss"),h=(0,n.convertToTensor)(t,"predictions","hingeLoss"),f=null;null!=r&&(f=(0,n.convertToTensor)(r,"weights","hingeLoss")),(0,a.assertShapesMatch)(l.shape,h.shape,"Error in hingeLoss: ");let m=(0,p.scalar)(1);// Convert binary labels to (-1, 1)
l=(0,c.sub)((0,i.mul)((0,p.scalar)(2),l),m);let g=(0,u.relu)((0,c.sub)(m,(0,i.mul)(l,h)));return(0,d.computeWeightedLoss)(g,f,s)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../loss_ops_utils":"2h8jj","../mul":"9ihSJ","../operation":"htqKz","../relu":"2Qfzv","../scalar":"8NgrS","../sub":"gYa0B","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dKSDS:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"huberLoss",()=>g);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../abs"),i=e("../add"),l=e("../loss_ops_utils"),u=e("../minimum"),p=e("../mul"),c=e("../operation"),d=e("../scalar"),h=e("../square"),f=e("../sub"),m=e("./compute_weighted_loss");let g=(0,c.op)({huberLoss_:/**
 * Computes the Huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where Huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s=1,c=l.Reduction.SUM_BY_NONZERO_WEIGHTS){let g=(0,n.convertToTensor)(e,"labels","huberLoss"),x=(0,n.convertToTensor)(t,"predictions","huberLoss"),b=null;null!=r&&(b=(0,n.convertToTensor)(r,"weights","huberLoss")),(0,a.assertShapesMatch)(g.shape,x.shape,"Error in huberLoss: ");let y=(0,d.scalar)(s),j=(0,o.abs)((0,f.sub)(x,g)),_=(0,u.minimum)(j,y),k=(0,f.sub)(j,_),I=(0,i.add)((0,p.mul)((0,d.scalar)(.5),(0,h.square)(_)),(0,p.mul)(y,k));return(0,m.computeWeightedLoss)(I,b,c)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../abs":"j8viR","../add":"lQRCK","../loss_ops_utils":"2h8jj","../minimum":"9HraX","../mul":"9ihSJ","../operation":"htqKz","../scalar":"8NgrS","../square":"3G5yp","../sub":"gYa0B","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lrbX5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logLoss",()=>m);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../add"),i=e("../log"),l=e("../loss_ops_utils"),u=e("../mul"),p=e("../neg"),c=e("../operation"),d=e("../scalar"),h=e("../sub"),f=e("./compute_weighted_loss");let m=(0,c.op)({logLoss_:/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s=1e-7,c=l.Reduction.SUM_BY_NONZERO_WEIGHTS){let m=(0,n.convertToTensor)(e,"labels","logLoss"),g=(0,n.convertToTensor)(t,"predictions","logLoss"),x=null;null!=r&&(x=(0,n.convertToTensor)(r,"weights","logLoss")),(0,a.assertShapesMatch)(m.shape,g.shape,"Error in logLoss: ");let b=(0,d.scalar)(1),y=(0,d.scalar)(s),j=(0,p.neg)((0,u.mul)(m,(0,i.log)((0,o.add)(g,y)))),_=(0,u.mul)((0,h.sub)(b,m),(0,i.log)((0,o.add)((0,h.sub)(b,g),y))),k=(0,h.sub)(j,_);return(0,f.computeWeightedLoss)(k,x,c)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../add":"lQRCK","../log":"agrA2","../loss_ops_utils":"2h8jj","../mul":"9ihSJ","../neg":"gRzxs","../operation":"htqKz","../scalar":"8NgrS","../sub":"gYa0B","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bOvi1:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"meanSquaredError",()=>p);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../loss_ops_utils"),i=e("../operation"),l=e("../squared_difference"),u=e("./compute_weighted_loss");let p=(0,i.op)({meanSquaredError_:/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */function(e,t,r,s=o.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=(0,n.convertToTensor)(e,"labels","meanSquaredError"),p=(0,n.convertToTensor)(t,"predictions","meanSquaredError"),c=null;null!=r&&(c=(0,n.convertToTensor)(r,"weights","meanSquaredError")),(0,a.assertShapesMatch)(i.shape,p.shape,"Error in meanSquaredError: ");let d=(0,l.squaredDifference)(i,p);return(0,u.computeWeightedLoss)(d,c,s)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../loss_ops_utils":"2h8jj","../operation":"htqKz","../squared_difference":"fpHDE","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k4DgM:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sigmoidCrossEntropy",()=>b);var n=e("../../tensor_util_env"),a=e("../../util"),o=e("../abs"),i=e("../add"),l=e("../exp"),u=e("../log1p"),p=e("../loss_ops_utils"),c=e("../mul"),d=e("../neg"),h=e("../operation"),f=e("../relu"),m=e("../scalar"),g=e("../sub"),x=e("./compute_weighted_loss");let b=(0,h.op)({sigmoidCrossEntropy_:/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */function(e,t,r,s=0,h=p.Reduction.SUM_BY_NONZERO_WEIGHTS){let b=(0,n.convertToTensor)(e,"multiClassLabels","sigmoidCrossEntropy"),y=(0,n.convertToTensor)(t,"logits","sigmoidCrossEntropy"),j=null;if(null!=r&&(j=(0,n.convertToTensor)(r,"weights","sigmoidCrossEntropy")),(0,a.assertShapesMatch)(b.shape,y.shape,"Error in sigmoidCrossEntropy: "),s>0){let e=(0,m.scalar)(s),t=(0,m.scalar)(1),r=(0,m.scalar)(.5);b=(0,i.add)((0,c.mul)(b,(0,g.sub)(t,e)),(0,c.mul)(r,e))}let _=function(e,t){let r=(0,n.convertToTensor)(e,"labels","sigmoidCrossEntropyWithLogits"),s=(0,n.convertToTensor)(t,"logits","sigmoidCrossEntropyWithLogits");(0,a.assertShapesMatch)(r.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");/**
     * Implementation Details:
     *
     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
     *   = (1 - z) * x + log(1 + exp(-x))
     *   = x - x * z + log(1 + exp(-x))
     *
     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
     *     x - x * z + log(1 + exp(-x))
     *   = log(exp(x)) - x * z + log(1 + exp(-x))
     *   = - x * z + log(1 + exp(x))
     *
     * Hence, to ensure stability and avoid overflow, the implementation uses
     * this equivalent formulation:
     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
     */let p=(0,f.relu)(s),h=(0,c.mul)(s,r),m=(0,u.log1p)((0,l.exp)((0,d.neg)((0,o.abs)(s))));return(0,i.add)((0,g.sub)(p,h),m)}(b,y);return(0,x.computeWeightedLoss)(_,j,h)}})},{"../../tensor_util_env":"9iWFD","../../util":"6bzqD","../abs":"j8viR","../add":"lQRCK","../exp":"1ctfc","../log1p":"aALDF","../loss_ops_utils":"2h8jj","../mul":"9ihSJ","../neg":"gRzxs","../operation":"htqKz","../relu":"2Qfzv","../scalar":"8NgrS","../sub":"gYa0B","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cq65e:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softmaxCrossEntropy",()=>k);var n=e("../../gradients"),a=e("../../tensor_util_env"),o=e("../../util"),i=e("../add"),l=e("../axis_util"),u=e("../cast"),p=e("../div"),c=e("../exp"),d=e("../log_sum_exp"),h=e("../loss_ops_utils"),f=e("../mul"),m=e("../neg"),g=e("../operation"),x=e("../reshape"),b=e("../scalar"),y=e("../sub"),j=e("../sum"),_=e("./compute_weighted_loss");let k=(0,g.op)({softmaxCrossEntropy_:/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */function(e,t,r,s=0,g=h.Reduction.SUM_BY_NONZERO_WEIGHTS){let k=(0,a.convertToTensor)(e,"onehotLabels","softmaxCrossEntropy"),I=(0,a.convertToTensor)(t,"logits","softmaxCrossEntropy"),w=null;if(null!=r&&(w=(0,a.convertToTensor)(r,"weights","softmaxCrossEntropy")),(0,o.assertShapesMatch)(k.shape,I.shape,"Error in softmaxCrossEntropy: "),s>0){let e=(0,b.scalar)(s),t=(0,b.scalar)(1),r=(0,b.scalar)(k.shape[1]);k=(0,i.add)((0,f.mul)(k,(0,y.sub)(t,e)),(0,p.div)(e,r))}let C=/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */function(e,t,r=-1){if(-1===r&&(r=t.rank-1),r!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${r}`);// Use a custom gradient for numerical stability.
let s=(0,n.customGrad)((e,t,s)=>{let n=(0,d.logSumExp)(t,[r],!0),a=(0,y.sub)((0,u.cast)(t,"float32"),n);s([e,a]);let o=(0,m.neg)((0,f.mul)(a,e)),i=(0,j.sum)(o,[r]);return{value:i,gradFunc:(e,t)=>{let[s,n]=t,a=(0,l.expandShapeToKeepDim)(e.shape,[r]);return[(0,f.mul)((0,x.reshape)(e,a),(0,y.sub)((0,u.cast)(s,"float32"),(0,c.exp)(n))),(0,f.mul)((0,x.reshape)(e,a),(0,y.sub)((0,c.exp)(n),(0,u.cast)(s,"float32")))]}}});return s(e,t)}(k,I);return(0,_.computeWeightedLoss)(C,w,g)}})},{"../../gradients":"dqgxj","../../tensor_util_env":"9iWFD","../../util":"6bzqD","../add":"lQRCK","../axis_util":"9ZcyD","../cast":"7e2UZ","../div":"9dy6L","../exp":"1ctfc","../log_sum_exp":"f9G46","../loss_ops_utils":"2h8jj","../mul":"9ihSJ","../neg":"gRzxs","../operation":"htqKz","../reshape":"hcB7g","../scalar":"8NgrS","../sub":"gYa0B","../sum":"nMRSa","./compute_weighted_loss":"85xhD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3OPSB":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseFillEmptyRows",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({sparseFillEmptyRows_:/**
 * The input SparseTensor is represented via the map of inputs {`indices`,
 * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`
 * but with indices `outputIndices` and values `outputValues`. This op inserts a
 * single entry for every row that doesn't have any values. The index is created
 * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.
 *
 * For example, suppose `spInput` has shape [5, 6] and non-empty values:
 * [0, 1]: a
 * [0, 3]: b
 * [2, 0]: c
 * [3, 1]: d
 *
 * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:
 * [0, 1]: a
 * [0, 3]: b
 * [1, 0]: `defaultValue`
 * [2, 0]: c
 * [3, 1]: d
 * [4, 0]: `defaultValue`
 *
 * The output SparseTensor will be in row-major order and will have the same
 * shape as the input.
 *
 * This op also returns an indicator vector shaped [dense_shape[0]] such that
 * emptyRowIndicator[i] = True iff row i was an empty row.
 *
 * And a reverse index map vector shaped [indices.shape[0]] that is used during
 * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==
 * outputIndices[outi, j] for all j
 *
 * ```js
 * const result = tf.sparse.sparseFillEmptyRows(
 *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],
 *   [0, 10, 13, 14, 32, 33], [5, 6], -1);
 * console.log(result);
 * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],
 *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]
 * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]
 * result['emptyRowIndicator'].print(); // [false, false, true, false, true]
 * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]
 * ```
 * @param indices: 2-D. The indices of the sparse tensor.
 * @param values: 1-D. The values of the sparse tensor.
 * @param denseShape: 1-D. The shape of the sparse tensor.
 * @param defaultValue: 0-D. Default value to insert into location [row, 0, ...,
 *     0] for rows missing from the input sparse tensor.
 * @return A map with the following properties:
 *     - outputIndices
 *     - outputValues: 1-D. The values of the filled sparse tensor.
 *     - emptyRowIndicator: 1-D. Whether the dense row was missing in the input
 * sparse tensor.
 *     - reverseIndexMap: 1-D. A map from the input indices to the output
 * indices.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */function(e,t,r,s){let i=(0,o.convertToTensor)(e,"indices","sparseFillEmptyRows","int32"),l=(0,o.convertToTensor)(t,"values","sparseFillEmptyRows"),u=(0,o.convertToTensor)(r,"denseShape","sparseFillEmptyRows","int32"),p=(0,o.convertToTensor)(s,"defaultValue","sparseFillEmptyRows",l.dtype);if(2!==i.rank)throw Error(`Indices should be Tensor2D but received shape
        ${i.shape}`);if(1!==l.rank)throw Error(`Values should be Tensor1D but received shape ${l.shape}`);if(1!==u.rank)throw Error(`Dense shape should be Tensor1D but received shape ${u.shape}`);if(0!==p.rank)throw Error(`Default value should be a scalar but received shape ${p.shape}`);let c=(0,n.ENGINE).runKernel(a.SparseFillEmptyRows,{indices:i,values:l,denseShape:u,defaultValue:p});return{outputIndices:c[0],outputValues:c[1],emptyRowIndicator:c[2],reverseIndexMap:c[3]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lrvgo:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseReshape",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({sparseReshape_:/**
 * This operation has the same semantics as reshape on the represented dense
 * tensor. The `inputIndices` are recomputed based on the requested `newShape`.
 * If one component of `newShape` is the special value -1, the size of that
 * dimension is computed so that the total dense size remains constant. At most
 * one component of `newShape` can be -1. The number of dense elements implied
 * by `newShape` must be the same as the number of dense elements originally
 * implied by `inputShape`. Reshaping does not affect the order of values in the
 * SparseTensor. If the input tensor has rank R_in and N non-empty values, and
 * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],
 * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and
 * `outputShape` has length R_out.
 *
 * ```js
 * const result = tf.sparse.sparseReshape(
 *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],
 *   [2, 3, 6], [9, -1]);
 * console.log(result);
 * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]
 * result['outputShape'].print(); // [9, 4]
 * ```
 * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty
 * values in a SparseTensor.
 * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense
 * shape.
 * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.
 * @return A map with the following properties:
 *     - outputIndices: 2-D. N x R_out matrix with the updated indices of
 *       non-empty values in the output SparseTensor.
 *     - outputShape: 1-D. R_out vector with the full dense shape of the output
 *       SparseTensor. This is the same as newShape but with any -1 dimensions
 *        filled in.
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"inputIndices","sparseReshape","int32"),i=(0,o.convertToTensor)(t,"inputShape","sparseReshape","int32"),l=(0,o.convertToTensor)(r,"newShape","sparseReshape","int32");if(2!==s.rank)throw Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);if(1!==i.rank)throw Error(`Input shape should be Tensor1D but received shape ${i.shape}`);if(1!==l.rank)throw Error(`New shape should be Tensor1D but received shape ${l.shape}`);let u=(0,n.ENGINE).runKernel(a.SparseReshape,{inputIndices:s,inputShape:i,newShape:l});return{outputIndices:u[0],outputShape:u[1]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k3vOX:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentMean",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({sparseSegmentMean_:/**
 * Computes the mean along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentMean(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segments.
 * const result2 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1], 'int32'),
 *                                             tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentMean(c,
 *                                             tf.tensor1d([0, 1, 2], 'int32'),
 *                                             tf.tensor1d([0, 1, 1], 'int32'));
 * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"data","sparseSegmentMean"),i=(0,o.convertToTensor)(t,"indices","sparseSegmentMean","int32"),l=(0,o.convertToTensor)(r,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==i.rank)throw Error(`Indices should be Tensor1D but received shape
          ${i.shape}`);if(1!==l.rank)throw Error(`Segment ids should be Tensor1D but received shape
          ${l.shape}`);return(0,n.ENGINE).runKernel(a.SparseSegmentMean,{data:s,indices:i,segmentIds:l})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"89ScX":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentSum",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({sparseSegmentSum_:/**
 * Computes the sum along sparse segments of a tensor.
 *
 * ```js
 * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);
 * // Select two rows, one segment.
 * const result1 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 0], 'int32'));
 * result1.print(); // [[0, 0, 0, 0]]
 *
 * // Select two rows, two segments.
 * const result2 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1], 'int32'),
 *                                           tf.tensor1d([0, 1], 'int32'));
 * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]
 *
 * // Select all rows, two segments.
 * const result3 = tf.sparse.sparseSegmentSum(c,
 *                                           tf.tensor1d([0, 1, 2], 'int32'),
 *                                           tf.tensor1d([0, 0, 1], 'int32'));
 * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]
 * ```
 * @param data: A Tensor of at least one dimension with data that will be
 *     assembled in the output.
 * @param indices: A 1-D Tensor with indices into data. Has same rank as
 *     segmentIds.
 * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values
 *     should be sorted and can be repeated.
 * @return Has same shape as data, except for dimension 0 which has equal to
 *         the number of segments.
 *
 * @doc {heading: 'Operations', subheading: 'Sparse'}
 */function(e,t,r){let s=(0,o.convertToTensor)(e,"data","sparseSegmentSum"),i=(0,o.convertToTensor)(t,"indices","sparseSegmentSum","int32"),l=(0,o.convertToTensor)(r,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==i.rank)throw Error(`Indices should be Tensor1D but received shape
         ${i.shape}`);if(1!==l.rank)throw Error(`Segment ids should be Tensor1D but received shape
         ${l.shape}`);return(0,n.ENGINE).runKernel(a.SparseSegmentSum,{data:s,indices:i,segmentIds:l})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aX7IE:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringNGrams",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({stringNGrams_:/**
 * Creates ngrams from ragged string data.
 *
 * This op accepts a ragged tensor with 1 ragged dimension containing only
 * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams
 * of that string, joined along the innermost axis.
 *
 * ```js
 * const result = tf.string.stringNGrams(
 *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),
 *   '|', [1, 2], 'LP', 'RP', -1, false);
 * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',
 *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']
 * result['nGramsSplits'].print(); // [0, 5, 10]
 * ```
 * @param data: The values tensor of the ragged string tensor to make ngrams out
 *     of. Must be a 1D string tensor.
 * @param dataSplits: The splits tensor of the ragged string tensor to make
 *     ngrams out of.
 * @param separator: The string to append between elements of the token. Use ""
 *     for no separator.
 * @param nGramWidths: The sizes of the ngrams to create.
 * @param leftPad: The string to use to pad the left side of the ngram sequence.
 *     Only used if pad_width !== 0.
 * @param rightPad: The string to use to pad the right side of the ngram
 *     sequence. Only used if pad_width !== 0.
 * @param padWidth: The number of padding elements to add to each side of each
 *     sequence. Note that padding will never be greater than `nGramWidths`-1
 *     regardless of this value. If `padWidth`=-1, then add max(`nGramWidths`)-1
 *     elements.
 * @param preserveShortSequences: If true, then ensure that at least one ngram
 *     is generated for each input sequence. In particular, if an input sequence
 *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single
 *     ngram containing the entire sequence. If false, then no ngrams are
 *     generated for these short input sequences.
 * @return A map with the following properties:
 *     - nGrams: The values tensor of the output ngrams ragged tensor.
 *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */function(e,t,r,s,i,l,u,p){let c=(0,o.convertToTensor)(e,"data","stringNGrams","string");if("string"!==c.dtype)throw Error("Data must be of datatype string");if(1!==c.shape.length)throw Error(`Data must be a vector, saw: ${c.shape}`);let d=(0,o.convertToTensor)(t,"dataSplits","stringNGrams");if("int32"!==d.dtype)throw Error("Data splits must be of datatype int32");let h=(0,n.ENGINE).runKernel(a.StringNGrams,{data:c,dataSplits:d},{separator:r,nGramWidths:s,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:p});return{nGrams:h[0],nGramsSplits:h[1]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bVJrI:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringSplit",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({stringSplit_:/**
 * Split elements of `input` based on `delimiter` into a SparseTensor .
 *
 * Let N be the size of source (typically N will be the batch size). Split each
 * element of `input` based on `delimiter` and return a SparseTensor containing
 * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.
 *
 * `delimiter` can be empty, or a string of split characters. If `delimiter` is
 * an empty string, each element of `input` is split into individual
 * character strings. Otherwise every character of `delimiter` is a potential
 * split point.
 *
 * ```js
 * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');
 * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]
 * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']
 * result['shape'].print(); // [2, 3]
 * ```
 * @param input: 1-D. Strings to split.
 * @param delimiter: 0-D. Delimiter characters, or empty string.
 * @param skipEmpty: Optional. If true, skip the empty strings from the result.
 *     Defaults to true.
 * @return A map with the following properties:
 *     - indices: A dense matrix of int32 representing the indices of the sparse
 *       tensor.
 *     - values: A vector of strings corresponding to the splited values.
 *     - shape: a length-2 vector of int32 representing the shape of the sparse
 * tensor, where the first value is N and the second value is the maximum number
 * of tokens in a single input entry.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */function(e,t,r=!0){let s=(0,o.convertToTensor)(e,"input","stringSplit","string"),i=(0,o.convertToTensor)(t,"delimiter","stringSplit","string");if(1!==s.rank)throw Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==i.rank)throw Error(`Delimiter should be a scalar but received shape ${i.shape}`);let l=(0,n.ENGINE).runKernel(a.StringSplit,{input:s,delimiter:i},{skipEmpty:r});return{indices:l[0],values:l[1],shape:l[2]}}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9fPqZ":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringToHashBucketFast",()=>l);var n=e("../../engine"),a=e("../../kernel_names"),o=e("../../tensor_util_env"),i=e("../operation");let l=(0,i.op)({stringToHashBucketFast_:/**
 * Converts each string in the input Tensor to its hash mod by a number of
 * buckets.
 *
 * The hash function is deterministic on the content of the string within the
 * process and will never change. However, it is not suitable for cryptography.
 * This function may be used when CPU time is scarce and inputs are trusted or
 * unimportant. There is a risk of adversaries constructing inputs that all hash
 * to the same bucket.
 *
 * ```js
 * const result = tf.string.stringToHashBucketFast(
 *   ['Hello', 'TensorFlow', '2.x'], 3);
 * result.print(); // [0, 2, 2]
 * ```
 * @param input: The strings to assign a hash bucket.
 * @param numBuckets: The number of buckets.
 * @return A Tensor of the same shape as the input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'String'}
 */function(e,t){let r=(0,o.convertToTensor)(e,"input","stringToHashBucketFast","string");if(t<=0)throw Error("Number of buckets must be at least 1");return(0,n.ENGINE).runKernel(a.StringToHashBucketFast,{input:r},{numBuckets:t})}})},{"../../engine":"ldVRX","../../kernel_names":"3i501","../../tensor_util_env":"9iWFD","../operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ib0QT:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */s.export(r,"Optimizer",()=>l);var n=e("../globals"),a=e("../gradients"),o=e("../ops/ops"),i=e("../serialization");class l extends i.Serializable{/**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */minimize(e,t=!1,r){let{value:s,grads:a}=this.computeGradients(e,r);if(null!=r){let e=r.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return(// Dispose gradients.
(0,n.dispose)(a),t)?s:(s.dispose(),null)}/**
     * The number of iterations that this optimizer instance has been invoked for.
     */get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}/**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */computeGradients(e,t){return(0,a.variableGrads)(e,t)}/**
     * Dispose the variables (if any) owned by this optimizer instance.
     */dispose(){null!=this.iterations_&&(0,n.dispose)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",// TODO(cais): Use 'int64' type when available.
tensor:(0,o.scalar)(this.iterations_,"int32")}}async getWeights(){throw Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}/**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(l,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients})},{"../globals":"75Rqm","../gradients":"dqgxj","../ops/ops":"iXIBS","../serialization":"jZUhL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ePsdH:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doclink Optimizer */s.export(r,"AdagradOptimizer",()=>f);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/div"),l=e("../ops/fill"),u=e("../ops/mul"),p=e("../ops/sqrt"),c=e("../ops/square"),d=e("../serialization"),h=e("./optimizer");class f extends h.Optimizer{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,r)=>{let s=n.ENGINE.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accumulator`,variable:(0,a.tidy)(()=>(0,l.fill)(s.shape,this.initialAccumulatorValue).variable(!1))});let d=Array.isArray(e)?e[r].tensor:e[t];if(null==d)return;let h=this.accumulatedGrads[r].variable;(0,a.tidy)(()=>{let e=(0,o.add)(h,(0,c.square)(d));h.assign(e);let t=(0,o.add)((0,u.mul)((0,i.div)(d,(0,p.sqrt)((0,o.add)(e,(0,n.ENGINE).backend.epsilon()))),-this.learningRate),s);s.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,a.dispose)(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){// Order matters for Python compatibility.
return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}/** @nocollapse */f.className="Adagrad",(0,d.registerClass)(f)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/div":"9dy6L","../ops/fill":"bXOoe","../ops/mul":"9ihSJ","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jeFGD:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AdamOptimizer",()=>x);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/pow"),p=e("../ops/scalar"),c=e("../ops/sqrt"),d=e("../ops/square"),h=e("../ops/sub"),f=e("../ops/zeros_like"),m=e("../serialization"),g=e("./optimizer");class x extends g.Optimizer{constructor(e,t,r,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,a.tidy)(()=>{// accB* will be updated by batch.
this.accBeta1=(0,p.scalar)(t).variable(),this.accBeta2=(0,p.scalar)(r).variable()}),null==s&&(this.epsilon=(0,n.ENGINE).backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);(0,a.tidy)(()=>{let r=(0,h.sub)(1,this.accBeta1),s=(0,h.sub)(1,this.accBeta2);t.forEach((t,u)=>{let p=n.ENGINE.registeredVariables[t];null==this.accumulatedFirstMoment[u]&&(this.accumulatedFirstMoment[u]={originalName:`${t}/m`,variable:(0,a.tidy)(()=>(0,f.zerosLike)(p).variable(!1))}),null==this.accumulatedSecondMoment[u]&&(this.accumulatedSecondMoment[u]={originalName:`${t}/v`,variable:(0,a.tidy)(()=>(0,f.zerosLike)(p).variable(!1))});let h=Array.isArray(e)?e[u].tensor:e[t];if(null==h)return;let m=this.accumulatedFirstMoment[u].variable,g=this.accumulatedSecondMoment[u].variable,x=(0,o.add)((0,l.mul)(m,this.beta1),(0,l.mul)(h,1-this.beta1)),b=(0,o.add)((0,l.mul)(g,this.beta2),(0,l.mul)((0,d.square)(h),1-this.beta2)),y=(0,i.div)(x,r),j=(0,i.div)(b,s);m.assign(x),g.assign(b);let _=(0,o.add)((0,l.mul)((0,i.div)(y,(0,o.add)((0,c.sqrt)(j),this.epsilon)),-this.learningRate),p);p.assign(_)}),this.accBeta1.assign((0,l.mul)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,l.mul)(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,a.dispose)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&(0,a.dispose)(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){// Order matters for Python compatibility.
let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),(0,a.tidy)(()=>{this.accBeta1.assign((0,u.pow)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,u.pow)(this.beta2,this.iterations_+1))});let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}/** @nocollapse */x.className="Adam",(0,m.registerClass)(x)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/pow":"16YAi","../ops/scalar":"8NgrS","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../ops/sub":"gYa0B","../ops/zeros_like":"lVjfh","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],zCNEi:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AdamaxOptimizer",()=>g);var n=e("../engine"),a=e("../globals"),o=e("../ops/abs"),i=e("../ops/add"),l=e("../ops/div"),u=e("../ops/maximum"),p=e("../ops/mul"),c=e("../ops/scalar"),d=e("../ops/sub"),h=e("../ops/zeros_like"),f=e("../serialization"),m=e("./optimizer");class g extends m.Optimizer{constructor(e,t,r,s=null,o=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=s,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,a.tidy)(()=>{this.iteration=(0,c.scalar)(0).variable(),this.accBeta1=(0,c.scalar)(t).variable()}),null==s&&(this.epsilon=(0,n.ENGINE).backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);(0,a.tidy)(()=>{let r=(0,d.sub)(1,this.accBeta1),s=(0,l.div)(-this.learningRate,(0,i.add)((0,p.mul)(this.iteration,this.decay),1));t.forEach((t,a)=>{let c=n.ENGINE.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,h.zerosLike)(c).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,h.zerosLike)(c).variable(!1)});let d=Array.isArray(e)?e[a].tensor:e[t];if(null==d)return;let f=this.accumulatedFirstMoment[a].variable,m=this.accumulatedWeightedInfNorm[a].variable,g=(0,i.add)((0,p.mul)(f,this.beta1),(0,p.mul)(d,1-this.beta1)),x=(0,p.mul)(m,this.beta2),b=(0,o.abs)(d),y=(0,u.maximum)(x,b);f.assign(g),m.assign(y);let j=(0,i.add)((0,p.mul)((0,l.div)(s,r),(0,l.div)(g,(0,i.add)(y,this.epsilon))),c);c.assign(j)}),this.iteration.assign((0,i.add)(this.iteration,1)),this.accBeta1.assign((0,p.mul)(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,a.dispose)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&(0,a.dispose)(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}/** @nocollapse */g.className="Adamax",(0,f.registerClass)(g)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/abs":"j8viR","../ops/add":"lQRCK","../ops/div":"9dy6L","../ops/maximum":"jM2LY","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/sub":"gYa0B","../ops/zeros_like":"lVjfh","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kU5Zz:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doclink Optimizer */s.export(r,"MomentumOptimizer",()=>d);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/mul"),l=e("../ops/scalar"),u=e("../ops/zeros_like"),p=e("../serialization"),c=e("./sgd_optimizer");class d extends c.SGDOptimizer{constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=(0,l.scalar)(this.momentum)}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,r)=>{let s=n.ENGINE.registeredVariables[t];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${t}/momentum`,variable:(0,a.tidy)(()=>(0,u.zerosLike)(s).variable(!1))});let l=this.accumulations[r].variable,p=Array.isArray(e)?e[r].tensor:e[t];null!=p&&(0,a.tidy)(()=>{let e;let t=(0,o.add)((0,i.mul)(this.m,l),p);e=this.useNesterov?(0,o.add)((0,i.mul)(this.c,(0,o.add)(p,(0,i.mul)(t,this.m))),s):(0,o.add)((0,i.mul)(this.c,t),s),l.assign(t),s.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,a.dispose)(this.accumulations.map(e=>e.variable))}/**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */setMomentum(e){this.momentum=e}async getWeights(){// Order matters for Python compatibility.
return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}/** @nocollapse */d.className="Momentum",(0,p.registerClass)(d)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/zeros_like":"lVjfh","../serialization":"jZUhL","./sgd_optimizer":"hxaNx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hxaNx:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doclink Optimizer */s.export(r,"SGDOptimizer",()=>c);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/mul"),l=e("../ops/scalar"),u=e("../serialization"),p=e("./optimizer");class c extends p.Optimizer{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,r)=>{let s=Array.isArray(e)?e[r].tensor:e[t];if(null==s)return;let l=n.ENGINE.registeredVariables[t];(0,a.tidy)(()=>{let e=(0,o.add)((0,i.mul)(this.c,s),l);l.assign(e)})}),this.incrementIterations()}/**
     * Sets the learning rate of the optimizer.
     */setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,a.keep)((0,l.scalar)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate)}}/** @nocollapse */c.className="SGD",(0,u.registerClass)(c)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fEyJz:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"OptimizerConstructors",()=>c);var n=e("./adadelta_optimizer"),a=e("./adagrad_optimizer"),o=e("./adam_optimizer"),i=e("./adamax_optimizer"),l=e("./momentum_optimizer"),u=e("./rmsprop_optimizer"),p=e("./sgd_optimizer");class c{/**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static sgd(e){return new p.SGDOptimizer(e)}/**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static momentum(e,t,r=!1){return new l.MomentumOptimizer(e,t,r)}/**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static rmsprop(e,t=.9,r=0,s=null,n=!1){return new u.RMSPropOptimizer(e,t,r,s,n)}/**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static adam(e=.001,t=.9,r=.999,s=null){return new o.AdamOptimizer(e,t,r,s)}/**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static adadelta(e=.001,t=.95,r=null){return new n.AdadeltaOptimizer(e,t,r)}/**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static adamax(e=.002,t=.9,r=.999,s=null,n=0){return new i.AdamaxOptimizer(e,t,r,s,n)}/**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */static adagrad(e,t=.1){return new a.AdagradOptimizer(e,t)}}},{"./adadelta_optimizer":"bjl4q","./adagrad_optimizer":"ePsdH","./adam_optimizer":"jeFGD","./adamax_optimizer":"zCNEi","./momentum_optimizer":"kU5Zz","./rmsprop_optimizer":"7pOOq","./sgd_optimizer":"hxaNx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7pOOq":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/** @doclink Optimizer */s.export(r,"RMSPropOptimizer",()=>m);var n=e("../engine"),a=e("../globals"),o=e("../ops/add"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/sqrt"),p=e("../ops/square"),c=e("../ops/sub"),d=e("../ops/zeros_like"),h=e("../serialization"),f=e("./optimizer");class m extends f.Optimizer{constructor(e,t=.9,r=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=(0,n.ENGINE).backend.epsilon()),null==e)throw Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,r)=>{let s=n.ENGINE.registeredVariables[t];null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${t}/rms`,variable:(0,a.tidy)(()=>(0,d.zerosLike)(s).variable(!1))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${t}/momentum`,variable:(0,a.tidy)(()=>(0,d.zerosLike)(s).variable(!1))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${t}/mg`,variable:(0,a.tidy)(()=>(0,d.zerosLike)(s).variable(!1))});let h=Array.isArray(e)?e[r].tensor:e[t];if(null==h)return;let f=this.accumulatedMeanSquares[r].variable,m=this.accumulatedMoments[r].variable;(0,a.tidy)(()=>{let e=(0,o.add)((0,l.mul)(f,this.decay),(0,l.mul)((0,p.square)(h),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[r].variable,n=(0,o.add)((0,l.mul)(t,this.decay),(0,l.mul)(h,1-this.decay)),a=(0,i.div)((0,l.mul)(h,this.learningRate),(0,u.sqrt)((0,c.sub)(e,(0,o.add)((0,p.square)(n),this.epsilon)))),d=(0,o.add)((0,l.mul)(m,this.momentum),a);f.assign(e),t.assign(n),m.assign(d);let g=(0,c.sub)(s,d);s.assign(g)}else{// Plain gradient
let e=(0,o.add)((0,l.mul)(f,this.decay),(0,l.mul)((0,p.square)(h),1-this.decay)),t=(0,o.add)((0,l.mul)(m,this.momentum),(0,i.div)((0,l.mul)(h,this.learningRate),(0,u.sqrt)((0,o.add)(e,this.epsilon))));f.assign(e),m.assign(t);let r=(0,c.sub)(s,t);s.assign(r)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,a.dispose)(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&(0,a.dispose)(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&(0,a.dispose)(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){// Order matters for Python compatibility.
let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}/** @nocollapse */static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}/** @nocollapse */m.className="RMSProp",(0,h.registerClass)(m)},{"../engine":"ldVRX","../globals":"75Rqm","../ops/add":"lQRCK","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../ops/sub":"gYa0B","../ops/zeros_like":"lVjfh","../serialization":"jZUhL","./optimizer":"ib0QT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lpkM3:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// So typings can propagate.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"train",()=>a),e("./optimizers/adadelta_optimizer"),e("./optimizers/adagrad_optimizer"),e("./optimizers/adam_optimizer"),e("./optimizers/adamax_optimizer"),e("./optimizers/momentum_optimizer");var n=e("./optimizers/optimizer_constructors");e("./optimizers/rmsprop_optimizer"),e("./optimizers/sgd_optimizer");let a={sgd:n.OptimizerConstructors.sgd,momentum:n.OptimizerConstructors.momentum,adadelta:n.OptimizerConstructors.adadelta,adagrad:n.OptimizerConstructors.adagrad,rmsprop:n.OptimizerConstructors.rmsprop,adamax:n.OptimizerConstructors.adamax,adam:n.OptimizerConstructors.adam}},{"./optimizers/adadelta_optimizer":"bjl4q","./optimizers/adagrad_optimizer":"ePsdH","./optimizers/adam_optimizer":"jeFGD","./optimizers/adamax_optimizer":"zCNEi","./optimizers/momentum_optimizer":"kU5Zz","./optimizers/optimizer_constructors":"fEyJz","./optimizers/rmsprop_optimizer":"7pOOq","./optimizers/sgd_optimizer":"hxaNx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hXpMe:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nextFrame",()=>a);let n="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();/**
 * Returns a promise that resolves when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */function a(){return new Promise(e=>n(()=>e()))}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ajgZQ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"upcastType",()=>h.upcastType),s.export(r,"slice_util",()=>d),s.export(r,"segment_util",()=>T),s.export(r,"fromUint8ToStringArray",()=>N),s.export(r,"fromStringArrayToUint8",()=>E);var n=e("../util"),a=e("../ops/axis_util");s.exportAll(a,r);var o=e("../ops/broadcast_util");s.exportAll(o,r);var i=e("../ops/concat_util");s.exportAll(i,r);var l=e("../ops/conv_util");s.exportAll(l,r);var u=e("../ops/fused_util");s.exportAll(u,r);var p=e("../ops/ragged_to_dense_util");s.exportAll(p,r);var c=e("../ops/reduce_util");s.exportAll(c,r);var d=e("../ops/slice_util"),h=e("../types"),f=e("../ops/rotate_util");s.exportAll(f,r);var m=e("../ops/array_ops_util");s.exportAll(m,r);var g=e("../ops/gather_nd_util");s.exportAll(g,r);var x=e("../ops/scatter_nd_util");s.exportAll(x,r);var b=e("../ops/selu_util");s.exportAll(b,r),s.exportAll(u,r);var y=e("../ops/erf_util");s.exportAll(y,r);var j=e("../log");s.exportAll(j,r);var _=e("../backends/complex_util");s.exportAll(_,r);var k=e("../backends/einsum_util");s.exportAll(k,r);var I=e("../ops/split_util");s.exportAll(I,r);var w=e("../ops/sparse/sparse_fill_empty_rows_util");s.exportAll(w,r);var C=e("../ops/sparse/sparse_reshape_util");s.exportAll(C,r);var S=e("../ops/sparse/sparse_segment_reduction_util");s.exportAll(S,r);var T=e("../ops/segment_util");function N(e){try{// Decode the bytes into string.
return e.map(e=>(0,n.decodeString)(e))}catch(e){throw Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function E(e){return e.map(e=>(0,n.encodeString)(e))}},{"../util":"6bzqD","../ops/axis_util":"9ZcyD","../ops/broadcast_util":"jK3Iv","../ops/concat_util":"42Tzx","../ops/conv_util":"cCem6","../ops/fused_util":"6fYPP","../ops/ragged_to_dense_util":"i2r0u","../ops/reduce_util":"3h83X","../ops/slice_util":"gE25O","../types":"4gWh6","../ops/rotate_util":"g2sSo","../ops/array_ops_util":"h7gAP","../ops/gather_nd_util":"dxOzC","../ops/scatter_nd_util":"64SNi","../ops/selu_util":"hezHs","../ops/erf_util":"8n9Qf","../log":"1unlX","../backends/complex_util":"54dT0","../backends/einsum_util":"iNkUr","../ops/split_util":"7MJnG","../ops/sparse/sparse_fill_empty_rows_util":"2TsKi","../ops/sparse/sparse_reshape_util":"fBda2","../ops/sparse/sparse_segment_reduction_util":"6jTRp","../ops/segment_util":"aTW7G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"42Tzx":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"assertParamsConsistent",()=>a),s.export(r,"computeOutShape",()=>o);var n=e("../util");function a(e,t){let r=e[0].length;e.forEach((e,t)=>{n.assert(e.length===r,()=>`Error in concat${r}D: rank of tensors[${t}] must be the same as the rank of the rest (${r})`)}),n.assert(t>=0&&t<r,()=>`Error in concat${r}D: axis must be between 0 and ${r-1}.`);let s=e[0];e.forEach((e,a)=>{for(let o=0;o<r;o++)n.assert(o===t||e[o]===s[o],()=>`Error in concat${r}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`)})}function o(e,t){let r=e[0].slice();for(let s=1;s<e.length;s++)r[t]+=e[s][t];return r}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i2r0u:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s,n,a=e("@parcel/transformer-js/src/esmodule-helpers.js");function o(e,t,r){// Test for consistency of valueShape and shape specified.
// If shape is unspecified and valueShape is specified, then copy
// over the size from the valueShape dimension.
let s=[];if(null==r&&null==t)return s;if(null==t)for(;s.length<e+r.length;)s.push(-1);else s=t.slice();if(null==r)return s;// At this point, valueShape and output_shape have known ranks.
if(e+r.length!==s.length)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+r.length}, but shape.rank = ${s.length}`);for(let n=1;n<r.length;++n){let a=r[n],o=s[s.length-r.length+n],i=s[o];if(a>=0){if(i>=0){if(i!==a)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+e}] = ${a} but shape[${n+e}] = ${i}`)}else s[o]=a}}return s}function i(e){let t={FIRST_DIM_SIZE:n.FIRST_DIM_SIZE,VALUE_ROWIDS:n.VALUE_ROWIDS,ROW_LENGTHS:n.ROW_LENGTHS,ROW_SPLITS:n.ROW_SPLITS,ROW_LIMITS:n.ROW_LIMITS,ROW_STARTS:n.ROW_STARTS},r=[];for(let s of e)if(s in t)r.push(t[s]);else break;return r}function l(e){return 0===e.length?0:e[0]===n.FIRST_DIM_SIZE?e.length-1:e.length}function u(e,t){if(null==e||null==t)return;let r=e.length,s=t.length;if(r>=s)throw Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${r} must be less than ragged tensor input flatValues.rank = ${s})`);for(let n=0;n<Math.min(r,s-1);++n){let r=e[n],s=t[n+1];if(r>=0&&s>=0&&1!==r&&r!==s)throw Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-e.length}] = ${r} but ragged tensor input.flatValues.shape[${n-e.length}] = ${s}`)}}a.defineInteropFlag(r),a.export(r,"RowPartitionType",()=>n),a.export(r,"combineRaggedTensorToTensorShapes",()=>o),a.export(r,"getRowPartitionTypesHelper",()=>i),a.export(r,"getRaggedRank",()=>l),a.export(r,"validateDefaultValueShape",()=>u),(s=n||(n={}))[s.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",s[s.VALUE_ROWIDS=1]="VALUE_ROWIDS",s[s.ROW_LENGTHS=2]="ROW_LENGTHS",s[s.ROW_SPLITS=3]="ROW_SPLITS",s[s.ROW_LIMITS=4]="ROW_LIMITS",s[s.ROW_STARTS=5]="ROW_STARTS"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3h83X":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PARALLELIZE_THRESHOLD",()=>a),s.export(r,"computeOptimalWindowSize",()=>o);var n=e("../util");let a=30;function o(e){return e<=a?e:(0,n.nearestDivisor)(e,Math.floor(Math.sqrt(e)))}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g2sSo:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Returns the image center in pixels.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t,r){let s=r*("number"==typeof e?e:e[0]),n=t*("number"==typeof e?e:e[1]);return[s,n]}s.defineInteropFlag(r),s.export(r,"getImageCenter",()=>n)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h7gAP:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t,r,s=!0){let n=[];if(s)(n=n.concat(t.slice(0))).push(e[0]/r),n=n.concat(e.slice(1));else{n=n.concat(e[0]);let r=t.length;for(let s=0;s<r;++s)n=n.concat([e[s+1]/t[s],t[s]]);n=n.concat(e.slice(r+1))}return n}function a(e,t,r=!0){let s=[];if(r){s.push(t);for(let r=t+1;r<e;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{let r=[],n=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?n.push(s):r.push(s);s.push(...r),s.push(0),s.push(...n)}return s}function o(e,t,r,s=!0){let n=[];s?n.push(e[0]/r):n.push(e[0]*r);for(let r=1;r<e.length;++r)r<=t.length?s?n.push(t[r-1]*e[r]):n.push(e[r]/t[r-1]):n.push(e[r]);return n}function i(e,t){let r=[0];for(let s=0;s<t;++s)r.push(e[s][0]);return r}function l(e,t,r){let s=e.slice(0,1);for(let n=0;n<r;++n)s.push(e[n+1]-t[n][0]-t[n][1]);return s}s.defineInteropFlag(r),s.export(r,"getReshaped",()=>n),/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */s.export(r,"getPermuted",()=>a),/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */s.export(r,"getReshapedPermuted",()=>o),/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */s.export(r,"getSliceBeginCoords",()=>i),/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */s.export(r,"getSliceSize",()=>l)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hezHs:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SELU_SCALEALPHA",()=>n),s.export(r,"SELU_SCALE",()=>a);let n=1.7580993408473768,a=1.0507009873554805},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8n9Qf":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ERF_P",()=>n),s.export(r,"ERF_A1",()=>a),s.export(r,"ERF_A2",()=>o),s.export(r,"ERF_A3",()=>i),s.export(r,"ERF_A4",()=>l),s.export(r,"ERF_A5",()=>u);let n=.3275911,a=.254829592,o=-.284496736,i=1.421413741,l=-1.453152027,u=1.061405429},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"54dT0":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t){if(e.length!==t.length)throw Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let r=new Float32Array(2*e.length);for(let s=0;s<r.length;s+=2)r[s]=e[s/2],r[s+1]=t[s/2];return r}function a(e){let t=new Float32Array(e.length/2),r=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],r[s/2]=e[s+1];return{real:t,imag:r}}function o(e){let t=Math.ceil(e.length/4),r=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:r,imag:s}}function i(e){let t=Math.floor(e.length/4),r=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:r,imag:s}}function l(e,t){let r=e[2*t],s=e[2*t+1];return{real:r,imag:s}}function u(e,t,r,s){e[2*s]=t,e[2*s+1]=r}function p(e,t){let r=new Float32Array(e/2),s=new Float32Array(e/2);for(let n=0;n<Math.ceil(e/2);n++){let a=(t?2:-2)*Math.PI*(n/e);r[n]=Math.cos(a),s[n]=Math.sin(a)}return{real:r,imag:s}}function c(e,t,r){let s=(r?2:-2)*Math.PI*(e/t),n=Math.cos(s),a=Math.sin(s);return{real:n,imag:a}}s.defineInteropFlag(r),s.export(r,"mergeRealAndImagArrays",()=>n),/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */s.export(r,"splitRealAndImagArrays",()=>a),/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */s.export(r,"complexWithEvenIndex",()=>o),/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */s.export(r,"complexWithOddIndex",()=>i),/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */s.export(r,"getComplexWithIndex",()=>l),/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */s.export(r,"assignToTypedArray",()=>u),/**
 * Make the list of exponent terms used by FFT.
 */s.export(r,"exponents",()=>p),/**
 * Make the exponent term used by FFT.
 */s.export(r,"exponent",()=>c)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iNkUr:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Parse an equation for einsum.
 *
 * @param equation The einsum equation (e.g., "ij,jk->ik").
 * @param numTensors Number of tensors provided along with `equation`. Used to
 *   check matching number of input tensors.
 * @returns An object consisting of the following fields:
 *   - allDims: all dimension names as strings.
 *   - summedDims: a list of all dimensions being summed over, as indices to
 *     the elements of `allDims`.
 *   - idDims: indices of the dimensions in each input tensor, as indices to
 *     the elements of `allDims.
 */s.export(r,"decodeEinsumEquation",()=>o),/**
 * Get the permutation for a given input tensor.
 *
 * @param nDims Total number of dimension of all tensors involved in the einsum
 *   operation.
 * @param idDims Dimension indices involve in the tensor in question.
 * @returns An object consisting of the following fields:
 *   - permutationIndices: Indices to permute the axes of the tensor with.
 *   - expandDims: Indices to the dimension that need to be expanded from the
 *     tensor after permutation.
 */s.export(r,"getEinsumPermutation",()=>i),/**
 * Checks that the dimension sizes from different input tensors match the
 * equation.
 */s.export(r,"checkEinsumDimSizes",()=>l),/**
 * Gets path of computation for einsum.
 *
 * @param summedDims indices to the dimensions being summed over.
 * @param idDims A look up table for the dimensions present in each input
 *     tensor. Each consituent array contains indices for the dimensions in the
 *     corresponding input tensor.
 *
 * @return A map with two fields:
 *   - path: The path of computation, with each element indicating the dimension
 *     being summed over after the element-wise multiplication in that step.
 *   - steps: With the same length as `path`. Each element contains the indices
 *     to the input tensors being used for element-wise multiplication in the
 *     corresponding step.
 */s.export(r,"getEinsumComputePath",()=>u),/** Determines if an axes permutation is the identity permutation. */s.export(r,"isIdentityPermutation",()=>p);var n=e("../util_base");let a=/->/g;function o(e,t){e=e.replace(/\s/g,"");// Remove witespace in equation.
let r=(e.length-e.replace(a,"").length)/2;if(r<1)throw Error("Equations without an arrow are not supported.");if(r>1)throw Error('Equation must contain exactly one arrow ("->").');let[s,o]=e.split("->");(0,n.assert)(-1===s.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');let i=s.split(","),l=i.length;if(t!==l)throw Error(`Expected ${l} input tensors, received ${t}`);if(l>2)throw Error("Support for more than 2 input tensors is not implemented yet.");let u=[];for(let e=0;e<o.length;++e){let t=o[e];if(!i.some(e=>-1!==e.indexOf(t)))throw Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===u.indexOf(t)&&u.push(t)}for(let e=0;e<s.length;++e){let t=s[e];-1===u.indexOf(t)&&","!==t&&u.push(t)}let p=Array(i.length);for(let e=0;e<l;++e){if(new Set(i[e].split("")).size!==i[e].length)throw Error(`Found duplicate axes in input component ${i[e]}. Support for duplicate axes in input is not implemented yet.`);p[e]=[];for(let t=0;t<i[e].length;++t)p[e].push(u.indexOf(i[e][t]))}let c=u.length,d=o.length,h=[];// Number of unique dimensions.
for(let e=d;e<c;++e)h.push(e);return{allDims:u,summedDims:h,idDims:p}}function i(e,t){let r=Array(e);r.fill(-1);for(let e=0;e<t.length;++e)r[t[e]]=e;let s=[];for(let t=0;t<e;++t)-1===r[t]&&s.push(t);return{permutationIndices:r=r.filter(e=>-1!==e),expandDims:s}}function l(e,t,r){let s=Array(e);for(let e=0;e<r.length;++e){let a=r[e].shape;for(let r=0;r<t[e].length;++r)void 0===s[t[e][r]]?s[t[e][r]]=a[r]:(0,n.assert)(s[t[e][r]]===a[r],()=>`Expected dimension ${s[t[e][r]]} at axis ${r} of input shaped ${JSON.stringify(a)}, but got dimension ${a[r]}`)}}function u(e,t){let r=[],s=0;0===e.length&&e.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);let n=[];for(let s=0;s<e.length;++s){let a=e[s],o=function(e,t){let r=[];for(let s=0;s<e.length;++s)(0===e[s].length||-1!==e[s].indexOf(t)||-1===t)&&r.push(s);return r}(t,a);for(let e of o)-1===n.indexOf(e)&&(r[s].push(e),n.push(e))}return{path:e,steps:r}}function p(e){return e.every((e,t)=>e===t)}},{"../util_base":"hdTgZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7MJnG":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */s.export(r,"prepareSplitSize",()=>a);var n=e("../util");function a(e,t,r=0){let s=[];if("number"==typeof t)(0,n.assert)(e.shape[r]%t==0,()=>"Number of splits must evenly divide the axis."),s=Array(t).fill(e.shape[r]/t);else{let a=t.reduce((e,t)=>(-1===t&&(e+=1),e),0);(0,n.assert)(a<=1,()=>"There should be only one negative value in split array.");let o=t.indexOf(-1);// Allow the number of split array to be -1, which indicates the rest
// of dimension is allocated to that split.
if(-1!==o){let s=t.reduce((e,t)=>t>0?e+t:e);t[o]=e.shape[r]-s}(0,n.assert)(e.shape[r]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}},{"../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2TsKi":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Generates sparse fill empty rows indices, dense shape mismatch error message.
 *
 * @param indicesLength The first dimension of indices.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`}function a(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function o(e,t,r){return`indices(${e}, 0) is invalid: ${t} >= ${r}`}s.defineInteropFlag(r),s.export(r,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",()=>n),/**
 * Generates sparse fill empty rows negative index error message.
 *
 * @param index The index with a negative value.
 * @param value The negative value.
 */s.export(r,"getSparseFillEmptyRowsNegativeIndexErrorMessage",()=>a),/**
 * Generates sparse fill empty rows out of range index error message.
 *
 * @param index The index with an out of range value.
 * @param value The out of range value.
 * @param limit The upper limit for indices.
 */s.export(r,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",()=>o)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fBda2:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Generates sparse reshape multiple negative 1 output dimension error message.
 *
 * @param dim1 The first dimension with a negative 1 value.
 * @param dim2 The second dimension with a negative 1 value.
 */s.export(r,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",()=>a),/**
 * Generates sparse reshape negative output dimension error message.
 *
 * @param dim The dimension with a negative value.
 * @param value The negative value.
 */s.export(r,"getSparseReshapeNegativeOutputDimErrorMessage",()=>o),/**
 * Generates sparse reshape empty tensor zero output dimension error message.
 *
 */s.export(r,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",()=>i),/**
 * Generates sparse reshape input output multiple mismatch error message.
 *
 * @param inputShape the input shape.
 * @param outputShape the requested output shape.
 */s.export(r,"getSparseReshapeInputOutputMultipleErrorMessage",()=>l),/**
 * Generates sparse reshape input output inequality error message.
 *
 * @param inputShape the input shape.
 * @param outputShape the requested output shape.
 */s.export(r,"getSparseReshapeInputOutputMismatchErrorMessage",()=>u);var n=e("../../util");function a(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function o(e,t){return`size ${e} must be non-negative, not ${t}`}function i(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function l(e,t){let r=(0,n.sizeFromShape)(e),s=(0,n.sizeFromShape)(t);return`Input to reshape is a SparseTensor with ${r}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${e} outputShape= ${t}`}function u(e,t){let r=(0,n.sizeFromShape)(e),s=(0,n.sizeFromShape)(t);return`Input to reshape is a tensor with ${r} dense values, but the requested shape has ${s}. inputShape=${e} outputShape=${t}`}},{"../../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6jTRp":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * Generates sparse segment reduction negative segment ids error message.
 *
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(){return"segment ids must be >= 0"}function a(){return"segment ids are not increasing"}function o(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function i(e,t,r){return`Bad: indices[${e}] == ${t} out of range [0, ${r})`}s.defineInteropFlag(r),s.export(r,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",()=>n),/**
 * Generates sparse segment reduction non increasing segment ids error message.
 *
 */s.export(r,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",()=>a),/**
 * Generates sparse segment reduction segment id out of range error message.
 *
 * @param segmentId The segment id index that is out of range.
 * @param outputRows Upper bound of valid segment id values.
 */s.export(r,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",()=>o),/**
 * Generates sparse segment reduction input indice out of range error message.
 *
 * @param index The index that holds the out of range value.
 * @param indexValue The value that is out of range.
 * @param inputRows Upper bound of valid index values.
 */s.export(r,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",()=>i)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aTW7G:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"segOpComputeOptimalWindowSize",()=>o),s.export(r,"computeOutShape",()=>i),s.export(r,"collectGatherOpShapeInfo",()=>l);var n=e("../util"),a=e("./reduce_util");function o(e,t){let r,s=!1;for(e<=a.PARALLELIZE_THRESHOLD?(r=e,s=!0):r=(0,n.nearestDivisor)(e,Math.floor(Math.sqrt(e)));!s;)r>t||r===e?s=!0:r=(0,n.nearestDivisor)(e,r+1);return r}function i(e,t,r){let s=[],n=e.length;for(let a=0;a<n;a++)a!==t?s.push(e[a]):s.push(r);return s}function l(e,t,r,s){let n=t.shape.length,a=e.shape.length;if(0!==s&&(s<-n||s>n))throw Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${s}`);if(s<0&&(s+=n),s>a)throw Error(`batchDims (${s}) must be less than rank(x) (
    ${a}).`);if(r<s)throw Error(`batchDims (${s}) must be less than or equal to axis (${r}).`);for(let r=0;r<s;++r)if(e.shape[r]!==t.shape[r])throw Error(`x.shape[${r}]: ${e.shape[r]} should be equal to indices.shape[${r}]: ${t.shape[r]}.`);let o=e.shape[r],i=[],l=1,u=1,p=1;for(let t=0;t<s;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<r;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<n;e++)i.push(t.shape[e]);for(let t=r+1;t<a;t++)i.push(e.shape[t]),p*=e.shape[t];return{batchSize:l,sliceSize:p,outerSize:u,dimSize:o,outputShape:i}}},{"../util":"6bzqD","./reduce_util":"3h83X","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Q3sv":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV3Impl",()=>n.nonMaxSuppressionV3Impl),s.export(r,"nonMaxSuppressionV4Impl",()=>n.nonMaxSuppressionV4Impl),s.export(r,"nonMaxSuppressionV5Impl",()=>n.nonMaxSuppressionV5Impl),s.export(r,"whereImpl",()=>a.whereImpl);var n=e("./non_max_suppression_impl"),a=e("./where_impl")},{"./non_max_suppression_impl":"bQ1Oy","./where_impl":"gVSwl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9klHr":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"CallbackList",()=>p.CallbackList),s.export(r,"CustomCallback",()=>p.CustomCallback),s.export(r,"History",()=>p.History),s.export(r,"Callback",()=>c.Callback),s.export(r,"callbacks",()=>c.callbacks),s.export(r,"EarlyStopping",()=>c.EarlyStopping),s.export(r,"InputSpec",()=>d.InputSpec),s.export(r,"SymbolicTensor",()=>d.SymbolicTensor),s.export(r,"LayersModel",()=>h.LayersModel),s.export(r,"input",()=>f.input),s.export(r,"loadLayersModel",()=>f.loadLayersModel),s.export(r,"model",()=>f.model),s.export(r,"registerCallbackConstructor",()=>f.registerCallbackConstructor),s.export(r,"sequential",()=>f.sequential),s.export(r,"RNN",()=>m.RNN),s.export(r,"Sequential",()=>g.Sequential),s.export(r,"LayerVariable",()=>x.LayerVariable),s.export(r,"version_layers",()=>b.version),s.export(r,"constraints",()=>n),s.export(r,"initializers",()=>a),s.export(r,"layers",()=>o),s.export(r,"metrics",()=>i),s.export(r,"models",()=>l),s.export(r,"regularizers",()=>u),e("./flags_layers"),e("@tensorflow/tfjs-core"),e("@tensorflow/tfjs-core/dist/register_all_gradients");// This file lists all exports of TensorFlow.js Layers
var n=e("./exports_constraints"),a=e("./exports_initializers"),o=e("./exports_layers"),i=e("./exports_metrics"),l=e("./exports_models"),u=e("./exports_regularizers"),p=e("./base_callbacks"),c=e("./callbacks"),d=e("./engine/topology"),h=e("./engine/training"),f=e("./exports"),m=e("./layers/recurrent"),g=e("./models"),x=e("./variables"),b=e("./version")},{"./flags_layers":"cUSqT","@tensorflow/tfjs-core":"U1ela","@tensorflow/tfjs-core/dist/register_all_gradients":"i75nt","./exports_constraints":"jo25F","./exports_initializers":"9MrE6","./exports_layers":"aVGRn","./exports_metrics":"Stmcv","./exports_models":"lPwrE","./exports_regularizers":"k1pOa","./base_callbacks":"hD10S","./callbacks":"394Hi","./engine/topology":"3moPG","./engine/training":"jTWm9","./exports":"5SKIB","./layers/recurrent":"jtjtM","./models":"2MIjb","./variables":"lkqSL","./version":"1kAQM","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cUSqT:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ENV",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("./engine/executor");let o=(0,n.env)();/** The max number of entries for the caches of layers' topological sort. */o.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,a.updateCacheMaxEntries)},{"@tensorflow/tfjs-core":"U1ela","./engine/executor":"i3VOs","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i3VOs:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Executor: Evaluates SymbolicTensor based on feeds.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * FeedDict: A mapping from unique SymbolicTensors to feed values for them.
 * A feed value is a concrete value represented as an `Tensor`.
 */s.export(r,"FeedDict",()=>p),s.export(r,"cachedSorted",()=>c),s.export(r,"cachedRecipientCounts",()=>d),s.export(r,"updateCacheMaxEntries",()=>h),/**
 * Execute a SymbolicTensor by using concrete feed values.
 *
 * A `SymbolicTensor` object is a node in a computation graph of TF.js
 * Layers. The object is backed by a source layer and input
 * `SymbolicTensor`s to the source layer. This method evaluates
 * the `call()` method of the source layer, using concrete values of the
 * inputs obtained from either
 * * `feedDict`, if the input key exists in `feedDict`, or else,
 * * a recursive call to `execute()` itself.
 *
 * @param x: The `SymbolicTensor` to execute.
 * @param feedDict: The feed values, as base condition of the recursion.
 *   execution.
 * @param kwargs: Optional keyword arguments.
 * @param probe: A probe object (of interface `ExecutionProbe`) used for
 *   testing memory footprint of `execute` calls.
 * @returns Result of the execution.
 * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s
 *   encountered during the execution lacks a feed value in `feedDict`.
 */s.export(r,"execute",()=>f),/**
 * Sort the `SymbolicTensor`s topologically, for a single fetch.
 *
 * This helper function processes the upstream SymbolicTensors of a single
 * fetch.
 *
 * @param fetch The single fetch requested.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.
 */s.export(r,"getTopologicalSortAndRecipientCountsForOneFetch",()=>m);var n=e("@tensorflow/tfjs-core"),a=e("../errors"),o=e("../utils/executor_utils"),i=e("../utils/generic_utils"),l=e("./input_layer"),u=e("./topology");class p{/**
     * Constructor, optionally does copy-construction.
     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
     *   copy-construction will be performed.
     */constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof p)for(let t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(let t of e)this.add(t.key,t.value)}}/**
     * Add a key-value pair to the FeedDict.
     *
     * @param key The key of the feed.
     * @param value The value of the tensor feed.
     * @param mask The value of the mask feed (optional).
     * @returns This `FeedDict`.
     * @throws ValueError: If the key `SymbolicTensor` already exists in the
     *   `FeedDict`.
     */add(e,t,r){if(null==this.id2Value[e.id])this.id2Value[e.id]=/**
 * Helper function to check the dtype and shape compatibility of a feed value.
 */function(e,t){// Check dtype compatibility.
if(null==e.dtype||e.dtype===t.dtype)return t;try{//  b. Attempt to convert to expected type.
return(0,n.cast)(t,e.dtype)}catch(r){//  c. If conversion fails, return helpful error.
throw new a.ValueError(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=r&&(this.id2Mask[e.id]=r);else throw new a.ValueError(`Duplicate key: name=${e.name}, id=${e.id}`);return this}/**
     * Add a Feed to the FeedDict.
     * @param feed The new `Feed` to add.
     * @returns This `FeedDict`.
     */addFeed(e){this.add(e.key,e.value)}/**
     * Probe whether a key already exists in the FeedDict.
     * @param key
     */hasKey(e){return null!=this.id2Value[e.id]}/**
     * Get all the SymbolicTensor available in this FeedDict.
     */names(){return Object.keys(this.name2Id)}/**
     * Get the feed value for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed value.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */getValue(e){if(e instanceof u.SymbolicTensor){if(null!=this.id2Value[e.id])return this.id2Value[e.id];throw new a.ValueError(`Nonexistent key: ${e.name}`)}{let t=this.name2Id[e];if(null==t)throw new a.ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}/**
     * Get the feed mask for given key.
     * @param key The SymbolicTensor, or its name (as a string), of which the
     *     value is sought.
     * @returns If `key` exists, the corresponding feed mask.
     * @throws ValueError: If `key` does not exist in this `FeedDict`.
     */getMask(e){if(e instanceof u.SymbolicTensor){if(null!=this.id2Value[e.id])return this.id2Mask[e.id];throw new a.ValueError(`Nonexistent key: ${e.name}`)}{let t=this.name2Id[e];if(null==t)throw new a.ValueError(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}/** Dispose all mask Tensors held by this object. */disposeMasks(){null!=this.id2Mask&&(0,n.dispose)(this.id2Mask)}}let c=new o.LruCache,d=new o.LruCache;function h(e){null!=c&&c.setMaxEntries(e),null!=d&&d.setMaxEntries(e)}function f(e,t,r,s){let a;let o=null!=r&&r.training,u=Array.isArray(e),h=u?e:[e],f=h.map(e=>e.name),g=[],x=t.names();for(let e of f)-1!==x.indexOf(e)?g.push(t.getValue(e)):g.push(null);null!=s&&(// For optional probing of memory footprint during execution.
s.maxNumTensors=-1/0,s.minNumTensors=1/0);// Check cache.
let b=f.join(",")+"|"+t.names().sort().join(","),y=c.get(b);if(null==y){// Cache doesn't contain the desired combination of fetches. Compute
// topological sort for the combination for the first time.
let e=/**
 * Sort the `SymbolicTensor`s topologically, for an array of fetches.
 *
 * This function calls getTopologicalSortAndRecipientCountsForOneFetch and
 * merges their results.
 *
 * @param fetch The array of fetches requested. Must be a non-empty array.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.
 */function(e,t){(0,n.util).assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let r=[],s={};if(1===e.length){// Special-casing 1 fetch for efficiency.
let n=m(e[0],t);r=n.sorted,s=n.recipientMap}else{let n=new Set;for(let a of e){let{sorted:e,recipientMap:o}=m(a,t);// Merge sorted SymbolicTensor Arrays.
for(let t of e)n.has(t.name)||(r.push(t),n.add(t.name));// Merge recipient maps.
for(let e in o)null==s[e]&&(s[e]=new Set),o[e].forEach(t=>s[e].add(t))}}return{sorted:r,recipientCounts:function(e){let t={};for(let r in e)t[r]=e[r].size;return t}(s)}}(h,t);y=e.sorted,a=e.recipientCounts,// Store results in cache for future use.
c.put(b,y),d.put(b,a)}a={},o||Object.assign(a,d.get(b));let j=new p(t);// Start iterative execution on the topologically-sorted SymbolicTensors.
for(let e=0;e<y.length;++e){if(null!=s){// For optional probing of memory usage during execution.
let e=(0,n.memory)().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}let u=y[e],p=u.sourceLayer;if(p instanceof l.InputLayer)continue;let c=[],d=[],h=[],m=!1;for(let e of u.inputs){let r=j.getValue(e),s=j.getMask(e);c.push(r),d.push(s),null!=s&&(m=!0),o||(a[e.name]--,0!==a[e.name]||t.hasKey(e)||-1!==f.indexOf(e.name)||r.isDisposed||!0===e.sourceLayer.stateful||h.push(r))}m&&((r=r||{}).mask=d[0]);let x=(0,i.toList)(p.apply(c,r)),b=null;p.supportsMasking&&(b=p.computeMask(c,d));let _=/**
 * Get the symbolic output tensors of the node to which a given fetch belongs.
 * @param fetch The fetched symbolic tensor.
 * @returns The Array of symbolic tensors output by the node to which `fetch`
 *   belongs.
 */function(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let r=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(let s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){r=t;break}t=e.sourceLayer.getOutputAt(r)}return t}(u),k=Array.isArray(_)?_:[_];for(let e=0;e<k.length;++e){j.hasKey(k[e])||j.add(k[e],x[e],Array.isArray(b)?b[0]:b);let t=f.indexOf(k[e].name);-1!==t&&(g[t]=x[e])}o||(0,n.dispose)(h)}return(// NOTE(cais): Unlike intermediate tensors, we don't discard mask
// tensors as we go, because these tensors are sometimes passed over a
// series of mutliple layers, i.e., not obeying the immediate input
// relations in the graph. If this becomes a memory-usage concern,
// we can improve this in the future.
j.disposeMasks(),u?g:g[0])}function m(e,t){let r=new Set,s=[],n={};// Put keys of the feedDict into visited first, so they don't have to be
// walked. This is needed in case where there are feeds for intermediate
// SymbolicTensors of the graph.
for(let e of t.names())r.add(e);let a=[],o=[];for(// Initial population of stack and marks.
a.push(e);a.length>0;){let e=a[a.length-1];if(r.has(e.name)){a.pop();continue}let t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)// Input SymbolicTensor or all children have been visited.
a.pop(),s.push(e),r.add(e.name),t&&o.pop();else for(let t of(// A non-input SymbolicTensor whose upstream SymbolicTensors haven't
// been visited yet. Push them onto the stack.
o.push(a.length-1),e.inputs))null==n[t.name]&&(n[t.name]=new Set),n[t.name].add(e.name),r.has(t.name)||a.push(t)}return{sorted:s,recipientMap:n}}},{"@tensorflow/tfjs-core":"U1ela","../errors":"2onZT","../utils/executor_utils":"kSVzY","../utils/generic_utils":"ia9DW","./input_layer":"eHBTI","./topology":"3moPG","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2onZT":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Explicit error types.
 *
 * See the following link for more information about why the code includes
 * calls to setPrototypeOf:
 *
 * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
 */// tslint:enable
/**
 * Equivalent of Python's AttributeError.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AttributeError",()=>n),/**
 * Equivalent of Python's RuntimeError.
 */s.export(r,"RuntimeError",()=>a),/**
 * Equivalent of Python's ValueError.
 */s.export(r,"ValueError",()=>o),/**
 * Equivalent of Python's NotImplementedError.
 */s.export(r,"NotImplementedError",()=>i),/**
 * Equivalent of Python's AssertionError.
 */s.export(r,"AssertionError",()=>l),/**
 * Equivalent of Python's IndexError.
 */s.export(r,"IndexError",()=>u);class n extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,n.prototype)}}class a extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,a.prototype)}}class o extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,o.prototype)}}class i extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,i.prototype)}}class l extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,l.prototype)}}class u extends Error{constructor(e){super(e),// Set the prototype explicitly.
Object.setPrototypeOf(this,u.prototype)}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kSVzY:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * LruCache: A mapping from the String to T. If the number of the entries is
 * exceeding the `maxEntries`, the LruCache will delete the least recently
 * used entry.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LruCache",()=>n);class n{constructor(e){this.maxEntries=e||100,this.cache=new Map}/**
     * Get the entry for the key and mark it as used recently.
     */get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}/**
     * Put the entry into the cache. If the key already existed, mark the key as
     * used recently.
     */put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){let e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}/**
     * Get the MaxEntries of the cache.
     */getMaxEntries(){return this.maxEntries}/**
     * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
     * entries in the cache.
     */setMaxEntries(e){if(e<0)throw Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){let e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ia9DW:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: utils/generic_utils.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// tslint:enable
/**
 * If `value` is an Array, equivalent to Python's `value * numValues`.
 * If `value` is not an Array, equivalent to Python's `[value] * numValues`
 */// tslint:disable-next-line:no-any
s.export(r,"pyListRepeat",()=>o),s.export(r,"assert",()=>i),/**
 * Count the number of elements of the `array` that are equal to `reference`.
 */s.export(r,"count",()=>l),/**
 * If an array is of length 1, just return the first element. Otherwise, return
 * the full array.
 * @param tensors
 */s.export(r,"singletonOrArray",()=>u),/**
 * Normalizes a list/tensor into a list.
 *
 * If a tensor is passed, we return
 * a list of size 1 containing the tensor.
 *
 * @param x target object to be normalized.
 */// tslint:disable-next-line:no-any
s.export(r,"toList",()=>p),/**
 * Generate a UID for a list
 */// tslint:disable-next-line:no-any
s.export(r,"objectListUid",()=>c),/**
 * Converts string to snake-case.
 * @param name
 */s.export(r,"toSnakeCase",()=>d),s.export(r,"toCamelCase",()=>h),s.export(r,"serializeKerasObject",()=>m),/**
 * Deserialize a saved Keras Object
 * @param identifier either a string ID or a saved Keras dictionary
 * @param moduleObjects a list of Python class names to object constructors
 * @param customObjects a list of Python class names to object constructors
 * @param printableModuleName debug text for the object being reconstituted
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns a TensorFlow.js Layers object
 */// tslint:disable:no-any
s.export(r,"deserializeKerasObject",()=>g),/**
 * Compares two numbers for sorting.
 * @param a
 * @param b
 */s.export(r,"numberCompare",()=>x),/**
 * Comparison of two numbers for reverse sorting.
 * @param a
 * @param b
 */s.export(r,"reverseNumberCompare",()=>b),/**
 * Convert a string into the corresponding DType.
 * @param dtype
 * @returns An instance of DType.
 */s.export(r,"stringToDType",()=>y),/**
 * Test the element-by-element equality of two Arrays of strings.
 * @param xs First array of strings.
 * @param ys Second array of strings.
 * @returns Wether the two arrays are all equal, element by element.
 */s.export(r,"stringsEqual",()=>j),/**
 * Get the unique elements of an array.
 * @param xs Array.
 * @returns An Array consisting of the unique elements in `xs`.
 */s.export(r,"unique",()=>_),/**
 * Determine if an Object is empty (i.e., does not have own properties).
 * @param obj Object
 * @returns Whether the Object is empty.
 * @throws ValueError: If object is `null` or `undefined`.
 */s.export(r,"isObjectEmpty",()=>k),/**
 * Helper function used to build type union/enum run-time checkers.
 * @param values The list of allowed values.
 * @param label A string name for the type
 * @param value The value to test.
 * @throws ValueError: If the value is not in values nor `undefined`/`null`.
 */s.export(r,"checkStringTypeUnionValue",()=>I),/**
 * Helper function for verifying the types of inputs.
 *
 * Ensures that the elements of `x` are all of type `expectedType`.
 * Also verifies that the length of `x` is within bounds.
 *
 * @param x Object to test.
 * @param expectedType The string expected type of all of the elements in the
 * Array.
 * @param minLength Return false if x.length is less than this.
 * @param maxLength Return false if x.length is greater than this.
 * @returns true if and only if `x` is an `Array<expectedType>` with
 * length >= `minLength` and <= `maxLength`.
 */// tslint:disable:no-any
s.export(r,"checkArrayTypeAndLength",()=>w),// tslint:enable:no-any
/**
 * Assert that a value or an array of value are positive integer.
 *
 * @param value The value being asserted on. May be a single number or an array
 *   of numbers.
 * @param name Name of the value, used to make the error message.
 */s.export(r,"assertPositiveInteger",()=>function e(t,r){Array.isArray(t)?((0,n.util).assert(t.length>0,()=>`${r} is unexpectedly an empty array.`),t.forEach((t,s)=>e(t,`element ${s+1} of ${r}`))):(0,n.util).assert(Number.isInteger(t)&&t>0,()=>`Expected ${r} to be a positive integer, but got ${C(t)}.`)}),/**
 * Format a value into a display-friendly, human-readable fashion.
 *
 * - `null` is formatted as `'null'`
 * - Strings are formated with flanking pair of quotes.
 * - Arrays are formatted with flanking pair of square brackets.
 *
 * @param value The value to display.
 * @return Formatted string.
 */// tslint:disable-next-line:no-any
s.export(r,"formatAsFriendlyString",()=>C),/**
 * Returns a function `f2` (decorator) which wraps the original function
 * `f`. `f2` guarantees that `f` can be called at most once
 * every `waitMs` ms. If `f2` is called more often, it will return
 * the last returned result of `f`.
 *
 * @param f The original function `f` to wrap.
 * @param waitMs The time between two consecutive calls to `f` in ms.
 */s.export(r,"debounce",()=>S),/**
 * Returns the fusable activation given a layers identifier.
 *
 * @param activationName The layers identifier string.
 * @return The name of the fusable activation.
 */s.export(r,"mapActivationToFusedKernel",()=>T),/**
 * Returns the cartesian product of sets of values.
 * This works the same as itertools.product in Python.
 *
 * Example:
 *
 * filters = [128, 256, 512]
 * paddings = ['same', 'valid']
 *
 * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],
 * [512, 'same'], [512, 'valid']]
 *
 * @param arrayOfValues List/array of values.
 * @return The cartesian product.
 */s.export(r,"getCartesianProductOfValues",()=>N);var n=e("@tensorflow/tfjs-core"),a=e("../errors");function o(e,t){if(Array.isArray(e)){// tslint:disable-next-line:no-any
let r=[];for(let s=0;s<t;s++)r=r.concat(e);return r}{let r=Array(t);return r.fill(e),r}}function i(e,t){if(!e)throw new a.AssertionError(t)}function l(e,t){let r=0;for(let s of e)s===t&&r++;return r}function u(e){return 1===e.length?e[0]:e}function p(e){return Array.isArray(e)?e:[e]}function c(e){let t=p(e),r="";for(let e of t){if(null==e.id)throw new a.ValueError(`Object ${e} passed to objectListUid without an id`);""!==r&&(r+=", "),r=`${r}${Math.abs(e.id)}`}return r}function d(e){let t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2"),r=t.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return(/*
     If the class is private the name starts with "_" which is not secure
     for creating scopes. We prefix the name with "private" in this case.
     */"_"!==r[0]?r:"private"+r)}function h(e){return(// quick return for empty string or single character strings
e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase()))}// tslint:disable-next-line:no-any
let f={};function m(e){if(null==e)return null;let t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function g(e,t={},r={},s="object",n=!1){// tslint:enable
if("string"==typeof e){let n;if(e in r)n=r[e];else if(e in f)n=f[e];else if(null==(n=t[e]))throw new a.ValueError(`Unknown ${s}: ${e}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return n}{let o,i;if(null==e.className||null==e.config)throw new a.ValueError(`${s}: Improper config format: ${JSON.stringify(e)}.
'className' and 'config' must set.`);let l=e.className;if(l in r?[o,i]=r[l]:l in f?[o,i]=f.className:l in t&&([o,i]=t[l]),null==o)throw new a.ValueError(`Unknown ${s}: ${l}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=i){// Porting notes: Instead of checking to see whether fromConfig accepts
// customObjects, we create a customObjects dictionary and tack it on to
// config['config'] as config['config'].customObjects. Objects can use it,
// if they want.
// tslint:disable-next-line:no-any
let t={};for(let e of Object.keys(f))t[e]=f[e];for(let e of Object.keys(r))t[e]=r[e];// Add the customObjects to config
let s=e.config;s.customObjects=t;let a=Object.assign({},f);for(let e of Object.keys(r))f[e]=r[e];!/**
 * Replace ndarray-style scalar objects in serialization objects with numbers.
 *
 * Background: In some versions of tf.keras, certain scalar values in the HDF5
 * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,
 * where in `num` is a plain number. This method converts such serialization
 * to a `number`.
 *
 * @param config The keras-format serialization object to be processed
 *   (in place).
 */function e(t){if(null!=t&&"object"==typeof t){if(Array.isArray(t))t.forEach(t=>e(t));else{let r=Object.keys(t);for(let s of r){let r=t[s];null!=r&&"object"==typeof r&&(Array.isArray(r)||"ndarray"!==r.type||"number"!=typeof r.value?e(r):t[s]=r.value)}}}}(e.config);let l=i(o,e.config,r,n);return f=Object.assign({},a),l}{// Then `cls` may be a function returning a class.
// In this case by convention `config` holds
// the kwargs of the function.
let t=Object.assign({},f);for(let e of Object.keys(r))f[e]=r[e];// In python this is **config['config'], for tfjs-layers we require
// classes that use this fall-through construction method to take
// a config interface that mimics the expansion of named parameters.
let s=new o(e.config);return f=Object.assign({},t),s}}}function x(e,t){return e<t?-1:e>t?1:0}function b(e,t){return -1*x(e,t)}function y(e){if("float32"===e)return"float32";throw new a.ValueError(`Invalid dtype: ${e}`)}function j(e,t){if(null==e||null==t)return e===t;if(e.length!==t.length)return!1;for(let r=0;r<e.length;++r)if(e[r]!==t[r])return!1;return!0}function _(e){if(null==e)return e;let t=[];// TODO(cais): Maybe improve performance by sorting.
for(let r of e)-1===t.indexOf(r)&&t.push(r);return t}function k(e){if(null==e)throw new a.ValueError(`Invalid value in obj: ${JSON.stringify(e)}`);for(let t in e)if(e.hasOwnProperty(t))return!1;return!0}function I(e,t,r){if(null!=r&&0>e.indexOf(r))throw new a.ValueError(`${r} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function w(e,t,r=0,s=1/0){return i(r>=0),i(s>=r),Array.isArray(e)&&e.length>=r&&e.length<=s&&e.every(e=>typeof e===t)}function C(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>C(e)).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function S(e,t,r){let s,a=null!=r?r():(0,n.util).now();return(...o)=>{let i=null!=r?r():(0,n.util).now();return i-a<t?s:(a=i,s=e(...o))}}function T(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function N(...e){for(let t of(i(e.length>0,"arrayOfValues is empty"),e))i(Array.isArray(t),"one of the values is not an array"),i(t.length>0,"one of the values is empty");return e.reduce((e,t)=>0===e.length?t.map(e=>[e]):t.map(t=>e.map(e=>[...e,t])).reduce((e,t)=>e.concat(t),[]),[])}},{"@tensorflow/tfjs-core":"U1ela","../errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eHBTI:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"InputLayer",()=>l),s.export(r,"Input",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../backend/state"),o=e("../errors"),i=e("./topology");class l extends i.Layer{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:(0,a.getUid)("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new o.ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new o.ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else // TODO(michaelterry): Backport to PyKeras
if(null!=e.batchSize)throw new o.ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let r=e.dtype||"float32";this.batchInputShape=t,this.dtype=r,// TODO(michaelterry): Backport this to PyKeras?
this.inputSpec=[{shape:t}];let s=new i.SymbolicTensor(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,// Create an input node to add to this.outboundNode.
// (This call has side effects.)
// tslint:disable-next-line:no-unused-expression
new i.Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new o.ValueError(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){// dispose() for InputLayer is overridden as no-op.
return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function u(e){if(null==e.batchShape&&null==e.shape)throw Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new o.ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let r=e.dtype;null==r&&(r="float32");let s=new l({batchInputShape:t,name:e.name,dtype:r,sparse:e.sparse}),n=s.inboundNodes[0].outputTensors;return n[0]}/** @nocollapse */l.className="InputLayer",(0,n.serialization).registerClass(l)},{"@tensorflow/tfjs-core":"U1ela","../backend/state":"7msxH","../errors":"2onZT","./topology":"3moPG","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7msxH":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Utilities related to persistent state in the backend.
 *//**
 * An ID to track `tf.SymbolicTensor`s and derived classes.
 * Required in different places in engine/topology.ts to identify unique
 * tensors.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"getNextUniqueTensorId",()=>a),/**
 * Provides a unique UID given a string prefix.
 *
 * @param prefix
 */s.export(r,"getUid",()=>i);let n=0;function a(){return n++}let o={};function i(e=""){return e in o||(o[e]=0),o[e]+=1,e+o[e].toString()}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3moPG":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: keras/engine/topology.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Specifies the ndim, dtype and shape of every input to a layer.
 *
 * Every layer should expose (if appropriate) an `inputSpec` attribute:
 * a list of instances of InputSpec (one per input tensor).
 *
 * A null entry in a shape is compatible with any dimension,
 * a null shape is compatible with any shape.
 */s.export(r,"InputSpec",()=>h),/**
 * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.
 *
 * They are most often encountered when building a graph of `Layer`s for a
 * `tf.LayersModel` and the input data's shape, but not values are known.
 *
 * @doc {heading: 'Models', 'subheading': 'Classes'}
 */s.export(r,"SymbolicTensor",()=>f),/**
 * A `Node` describes the connectivity between two layers.
 *
 * Each time a layer is connected to some new input,
 * a node is added to `layer.inboundNodes`.
 *
 * Each time the output of a layer is used by another layer,
 * a node is added to `layer.outboundNodes`.
 *
 * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates
 * describing the origin of the `inputTensors`, verifying the following:
 *
 * `inputTensors[i] ==
 * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[
 *   tensorIndices[i]]`
 *
 * A node from layer A to layer B is added to:
 *     A.outboundNodes
 *     B.inboundNodes
 */s.export(r,"Node",()=>g),/**
 * A layer is a grouping of operations and weights that can be composed to
 * create a `tf.LayersModel`.
 *
 * Layers are constructed by using the functions under the
 * [tf.layers](#Layers-Basic) namespace.
 *
 * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}
 */s.export(r,"Layer",()=>b),/**
 * Returns the list of input tensors necessary to compute `tensor`.
 *
 * Output will always be a list of tensors (potentially with 1 element).
 *
 * @param tensor The tensor to start from.
 * @param layer Origin layer of the tensor.
 * @param nodeIndex Origin node index of the tensor.
 *
 * @return Array of input tensors.
 */s.export(r,"getSourceInputs",()=>function e(t,r,s){if((null==r||null!=s&&s>0)&&(r=t.sourceLayer,s=t.nodeIndex),0===r.inboundNodes.length)return[t];{let t=r.inboundNodes[s];if(0===t.inboundLayers.length)return t.inputTensors;{let r=[];for(let s=0;s<t.inboundLayers.length;s++){let n=t.inputTensors[s],a=t.inboundLayers[s],o=t.nodeIndices[s],i=e(n,a,o);// Avoid input redundancy.
    for(let e of i)-1===r.indexOf(e)&&r.push(e)}return r}}});var n=e("@tensorflow/tfjs-core"),a=e("../backend/state"),o=e("../common"),i=e("../errors"),l=e("../initializers"),u=e("../utils/generic_utils"),p=e("../utils/types_utils"),c=e("../utils/variable_utils"),d=e("../variables");class h{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class f{/**
     *
     * @param dtype
     * @param shape
     * @param sourceLayer The Layer that produced this symbolic tensor.
     * @param inputs The inputs passed to sourceLayer's __call__() method.
     * @param nodeIndex
     * @param tensorIndex
     * @param callArgs The keyword arguments passed to the __call__() method.
     * @param name
     * @param outputTensorIndex The index of this tensor in the list of outputs
     *   returned by apply().
     */constructor(e,t,r,s,n,i,l){this.dtype=e,this.shape=t,this.sourceLayer=r,this.inputs=s,this.callArgs=n,this.outputTensorIndex=l,this.id=(0,a.getNextUniqueTensorId)(),null!=i&&(this.originalName=(0,o.getScopedTensorName)(i),this.name=(0,o.getUniqueTensorName)(this.originalName)),this.rank=t.length}}let m=0;class g{constructor(e,t){// Add nodes to all layers involved.
for(let r of(this.callArgs=t,this.id=m++,/*
          Layer instance (NOT a list).
          this is the layer that takes a list of input tensors
          and turns them into a list of output tensors.
          the current node will be added to
          the inboundNodes of outboundLayer.
        */this.outboundLayer=e.outboundLayer,/*
            The following 3 properties describe where
            the input tensors come from: which layers,
            and for each layer, which node and which
            tensor output of each node.
        */// List of layer instances.
this.inboundLayers=e.inboundLayers,// List of integers, 1:1 mapping with inboundLayers.
this.nodeIndices=e.nodeIndices,// List of integers, 1:1 mapping with inboundLayers.
this.tensorIndices=e.tensorIndices,/*
            Following 2 properties:
            tensor inputs and outputs of outboundLayer.
        */// List of tensors. 1:1 mapping with inboundLayers.
this.inputTensors=e.inputTensors,// List of tensors, created by outboundLayer.call().
this.outputTensors=e.outputTensors,/*
            Following 2 properties: input and output masks.
            List of tensors, 1:1 mapping with inputTensor.
        */this.inputMasks=e.inputMasks,// List of tensors, created by outboundLayer.computeMask().
this.outputMasks=e.outputMasks,// Following 2 properties: input and output shapes.
// List of shape tuples, shapes of inputTensors.
this.inputShapes=e.inputShapes,// List of shape tuples, shapes of outputTensors.
this.outputShapes=e.outputShapes,e.inboundLayers))null!=r&&r.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){let e=[];for(let t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let x=0;class b extends n.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],// Porting Notes: PyKeras does not have this property in this base Layer
//   class. Instead lets Layer subclass set it dynamically and checks the
//   value with `hasattr`. In tfjs-layers, we let this be a member of this
//   base class.
this._stateful=!1,this.id=x++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,// These properties will be set upon call of this.build()
this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,/*
          These lists will be filled via successive calls
          to this.addInboundNode().
         */this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){let e=this.getClassName();t=u.toSnakeCase(e)+"_"+(0,a.getUid)(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let r=null;null!=e.batchSize&&(r=e.batchSize),t=[r].concat(e.inputShape)}this.batchInputShape=t;// Set dtype.
let r=e.dtype;null==r&&(r=e.inputDType),null==r&&(r="float32"),this.dtype=r}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,// The value of `_refCount` is initialized to null. When the layer is used
// in a symbolic way for the first time, it will be set to 1.
this._refCount=null,this.fastWeightInitDuringBuild=!1}/**
     * Converts a layer and its index to a unique (immutable type) name.
     * This function is used internally with `this.containerNodes`.
     * @param layer The layer.
     * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
     *   nodes.
     *
     * @returns The unique name.
     */static nodeKey(e,t){return e.name+"_ib-"+t.toString()}/**
     * Returns this.inboundNode at index nodeIndex.
     *
     * Porting note: This is a replacement for _get_node_attribute_at_index()
     * @param nodeIndex
     * @param attrName The name of the attribute related to request for this node.
     */getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new i.RuntimeError(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new i.ValueError(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}/**
     * Retrieves the input tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple inputs).
     */getInputAt(e){return u.singletonOrArray(this.getNodeAtIndex(e,"input").inputTensors)}/**
     * Retrieves the output tensor(s) of a layer at a given node.
     *
     * @param nodeIndex Integer, index of the node from which to retrieve the
     *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
     *   was called.
     *
     * @return A tensor (or list of tensors if the layer has multiple outputs).
     */getOutputAt(e){return u.singletonOrArray(this.getNodeAtIndex(e,"output").outputTensors)}// Properties
/**
     * Retrieves the input tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Input tensor or list of input tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */get input(){if(this.inboundNodes.length>1)throw new i.AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new i.AttributeError(`Layer ${this.name} is not connected, no input to return.`);return u.singletonOrArray(this.getNodeAtIndex(0,"input").inputTensors)}/**
     * Retrieves the output tensor(s) of a layer.
     *
     * Only applicable if the layer has exactly one inbound node,
     * i.e. if it is connected to one incoming layer.
     *
     * @return Output tensor or list of output tensors.
     *
     * @exception AttributeError if the layer is connected to more than one
     *   incoming layers.
     */get output(){if(0===this.inboundNodes.length)throw new i.AttributeError(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new i.AttributeError(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return u.singletonOrArray(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}/**
     * Retrieves the Layer's current loss values.
     *
     * Used for regularizers during training.
     */calculateLosses(){// Porting Node: This is an augmentation to Layer.loss in PyKeras.
//   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete
//   Tensor (specifically Scalar) values are returned. This is due to the
//   imperative backend.
return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}/**
     * The concatenation of the lists trainableWeights and nonTrainableWeights
     * (in this order).
     */get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}/**
     * Reset the states of the layer.
     *
     * This method of the base Layer class is essentially a no-op.
     * Subclasses that are stateful (e.g., stateful RNNs) should override this
     * method.
     */resetStates(){if(!this.stateful)throw Error("Cannot call the resetStates() method of a non-stateful Layer object.")}/**
     * Checks compatibility between the layer and provided inputs.
     *
     * This checks that the tensor(s) `input`
     * verify the input assumptions of the layer
     * (if any). If not, exceptions are raised.
     *
     * @param inputs Input tensor or list of input tensors.
     *
     * @exception ValueError in case of mismatch between
     *   the provided inputs and the expectations of the layer.
     */assertInputCompatibility(e){if(e=u.toList(e),null==this.inputSpec||0===this.inputSpec.length)return;let t=u.toList(this.inputSpec);if(e.length!==t.length)throw new i.ValueError(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let r=0;r<e.length;r++){let s=e[r],n=t[r];if(null==n)continue;// Check ndim.
let a=s.rank;if(null!=n.ndim&&a!==n.ndim)throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${n.ndim}, found ndim=${a}`);if(null!=n.maxNDim&&a>n.maxNDim)throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${n.maxNDim}, found ndim=${a}`);if(null!=n.minNDim&&a<n.minNDim)throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${n.minNDim}, found ndim=${a}.`);// Check dtype.
if(null!=n.dtype&&s.dtype!==n.dtype)throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${n.dtype}, found dtype=${s.dtype}.`);// Check specific shape axes.
if(n.axes){let e=s.shape;for(let t in n.axes){let s=Number(t),a=n.axes[t],o=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(o))throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}// Check shape.
if(null!=n.shape)for(let e=0;e<n.shape.length;++e){let t=n.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new i.ValueError(`Input ${r} is incompatible with layer ${this.name}: expected shape=${n.shape}, found shape=${s.shape}.`)}}}/**
     * This is where the layer's logic lives.
     *
     * @param inputs Input tensor, or list/tuple of input tensors.
     * @param kwargs Additional keyword arguments.
     *
     * @return A tensor or list/tuple of tensors.
     */call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}/**
     * Set call hook.
     * This is currently used for testing only.
     * @param callHook
     */setCallHook(e){this._callHook=e}/**
     * Clear call hook.
     * This is currently used for testing only.
     */clearCallHook(){this._callHook=null}/**
     * Builds or executes a `Layer`'s logic.
     *
     * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
     * return Tensor(s). For example:
     *
     * ```js
     * const denseLayer = tf.layers.dense({
     *   units: 1,
     *   kernelInitializer: 'zeros',
     *   useBias: false
     * });
     *
     * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
     * // numeric values).
     * const input = tf.ones([2, 2]);
     * const output = denseLayer.apply(input);
     *
     * // The output's value is expected to be [[0], [0]], due to the fact that
     * // the dense layer has a kernel initialized to all-zeros and does not have
     * // a bias.
     * output.print();
     * ```
     *
     * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
     * future execution.  This entails internal book-keeping on shapes of
     * expected Tensors, wiring layers together, and initializing weights.
     *
     * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
     * building of non-`tf.Sequential` models. For example:
     *
     * ```js
     * const flattenLayer = tf.layers.flatten();
     * const denseLayer = tf.layers.dense({units: 1});
     *
     * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
     * const input = tf.input({shape: [2, 2]});
     * const output1 = flattenLayer.apply(input);
     *
     * // output1.shape is [null, 4]. The first dimension is the undetermined
     * // batch size. The second dimension comes from flattening the [2, 2]
     * // shape.
     * console.log(JSON.stringify(output1.shape));
     *
     * // The output SymbolicTensor of the flatten layer can be used to call
     * // the apply() of the dense layer:
     * const output2 = denseLayer.apply(output1);
     *
     * // output2.shape is [null, 1]. The first dimension is the undetermined
     * // batch size. The second dimension matches the number of units of the
     * // dense layer.
     * console.log(JSON.stringify(output2.shape));
     *
     * // The input and output can be used to construct a model that consists
     * // of the flatten and dense layers.
     * const model = tf.model({inputs: input, outputs: output2});
     * ```
     *
     * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
     * @param kwargs Additional keyword arguments to be passed to `call()`.
     *
     * @return Output of the layer's `call` method.
     *
     * @exception ValueError error in case the layer is missing shape information
     *   for its `build` call.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */// Porting Note: This is a replacement for __call__() in Python.
apply(e,t){t=t||{},this.assertNotDisposed();// Ensure inputs are all the same type.
let r=u.toList(e),s=!0;for(let e of r)if(!(e instanceof f)){s=!1;break}let n=!0;for(let e of r)if(e instanceof f){n=!1;break}if(s===n)throw new i.ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");// TODO(michaelterry): nameScope() may not be necessary.
return(0,o.nameScope)(this.name,()=>{// Handle laying building (weight creating, input spec locking).
if(!this.built){/*
                  Throw exceptions in case the input is not compatible
                  with the inputSpec specified in the layer constructor.
                 */this.assertInputCompatibility(e);// Collect input shapes to build layer.
let t=[];for(let r of u.toList(e))t.push(r.shape);this.build(u.singletonOrArray(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&n&&// to 1 so the Layer can be properly disposed if its dispose() method
// is called.
(this._refCount=1)}// Handle mask propagation.
// TODO(michaelterry): Mask propagation not currently implemented.
// Actually call the layer, collecting output(s), mask(s), and shape(s).
if(/*
              Throw exceptions in case the input is not compatible
              with the inputSpec set at build time.
            */this.assertInputCompatibility(e),n){let s=this.call(e,t),n=u.toList(s),a=[];// TODO(michaelterry): This copying may not be necessary given our eager
// backend.
for(let e of n)-1!==r.indexOf(e)&&(e=e.clone()),a.push(e);if(s=u.singletonOrArray(a),null!=this.activityRegularizer)throw new i.NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");// TODO(michaelterry): Call addInboundNode()?
return s}{let r;let s=/**
 * Collects the input shape(s) of a list of `tf.Tensor`s or
 * `tf.SymbolicTensor`s.
 *
 * TODO(michaelterry): Update PyKeras docs (backport).
 *
 * @param inputTensors List of input tensors (or single input tensor).
 *
 * @return List of shape tuples (or single tuple), one tuple per input.
 */function(e){e=u.toList(e);let t=[];for(let r of e)t.push(r.shape);return u.singletonOrArray(t)}(e),n=this.computeOutputShape(s),a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?s[0]:s),r=null!=n&&n.length>0&&Array.isArray(n[0])?n.map((r,s)=>new f(a,r,this,u.toList(e),t,this.name,s)):new f(a,n,this,u.toList(e),t,this.name),/*
                  Add an inbound node to the layer, so that it keeps track
                  of the call and of all new variables created during the call.
                  This also updates the layer history of the output tensor(s).
                  If the input tensor(s) had no previous history,
                  this does nothing.
                */this.addInboundNode(e,r,null,null,s,n,t),this._refCount++,null!=this.activityRegularizer)throw new i.NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}/**
     * Check compatibility between input shape and this layer's batchInputShape.
     *
     * Print warning if any incompatibility is found.
     *
     * @param inputShape Input shape to be checked.
     */warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape){if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((r,s)=>{null!=r&&null!=e[s]&&e[s]!==r&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}}/**
     * Retrieves the output shape(s) of a layer.
     *
     * Only applicable if the layer has only one inbound node, or if all inbound
     * nodes have the same output shape.
     *
     * @returns Output shape or shapes.
     * @throws AttributeError: if the layer is connected to more than one incoming
     *   nodes.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new i.AttributeError(`The layer ${this.name} has never been called and thus has no defined output shape.`);let e=[];for(let t of this.inboundNodes){let r=JSON.stringify(t.outputShapes);-1===e.indexOf(r)&&e.push(r)}if(1===e.length){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new i.AttributeError(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}/**
     * Counts the total number of numbers (e.g., float32, int32) in the
     * weights.
     *
     * @returns An integer count.
     * @throws RuntimeError: If the layer is not built yet (in which case its
     *   weights are not defined yet.)
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */countParams(){if(!this.built)throw new i.RuntimeError(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return c.countParamsInWeights(this.weights)}/**
     * Creates the layer weights.
     *
     * Must be implemented on all layers that have weights.
     *
     * Called when apply() is called to construct the weights.
     *
     * @param inputShape A `Shape` or array of `Shape` (unused).
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */build(e){this.built=!0}/**
     * Returns the current values of the weights of the layer.
     *
     * @param trainableOnly Whether to get the values of only trainable weights.
     * @returns Weight values as an `Array` of `tf.Tensor`s.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */getWeights(e=!1){return(0,d.batchGetValue)(e?this.trainableWeights:this.weights)}/**
     * Sets the weights of the layer, from Tensors.
     *
     * @param weights a list of Tensors. The number of arrays and their shape
     *   must match number of the dimensions of the weights of the layer (i.e.
     *   it should match the output of `getWeights`).
     *
     * @exception ValueError If the provided weights list does not match the
     *   layer's specifications.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */setWeights(e){(0,n.tidy)(()=>{let t=this.weights;if(t.length!==e.length)// of `weights` in the error message, once the deeplearn.js bug is
// fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const
// providedWeights = JSON.stringify(weights).slice(0, 50);
throw new i.ValueError(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;let r=[],s=(0,d.batchGetValue)(t);for(let a=0;a<s.length;++a){let o=s[a],l=t[a],u=e[a];if(!(0,n.util).arraysEqual(o.shape,u.shape))throw new i.ValueError(`Layer weight shape ${o.shape} not compatible with provided weight shape ${u.shape}`);r.push([l,u])}(0,d.batchSetValue)(r)})}/**
     * Adds a weight variable to the layer.
     *
     * @param name Name of the new weight variable.
     * @param shape The shape of the weight.
     * @param dtype The dtype of the weight.
     * @param initializer An initializer instance.
     * @param regularizer A regularizer instance.
     * @param trainable Whether the weight should be trained via backprop or not
     *   (assuming that the layer itself is also trainable).
     * @param constraint An optional trainable.
     * @return The created weight variable.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */addWeight(e,t,r,s,n,a,o,u){// Reject duplicate weight names.
if(-1!==this._addedWeightNames.indexOf(e))throw new i.ValueError(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==r&&(r="float32"),this.fastWeightInitDuringBuild&&(s=null!=u?u():(0,l.getInitializer)("zeros"));let p=s.apply(t,r),c=new d.LayerVariable(p,r,e,a,o);return p.dispose(),null!=n&&this.addLoss(()=>n.apply(c.read())),null==a&&(a=!0),a?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}/**
     * Set the fast-weight-initialization flag.
     *
     * In cases where the initialized weight values will be immediately
     * overwritten by loaded weight values during model loading, setting
     * the flag to `true` saves unnecessary calls to potentially expensive
     * initializers and speeds up the loading process.
     *
     * @param value Target value of the flag.
     */setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}/**
     * Add losses to the layer.
     *
     * The loss may potentially be conditional on some inputs tensors,
     * for instance activity losses are conditional on the layer's inputs.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */addLoss(e){null==e||Array.isArray(e)&&0===e.length||(// Update this.losses
e=u.toList(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}/**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */computeOutputShape(e){return e}/**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(Array.isArray(t))t.forEach(e=>{if(null!=e)throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}// masking not explicitly supported: return null as mask
return null}// if masking is explictly supported, by default
// carry over the input mask
return t}/**
     * Internal method to create an inbound node for the layer.
     *
     * @param inputTensors List of input tensors.
     * @param outputTensors List of output tensors.
     * @param inputMasks List of input masks (a mask can be a tensor, or null).
     * @param outputMasks List of output masks (a mask can be a tensor, or null).
     * @param inputShapes List of input shape tuples.
     * @param outputShapes List of output shape tuples.
     * @param kwargs Dictionary of keyword arguments that were passed to the
     *   `call` method of the layer at the call that created the node.
     */addInboundNode(e,t,r,s,n,a,o=null){let i=u.toList(e);t=u.toList(t),r=u.toList(r),s=u.toList(s),n=p.normalizeShapeList(n),a=p.normalizeShapeList(a);// Collect input tensor(s) coordinates.
let l=[],c=[],d=[];for(let e of i)/*
             * TODO(michaelterry): Keras adds this value to tensors; it's not
             * clear whether we'll use this or not.
             */l.push(e.sourceLayer),c.push(e.nodeIndex),d.push(e.tensorIndex);// Create node, add it to inbound nodes.
// (This call has side effects.)
// tslint:disable-next-line:no-unused-expression
new g({outboundLayer:this,inboundLayers:l,nodeIndices:c,tensorIndices:d,inputTensors:i,outputTensors:t,inputMasks:r,outputMasks:s,inputShapes:n,outputShapes:a},o);// Update tensor history
for(let e=0;e<t.length;e++)// TODO(michaelterry: _uses_learning_phase not tracked.
t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}/**
     * Returns the config of the layer.
     *
     * A layer config is a TS dictionary (serializable)
     * containing the configuration of a layer.
     * The same layer can be reinstantiated later
     * (without its trained weights) from this configuration.
     *
     * The config of a layer does not include connectivity
     * information, nor the layer class name.  These are handled
     * by 'Container' (one layer of abstraction above).
     *
     * Porting Note: The TS dictionary follows TS naming standards for
     * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
     * should use a helper function to convert to the pythonic storage
     * standard. (see serialization_utils.convertTsToPythonic)
     *
     * @returns TS dictionary of configuration.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */getConfig(){let e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}/**
     * Dispose the weight variables that this Layer instance holds.
     *
     * @returns {number} Number of disposed variables.
     */disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw Error(`Layer '${this.name}' is already disposed.`)}/**
     * Attempt to dispose layer's weights.
     *
     * This method decreases the reference count of the Layer object by 1.
     *
     * A Layer is reference-counted. Its reference count is incremented by 1
     * the first item its `apply()` method is called and when it becomes a part
     * of a new `Node` (through calling the `apply()` method on a
     * `tf.SymbolicTensor`).
     *
     * If the reference count of a Layer becomes 0, all the weights will be
     * disposed and the underlying memory (e.g., the textures allocated in WebGL)
     * will be freed.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * weights of the Layer will *not* be disposed.
     *
     * After a Layer is disposed, it cannot be used in calls such as `apply()`,
     * `getWeights()` or `setWeights()` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the Container after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the layer has already
     *   been disposed.
     *
     * @doc {heading: 'Models', 'subheading': 'Classes'}
     */dispose(){if(!this.built)throw Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}},{"@tensorflow/tfjs-core":"U1ela","../backend/state":"7msxH","../common":"JNHtR","../errors":"2onZT","../initializers":"cqMie","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","../utils/variable_utils":"aAuns","../variables":"lkqSL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],JNHtR:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Common functions for TensorFlow.js Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"checkDataFormat",()=>i),s.export(r,"checkInterpolationFormat",()=>l),s.export(r,"checkPaddingMode",()=>u),s.export(r,"checkPoolMode",()=>p),/**
 * Enter namescope, which can be nested.
 */s.export(r,"nameScope",()=>d),/**
 * Get the name a Tensor (or Variable) would have if not uniqueified.
 * @param tensorName
 * @return Scoped name string.
 */s.export(r,"getScopedTensorName",()=>h),/**
 * Get unique names for Tensors and Variables.
 * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by
 *  `getScopedTensorName()`.
 * @return A unique version of the given fully scoped name.
 *   If this is the first time that the scoped name is seen in this session,
 *   then the given `scopedName` is returned unaltered.  If the same name is
 *   seen again (producing a collision), an incrementing suffix is added to the
 *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.
 */s.export(r,"getUniqueTensorName",()=>f),/**
 * Determine whether a string is a valid tensor name.
 * @param name
 * @returns A Boolean indicating whether `name` is a valid tensor name.
 */s.export(r,"isValidTensorName",()=>g);var n=e("./keras_format/common"),a=e("./utils/generic_utils");// A map from the requested scoped name of a Tensor to the number of Tensors
// wanting that name so far.  This allows enforcing name uniqueness by appending
// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.
let o=new Map;function i(e){(0,a.checkStringTypeUnionValue)(n.VALID_DATA_FORMAT_VALUES,"DataFormat",e)}function l(e){(0,a.checkStringTypeUnionValue)(n.VALID_INTERPOLATION_FORMAT_VALUES,"InterpolationFormat",e)}function u(e){(0,a.checkStringTypeUnionValue)(n.VALID_PADDING_MODE_VALUES,"PaddingMode",e)}function p(e){(0,a.checkStringTypeUnionValue)(n.VALID_POOL_MODE_VALUES,"PoolMode",e)}let c=[];function d(e,t){c.push(e);try{let e=t();return c.pop(),e}catch(e){throw c.pop(),e}}function h(e){if(!g(e))throw Error("Not a valid tensor name: '"+e+"'");return(0===c.length?"":c.join("/")+"/")+e}function f(e){if(!g(e))throw Error("Not a valid tensor name: '"+e+"'");o.has(e)||o.set(e,0);let t=o.get(e);if(o.set(e,o.get(e)+1),!(t>0))return e;{let r=`${e}_${t}`;return(// Mark the composed name as used in case someone wants
// to call getUniqueTensorName("name_1").
o.set(r,1),r)}}let m=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function g(e){return!!e.match(m)}},{"./keras_format/common":"d5gz0","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d5gz0:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"VALID_DATA_FORMAT_VALUES",()=>n),s.export(r,"VALID_INTERPOLATION_FORMAT_VALUES",()=>a),s.export(r,"VALID_PADDING_MODE_VALUES",()=>o),s.export(r,"VALID_POOL_MODE_VALUES",()=>i),s.export(r,"VALID_BIDIRECTIONAL_MERGE_MODES",()=>l),s.export(r,"VALID_SAMPLE_WEIGHT_MODES",()=>u);let n=["channelsFirst","channelsLast"],a=["nearest","bilinear"],o=["valid","same","causal"],i=["max","avg"],l=["sum","mul","concat","ave"],u=["temporal"]},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cqMie:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"checkFanMode",()=>c),s.export(r,"checkDistribution",()=>d),/**
 * Initializer base class.
 *
 * @doc {
 *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}
 */s.export(r,"Initializer",()=>h),s.export(r,"Zeros",()=>f),s.export(r,"Ones",()=>m),s.export(r,"Constant",()=>g),s.export(r,"RandomUniform",()=>x),s.export(r,"RandomNormal",()=>b),s.export(r,"TruncatedNormal",()=>y),s.export(r,"Identity",()=>j),s.export(r,"VarianceScaling",()=>_),s.export(r,"GlorotUniform",()=>k),s.export(r,"GlorotNormal",()=>I),s.export(r,"HeNormal",()=>w),s.export(r,"HeUniform",()=>C),s.export(r,"LeCunNormal",()=>S),s.export(r,"LeCunUniform",()=>T),s.export(r,"Orthogonal",()=>N),s.export(r,"INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP",()=>E),s.export(r,"serializeInitializer",()=>A),s.export(r,"getInitializer",()=>R);var n=e("@tensorflow/tfjs-core"),a=e("./backend/tfjs_backend"),o=e("./common"),i=e("./errors"),l=e("./keras_format/initializer_config"),u=e("./utils/generic_utils"),p=e("./utils/math_utils");function c(e){(0,u.checkStringTypeUnionValue)(l.VALID_FAN_MODE_VALUES,"FanMode",e)}function d(e){(0,u.checkStringTypeUnionValue)(l.VALID_DISTRIBUTION_VALUES,"Distribution",e)}class h extends n.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class f extends h{apply(e,t){return(0,n.zeros)(e,t)}}/** @nocollapse */f.className="Zeros",(0,n.serialization).registerClass(f);class m extends h{apply(e,t){return(0,n.ones)(e,t)}}/** @nocollapse */m.className="Ones",(0,n.serialization).registerClass(m);class g extends h{constructor(e){if(super(),"object"!=typeof e)throw new i.ValueError(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new i.ValueError(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return(0,n.tidy)(()=>(0,n.mul)((0,n.scalar)(this.value),(0,n.ones)(e,t)))}getConfig(){return{value:this.value}}}/** @nocollapse */g.className="Constant",(0,n.serialization).registerClass(g);class x extends h{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return(0,n.randomUniform)(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}/** @nocollapse */x.className="RandomUniform",(0,n.serialization).registerClass(x);class b extends h{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.NotImplementedError(`randomNormal does not support dType ${t}.`);return a.randomNormal(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}/** @nocollapse */b.className="RandomNormal",(0,n.serialization).registerClass(b);class y extends h{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.NotImplementedError(`truncatedNormal does not support dType ${t}.`);return(0,n.truncatedNormal)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}/** @nocollapse */y.className="TruncatedNormal",(0,n.serialization).registerClass(y);class j extends h{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return(0,n.tidy)(()=>{if(2===e.length&&e[0]===e[1])return(0,n.mul)(this.gain,(0,n.eye)(e[0]));throw new i.ValueError("Identity matrix initializer can only be used for 2D square matrices.")})}getConfig(){return{gain:this.gain}}}/** @nocollapse */j.className="Identity",(0,n.serialization).registerClass(j);class _ extends h{/**
     * Constructor of VarianceScaling.
     * @throws ValueError for invalid value in scale.
     */constructor(e){if(super(),e.scale<0)throw new i.ValueError(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,c(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,d(this.distribution),this.seed=e.seed}apply(e,t){let r=/**
 * Computes the number of input and output units for a weight shape.
 * @param shape Shape of weight.
 * @param dataFormat data format to use for convolution kernels.
 *   Note that all kernels in Keras are standardized on the
 *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).
 * @return An length-2 array: fanIn, fanOut.
 */function(e,t="channelsLast"){let r,s;if((0,o.checkDataFormat)(t),2===e.length)r=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){let t=(0,p.arrayProd)(e,2);r=e[1]*t,s=e[0]*t}else if("channelsLast"===t){let t=(0,p.arrayProd)(e,0,e.length-2);r=e[e.length-2]*t,s=e[e.length-1]*t}}else{let t=(0,p.arrayProd)(e);r=Math.sqrt(t),s=Math.sqrt(t)}return[r,s]}(e),s=r[0],a=r[1],l=this.scale;if("fanIn"===this.mode?l/=Math.max(1,s):"fanOut"===this.mode?l/=Math.max(1,a):l/=Math.max(1,(s+a)/2),"normal"===this.distribution){let r=Math.sqrt(l);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new i.NotImplementedError(`${this.getClassName()} does not support dType ${t}.`);return(0,n.truncatedNormal)(e,0,r,t,this.seed)}{let r=Math.sqrt(3*l);return(0,n.randomUniform)(e,-r,r,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}/** @nocollapse */_.className="VarianceScaling",(0,n.serialization).registerClass(_);class k extends _{/**
     * Constructor of GlorotUniform
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, GlorotUniform is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */k.className="GlorotUniform",(0,n.serialization).registerClass(k);class I extends _{/**
     * Constructor of GlorotNormal.
     * @param scale
     * @param mode
     * @param distribution
     * @param seed
     */constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, GlorotNormal is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */I.className="GlorotNormal",(0,n.serialization).registerClass(I);class w extends _{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, HeNormal is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */w.className="HeNormal",(0,n.serialization).registerClass(w);class C extends _{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, HeUniform is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */C.className="HeUniform",(0,n.serialization).registerClass(C);class S extends _{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, LeCunNormal is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */S.className="LeCunNormal",(0,n.serialization).registerClass(S);class T extends _{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){// In Python Keras, LeCunUniform is not a class, but a helper method
// that creates a VarianceScaling object. Use 'VarianceScaling' as
// class name to be compatible with that.
return _.className}}/** @nocollapse */T.className="LeCunNormal",(0,n.serialization).registerClass(T);class N extends h{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new i.NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return(0,n.tidy)(()=>{if(e.length<2)throw new i.NotImplementedError("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);// TODO(cais): Add seed support.
let t=e[0]>e[1]?[e[1],e[0]]:e,r=a.randomNormal(t,0,1,"float32"),s=(0,n.linalg).gramSchmidt(r);return e[0]>e[1]&&(s=(0,n.transpose)(s)),(0,n.mul)(this.gain,s)})}getConfig(){return{gain:this.gain,seed:this.seed}}}/** @nocollapse */N.className="Orthogonal",(0,n.serialization).registerClass(N);let E={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function F(e,t={}){return(0,u.deserializeKerasObject)(e,(0,n.serialization).SerializationMap.getMap().classNameMap,t,"initializer")}function A(e){return(0,u.serializeKerasObject)(e)}function R(e){if("string"==typeof e){let t=e in E?E[e]:e;/* We have four 'helper' classes for common initializers that
        all get serialized as 'VarianceScaling' and shouldn't go through
        the deserializeInitializer pathway. */if("GlorotNormal"===t)return new I;{if("GlorotUniform"===t)return new k;if("HeNormal"===t)return new w;if("HeUniform"===t)return new C;if("LeCunNormal"===t)return new S;if("LeCunUniform"===t)return new T;let e={};return e.className=t,e.config={},F(e)}}return e instanceof h?e:F(e)}},{"@tensorflow/tfjs-core":"U1ela","./backend/tfjs_backend":"hBUWZ","./common":"JNHtR","./errors":"2onZT","./keras_format/initializer_config":"eQ0ub","./utils/generic_utils":"ia9DW","./utils/math_utils":"4BJyC","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hBUWZ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * deeplearn.js backend.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"setBackend",()=>p),s.export(r,"getBackend",()=>c),/**
 * Indicates whether the backend is operating symbolically.
 *
 * This function will be used to determine how to interpret user code. If
 * it returns true, calls to the backend construct a symbolic graph; if
 * it returns false, calls to the backend execute immediately.
 */s.export(r,"isBackendSymbolic",()=>d),/**
 * Get the number of elements in a Tensor.
 * @param x The Tensor.
 * @return Number of elements in `x`.
 */s.export(r,"countParams",()=>h),/**
 * Casts a tensor to a different dtype and returns it.
 * @param x Input tensor.
 * @param dtype String: 'float32'|'int32'|'bool'.
 * @returns Tensor of the specified `dtype`.
 */s.export(r,"cast",()=>f),/**
 * Adds a 1-sized dimension at index "axis".
 * @param x Input tensor.
 * @param axis Position where to add the new axis.
 * @returns Result of the dimension expansion.
 */s.export(r,"expandDims",()=>m),/**
 * Repeats a 2D tensor.
 *
 * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output
 * will have shape `[samples, 2, dim]`.
 *
 * @param x Input tensor.
 * @param n Integer, number of times to repeat.
 * @returns The result of the repeat operation.
 * @throws ValueError: If input tensor is not 2D.
 */s.export(r,"repeat",()=>g),/**
 * Flatten a Tensor into 1D.
 * @param x Input tensor.
 * @return The result of the flattening `x`.
 */s.export(r,"flatten",()=>x),/**
 * Turn a nD tensor into a 2D tensor with same 0th dimension.
 * In other words, it flattens each data samples of a batch.
 *
 * @param x The tensor to flatten. The rank of this tensor is required to be 2
 *   or higher.
 * @return The result of the flattening.
 */s.export(r,"batchFlatten",()=>b),/**
 * Do slicing along the first axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the first axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */s.export(r,"sliceAlongFirstAxis",()=>y),/**
 * Do slicing along the last axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the last axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */s.export(r,"sliceAlongLastAxis",()=>j),/**
 * Do slicing along the sepcified axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size of the slice along the chosen axis.
 * @param choose an axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */s.export(r,"sliceAlongAxis",()=>_),/**
 * Concatenates a list of tensors alongside the specified axis.
 * @param tensors `Array` of tensors to concatenate.
 * @param axis Concatenation axis.
 * @returns The result of the concatenation.
 */s.export(r,"concatenate",()=>k),/**
 * Concatenate two arrays along the first dimension.
 * @param a The 1st `tf.Tensor` to concatenate.
 * @param b The 2nd `tf.Tensor` to concatenate.
 * @returns Result of the concatenation.
 * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.
 */s.export(r,"concatAlongFirstAxis",()=>I),/**
 * Creates a tensor by tiling `x` by `n`.
 * @param x A tensor.
 * @param n An Array of integers or a single integer. If an Array, the length
 *   must be the same as the number of dimensions in `x`. If a single integer,
 *   it will be treated as an Array of length 1.
 */s.export(r,"tile",()=>w),/* Creation of random tensors. *//**
 * Get a tensor with normal distribution of values.
 *
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @return The normal tensor.
 */s.export(r,"randomNormal",()=>C),/* Linear Algebra *//**
 * Multiply two tensors and returns the result as a tensor.
 *
 * For 2D tensors, this is equivalent to matrix multiplication (matMul).
 * For tensors of higher ranks, it follows the Theano behavior,
 * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:
 *
 * For N dimensions it is a sum product over the last axis of x and the
 * second-to-last of y:
 *
 * @param a A tensor of at least rank 2.
 * @param b A tensor of at least rank 2.
 * @param activation (optional) A string identifying the activation
 *   function.
 * @return Result of the dot operation.
 */s.export(r,"dot",()=>S),/**
 * Compute the sign Tensor of an input Tensor.
 *
 * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.
 * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.
 * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.
 *
 * @param x Input `tf.Tensor`.
 * @return The sign `tf.Tensor`.
 */s.export(r,"sign",()=>T),/**
 * Computes the one-hot representation of an integer tensor.
 * @param indices nD integer tensor of shape
 *   `(batch_size, dim1, dim2, ... dim(n-1))`
 * @param numClasses Integer, number of classes to consider.
 * @returns (n + 1)D one hot representation of the input
 *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`
 */s.export(r,"oneHot",()=>N),/* Elementary math functions. *//**
 * Retrieves the elements of indices `indices` in the tensor `reference`.
 * @param reference A tensor.
 * @param indices An integer tensor of indices or an `Array` of integers.
 * @param axis Axis along which to perform the gather operation.
 * @returns The result of the gathering as a tensor.
 */s.export(r,"gather",()=>E),/**
 * Element-wise square.
 * @param x Input tensor.
 * @return element-wise x^2
 */s.export(r,"square",()=>F),/**
 * Element-wise exponentiation.
 *
 * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which
 *   takes advatnage of the backend's (e.g., TensorFlow's) automatic
 * conversion to tensor. Here we allow `a` to be either a number or a tensor.
 *
 * @param x The base tensor.
 * @param a The exponent, tensor or number. If a number, it is rounded to the
 *   nearest integer and converted to a tensor.
 * @returns A tensor of the same shape as `x`.
 */s.export(r,"pow",()=>A),/* Neural-network operations. *//**
 * Add a bias to a tensor.
 *
 * @param x The tensor to add the bias to.
 * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.
 * @return Result of the bias adding.
 * @throws ValueError: If the rank of `bias` is incorrect.
 */s.export(r,"biasAdd",()=>D),/**
 * Exponential linear unit (ELU).
 * @param x A tensor or variable to compute the activation function for.
 * @param alpha: A scalar, a scaling factor for the negative section.
 * @return Output of the ELU operation.
 */s.export(r,"elu",()=>$),/**
 * Softsign of a tensor.
 *
 * Defined as x / (abs(x) + 1), element-wise.
 *
 * @param x: Input.
 * @returns Output.
 */s.export(r,"softsign",()=>P),/**
 * Sets entries in `x` to zero at random, while scaling the entire tensor.
 *
 * @param x input tensor.
 * @param level fraction of the entries in the tensor that will be set to 0.
 * @param noiseShape shape of randomly generated keep/drop flags, must be
 *   broadcastable to the shape of `x`. Optional.
 * @param seed random seed to ensure determinism. Optional.
 * @returns Result of the dropout operation.
 */s.export(r,"dropout",()=>z),/**
 * Element-wise, segment-wise linear approximation of sigmoid.
 *
 * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.
 * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.
 *
 * @param x Input tensor.
 * @returns Output tensor.
 */s.export(r,"hardSigmoid",()=>M),/**
 * Invoke `x` in the training phase, and `alt` otherwise.
 *
 * Porting Note: We do not create placeholder tensors for the `training`
 * boolean flag here, because there is no such thing in the TF.js imperative
 * backend.
 *
 * @param x The function to invoke iff `training` is `true`.
 * @param alt The function to invoke iff `training` is `false`.
 * @param training Boolean flag for whether training phase is active.
 * @returns The return value of `x()` if `training` is `true`, or the return
 *   value of `alt()` if `training` is `false`.
 */s.export(r,"inTrainPhase",()=>O);var n=e("@tensorflow/tfjs-core"),a=e("../common"),o=e("../errors"),i=e("../utils/math_utils"),l=e("./common");// tslint:enable
/* Setting and getting backend from deeplearn.js. */// Default deeplearn.js backend is WebGL (GPU).
let u="webgl";function p(e){n.setBackend(e),u=e}function c(){return u}function d(){return!1}function h(e){let t=e.shape;return t.length>0?t.reduce((e,t)=>e*t):1}function f(e,t){return n.cast(e,t)}function m(e,t=-1){let r=e.shape.slice();return t<0&&(t=r.length+t+1),r.splice(t,0,1),n.reshape(e,r)}function g(e,t){return(0,n.tidy)(()=>{if(2!==e.shape.length)throw new o.ValueError(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);let r=m(e,1);return w(r,[1,t,1])})}function x(e){let t=[i.arrayProd(e.shape)];return n.reshape(e,t)}function b(e){if(e.rank<=1)throw new o.ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);let t=[e.shape[0],i.arrayProd(e.shape,1)];return n.reshape(e,t)}function y(e,t,r){return(0,n.tidy)(()=>{switch(e.rank){case 1:return n.slice1d(e,t,r);case 2:return n.slice2d(e,[t,0],[r,e.shape[1]]);case 3:return n.slice3d(e,[t,0,0],[r,e.shape[1],e.shape[2]]);case 4:return n.slice4d(e,[t,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3]]);case 5:return n.slice(e,[t,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return n.slice(e,[t,0,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new o.ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function j(e,t,r){return(0,n.tidy)(()=>{switch(e.rank){case 1:return n.slice1d(e,t,r);case 2:return n.slice2d(e,[0,t],[e.shape[0],r]);case 3:return n.slice3d(e,[0,0,t],[e.shape[0],e.shape[1],r]);case 4:return n.slice4d(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],r]);default:throw new o.ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function _(e,t,r,s){return(0,n.tidy)(()=>{switch(e.rank){case 1:return n.slice1d(e,t,r);case 2:switch(s){case 1:return y(e,t,r);case 2:return j(e,t,r);default:throw new o.ValueError(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return y(e,t,r);case 2:return n.slice3d(e,[0,t,0],[e.shape[0],r,e.shape[2]]);case 3:return j(e,t,r);default:throw new o.ValueError(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return y(e,t,r);case 2:return n.slice4d(e,[0,t,0,0],[e.shape[0],r,e.shape[2],e.shape[3]]);case 3:return n.slice4d(e,[0,0,t,0],[e.shape[0],e.shape[1],r,e.shape[3]]);case 4:return j(e,t,r);default:throw new o.ValueError(`The axis is not within the rank of the tensor ${s}`)}default:throw new o.ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function k(e,t=-1){let r;// Porting Note: Sparse concat is not supported yet.
return t<0&&(t=0!==(r=e[0].rank)?r:0),t===e[0].rank&&//   in the interval [-rank, rank).
(t=-1),n.concat(e,t)}function I(e,t){switch(e.rank){case 1:return n.concat1d([e,t]);case 2:return n.concat2d([e,t],0);case 3:return n.concat3d([e,t],0);case 4:return n.concat4d([e,t],0);default:throw new o.ValueError(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function w(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new o.ValueError(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return n.tile(e,t)}function C(e,t=0,r=1,s,a){return n.randomNormal(e,t,r,s,a)}function S(e,t,r,s){if(e.rank<2||t.rank<2)throw new o.NotImplementedError(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){let r=e.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(r!==s)throw new o.NotImplementedError(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}// Handle basic 2D x 2D case.
if(2===e.rank&&2===t.rank)// tfc.fused.matMul only fuses certain activation functions. Unsupported
// activation functions are treated as 'linear' activations, which is
// equivalent to a no-op.
return n.fused.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?R(e.rank,s,(0,l.imageDataFormat)()):null,activation:r});{// Reshape x into the analogous 2D Tensor.
let a=e.shape.slice(),o=a.pop();// Holds all but the last dim of x.
e=n.reshape(e,[-1,o]);// Reshape y into the analogous 2D Tensor, and keep track of the
// required dimensions to reproduce the output shape.
let i=t.shape.slice(),u=i.pop(),p=i.pop(),c=[...i,u],d=Array.from({length:t.rank},(e,r)=>0===r?t.rank-2:r<=t.rank-2?r-1:r);t=n.reshape(n.transpose(t,d),[p,-1]);// Multiply x and y as 2D Tensors, and then reshape back to original.
let h=[...a,...c];return n.reshape(n.fused.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?R(e.rank,s,(0,l.imageDataFormat)()):null,activation:r}),h)}}function T(e){// TODO(cais): Move to the core.
return(0,n.tidy)(()=>{let t=(0,n.zerosLike)(e),r=(0,n.onesLike)(e);return(0,n.where)(n.equal(e,t),t,(0,n.where)(n.greater(e,(0,n.zerosLike)(e)),r,n.mul(-1,r)))})}function N(e,t){return(0,n.tidy)(()=>{if(1!==e.rank)throw Error("Only 1D one-hot tensors are supported in the deeplearn backend, at present.");return e=n.cast(e,"int32"),n.cast(n.oneHot(e,t),"float32")})}function E(e,t,r){return(0,n.tidy)(()=>(t=Array.isArray(t)?(0,n.tensor1d)(t,"int32"):n.cast(t,"int32"),n.gather(e,t,r)))}function F(e){return n.mul(e,e)}function A(e,t){return(0,n.tidy)(()=>{if("number"==typeof t&&(t=(0,n.scalar)(Math.round(t),"int32")),"int32"!==t.dtype)throw new o.NotImplementedError(`Non-int32 dtype (${t.dtype}) is not supported by pow() yet`);return n.pow(e,t)})}/**
 * Reshapes bias tensor according to rank of x.
 */function R(e,t,r){let s=t.shape;if(1!==t.rank&&t.rank!==e)throw new o.ValueError(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===r)return 1===s.length?n.reshape(t,[1,s[0],1,1,1]):n.reshape(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===r)return 1===s.length?n.reshape(t,[1,1,1,1,s[0]]):n.reshape(t,[1].concat(s))}else if(4===e){if("channelsFirst"===r)return 1===s.length?n.reshape(t,[1,s[0],1,1]):n.reshape(t,[1,s[2],s[0],s[1]]);if("channelsLast"===r)return 1===s.length?n.reshape(t,[1,1,1,s[0]]):n.reshape(t,[1].concat(s))}else if(3===e){if("channelsFirst"===r)return 1===s.length?n.reshape(t,[1,s[0],1]):n.reshape(t,[1,s[1],s[0]]);if("channelsLast"===r)return 1===s.length?n.reshape(t,[1,1,s[0]]):n.reshape(t,[1].concat(s))}else if(e<3)return t;throw new o.ValueError(`Unsupported input rank by biasAdd: ${t.rank}`)}function D(e,t,r){return(0,n.tidy)(()=>(null==r&&(r=(0,l.imageDataFormat)()),(0,a.checkDataFormat)(r),n.add(e,R(e.rank,t,r))))}function $(e,t=1){// TODO(cais): Add support for alpha values other than 1.
if(1!==t)throw new o.NotImplementedError(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return n.elu(e)}function P(e){return(0,n.tidy)(()=>n.div(e,n.add(n.abs(e),1)))}function z(e,t,r,s){return(0,n.tidy)(()=>n.dropout(e,t,r,s))}function M(e){return(0,n.tidy)(()=>{let t=n.add(.5,n.mul(.2,e));return n.clipByValue(t,0,1)})}function O(e,t,r=!1){return r?e():t()}},{"@tensorflow/tfjs-core":"U1ela","../common":"JNHtR","../errors":"2onZT","../utils/math_utils":"4BJyC","./common":"02oHM","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4BJyC":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Math utility functions.
 *
 * This file contains some frequently used math function that operates on
 * number[] or Float32Array and return a number. Many of these functions are
 * not-so-thick wrappers around TF.js Core functions. But they offer the
 * convenience of
 * 1) not having to convert the inputs into Tensors,
 * 2) not having to convert the returned Tensors to numbers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Determine if a number is an integer.
 */s.export(r,"isInteger",()=>a),/**
 * Calculate the product of an array of numbers.
 * @param array The array to calculate the product over.
 * @param begin Beginning index, inclusive.
 * @param end Ending index, exclusive.
 * @return The product.
 */s.export(r,"arrayProd",()=>o),/**
 * Compute minimum value.
 * @param array
 * @return minimum value.
 */s.export(r,"min",()=>i),/**
 * Compute maximum value.
 * @param array
 * @return maximum value
 */s.export(r,"max",()=>l),/**
 * Compute sum of array.
 * @param array
 * @return The sum.
 */s.export(r,"sum",()=>u),/**
 * Compute mean of array.
 * @param array
 * @return The mean.
 */s.export(r,"mean",()=>p),/**
 * Compute variance of array.
 * @param array
 * @return The variance.
 */s.export(r,"variance",()=>c),/**
 * Compute median of array.
 * @param array
 * @return The median value.
 */s.export(r,"median",()=>d),/**
 * Generate an array of integers in [begin, end).
 * @param begin Beginning integer, inclusive.
 * @param end Ending integer, exclusive.
 * @returns Range array.
 * @throws ValueError, iff `end` < `begin`.
 */s.export(r,"range",()=>h);var n=e("../errors");function a(e){return e===parseInt(e.toString(),10)}function o(e,t,r){null==t&&(t=0),null==r&&(r=e.length);let s=1;for(let n=t;n<r;++n)s*=e[n];return s}function i(e){// same behavior as tf.min()
if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let r=0;r<e.length;r++){let s=e[r];s<t&&(t=s)}return t}function l(e){// same behavior as tf.max()
if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let r=0;r<e.length;r++){let s=e[r];s>t&&(t=s)}return t}function u(e){let t=0;for(let r=0;r<e.length;r++){let s=e[r];t+=s}return t}function p(e){return u(e)/e.length}function c(e){let t=p(e),r=e.map(e=>e-t),s=0;for(let e=0;e<r.length;e++){let t=r[e];s+=t*t}return s/e.length}function d(e){let t=e.slice().sort((e,t)=>e-t),r=Math.floor((t.length-1)/2),s=Math.ceil((t.length-1)/2);return r===s?t[r]:(t[r]+t[s])/2}function h(e,t){if(t<e)throw new n.ValueError(`end (${t}) < begin (${e}) is forbidden.`);let r=[];for(let s=e;s<t;++s)r.push(s);return r}},{"../errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"02oHM":[function(e,t,r){let s;/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),/**
 * Returns the value of the fuzz factor used in numeric expressions.
 */n.export(r,"epsilon",()=>o),/**
 * Sets the value of the fuzz factor used in numeric expressions.
 * @param e New value of epsilon.
 */n.export(r,"setEpsilon",()=>i),/**
 * Returns the default image data format convention.
 */n.export(r,"imageDataFormat",()=>l);var a=e("@tensorflow/tfjs-core");function o(){return null==s&&(s=(0,a.backend)().epsilon()),s}function i(e){s=e}function l(){return"channelsLast"}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eQ0ub:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"VALID_FAN_MODE_VALUES",()=>n),s.export(r,"VALID_DISTRIBUTION_VALUES",()=>a),s.export(r,"initializerClassNames",()=>o);let n=["fanIn","fanOut","fanAvg"],a=["normal","uniform","truncatedNormal"],o=["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identity"]},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kXuwT:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// tslint:enable
/**
 * Determine whether the input is an Array of Shapes.
 */s.export(r,"isArrayOfShapes",()=>a),/**
 * Special case of normalizing shapes to lists.
 *
 * @param x A shape or list of shapes to normalize into a list of Shapes.
 * @return A list of Shapes.
 */s.export(r,"normalizeShapeList",()=>o),/**
 * Helper function to obtain exactly one Tensor.
 * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.
 * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.
 * @throws ValueError: If `xs` is an `Array` and its length is not 1.
 */s.export(r,"getExactlyOneTensor",()=>i),/**
 * Helper function to obtain exactly on instance of Shape.
 *
 * @param shapes Input single `Shape` or Array of `Shape`s.
 * @returns If input is a single `Shape`, return it unchanged. If the input is
 *   an `Array` containing exactly one instance of `Shape`, return the instance.
 *   Otherwise, throw a `ValueError`.
 * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not
 *   1.
 */s.export(r,"getExactlyOneShape",()=>l);var n=e("../errors");function a(e){return Array.isArray(e)&&Array.isArray(e[0])}function o(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function i(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new n.ValueError(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function l(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))return e;if(1===e.length)return e[0];throw new n.ValueError(`Expected exactly 1 Shape; got ${e.length}`)}},{"../errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aAuns:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Count the elements in an Array of LayerVariables.
 *
 * @param weights: The LayerVariables of which the constituent numbers are to
 *   be counted.
 * @returns A count of the elements in all the LayerVariables
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e){let t=0;for(let r of e)0===r.shape.length?t+=1:t+=r.shape.reduce((e,t)=>e*t);return t}s.defineInteropFlag(r),s.export(r,"countParamsInWeights",()=>n)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lkqSL:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a
 * dtype and shape, but its value is mutable.  The value is itself represented
 * as a`tf.Tensor`, and can be read with the `read()` method and updated with
 * the `write()` method.
 */s.export(r,"LayerVariable",()=>u),/**
 * Create a Variable.
 * @param x The initial value of the `Variable`.
 * @param dtype optional, the type of the variable.
 * @param name optional, the name of the variable, default provided by
 * Variable.
 * @param constraint optional, a constraint to be applied after every update.
 * @return The newly instantiated `Variable`.
 */s.export(r,"variable",()=>p),/**
 * Instantiates an all-zeros Variable and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-zero Variable.
 */s.export(r,"zerosVariable",()=>c),/**
 * Instantiates an all-zeros tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */s.export(r,"zerosLike",()=>d),/**
 * Instantiates an all-ones tensor and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-ones Variable.
 */s.export(r,"onesVariable",()=>h),/**
 * Instantiates an all-ones tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */s.export(r,"onesLike",()=>f),/**
 * Instantiate an identity matrix and returns it, as a Variable
 *
 * @param size Number of rows/columns.
 * @param dtype Data type of returned Variable.
 * @param name Name of returned Variable.
 * @return A Variable, an identity matrix.
 */s.export(r,"eyeVariable",()=>m),/**
 * Get a Variable with uniform distribution of values.
 * @param shape Shape of the tensor.
 * @param minval Lower bound of the uniform distribution.
 * @param maxval Upper bound of the uniform distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The uniform-random Variable.
 */s.export(r,"randomUniformVariable",()=>g),/**
 * Get a Variable with truncated-normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */s.export(r,"truncatedNormalVariable",()=>x),/**
 * Get a Variable with normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */s.export(r,"randomNormalVariable",()=>b),/**
 * Update the value of a Variable.
 * @param x The Variable to be updated.
 * @param xNew The new value to update to.
 * @return The Variable updated.
 */s.export(r,"update",()=>y),/**
 * Update the value of a Variable by adding an increment.
 * @param x The Variable to be updated.
 * @param increment The incrment to add to `x`.
 * @return The Variable updated.
 */s.export(r,"updateAdd",()=>j),/**
 * Update the value of a Variable by subtracting a decrement.
 * @param x The Variable to be updated.
 * @param decrement The decrement to subtract from `x`.
 * @return The Variable updated.
 */s.export(r,"updateSub",()=>_),/**
 * Get the values of an array of Variables.
 *
 * @param tensors An `Array` of `Variable`s to get the values of.
 * @return The values of the inputs, as an `Array` of`tf.Tensor`s.
 */s.export(r,"batchGetValue",()=>k),/**
 * Update the value of multiple Variables at once.
 *
 * @param variablesAndValues An `Array`, each element is of type
 *   [Variable, Tensor]. The first item is the
 *   `Variable` of which the value is to be updated. The second item
 *   carries the new value.
 */s.export(r,"batchSetValue",()=>I),/**
 * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.
 * @param lossFn A function which returns a Scalar to be used as the function
 *   value (i.e., numerator) for differentiation.
 * @param variables List of variables to be used as the independent variables
 *   (i.e., denominator) for differentiation.
 * @returns An Array of gradients tensors.
 */s.export(r,"gradients",()=>w);var n=e("@tensorflow/tfjs-core"),a=e("./backend/state"),o=e("./common"),i=e("./errors");let l="Variable";class u{/**
     * Construct Variable from a `tf.Tensor`.
     *
     * If not explicitly named, the Variable will be given a name with the
     * prefix 'Variable'. Variable names are unique. In the case of name
     * collision, suffixies '_<num>' will be added to the name.
     *
     * @param val Initial value of the Variable.
     * @param name Name of the variable. If `null` or `undefined` is provided, it
     *   will default a name with the prefix 'Variable'.
     * @param constraint Optional, projection function to be applied to the
     * variable after optimize updates
     * @throws ValueError if `name` is `null` or `undefined`.
     */constructor(e,t="float32",r=l,s=!0,i=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=(0,a.getNextUniqueTensorId)(),r=null==r?l:r,this.originalName=(0,o.getScopedTensorName)(r),this.name=(0,o.getUniqueTensorName)(this.originalName),this.trainable_=s,this.constraint=i,this.val=n.variable(e,this.trainable_,this.name,this.dtype)}/**
     * Get a snapshot of the Variable's value.
     *
     * The returned value is a snapshot of the Variable's value at the time of
     * the invocation. Future mutations in the value of the tensor will only
     * be reflected by future calls to this method.
     */read(){return this.assertNotDisposed(),this.val}/**
     * Update the value of the Variable.
     *
     * @param newVal: The new value to update to. Must be consistent with the
     *   dtype and shape of the Variable.
     * @return This Variable.
     */write(e){return(// TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.
this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this)}/**
     * Dispose this LayersVariable instance from memory.
     */dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function p(e,t,r,s){return new u(e,t,r,!0,s)}function c(e,t,r){// TODO(cais): Implement logic for dtype.
return new u(n.zeros(e),t,r)}function d(e,t,r){return new u(n.zerosLike(e),t,r)}function h(e,t,r){// TODO(cais): Implement logic for dtype.
let s=n.ones(e);return new u(s,t,r)}function f(e,t,r){let s=n.onesLike(e);return new u(s,t,r)}function m(e,t,r){return new u(n.eye(e),t,r)}function g(e,t,r,s,a,o="randomUniform"){return new u(n.randomUniform(e,t,r,s),s,o)}function x(e,t=0,r=1,s,a,o="truncatedNormal"){if("float32"!==// TODO(cais): Implement logic for dtype and seed once they are supported
// by deeplearn.js.
(s=s||"float32")&&"int32"!==s)throw new i.NotImplementedError(`randomNormal does not support dType ${s}.`);return new u(n.truncatedNormal(e,t,r,s,a),s,o)}function b(e,t=0,r=1,s,a,o="randomNormal"){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new i.NotImplementedError(`randomNormalVariable does not support dType ${s}.`);return new u(n.randomNormal(e,t,r,s,a),s,o)}function y(e,t){return e.write(t)}function j(e,t){return e.write(n.add(e.read(),t))}function _(e,t){return e.write(n.sub(e.read(),t))}function k(e){return e.map(e=>e.read())}function I(e){e.forEach(e=>{let t=e[0];t.write(e[1])})}function w(e,t){// TODO(cais): The return type signature can be simplified if deeplearn makes
//   the corresponding type public.
let r=t.map(e=>e.read()),s=(0,n.variableGrads)(e,r);return t.map(e=>s.grads[e.name])}},{"@tensorflow/tfjs-core":"U1ela","./backend/state":"7msxH","./common":"JNHtR","./errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i75nt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("./gradients/Abs_grad"),n=e("./gradients/Acos_grad"),a=e("./gradients/Acosh_grad"),o=e("./gradients/Add_grad"),i=e("./gradients/AddN_grad"),l=e("./gradients/ArgMax_grad"),u=e("./gradients/ArgMin_grad"),p=e("./gradients/Asin_grad"),c=e("./gradients/Asinh_grad"),d=e("./gradients/Atan2_grad"),h=e("./gradients/Atan_grad"),f=e("./gradients/Atanh_grad"),m=e("./gradients/AvgPool3D_grad"),g=e("./gradients/AvgPool_grad"),x=e("./gradients/BatchMatMul_grad"),b=e("./gradients/BatchToSpaceND_grad"),y=e("./gradients/BroadcastTo_grad"),j=e("./gradients/Cast_grad"),_=e("./gradients/Ceil_grad"),k=e("./gradients/ClipByValue_grad"),I=e("./gradients/ComplexAbs_grad"),w=e("./gradients/Concat_grad"),C=e("./gradients/Conv2D_grad"),S=e("./gradients/Conv2DBackpropInput_grad"),T=e("./gradients/Conv3D_grad"),N=e("./gradients/Cos_grad"),E=e("./gradients/Cosh_grad"),F=e("./gradients/Cumsum_grad"),A=e("./gradients/DepthwiseConv2dNative_grad"),R=e("./gradients/Dilation2D_grad"),D=e("./gradients/Elu_grad"),$=e("./gradients/Erf_grad"),P=e("./gradients/Exp_grad"),z=e("./gradients/ExpandDims_grad"),M=e("./gradients/Expm1_grad"),O=e("./gradients/Floor_grad"),L=e("./gradients/FloorDiv_grad"),B=e("./gradients/FusedBatchNorm_grad"),U=e("./gradients/GatherV2_grad"),V=e("./gradients/GreaterEqual_grad"),G=e("./gradients/Identity_grad"),W=e("./gradients/IsFinite_grad"),q=e("./gradients/IsInf_grad"),K=e("./gradients/IsNan_grad"),H=e("./gradients/LeakyRelu_grad"),X=e("./gradients/Log1p_grad"),Y=e("./gradients/Log_grad"),Z=e("./gradients/LogSoftmax_grad"),J=e("./gradients/LRN_grad"),Q=e("./gradients/Max_grad"),ee=e("./gradients/Maximum_grad"),et=e("./gradients/MaxPool3D_grad"),er=e("./gradients/MaxPool_grad"),es=e("./gradients/Mean_grad"),en=e("./gradients/Min_grad"),ea=e("./gradients/Minimum_grad"),eo=e("./gradients/MirrorPad_grad"),ei=e("./gradients/Mod_grad"),el=e("./gradients/Multiply_grad"),eu=e("./gradients/Neg_grad"),ep=e("./gradients/OneHot_grad"),ec=e("./gradients/OnesLike_grad"),ed=e("./gradients/Pack_grad"),eh=e("./gradients/PadV2_grad"),ef=e("./gradients/Pow_grad"),em=e("./gradients/Prelu_grad"),eg=e("./gradients/Prod_grad"),ex=e("./gradients/RealDiv_grad"),ev=e("./gradients/Reciprocal_grad"),eb=e("./gradients/Relu6_grad"),ey=e("./gradients/Relu_grad"),ej=e("./gradients/Reshape_grad"),e_=e("./gradients/ResizeBilinear_grad"),ek=e("./gradients/ResizeNearestNeighbor_grad"),eI=e("./gradients/Reverse_grad"),ew=e("./gradients/Round_grad"),eC=e("./gradients/Rsqrt_grad"),eS=e("./gradients/Select_grad"),eT=e("./gradients/Selu_grad"),eN=e("./gradients/Sigmoid_grad"),eE=e("./gradients/Sign_grad"),eF=e("./gradients/Sin_grad"),eA=e("./gradients/Sinh_grad"),eR=e("./gradients/Slice_grad"),eD=e("./gradients/Softmax_grad"),e$=e("./gradients/Softplus_grad"),eP=e("./gradients/SpaceToBatchND_grad"),ez=e("./gradients/SplitV_grad"),eM=e("./gradients/Sqrt_grad"),eO=e("./gradients/Square_grad"),eL=e("./gradients/SquaredDifference_grad"),eB=e("./gradients/Step_grad"),eU=e("./gradients/Sub_grad"),eV=e("./gradients/Sum_grad"),eG=e("./gradients/Tan_grad"),eW=e("./gradients/Tanh_grad"),eq=e("./gradients/Tile_grad"),eK=e("./gradients/Transpose_grad"),eH=e("./gradients/Unpack_grad"),eX=e("./gradients/UnsortedSegmentSum_grad"),eY=e("./gradients/ZerosLike_grad"),eZ=e("./kernel_registry");// Export all kernel configs here so that the package can auto register them
let eJ=[s.absGradConfig,n.acosGradConfig,a.acoshGradConfig,o.addGradConfig,i.addNGradConfig,l.argMaxGradConfig,u.argMinGradConfig,p.asinGradConfig,c.asinhGradConfig,d.atan2GradConfig,h.atanGradConfig,f.atanhGradConfig,m.avgPool3DGradConfig,g.avgPoolGradConfig,x.batchMatMulGradConfig,b.batchToSpaceNDGradConfig,y.broadcastToGradConfig,j.castGradConfig,_.ceilGradConfig,k.clipByValueGradConfig,I.complexAbsGradConfig,w.concatGradConfig,S.conv2DBackpropInputGradConfig,C.conv2DGradConfig,T.conv3DGradConfig,N.cosGradConfig,E.coshGradConfig,F.cumsumGradConfig,A.depthwiseConv2dNativeGradConfig,R.dilation2dGradConfig,ex.divGradConfig,D.eluGradConfig,$.erfGradConfig,P.expGradConfig,z.expandDimsGradConfig,M.expm1GradConfig,L.floorDivGradConfig,O.floorGradConfig,B.fusedBatchNormGradConfig,U.gatherGradConfig,V.greaterEqualGradConfig,G.identityGradConfig,W.isFiniteGradConfig,q.isInfGradConfig,K.isNanGradConfig,H.leakyReluGradConfig,X.log1pGradConfig,Y.logGradConfig,Z.logSoftmaxGradConfig,J.lrnGradConfig,Q.maxGradConfig,Q.maxGradConfig,ee.maximumGradConfig,et.maxPool3DGradConfig,er.maxPoolGradConfig,es.meanGradConfig,en.minGradConfig,ea.minimumGradConfig,eo.mirrorPadGradConfig,ei.modGradConfig,el.multiplyGradConfig,eu.negGradConfig,ep.oneHotGradConfig,ec.onesLikeGradConfig,ed.packGradConfig,eh.padV2GradConfig,eh.padV2GradConfig,ef.powGradConfig,em.preluGradConfig,eg.prodGradConfig,ev.reciprocalGradConfig,eb.relu6GradConfig,ey.reluGradConfig,ej.reshapeGradConfig,e_.resizeBilinearGradConfig,ek.resizeNearestNeighborGradConfig,eI.reverseGradConfig,ew.roundGradConfig,eC.rsqrtGradConfig,eS.selectGradConfig,eT.seluGradConfig,eN.sigmoidGradConfig,eE.signGradConfig,eF.sinGradConfig,eA.sinhGradConfig,eR.sliceGradConfig,eD.softmaxGradConfig,e$.softplusGradConfig,eP.spaceToBatchNDGradConfig,eP.spaceToBatchNDGradConfig,ez.splitVGradConfig,ez.splitVGradConfig,eM.sqrtGradConfig,eL.squaredDifferenceGradConfig,eO.squareGradConfig,eB.stepGradConfig,eU.subGradConfig,eV.sumGradConfig,eG.tanGradConfig,eW.tanhGradConfig,eq.tileGradConfig,eK.transposeGradConfig,eH.unpackGradConfig,eX.unsortedSegmentSumGradConfig,eY.zerosLikeGradConfig];for(let e of eJ)(0,eZ.registerGradient)(e)},{"./gradients/Abs_grad":"9hQdb","./gradients/Acos_grad":"5jmVz","./gradients/Acosh_grad":"aFmPV","./gradients/Add_grad":"7nvF9","./gradients/AddN_grad":"lVftV","./gradients/ArgMax_grad":"5SZrx","./gradients/ArgMin_grad":"kEi62","./gradients/Asin_grad":"1ualB","./gradients/Asinh_grad":"3BDxO","./gradients/Atan2_grad":"1qwqz","./gradients/Atan_grad":"iIZvu","./gradients/Atanh_grad":"2jyJt","./gradients/AvgPool3D_grad":"fq7mK","./gradients/AvgPool_grad":"kk5Mt","./gradients/BatchMatMul_grad":"feacA","./gradients/BatchToSpaceND_grad":"bNvDR","./gradients/BroadcastTo_grad":"6GJLN","./gradients/Cast_grad":"kpTOm","./gradients/Ceil_grad":"4uJ4V","./gradients/ClipByValue_grad":"4qgCN","./gradients/ComplexAbs_grad":"acjsA","./gradients/Concat_grad":"73hkg","./gradients/Conv2D_grad":"8lpjc","./gradients/Conv2DBackpropInput_grad":"lzzoq","./gradients/Conv3D_grad":"dN4y6","./gradients/Cos_grad":"jC5PZ","./gradients/Cosh_grad":"9a21i","./gradients/Cumsum_grad":"jUCZk","./gradients/DepthwiseConv2dNative_grad":"3NjDM","./gradients/Dilation2D_grad":"dlRUO","./gradients/Elu_grad":"e9lZM","./gradients/Erf_grad":"jnzXb","./gradients/Exp_grad":"cZRN6","./gradients/ExpandDims_grad":"hB5gt","./gradients/Expm1_grad":"gZVYx","./gradients/Floor_grad":"64SH9","./gradients/FloorDiv_grad":"3dtMr","./gradients/FusedBatchNorm_grad":"1UCRR","./gradients/GatherV2_grad":"jQ4jW","./gradients/GreaterEqual_grad":"5BM1s","./gradients/Identity_grad":"OYeDJ","./gradients/IsFinite_grad":"d0KQx","./gradients/IsInf_grad":"gHtm4","./gradients/IsNan_grad":"hvFXX","./gradients/LeakyRelu_grad":"dNetb","./gradients/Log1p_grad":"1Ih9U","./gradients/Log_grad":"eeUap","./gradients/LogSoftmax_grad":"cFR9U","./gradients/LRN_grad":"aGyRj","./gradients/Max_grad":"jIFjL","./gradients/Maximum_grad":"4yjG4","./gradients/MaxPool3D_grad":"aAyCQ","./gradients/MaxPool_grad":"63JTU","./gradients/Mean_grad":"jBnCp","./gradients/Min_grad":"igbgn","./gradients/Minimum_grad":"hvKCI","./gradients/MirrorPad_grad":"bfs83","./gradients/Mod_grad":"8ADyG","./gradients/Multiply_grad":"2Qo7M","./gradients/Neg_grad":"aKDD1","./gradients/OneHot_grad":"hIzFk","./gradients/OnesLike_grad":"k92dD","./gradients/Pack_grad":"91ykg","./gradients/PadV2_grad":"5c87L","./gradients/Pow_grad":"imHwO","./gradients/Prelu_grad":"fbTFQ","./gradients/Prod_grad":"2uoPq","./gradients/RealDiv_grad":"hgQXz","./gradients/Reciprocal_grad":"cCn3D","./gradients/Relu6_grad":"iMVHI","./gradients/Relu_grad":"2jkQG","./gradients/Reshape_grad":"bd95r","./gradients/ResizeBilinear_grad":"8UIwx","./gradients/ResizeNearestNeighbor_grad":"1bBsb","./gradients/Reverse_grad":"zUxEB","./gradients/Round_grad":"19dDG","./gradients/Rsqrt_grad":"h9FY4","./gradients/Select_grad":"cYTd4","./gradients/Selu_grad":"1SjOY","./gradients/Sigmoid_grad":"6hXqy","./gradients/Sign_grad":"ky4z8","./gradients/Sin_grad":"iHucm","./gradients/Sinh_grad":"3wFJL","./gradients/Slice_grad":"umXmE","./gradients/Softmax_grad":"cwl56","./gradients/Softplus_grad":"eYLl4","./gradients/SpaceToBatchND_grad":"1zYn9","./gradients/SplitV_grad":"bRvQI","./gradients/Sqrt_grad":"iwgNj","./gradients/Square_grad":"6BGqe","./gradients/SquaredDifference_grad":"iV6k6","./gradients/Step_grad":"lsigH","./gradients/Sub_grad":"aKnbB","./gradients/Sum_grad":"19rTX","./gradients/Tan_grad":"gXLtC","./gradients/Tanh_grad":"hUKaQ","./gradients/Tile_grad":"ffV4G","./gradients/Transpose_grad":"9LplS","./gradients/Unpack_grad":"55Hev","./gradients/UnsortedSegmentSum_grad":"4WKTK","./gradients/ZerosLike_grad":"6YQn8","./kernel_registry":"dGfMo"}],"9hQdb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"absGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/mul"),i=e("../ops/step");let l={kernelName:n.Abs,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)(e,(0,i.step)((0,a.cast)(r,"float32"),-1))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","../ops/step":"622xd","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5jmVz":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acosGradConfig",()=>d);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div"),i=e("../ops/neg"),l=e("../ops/scalar"),u=e("../ops/sqrt"),p=e("../ops/square"),c=e("../ops/sub");let d={kernelName:n.Acos,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=(0,p.square)((0,a.cast)(r,"float32")),s=(0,u.sqrt)((0,c.sub)((0,l.scalar)(1),t));return(0,i.neg)((0,o.div)(e,s))}}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/neg":"gRzxs","../ops/scalar":"8NgrS","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aFmPV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acoshGradConfig",()=>p);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div"),i=e("../ops/sqrt"),l=e("../ops/square"),u=e("../ops/sub");let p={kernelName:n.Acosh,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=(0,i.sqrt)((0,u.sub)((0,l.square)((0,a.cast)(r,"float32")),1));return(0,o.div)(e,t)}}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7nvF9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/reshape"),i=e("../ops/sum");let l={kernelName:n.Add,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=a.assertAndGetBroadcastShape(r.shape,s.shape);return{a:()=>{let t=e,s=a.getReductionAxes(r.shape,n);return s.length>0&&(t=(0,i.sum)(t,s)),(0,o.reshape)(t,r.shape)},b:()=>{let t=e,r=a.getReductionAxes(s.shape,n);return r.length>0&&(t=(0,i.sum)(t,r)),(0,o.reshape)(t,s.shape)}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/reshape":"hcB7g","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lVftV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addNGradConfig",()=>a);var n=e("../kernel_names");let a={kernelName:n.AddN,saveAllInputs:!0,gradFunc:(e,t)=>{let r={};return t.forEach((t,s)=>{r[s]=()=>e.clone()}),r}}},{"../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5SZrx":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMaxGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.ArgMax,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.zerosLike)(r)}}}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kEi62:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMinGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.ArgMin,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.zerosLike)(r)}}}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1ualB":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asinGradConfig",()=>c);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div"),i=e("../ops/scalar"),l=e("../ops/sqrt"),u=e("../ops/square"),p=e("../ops/sub");let c={kernelName:n.Asin,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,l.sqrt)((0,p.sub)((0,i.scalar)(1),(0,u.square)((0,a.cast)(r,"float32")))))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/scalar":"8NgrS","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3BDxO":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asinhGradConfig",()=>c);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/cast"),i=e("../ops/div"),l=e("../ops/scalar"),u=e("../ops/sqrt"),p=e("../ops/square");let c={kernelName:n.Asinh,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=(0,u.sqrt)((0,a.add)((0,l.scalar)(1),(0,p.square)((0,o.cast)(r,"float32"))));return(0,i.div)(e,t)}}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/scalar":"8NgrS","../ops/sqrt":"5Uzeg","../ops/square":"3G5yp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1qwqz":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan2GradConfig",()=>h);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/broadcast_util"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/neg"),p=e("../ops/reshape"),c=e("../ops/square"),d=e("../ops/sum");let h={kernelName:n.Atan2,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,o.assertAndGetBroadcastShape)(r.shape,s.shape);return{a:()=>{let t=(0,a.add)((0,c.square)(r),(0,c.square)(s)),u=(0,l.mul)(e,(0,i.div)(s,t)),h=(0,o.getReductionAxes)(r.shape,n);return h.length>0&&(u=(0,d.sum)(u,h)),(0,p.reshape)(u,r.shape)},b:()=>{let t=(0,a.add)((0,c.square)(r),(0,c.square)(s)),h=(0,u.neg)((0,l.mul)(e,(0,i.div)(r,t))),f=(0,o.getReductionAxes)(s.shape,n);return f.length>0&&(h=(0,d.sum)(h,f)),(0,p.reshape)(h,s.shape)}}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/broadcast_util":"jK3Iv","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/reshape":"hcB7g","../ops/square":"3G5yp","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iIZvu:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atanGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/cast"),i=e("../ops/div"),l=e("../ops/square");let u={kernelName:n.Atan,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,i.div)(e,(0,a.add)((0,l.square)((0,o.cast)(r,"float32")),1))}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/square":"3G5yp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2jyJt":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atanhGradConfig",()=>p);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div"),i=e("../ops/square"),l=e("../ops/sub"),u=e("../ops/scalar");let p={kernelName:n.Atanh,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,l.sub)((0,u.scalar)(1),(0,i.square)((0,a.cast)(r,"float32"))))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/square":"3G5yp","../ops/sub":"gYa0B","../ops/scalar":"8NgrS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fq7mK:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3DGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/avg_pool_3d_grad");let o={kernelName:n.AvgPool3D,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{filterSize:n,strides:o,pad:i,dimRoundingMode:l}=r;return{x:()=>(0,a.avgPool3dGrad)(e,s,n,o,i,l)}}}},{"../kernel_names":"3i501","../ops/avg_pool_3d_grad":"hQa5u","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hQa5u:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3dGrad",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({avgPool3dGrad_:/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,u,c){let d=(0,o.convertToTensor)(e,"dy","avgPool3dGrad"),h=(0,o.convertToTensor)(t,"input","avgPool3dGrad"),f=d,m=h,g=!1;4===h.rank&&(g=!0,f=(0,p.reshape)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]]),m=(0,p.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),i.assert(5===f.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${f.rank}.`),i.assert(5===m.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${m.rank}.`),(0,l.checkPadOnDimRoundingMode)("avgPool3dGrad",u,c);let x={dy:f,input:m},b=(0,n.ENGINE).runKernel(a.AvgPool3DGrad,x,{filterSize:r,strides:s,pad:u,dimRoundingMode:c});return g?(0,p.reshape)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kk5Mt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPoolGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/avg_pool_grad");let o={kernelName:n.AvgPool,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{filterSize:n,strides:o,pad:i}=r;return{x:()=>(0,a.avgPoolGrad)(e,s,n,o,i)}}}},{"../kernel_names":"3i501","../ops/avg_pool_grad":"hOu7K","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hOu7K:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPoolGrad",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./operation"),u=e("./reshape");let p=(0,l.op)({avgPoolGrad_:/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm used in the forward prop of the op.
 *     'same', 'valid', for more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 */function(e,t,r,s,l){let p=(0,o.convertToTensor)(e,"dy","avgPoolGrad"),c=(0,o.convertToTensor)(t,"input","avgPoolGrad");i.assert(c.rank===p.rank,()=>`Rank of input (${c.rank}) does not match rank of dy (${p.rank})`);let d=c,h=p,f=!1;3===c.rank&&(f=!0,d=(0,u.reshape)(c,[1,c.shape[0],c.shape[1],c.shape[2]]),h=(0,u.reshape)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.assert(4===h.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${h.rank}.`),i.assert(4===d.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${d.rank}.`);let m={dy:h,input:d},g=(0,n.ENGINE).runKernel(a.AvgPoolGrad,m,{filterSize:r,strides:s,pad:l});return f?(0,u.reshape)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],feacA:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchMatMulGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/mat_mul");let o={kernelName:n.BatchMatMul,inputsToSave:["a","b"],gradFunc:(e,t,r)=>{let[s,n]=t,{transposeA:o,transposeB:i}=r;return o||i?!o&&i?{a:()=>(0,a.matMul)(e,n,!1,!1),b:()=>(0,a.matMul)(e,s,!0,!1)}:o&&!i?{a:()=>(0,a.matMul)(n,e,!1,!0),b:()=>(0,a.matMul)(s,e,!1,!1)}:{a:()=>(0,a.matMul)(n,e,!0,!0),b:()=>(0,a.matMul)(e,s,!0,!0)}:{a:()=>(0,a.matMul)(e,n,!1,!0),b:()=>(0,a.matMul)(s,e,!0,!1)}}}},{"../kernel_names":"3i501","../ops/mat_mul":"dpVGA","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bNvDR:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchToSpaceNDGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/space_to_batch_nd");let o={kernelName:n.BatchToSpaceND,gradFunc:(e,t,r)=>{let{blockShape:s,crops:n}=r;return{x:()=>(0,a.spaceToBatchND)(e,s,n)}}}},{"../kernel_names":"3i501","../ops/space_to_batch_nd":"5fear","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6GJLN":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"broadcastToGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/sum");let o={kernelName:n.BroadcastTo,gradFunc:(e,t,r)=>{let s=r.inputShape,n=r.shape,o=Array.from(n);for(let e=s.length-1;e>=0;e--)if(s[e]===n[e])o[e]=1;else if(1!==s[e])throw Error(`broadcastTo(): [${s}] cannot be broadcast to [${n}].`);let i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>(0,a.sum)(e,i,!0)}}}},{"../kernel_names":"3i501","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kpTOm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"castGradConfig",()=>a);var n=e("../kernel_names");let a={kernelName:n.Cast,gradFunc:e=>({x:()=>e.clone()})}},{"../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4uJ4V":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ceilGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.Ceil,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4qgCN":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clipByValueGradConfig",()=>p);var n=e("../kernel_names"),a=e("../ops/greater_equal"),o=e("../ops/less_equal"),i=e("../ops/logical_and"),l=e("../ops/where"),u=e("../ops/zeros_like");let p={kernelName:n.ClipByValue,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{clipValueMin:n,clipValueMax:p}=r;return{x:()=>(0,l.where)((0,i.logicalAnd)((0,a.greaterEqual)(s,n),(0,o.lessEqual)(s,p)),e,(0,u.zerosLike)(e))}}}},{"../kernel_names":"3i501","../ops/greater_equal":"h8ZY5","../ops/less_equal":"joVbJ","../ops/logical_and":"fhBD8","../ops/where":"kAiQD","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],acjsA:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"complexAbsGradConfig",()=>o);var n=e("../kernel_names"),a=e("./Abs_grad");let o={kernelName:n.ComplexAbs,inputsToSave:["x"],gradFunc:a.absGradConfig.gradFunc}},{"../kernel_names":"3i501","./Abs_grad":"9hQdb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"73hkg":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concatGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/split"),o=e("../util");let i={kernelName:n.Concat,saveAllInputs:!0,gradFunc:(e,t,r)=>{let s=t.map(e=>e.shape),{axis:n}=r,i=(0,o.parseAxisParam)(n,t[0].shape)[0],l=s.map(e=>e[i]),u=(0,a.split)(e,l,i);return u.map(e=>()=>e)}}},{"../kernel_names":"3i501","../ops/split":"3RBf7","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8lpjc":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/conv2d_backprop_filter"),o=e("../ops/conv2d_backprop_input"),i=e("../ops/conv_util"),l=e("../util");let u={kernelName:n.Conv2D,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let[s,n]=t,{dilations:u,strides:p,pad:c,dataFormat:d}=r;return l.assert(i.tupleValuesAreOne(u),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${u}'`),{x:()=>(0,o.conv2DBackpropInput)(s.shape,e,n,p,c,d),filter:()=>(0,a.conv2DBackpropFilter)(s,e,n.shape,p,c,d)}}}},{"../kernel_names":"3i501","../ops/conv2d_backprop_filter":"49VWR","../ops/conv2d_backprop_input":"eQKiV","../ops/conv_util":"cCem6","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lzzoq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropInputGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/conv2d"),o=e("../ops/conv2d_backprop_filter");let i={kernelName:n.Conv2DBackpropInput,inputsToSave:["dy","filter"],gradFunc:(e,t,r)=>{let[s,n]=t,{strides:i,pad:l,dataFormat:u,dimRoundingMode:p}=r;return{dy:()=>(0,a.conv2d)(e,n,i,l,u,1/* dilations */,p),filter:()=>(0,o.conv2DBackpropFilter)(e,s,n.shape,i,l,u,p)}}}},{"../kernel_names":"3i501","../ops/conv2d":"8DIXU","../ops/conv2d_backprop_filter":"49VWR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dN4y6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/conv3d_backprop_filter"),o=e("../ops/conv3d_backprop_input"),i=e("../ops/conv_util"),l=e("../util");let u={kernelName:n.Conv3D,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let{dilations:s,strides:n,pad:u}=r;l.assert((0,i.tupleValuesAreOne)(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let[p,c]=t;return{x:()=>(0,o.conv3DBackpropInput)(p.shape,e,c,n,u),filter:()=>(0,a.conv3DBackpropFilter)(p,e,c.shape,n,u)}}}},{"../kernel_names":"3i501","../ops/conv3d_backprop_filter":"dkoqV","../ops/conv3d_backprop_input":"2XOxa","../ops/conv_util":"cCem6","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dkoqV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropFilter",()=>u);var n=e("../engine"),a=e("../kernel_names"),o=e("../util"),i=e("./operation"),l=e("./reshape");let u=(0,i.op)({conv3DBackpropFilter_:/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */function(e,t,r,s,i){let u=e;4===e.rank&&(u=(0,l.reshape)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let p=t;4===p.rank&&(p=(0,l.reshape)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),o.assert(5===u.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${u.shape}.`),o.assert(5===p.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${p.shape}.`),o.assert(5===r.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${r}.`),o.assert(u.shape[4]===r[3],()=>`Error in conv3dDerFilter: depth of input ${u.shape[4]}) must match input depth in filter (${r[3]}.`),o.assert(p.shape[4]===r[4],()=>`Error in conv3dDerFilter: depth of dy (${p.shape[4]}) must match output depth for filter (${r[4]}).`);let c={x:u,dy:p};// tslint:disable-next-line: no-unnecessary-type-assertion
return(0,n.ENGINE).runKernel(a.Conv3DBackpropFilterV2,c,{strides:s,pad:i,filterShape:r})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../util":"6bzqD","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jC5PZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cosGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/mul"),i=e("../ops/neg"),l=e("../ops/sin");let u={kernelName:n.Cos,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)((0,i.neg)((0,l.sin)((0,a.cast)(r,"float32"))),e)}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/sin":"2e5m1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9a21i":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"coshGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/mul"),i=e("../ops/sinh");let l={kernelName:n.Cosh,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)((0,i.sinh)((0,a.cast)(r,"float32")),e)}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","../ops/sinh":"cKBKr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jUCZk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumsumGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/axis_util"),o=e("../ops/cumsum"),i=e("../ops/transpose");let l={kernelName:n.Cumsum,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{axis:n,exclusive:l,reverse:u}=r;return{x:()=>{let t=(0,a.getAxesPermutation)([n],s.rank),r=(0,o.cumsum)(e,n,l,!u);return null!=t&&(r=(0,i.transpose)(r,t)),r}}}}},{"../kernel_names":"3i501","../ops/axis_util":"9ZcyD","../ops/cumsum":"7er4p","../ops/transpose":"lWGmK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3NjDM":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/conv_util"),o=e("../ops/depthwise_conv2d_native_backprop_filter"),i=e("../ops/depthwise_conv2d_native_backprop_input"),l=e("../util");let u={kernelName:n.DepthwiseConv2dNative,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let{dilations:s,strides:n,pad:u,dimRoundingMode:p}=r,c=null==s?[1,1]:s;l.assert(a.tupleValuesAreOne(c),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${c}'`);let[d,h]=t;return l.assert(4===d.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${d.rank}.`),l.assert(4===h.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${h.rank}.`),l.assert(d.shape[3]===h.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),l.assert(a.eitherStridesOrDilationsAreOne(n,c),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${c}'.`),a.checkPadOnDimRoundingMode("depthwiseConv2d",u,p),{x:()=>(0,i.depthwiseConv2dNativeBackpropInput)(d.shape,e,h,n,u,c,p),filter:()=>(0,o.depthwiseConv2dNativeBackpropFilter)(d,e,h.shape,n,u,c,p)}}}},{"../kernel_names":"3i501","../ops/conv_util":"cCem6","../ops/depthwise_conv2d_native_backprop_filter":"kJ7Bm","../ops/depthwise_conv2d_native_backprop_input":"iphiQ","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dlRUO:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2dGradConfig",()=>o);var n=e("../engine"),a=e("../kernel_names");let o={kernelName:a.Dilation2D,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let[s,o]=t,i={x:s,filter:o,dy:e},l={x:s,filter:o,dy:e};return{x:()=>(0,n.ENGINE).runKernel(a.Dilation2DBackpropInput,i,r),filter:()=>(0,n.ENGINE).runKernel(a.Dilation2DBackpropFilter,l,r)}}}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e9lZM:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"eluGradConfig",()=>o);var n=e("../engine"),a=e("../kernel_names");let o={kernelName:a.Elu,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t,s={dy:e,y:r};return{x:()=>(0,n.ENGINE).runKernel(a.EluGrad,s)}}}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jnzXb:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"erfGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/exp"),o=e("../ops/mul"),i=e("../ops/neg"),l=e("../ops/square");let u={kernelName:n.Erf,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t,s=(0,o.mul)((0,a.exp)((0,i.neg)((0,l.square)(r))),2/Math.sqrt(Math.PI));return{x:()=>(0,o.mul)(e,s)}}}},{"../kernel_names":"3i501","../ops/exp":"1ctfc","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/square":"3G5yp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cZRN6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/mul");let o={kernelName:n.Exp,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.mul)(e,r)}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hB5gt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expandDimsGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/reshape");let o={kernelName:n.ExpandDims,inputsToSave:["input"],gradFunc:(e,t)=>{let[r]=t;return{input:()=>(0,a.reshape)(e,r.shape)}}}},{"../kernel_names":"3i501","../ops/reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gZVYx:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expm1GradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/exp"),o=e("../ops/mul");let i={kernelName:n.Expm1,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)(e,(0,a.exp)(r))}}}},{"../kernel_names":"3i501","../ops/exp":"1ctfc","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"64SH9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.Floor,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3dtMr":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorDivGradConfig",()=>h);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/cast"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/neg"),p=e("../ops/reshape"),c=e("../ops/square"),d=e("../ops/sum");let h={kernelName:n.FloorDiv,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,a.assertAndGetBroadcastShape)(r.shape,s.shape);return{a:()=>{let t=(0,i.div)(e,(0,o.cast)(s,"float32")),l=(0,a.getReductionAxes)(r.shape,n);return l.length>0?(0,p.reshape)((0,d.sum)(t,l),r.shape):t},b:()=>{let t=(0,l.mul)(e,(0,o.cast)(r,"float32")),h=(0,a.getReductionAxes)(s.shape,n);h.length>0&&(t=(0,p.reshape)((0,d.sum)(t,h),s.shape));let f=(0,c.square)(s);return(0,u.neg)((0,i.div)(t,(0,o.cast)(f,"float32")))}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/reshape":"hcB7g","../ops/square":"3G5yp","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1UCRR":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fusedBatchNormGradConfig",()=>f);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/broadcast_util"),i=e("../ops/mul"),l=e("../ops/reshape"),u=e("../ops/rsqrt"),p=e("../ops/scalar"),c=e("../ops/sub"),d=e("../ops/sum"),h=e("../ops/tile");let f={kernelName:n.FusedBatchNorm,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,r)=>{let{varianceEpsilon:s}=r,[n,f,m,g]=t,x=null==g?(0,p.scalar)(1):g,b=(0,o.getReductionAxes)(f.shape,n.shape),y=[];if(1===f.rank){for(let e=0;e<n.shape.length-1;++e)y.push(n.shape[e]);y.push(1)}let j=(0,c.sub)(n,f),_=(0,i.mul)(e,x),k=(0,u.rsqrt)((0,a.add)(m,(0,p.scalar)(s))),I=(0,i.mul)((0,i.mul)((0,i.mul)(k,k),k),(0,p.scalar)(-.5));return{x:()=>1===f.rank?(0,l.reshape)((0,i.mul)((0,i.mul)(e,(0,h.tile)((0,l.reshape)(k,[1,1,1,f.shape[0]]),y)),x),n.shape):(0,l.reshape)((0,i.mul)((0,i.mul)(e,k),x),n.shape),mean:()=>{let e=(0,i.mul)((0,i.mul)(k,(0,p.scalar)(-1)),_);return 1===f.rank&&(e=(0,d.sum)(e,b)),(0,l.reshape)(e,f.shape)},variance:()=>{let e=(0,i.mul)((0,i.mul)(I,j),_);return 1===f.rank&&(e=(0,d.sum)(e,b)),(0,l.reshape)(e,f.shape)},scale:()=>{let t=(0,i.mul)(j,k),r=(0,i.mul)(e,t);return 1===f.rank&&(r=(0,d.sum)(r,b)),(0,l.reshape)(r,f.shape)},offset:()=>{let t=e;return 1===f.rank&&(t=(0,d.sum)(t,b)),(0,l.reshape)(t,f.shape)}}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/broadcast_util":"jK3Iv","../ops/mul":"9ihSJ","../ops/reshape":"hcB7g","../ops/rsqrt":"hWtbk","../ops/scalar":"8NgrS","../ops/sub":"gYa0B","../ops/sum":"nMRSa","../ops/tile":"913ES","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jQ4jW:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherGradConfig",()=>p);var n=e("../kernel_names"),a=e("../ops/axis_util"),o=e("../ops/reshape"),i=e("../ops/transpose"),l=e("../ops/unsorted_segment_sum"),u=e("../util");let p={kernelName:n.GatherV2,inputsToSave:["x","indices"],gradFunc:(e,t,r)=>{let[s,n]=t,{axis:p}=r,h=(0,u.parseAxisParam)(p,s.shape)[0];return{x:()=>{let t=s.shape,r=n.size,u=t.slice(0,h),f=u.length,m=t.slice(p,t.length).slice(1),g=m.length,x=c(0,f),b=c(f+1,f+1+g),y=d([u,[r],m]),j=(0,o.reshape)(e,y),_=(0,o.reshape)(n,[r]),k=d([[f],x,b]),I=(0,i.transpose)(j,k),w=(0,l.unsortedSegmentSum)(I,_,s.shape[h]),C=(0,a.getUndoAxesPermutation)(k);return(0,i.transpose)(w,C)},indices:()=>n}}};function c(e,t){let r=[];for(let s=e;s<t;++s)r.push(s);return r}function d(e){let t=[];for(let r=0;r<e.length;++r)for(let s=0;s<e[r].length;++s)t.push(e[r][s]);return t}},{"../kernel_names":"3i501","../ops/axis_util":"9ZcyD","../ops/reshape":"hcB7g","../ops/transpose":"lWGmK","../ops/unsorted_segment_sum":"aMAvh","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5BM1s":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greaterEqualGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.GreaterEqual,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t;return{a:()=>(0,a.zerosLike)(r),b:()=>(0,a.zerosLike)(s)}}}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],OYeDJ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"identityGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/cast");let o={kernelName:n.Identity,gradFunc:e=>({x:()=>(0,a.cast)(e,"float32")})}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d0KQx:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isFiniteGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.IsFinite,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gHtm4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isInfGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.IsInf,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hvFXX:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isNanGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.IsNan,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dNetb:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"leakyReluGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/greater"),o=e("../ops/mul"),i=e("../ops/where");let l={kernelName:n.LeakyRelu,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{alpha:n}=r,l=(0,a.greater)(s,0);// Returns `gradients * (features > 0) + alpha * gradients * (features <=
// 0)`.
return{x:()=>(0,i.where)(l,e,(0,o.mul)(e,n))}}}},{"../kernel_names":"3i501","../ops/greater":"ayzyA","../ops/mul":"9ihSJ","../ops/where":"kAiQD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1Ih9U":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log1pGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/div");let i={kernelName:n.Log1p,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,a.add)(r,1))}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/div":"9dy6L","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eeUap:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div");let i={kernelName:n.Log,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,a.cast)(r,"float32"))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cFR9U:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logSoftmaxGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/exp"),o=e("../ops/mul"),i=e("../ops/sub"),l=e("../ops/sum");let u={kernelName:n.LogSoftmax,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[s]=t,{axis:n}=r;return{logits:()=>{let t=(0,a.exp)(s);return(0,i.sub)(e,(0,o.mul)((0,l.sum)(e,n,!0),t))}}}}},{"../kernel_names":"3i501","../ops/exp":"1ctfc","../ops/mul":"9ihSJ","../ops/sub":"gYa0B","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aGyRj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lrnGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/local_response_normalization_backprop");let o={kernelName:n.LRN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[s,n]=t,{depthRadius:o,bias:i,alpha:l,beta:u}=r;return{x:()=>(0,a.localResponseNormalizationBackprop)(s,n,e,o,i,l,u)}}}},{"../kernel_names":"3i501","../ops/local_response_normalization_backprop":"aEHQx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aEHQx:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"localResponseNormalizationBackprop",()=>i);var n=e("../engine"),a=e("../kernel_names"),o=e("./operation");let i=(0,o.op)({localResponseNormalizationBackprop_:function(e,t,r,s=5,o=1,i=1,l=.5){return(0,n.ENGINE).runKernel(a.LRNGrad,{x:e,y:t,dy:r},{depthRadius:s,bias:o,alpha:i,beta:l})}})},{"../engine":"ldVRX","../kernel_names":"3i501","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jIFjL:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxGradConfig",()=>i);var n=e("../kernel_names"),a=e("../util"),o=e("./min_max_grad_util");let i={kernelName:n.Max,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let{reductionIndices:s}=r,n=t[0],i=t[1],l=a.parseAxisParam(s,n.shape),u=(0,o.gradForMinAndMax)(e,i,n,l);return{x:()=>u.x()}}}},{"../kernel_names":"3i501","../util":"6bzqD","./min_max_grad_util":"d0Is5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d0Is5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Gradient helper function for the min and max operations.
 */s.export(r,"gradForMinAndMax",()=>u);var n=e("../ops/axis_util"),a=e("../ops/cast"),o=e("../ops/equal"),i=e("../ops/mul"),l=e("../ops/reshape");function u(e,t,r,s){return t.rank<r.rank&&(t=(0,l.reshape)(t,n.expandShapeToKeepDim(t.shape,s))),e.rank<r.rank&&(e=(0,l.reshape)(e,n.expandShapeToKeepDim(e.shape,s))),{x:()=>{let s=(0,i.mul)(e,(0,a.cast)((0,o.equal)(r,t),e.dtype));return s}}}},{"../ops/axis_util":"9ZcyD","../ops/cast":"7e2UZ","../ops/equal":"1gQAF","../ops/mul":"9ihSJ","../ops/reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4yjG4":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maximumGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/greater_equal"),i=e("../ops/less"),l=e("../ops/mul");let u={kernelName:n.Maximum,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t;return{a:()=>(0,l.mul)(e,(0,a.cast)((0,o.greaterEqual)(r,s),"float32")),b:()=>(0,l.mul)(e,(0,a.cast)((0,i.less)(r,s),"float32"))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/greater_equal":"h8ZY5","../ops/less":"8JxgH","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aAyCQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3DGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/max_pool_3d_grad");let o={kernelName:n.MaxPool3D,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[s,n]=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;return{x:()=>(0,a.maxPool3dGrad)(e,s,n,o,i,l,u)}}}},{"../kernel_names":"3i501","../ops/max_pool_3d_grad":"kP7k7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kP7k7:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3dGrad",()=>c);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation"),p=e("./reshape");let c=(0,u.op)({maxPool3dGrad_:/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,u,c,d){let h=(0,o.convertToTensor)(e,"dy","maxPool3dGrad"),f=(0,o.convertToTensor)(t,"input","maxPool3dGrad"),m=(0,o.convertToTensor)(r,"output","maxPool3dGrad"),g=h,x=f,b=m,y=!1;4===f.rank&&(y=!0,g=(0,p.reshape)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]]),x=(0,p.reshape)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]]),b=(0,p.reshape)(m,[1,m.shape[0],m.shape[1],m.shape[2],m.shape[3]])),i.assert(5===g.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${g.rank}.`),i.assert(5===x.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${x.rank}.`),i.assert(5===b.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${b.rank}.`),(0,l.checkPadOnDimRoundingMode)("maxPool3dGrad",c,d);let j={dy:g,input:x,output:b},_=(0,n.ENGINE).runKernel(a.MaxPool3DGrad,j,{filterSize:s,strides:u,pad:c,dimRoundingMode:d});return y?(0,p.reshape)(_,[_.shape[1],_.shape[2],_.shape[3],_.shape[4]]):_}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","./reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"63JTU":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/max_pool_grad");let o={kernelName:n.MaxPool,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[s,n]=t,{filterSize:o,strides:i,pad:l}=r;return{x:()=>(0,a.maxPoolGrad)(e,s,n,o,i,l)}}}},{"../kernel_names":"3i501","../ops/max_pool_grad":"buerk","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],buerk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolGrad",()=>p);var n=e("../engine"),a=e("../kernel_names"),o=e("../tensor_util_env"),i=e("../util"),l=e("./conv_util"),u=e("./operation");let p=(0,u.op)({maxPoolGrad_:/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm used in the forward prop of the op.
 *     'same', 'valid', for more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */function(e,t,r,s,u,p,c){let d=(0,o.convertToTensor)(e,"dy","maxPoolGrad"),h=(0,o.convertToTensor)(t,"input","maxPoolGrad"),f=(0,o.convertToTensor)(r,"output","maxPoolGrad");return i.assert(h.rank===d.rank,()=>`Rank of input (${h.rank}) does not match rank of dy (${d.rank})`),i.assert(4===d.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${d.rank}.`),i.assert(4===h.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${h.rank}.`),l.checkPadOnDimRoundingMode("maxPoolGrad",p,c),(0,n.ENGINE).runKernel(a.MaxPoolGrad,{dy:d,input:h,output:f},{filterSize:s,strides:u,pad:p,dimRoundingMode:c})}})},{"../engine":"ldVRX","../kernel_names":"3i501","../tensor_util_env":"9iWFD","../util":"6bzqD","./conv_util":"cCem6","./operation":"htqKz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jBnCp:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"meanGradConfig",()=>c);var n=e("../kernel_names"),a=e("../ops/axis_util"),o=e("../ops/div"),i=e("../ops/mul"),l=e("../ops/ones"),u=e("../ops/reshape"),p=e("../util");let c={kernelName:n.Mean,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{axis:n}=r,c=p.parseAxisParam(n,s.shape),d=(0,a.computeOutAndReduceShapes)(s.shape,c),h=d[1],f=p.sizeFromShape(h);return{x:()=>{let t=s.shape.slice();c.forEach(e=>{t[e]=1});let r=(0,u.reshape)(e,t),n=(0,o.div)((0,i.mul)(r,(0,l.ones)(s.shape,"float32")),f);return n}}}}},{"../kernel_names":"3i501","../ops/axis_util":"9ZcyD","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/ones":"14B1F","../ops/reshape":"hcB7g","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],igbgn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"minGradConfig",()=>i);var n=e("../kernel_names"),a=e("../util"),o=e("./min_max_grad_util");let i={kernelName:n.Min,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let{axis:s}=r,[n,i]=t,l=a.parseAxisParam(s,n.shape),u=(0,o.gradForMinAndMax)(e,i,n,l);return{x:()=>u.x()}}}},{"../kernel_names":"3i501","../util":"6bzqD","./min_max_grad_util":"d0Is5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hvKCI:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"minimumGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/greater"),i=e("../ops/less_equal"),l=e("../ops/mul");let u={kernelName:n.Minimum,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t;return{a:()=>(0,l.mul)(e,(0,a.cast)((0,i.lessEqual)(r,s),"float32")),b:()=>(0,l.mul)(e,(0,a.cast)((0,o.greater)(r,s),"float32"))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/greater":"ayzyA","../ops/less_equal":"joVbJ","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bfs83:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mirrorPadGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/slice");let o={kernelName:n.MirrorPad,inputsToSave:["x"],gradFunc:(e,t,r)=>{// Pad introduces values around the original tensor, so the gradient
// slices the original shape out of the gradient.
let s=t[0],{paddings:n}=r,o=n.map(e=>e[0]);return{x:()=>(0,a.slice)(e,o,s.shape)}}}},{"../kernel_names":"3i501","../ops/slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8ADyG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"modGradConfig",()=>d);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/div"),i=e("../ops/floor"),l=e("../ops/mul"),u=e("../ops/neg"),p=e("../ops/reshape"),c=e("../ops/sum");let d={kernelName:n.Mod,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,a.assertAndGetBroadcastShape)(r.shape,s.shape);return{a:()=>{let t=(0,a.getReductionAxes)(r.shape,n);return t.length>0?(0,p.reshape)((0,c.sum)(e,t),r.shape):e},b:()=>{let t=(0,l.mul)(e,(0,u.neg)((0,i.floor)((0,o.div)(r,s)))),d=(0,a.getReductionAxes)(s.shape,n);return d.length>0?(0,p.reshape)((0,c.sum)(t,d),s.shape):t}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/div":"9dy6L","../ops/floor":"iKvgL","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/reshape":"hcB7g","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Qo7M":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multiplyGradConfig",()=>p);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/cast"),i=e("../ops/mul"),l=e("../ops/reshape"),u=e("../ops/sum");let p={kernelName:n.Multiply,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,a.assertAndGetBroadcastShape)(r.shape,s.shape);return{a:()=>{let t=(0,i.mul)(e,(0,o.cast)(s,"float32")),p=(0,a.getReductionAxes)(r.shape,n);return p.length>0?(0,l.reshape)((0,u.sum)(t,p),r.shape):t},b:()=>{let t=(0,i.mul)(e,(0,o.cast)(r,"float32")),p=(0,a.getReductionAxes)(s.shape,n);return p.length>0?(0,l.reshape)((0,u.sum)(t,p),s.shape):t}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","../ops/reshape":"hcB7g","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aKDD1:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"negGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/neg");let o={kernelName:n.Neg,gradFunc:e=>({x:()=>(0,a.neg)(e)})}},{"../kernel_names":"3i501","../ops/neg":"gRzxs","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hIzFk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"oneHotGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros");let o={kernelName:n.OneHot,inputsToSave:["indices"],gradFunc:(e,t)=>{let r=t[0];return{indices:()=>(0,a.zeros)(r.shape,"float32")}}}},{"../kernel_names":"3i501","../ops/zeros":"8Iv9P","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k92dD:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"onesLikeGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.OnesLike,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"91ykg":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"packGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/unstack");let o={kernelName:n.Pack,saveAllInputs:!0,gradFunc:(e,t,r)=>{let{axis:s}=r,n=(0,a.unstack)(e,s);return n.map(e=>()=>e)}}},{"../kernel_names":"3i501","../ops/unstack":"lbucv","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5c87L":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"padV2GradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/slice");let o={kernelName:n.PadV2,inputsToSave:["x"],gradFunc:(e,t,r)=>{// Pad introduces values around the original tensor, so the gradient
// slices the original shape out of the gradient.
let s=t[0],{paddings:n}=r,o=n.map(e=>e[0]);return{x:()=>(0,a.slice)(e,o,s.shape)}}}},{"../kernel_names":"3i501","../ops/slice":"kcOYr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],imHwO:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"powGradConfig",()=>x);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/cast"),i=e("../ops/greater"),l=e("../ops/log"),u=e("../ops/mul"),p=e("../ops/pow"),c=e("../ops/reshape"),d=e("../ops/scalar"),h=e("../ops/sub"),f=e("../ops/sum"),m=e("../ops/where"),g=e("../ops/zeros_like");let x={kernelName:n.Pow,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{let[r,s,n]=t,x=a.assertAndGetBroadcastShape(r.shape,s.shape);return{a:()=>{let t=(0,o.cast)(s,"float32"),n=(0,u.mul)(e,(0,u.mul)(t,(0,p.pow)(r,(0,h.sub)(t,(0,d.scalar)(1))))),i=a.getReductionAxes(r.shape,x);return i.length>0&&(n=(0,f.sum)(n,i)),(0,c.reshape)(n,r.shape)},b:()=>{let t=(0,i.greater)(r,0),o=(0,m.where)(t,(0,l.log)(r),(0,g.zerosLike)(r)),p=(0,u.mul)(e,(0,u.mul)(n,o)),d=a.getReductionAxes(s.shape,x);return d.length>0&&(p=(0,f.sum)(p,d)),(0,c.reshape)(p,s.shape)}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/cast":"7e2UZ","../ops/greater":"ayzyA","../ops/log":"agrA2","../ops/mul":"9ihSJ","../ops/pow":"16YAi","../ops/reshape":"hcB7g","../ops/scalar":"8NgrS","../ops/sub":"gYa0B","../ops/sum":"nMRSa","../ops/where":"kAiQD","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fbTFQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"preluGradConfig",()=>d);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/greater"),i=e("../ops/mul"),l=e("../ops/reshape"),u=e("../ops/sum"),p=e("../ops/where"),c=e("../ops/zeros_like");let d={kernelName:n.Prelu,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,o.greater)(r,0);return{x:()=>(0,p.where)(n,e,(0,i.mul)(e,s)),alpha:()=>{let t=(0,p.where)(n,(0,c.zerosLike)(e),(0,i.mul)(e,r)),o=(0,a.getReductionAxes)(s.shape,e.shape);return o.length>0&&(t=(0,u.sum)(t,o)),(0,l.reshape)(t,s.shape)}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/greater":"ayzyA","../ops/mul":"9ihSJ","../ops/reshape":"hcB7g","../ops/sum":"nMRSa","../ops/where":"kAiQD","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2uoPq":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prodGradConfig",()=>p);var n=e("../base"),a=e("../kernel_names"),o=e("../ops/cumprod"),i=e("../ops/mul"),l=e("../ops/reshape"),u=e("../ops/transpose");let p={kernelName:a.Prod,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{axis:a}=r,p=[];return p=null==a?s.shape.map((e,t)=>t):"number"==typeof a?[a]:a,{x:()=>// Support gradients when the product is done on many axes at once.
    // This done py pushing all the axes on which the product is applied into a
    // single axis.
    (function(e,t,r){// Move all axes for doing prod over to the end of the tensor.
    let s=e.shape.length,a=s-r.length,p=(0,n.backend_util).getAxesPermutation(r,s),c=e;null!=p&&(c=(0,u.transpose)(e,p));// Reshape all the prod dimensions into a single one, and do compute prod
    // gradients on that.
    let d=c.shape.slice(),h=d.splice(s-r.length,r.length),f=h.reduce((e,t)=>e*t,1);d.push(f);let m=c.reshape(d),g=// Gradient for product operation on a single axis.
    function(e,t,r){// The gradient tensor (dy) has a set of axes removed, so we create re-shaped
    // versions (of size 1) for the removed axis; this supports broadcasting over
    // those dimensions.
    let s=e.shape.slice();s[r]=1;// The actual gradient computation.
    let n=(0,l.reshape)(t,s),a=(0,o.cumprod)(e,r,!0,!1),u=(0,o.cumprod)(e,r,!0,!0),p=(0,i.mul)(a,u);return(0,i.mul)(n,p)}(m,t,a);if(// Undo the re-shaping now we have the dx vector, and permute back to
    // original axes order.
    g=g.reshape(c.shape),null!=p){let e=(0,n.backend_util).getUndoAxesPermutation(p);g=(0,u.transpose)(g,e)}return g})(s,e,p)}}}},{"../base":"3n3SF","../kernel_names":"3i501","../ops/cumprod":"NJtBS","../ops/mul":"9ihSJ","../ops/reshape":"hcB7g","../ops/transpose":"lWGmK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hgQXz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"divGradConfig",()=>h);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/cast"),i=e("../ops/div"),l=e("../ops/mul"),u=e("../ops/neg"),p=e("../ops/reshape"),c=e("../ops/square"),d=e("../ops/sum");let h={kernelName:n.RealDiv,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=a.assertAndGetBroadcastShape(r.shape,s.shape);return{a:()=>{let t=(0,i.div)(e,(0,o.cast)(s,"float32")),l=a.getReductionAxes(r.shape,n);return l.length>0?(0,p.reshape)((0,d.sum)(t,l),r.shape):t},b:()=>{let t=(0,l.mul)(e,(0,o.cast)(r,"float32")),h=a.getReductionAxes(s.shape,n);h.length>0&&(t=(0,p.reshape)((0,d.sum)(t,h),s.shape));let f=(0,c.square)(s);return(0,u.neg)((0,i.div)(t,(0,o.cast)(f,"float32")))}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/reshape":"hcB7g","../ops/square":"3G5yp","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cCn3D:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reciprocalGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/div"),o=e("../ops/neg"),i=e("../ops/square");let l={kernelName:n.Reciprocal,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.div)(e,(0,o.neg)((0,i.square)(r)))}}}},{"../kernel_names":"3i501","../ops/div":"9dy6L","../ops/neg":"gRzxs","../ops/square":"3G5yp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iMVHI:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu6GradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/less_equal"),i=e("../ops/mul"),l=e("../ops/step");let u={kernelName:n.Relu6,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t,s=(0,i.mul)((0,o.lessEqual)(r,6),(0,l.step)(r));return{x:()=>(0,i.mul)(e,(0,a.cast)(s,"float32"))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/less_equal":"joVbJ","../ops/mul":"9ihSJ","../ops/step":"622xd","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2jkQG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reluGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/mul"),i=e("../ops/step");let l={kernelName:n.Relu,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)(e,(0,a.cast)((0,i.step)(r),"float32"))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","../ops/step":"622xd","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bd95r:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reshapeGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/reshape");let o={kernelName:n.Reshape,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.reshape)(e,r.shape)}}}},{"../kernel_names":"3i501","../ops/reshape":"hcB7g","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8UIwx":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinearGradConfig",()=>o);var n=e("../engine"),a=e("../kernel_names");let o={kernelName:a.ResizeBilinear,inputsToSave:["images"],gradFunc:(e,t,r)=>{let[s]=t,o={dy:e,images:s};return{images:()=>(0,n.ENGINE).runKernel(a.ResizeBilinearGrad,o,r)}}}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1bBsb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighborGradConfig",()=>o);var n=e("../engine"),a=e("../kernel_names");let o={kernelName:a.ResizeNearestNeighbor,inputsToSave:["images"],gradFunc:(e,t,r)=>{let[s]=t,o={dy:e,images:s};return{images:()=>(0,n.ENGINE).runKernel(a.ResizeNearestNeighborGrad,o,r)}}}},{"../engine":"ldVRX","../kernel_names":"3i501","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],zUxEB:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverseGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/reverse"),o=e("../util");let i={kernelName:n.Reverse,gradFunc:(e,t,r)=>{let{dims:s}=r,n=(0,o.parseAxisParam)(s,e.shape);return{x:()=>(0,a.reverse)(e,n)}}}},{"../kernel_names":"3i501","../ops/reverse":"d4KIg","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"19dDG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"roundGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.Round,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h9FY4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rsqrtGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/div"),o=e("../ops/mul"),i=e("../ops/neg"),l=e("../ops/pow");let u={kernelName:n.Rsqrt,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,i.neg)((0,a.div)(e,(0,o.mul)((0,l.pow)(r,1.5),2)))}}}},{"../kernel_names":"3i501","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/neg":"gRzxs","../ops/pow":"16YAi","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cYTd4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"selectGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/logical_not"),i=e("../ops/mul"),l=e("../ops/zeros_like");let u={kernelName:n.Select,inputsToSave:["condition"],gradFunc:(e,t)=>{let[r]=t;return{// TODO(julianoks): Return null for condition gradient
// when backprop supports it.
condition:()=>(0,a.cast)((0,l.zerosLike)(r),"float32"),t:()=>(0,i.mul)(e,(0,a.cast)(r,e.dtype)),e:()=>(0,i.mul)(e,(0,a.cast)((0,o.logicalNot)(r),e.dtype))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/logical_not":"77vf6","../ops/mul":"9ihSJ","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1SjOY":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"seluGradConfig",()=>d);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/exp"),i=e("../ops/greater"),l=e("../ops/mul"),u=e("../ops/scalar"),p=e("../ops/selu_util"),c=e("../ops/where");let d={kernelName:n.Selu,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=(0,i.greater)(r,(0,u.scalar)(0)),s=(0,u.scalar)(p.SELU_SCALEALPHA),n=(0,u.scalar)(p.SELU_SCALE),d=(0,l.mul)(e,n),h=(0,l.mul)((0,l.mul)(e,s),(0,o.exp)((0,a.cast)(r,"float32")));return(0,c.where)(t,d,h)}}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/exp":"1ctfc","../ops/greater":"ayzyA","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/selu_util":"hezHs","../ops/where":"kAiQD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6hXqy":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sigmoidGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/scalar"),i=e("../ops/sub");let l={kernelName:n.Sigmoid,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.mul)(e,(0,a.mul)(r,(0,i.sub)((0,o.scalar)(1),r)))}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ky4z8:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"signGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.Sign,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iHucm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sinGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/cos"),i=e("../ops/mul");let l={kernelName:n.Sin,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,i.mul)((0,o.cos)((0,a.cast)(r,"float32")),e)}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/cos":"43oKr","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3wFJL":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sinhGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/cosh"),i=e("../ops/mul");let l={kernelName:n.Sinh,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,i.mul)((0,o.cosh)((0,a.cast)(r,"float32")),e)}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/cosh":"czPyA","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],umXmE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sliceGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/pad"),o=e("../ops/slice_util");let i={kernelName:n.Slice,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{begin:n,size:i}=r,l=s.shape,[u,p]=(0,o.parseSliceParams)(s,n,i),c=[];for(let t=0;t<e.rank;t++)c.push([u[t],l[t]-u[t]-p[t]]);return{x:()=>(0,a.pad)(e,c)}}}},{"../kernel_names":"3i501","../ops/pad":"lzGpp","../ops/slice_util":"gE25O","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cwl56:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softmaxGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/sub"),i=e("../ops/sum");let l={kernelName:n.Softmax,outputsToSave:[!0],gradFunc:(e,t,r)=>{let[s]=t,{dim:n}=r,l=(0,a.mul)(e,s);return{logits:()=>(0,o.sub)(l,(0,a.mul)((0,i.sum)(l,[n],!0),s))}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/sub":"gYa0B","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eYLl4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softplusGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/sigmoid");let i={kernelName:n.Softplus,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.mul)(e,(0,o.sigmoid)(r))}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/sigmoid":"773j8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1zYn9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"spaceToBatchNDGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/batch_to_space_nd");let o={kernelName:n.SpaceToBatchND,gradFunc:(e,t,r)=>{let{blockShape:s,paddings:n}=r;return{x:()=>(0,a.batchToSpaceND)(e,s,n)}}}},{"../kernel_names":"3i501","../ops/batch_to_space_nd":"eJpWZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bRvQI:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"splitVGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/concat");let o={kernelName:n.SplitV,gradFunc:(e,t,r)=>{let{axis:s}=r;return{x:()=>(0,a.concat)(e,s)}}}},{"../kernel_names":"3i501","../ops/concat":"k3qE8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iwgNj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sqrtGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/div"),i=e("../ops/mul"),l=e("../ops/sqrt");let u={kernelName:n.Sqrt,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,i.mul)((0,l.sqrt)((0,a.cast)(r,"float32")),2))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/div":"9dy6L","../ops/mul":"9ihSJ","../ops/sqrt":"5Uzeg","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6BGqe":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squareGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/cast"),o=e("../ops/mul");let i={kernelName:n.Square,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.mul)(e,(0,o.mul)((0,a.cast)(r,"float32"),2))}}}},{"../kernel_names":"3i501","../ops/cast":"7e2UZ","../ops/mul":"9ihSJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iV6k6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squaredDifferenceGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/scalar"),i=e("../ops/sub");let l={kernelName:n.SquaredDifference,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=(0,o.scalar)(2);return{a:()=>(0,a.mul)(e,(0,a.mul)(n,(0,i.sub)(r,s))),b:()=>(0,a.mul)(e,(0,a.mul)(n,(0,i.sub)(s,r)))}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lsigH:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stepGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.Step,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aKnbB:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"subGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/broadcast_util"),o=e("../ops/neg"),i=e("../ops/reshape"),l=e("../ops/sum");let u={kernelName:n.Sub,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,s]=t,n=a.assertAndGetBroadcastShape(r.shape,s.shape);return{a:()=>{let t=e,s=a.getReductionAxes(r.shape,n);return s.length>0&&(t=(0,l.sum)(t,s)),(0,i.reshape)(t,r.shape)},b:()=>{let t=e,r=a.getReductionAxes(s.shape,n);return r.length>0&&(t=(0,l.sum)(t,r)),(0,i.reshape)((0,o.neg)(t),s.shape)}}}}},{"../kernel_names":"3i501","../ops/broadcast_util":"jK3Iv","../ops/neg":"gRzxs","../ops/reshape":"hcB7g","../ops/sum":"nMRSa","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"19rTX":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sumGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/ones"),i=e("../ops/reshape"),l=e("../util");let u={kernelName:n.Sum,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,n=s.shape.slice(),{axis:u}=r,p=(0,l.parseAxisParam)(u,s.shape);p.forEach(e=>{n[e]=1});let c=(0,i.reshape)(e,n),d=(0,a.mul)(c,(0,o.ones)(s.shape,"float32"));return{x:()=>d}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/ones":"14B1F","../ops/reshape":"hcB7g","../util":"6bzqD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gXLtC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tanGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/cos"),o=e("../ops/div"),i=e("../ops/square");let l={kernelName:n.Tan,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,o.div)(e,(0,i.square)((0,a.cos)(r)))}}}},{"../kernel_names":"3i501","../ops/cos":"43oKr","../ops/div":"9dy6L","../ops/square":"3G5yp","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hUKaQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tanhGradConfig",()=>u);var n=e("../kernel_names"),a=e("../ops/mul"),o=e("../ops/scalar"),i=e("../ops/square"),l=e("../ops/sub");let u={kernelName:n.Tanh,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(0,a.mul)((0,l.sub)((0,o.scalar)(1),(0,i.square)(r)),e)}}}},{"../kernel_names":"3i501","../ops/mul":"9ihSJ","../ops/scalar":"8NgrS","../ops/square":"3G5yp","../ops/sub":"gYa0B","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ffV4G:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tileGradConfig",()=>l);var n=e("../kernel_names"),a=e("../ops/add"),o=e("../ops/slice"),i=e("../ops/zeros_like");let l={kernelName:n.Tile,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[s]=t,{reps:n}=r;return{x:()=>{let t=(0,i.zerosLike)(s);// TODO(cais): Maybe reduce memory footprint by avoiding repeated
// slicing.
if(1===s.rank)for(let r=0;r<n[0];++r)t=(0,a.add)(t,(0,o.slice)(e,[r*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let r=0;r<n[0];++r)for(let i=0;i<n[1];++i)t=(0,a.add)(t,(0,o.slice)(e,[r*s.shape[0],i*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let r=0;r<n[0];++r)for(let i=0;i<n[1];++i)for(let l=0;l<n[2];++l)t=(0,a.add)(t,(0,o.slice)(e,[r*s.shape[0],i*s.shape[1],l*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else if(4===s.rank)for(let r=0;r<n[0];++r)for(let i=0;i<n[1];++i)for(let l=0;l<n[2];++l)for(let u=0;u<n[3];++u)t=(0,a.add)(t,(0,o.slice)(e,[r*s.shape[0],i*s.shape[1],l*s.shape[2],u*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]));else throw Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);return t}}}}},{"../kernel_names":"3i501","../ops/add":"lQRCK","../ops/slice":"kcOYr","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9LplS":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transposeGradConfig",()=>i);var n=e("../kernel_names"),a=e("../ops/axis_util"),o=e("../ops/transpose");let i={kernelName:n.Transpose,gradFunc:(e,t,r)=>{let{perm:s}=r,n=a.getUndoAxesPermutation(s);return{x:()=>(0,o.transpose)(e,n)}}}},{"../kernel_names":"3i501","../ops/axis_util":"9ZcyD","../ops/transpose":"lWGmK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"55Hev":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unpackGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/stack");let o={kernelName:n.Unpack,gradFunc:(e,t,r)=>{let{axis:s}=r;return{value:()=>(0,a.stack)(e,s)}}}},{"../kernel_names":"3i501","../ops/stack":"cd4pw","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4WKTK":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unsortedSegmentSumGradConfig",()=>f);var n=e("../kernel_names"),a=e("../ops/expand_dims"),o=e("../ops/gather"),i=e("../ops/greater_equal"),l=e("../ops/logical_and"),u=e("../ops/maximum"),p=e("../ops/ones"),c=e("../ops/scalar"),d=e("../ops/where"),h=e("../ops/zeros_like");let f={kernelName:n.UnsortedSegmentSum,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(function(e,t){// Helper function for unsorted segment ops. Gathers params for
    // positive segment ids and gathers 0 for inputs with negative segment id.
    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
    let r=(0,u.maximum)(t,(0,h.zerosLike)(t)),s=(0,o.gather)(e,r),n=(0,i.greaterEqual)(t,(0,c.scalar)(0,"int32")),f=s.rank-n.rank;for(let e=0;e<f;++e)n=(0,a.expandDims)(n,e+1);n=(0,l.logicalAnd)(n,(0,p.ones)(s.shape,"bool"));let m=(0,h.zerosLike)(s);return(0,d.where)(n,s,m)})(e,r)}}}},{"../kernel_names":"3i501","../ops/expand_dims":"99JBF","../ops/gather":"gHcvO","../ops/greater_equal":"h8ZY5","../ops/logical_and":"fhBD8","../ops/maximum":"jM2LY","../ops/ones":"14B1F","../ops/scalar":"8NgrS","../ops/where":"kAiQD","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6YQn8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"zerosLikeGradConfig",()=>o);var n=e("../kernel_names"),a=e("../ops/zeros_like");let o={kernelName:n.ZerosLike,gradFunc:e=>({x:()=>(0,a.zerosLike)(e)})}},{"../kernel_names":"3i501","../ops/zeros_like":"lVjfh","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jo25F:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */// tslint:disable-next-line:max-line-length
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * MaxNorm weight constraint.
 *
 * Constrains the weights incident to each hidden unit
 * to have a norm less than or equal to a desired value.
 *
 * References
 *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting
 * Srivastava, Hinton, et al.
 * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 *
 * @doc {heading: 'Constraints',namespace: 'constraints'}
 */s.export(r,"maxNorm",()=>a),/**
 * Constrains the weights incident to each hidden unit to have unit norm.
 *
 * @doc {heading: 'Constraints', namespace: 'constraints'}
 */s.export(r,"unitNorm",()=>o),/**
 * Constrains the weight to be non-negative.
 *
 * @doc {heading: 'Constraints', namespace: 'constraints'}
 */s.export(r,"nonNeg",()=>i),/** @doc {heading: 'Constraints', namespace: 'constraints'} */s.export(r,"minMaxNorm",()=>l);var n=e("./constraints");function a(e){return new n.MaxNorm(e)}function o(e){return new n.UnitNorm(e)}function i(){return new n.NonNeg}function l(e){return new n.MinMaxNorm(e)}},{"./constraints":"kQcHo","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kQcHo:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: keras/contraints.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Base class for functions that impose constraints on weight values
 *
 * @doc {
 *   heading: 'Constraints',
 *   subheading: 'Classes',
 *   namespace: 'constraints'
 * }
 */s.export(r,"Constraint",()=>l),s.export(r,"MaxNorm",()=>u),s.export(r,"UnitNorm",()=>p),s.export(r,"NonNeg",()=>c),s.export(r,"MinMaxNorm",()=>d),s.export(r,"CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP",()=>h),s.export(r,"serializeConstraint",()=>f),s.export(r,"deserializeConstraint",()=>m),s.export(r,"getConstraint",()=>g);var n=e("@tensorflow/tfjs-core"),a=e("./backend/common"),o=e("./utils/generic_utils");/**
 * Helper function used by many of the Constraints to find the L2Norms.
 */function i(e,t){return(0,n.tidy)(()=>n.sqrt(n.sum(n.mul(e,e),t,!0)))}class l extends n.serialization.Serializable{getConfig(){return{}}}class u extends l{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,n.tidy)(()=>{let t=i(e,this.axis),r=n.clipByValue(t,0,this.maxValue);return n.mul(e,n.div(r,n.add((0,a.epsilon)(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}/** @nocollapse */u.className="MaxNorm",(0,n.serialization).registerClass(u);class p extends l{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,n.tidy)(()=>n.div(e,n.add((0,a.epsilon)(),i(e,this.axis))))}getConfig(){return{axis:this.axis}}}/** @nocollapse */p.className="UnitNorm",(0,n.serialization).registerClass(p);class c extends l{apply(e){return n.relu(e)}}/** @nocollapse */c.className="NonNeg",(0,n.serialization).registerClass(c);class d extends l{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,n.tidy)(()=>{let t=i(e,this.axis),r=n.add(n.mul(this.rate,n.clipByValue(t,this.minValue,this.maxValue)),n.mul(1-this.rate,t));return n.mul(e,n.div(r,n.add((0,a.epsilon)(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}/** @nocollapse */d.className="MinMaxNorm",(0,n.serialization).registerClass(d);let h={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function f(e){return(0,o.serializeKerasObject)(e)}function m(e,t={}){return(0,o.deserializeKerasObject)(e,(0,n.serialization).SerializationMap.getMap().classNameMap,t,"constraint")}function g(e){if(null==e)return null;if("string"==typeof e){let t=e in h?h[e]:e;return m({className:t,config:{}})}return e instanceof l?e:m(e)}},{"@tensorflow/tfjs-core":"U1ela","./backend/common":"02oHM","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9MrE6":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */// tslint:disable-next-line:max-line-length
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Initializer that generates tensors initialized to 0.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"zeros",()=>a),/**
 * Initializer that generates tensors initialized to 1.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"ones",()=>o),/**
 * Initializer that generates values initialized to some constant.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"constant",()=>i),/**
 * Initializer that generates random values initialized to a uniform
 * distribution.
 *
 * Values will be distributed uniformly between the configured minval and
 * maxval.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"randomUniform",()=>l),/**
 * Initializer that generates random values initialized to a normal
 * distribution.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"randomNormal",()=>u),/**
 * Initializer that generates random values initialized to a truncated normal
 * distribution.
 *
 * These values are similar to values from a `RandomNormal` except that values
 * more than two standard deviations from the mean are discarded and re-drawn.
 * This is the recommended initializer for neural network weights and filters.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"truncatedNormal",()=>p),/**
 * Initializer that generates the identity matrix.
 * Only use for square 2D matrices.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"identity",()=>c),/**
 * Initializer capable of adapting its scale to the shape of weights.
 * With distribution=NORMAL, samples are drawn from a truncated normal
 * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:
 *   - number of input units in the weight tensor, if mode = FAN_IN.
 *   - number of output units, if mode = FAN_OUT.
 *   - average of the numbers of input and output units, if mode = FAN_AVG.
 * With distribution=UNIFORM,
 * samples are drawn from a uniform distribution
 * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.
 *
 * @doc {heading: 'Initializers',namespace: 'initializers'}
 */s.export(r,"varianceScaling",()=>d),/**
 * Glorot uniform initializer, also called Xavier uniform initializer.
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"glorotUniform",()=>h),/**
 * Glorot normal initializer, also called Xavier normal initializer.
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor.
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"glorotNormal",()=>f),/**
 * He normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"heNormal",()=>m),/**
 * He uniform initializer.
 *
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / fan_in)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 *
 * @doc {heading: 'Initializers',namespace: 'initializers'}
 */s.export(r,"heUniform",()=>g),/**
 * LeCun normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(1 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * References:
 *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"leCunNormal",()=>x),/**
 * LeCun uniform initializer.
 *
 * It draws samples from a uniform distribution in the interval
 * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"leCunUniform",()=>b),/**
 * Initializer that generates a random orthogonal matrix.
 *
 * Reference:
 * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */s.export(r,"orthogonal",()=>y);var n=e("./initializers");function a(){return new n.Zeros}function o(){return new n.Ones}function i(e){return new n.Constant(e)}function l(e){return new n.RandomUniform(e)}function u(e){return new n.RandomNormal(e)}function p(e){return new n.TruncatedNormal(e)}function c(e){return new n.Identity(e)}function d(e){return new n.VarianceScaling(e)}function h(e){return new n.GlorotUniform(e)}function f(e){return new n.GlorotNormal(e)}function m(e){return new n.HeNormal(e)}function g(e){return new n.HeUniform(e)}function x(e){return new n.LeCunNormal(e)}function b(e){return new n.LeCunUniform(e)}function y(e){return new n.Orthogonal(e)}},{"./initializers":"cqMie","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aVGRn:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// Input Layer.
/**
 * An input layer is an entry point into a `tf.LayersModel`.
 *
 * `InputLayer` is generated automatically for `tf.Sequential` models by
 * specifying the `inputshape` or `batchInputShape` for the first layer.  It
 * should not be specified explicitly. However, it can be useful sometimes,
 * e.g., when constructing a sequential model from a subset of another
 * sequential model's layers. Like the code snippet below shows.
 *
 * ```js
 * // Define a model which simply adds two inputs.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));
 * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
 * model1.summary();
 * model1.predict(tf.zeros([1, 4])).print();
 *
 * // Construct another model, reusing the second layer of `model1` while
 * // not using the first layer of `model1`. Note that you cannot add the second
 * // layer of `model` directly as the first layer of the new sequential model,
 * // because doing so will lead to an error related to the fact that the layer
 * // is not an input layer. Instead, you need to create an `inputLayer` and add
 * // it to the new sequential model before adding the reused layer.
 * const model2 = tf.sequential();
 * // Use an inputShape that matches the input shape of `model1`'s second
 * // layer.
 * model2.add(tf.layers.inputLayer({inputShape: [3]}));
 * model2.add(model1.layers[1]);
 * model2.summary();
 * model2.predict(tf.zeros([1, 3])).print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}
 */s.export(r,"inputLayer",()=>_),// Advanced Activation Layers.
/**
 * Exponential Linear Unit (ELU).
 *
 * It follows:
 * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,
 * `f(x) = x for x >= 0`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units
 * (ELUs)](https://arxiv.org/abs/1511.07289v1)
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"elu",()=>k),/**
 * Rectified Linear Unit activation function.
 *
 * Input shape:
 *   Arbitrary. Use the config field `inputShape` (Array of integers, does
 *   not include the sample axis) when using this layer as the first layer
 *   in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"reLU",()=>I),/**
 * Leaky version of a rectified linear unit.
 *
 * It allows a small gradient when the unit is not active:
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"leakyReLU",()=>w),/**
 * Parameterized version of a leaky rectified linear unit.
 *
 * It follows
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 * wherein `alpha` is a trainable weight.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"prelu",()=>C),/**
 * Softmax activation layer.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"softmax",()=>S),/**
 * Thresholded Rectified Linear Unit.
 *
 * It follows:
 * `f(x) = x for x > theta`,
 * `f(x) = 0 otherwise`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting
 * Features](http://arxiv.org/abs/1402.3337)
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */s.export(r,"thresholdedReLU",()=>T),// Convolutional Layers.
/**
 * 1D convolution layer (e.g., temporal convolution).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input over a single spatial (or temporal) dimension
 * to produce a tensor of outputs.
 *
 * If `use_bias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model, provide an
 * `inputShape` argument `Array` or `null`.
 *
 * For example, `inputShape` would be:
 * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors
 * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}
 */s.export(r,"conv1d",()=>N),/**
 * 2D convolution layer (e.g. spatial convolution over images).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures
 * in `dataFormat='channelsLast'`.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"conv2d",()=>E),/**
 * Transposed convolutional layer (sometimes called Deconvolution).
 *
 * The need for transposed convolutions generally arises
 * from the desire to use a transformation going in the opposite direction of
 * a normal convolution, i.e., from something that has the shape of the output
 * of some convolution to something that has the shape of its input while
 * maintaining a connectivity pattern that is compatible with said
 * convolution.
 *
 * When using this layer as the first layer in a model, provide the
 * configuration `inputShape` (`Array` of integers, does not include the
 * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in
 * `dataFormat: 'channelsLast'`.
 *
 * Input shape:
 *   4D tensor with shape:
 *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.
 *   or 4D tensor with shape
 *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.
 *
 * Output shape:
 *   4D tensor with shape:
 *   `[batch, filters, newRows, newCols]` if `dataFormat` is
 * `'channelsFirst'`. or 4D tensor with shape:
 *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.
 *
 * References:
 *   - [A guide to convolution arithmetic for deep
 * learning](https://arxiv.org/abs/1603.07285v1)
 *   - [Deconvolutional
 * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"conv2dTranspose",()=>F),/**
 * 3D convolution layer (e.g. spatial convolution over volumes).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes
 * in `dataFormat='channelsLast'`.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"conv3d",()=>A),s.export(r,"conv3dTranspose",()=>R),/**
 * Depthwise separable 2D convolution.
 *
 * Separable convolution consists of first performing
 * a depthwise spatial convolution
 * (which acts on each input channel separately)
 * followed by a pointwise convolution which mixes together the resulting
 * output channels. The `depthMultiplier` argument controls how many
 * output channels are generated per input channel in the depthwise step.
 *
 * Intuitively, separable convolutions can be understood as
 * a way to factorize a convolution kernel into two smaller kernels,
 * or as an extreme version of an Inception block.
 *
 * Input shape:
 *   4D tensor with shape:
 *     `[batch, channels, rows, cols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, rows, cols, channels]` if data_format='channelsLast'.
 *
 * Output shape:
 *   4D tensor with shape:
 *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.
 *     `rows` and `cols` values might have changed due to padding.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"separableConv2d",()=>D),/**
 * Cropping layer for 2D input (e.g., image).
 *
 * This layer can crop an input
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, croppedRows, croppedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, croppedRows, croppedCols]`.
 *
 * Examples
 * ```js
 *
 * const model = tf.sequential();
 * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],
 *                                inputShape: [128, 128, 3]}));
 * //now output shape is [batch, 124, 124, 3]
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"cropping2D",()=>$),/**
 * Upsampling layer for 2D inputs.
 *
 * Repeats the rows and columns of the data
 * by size[0] and size[1] respectively.
 *
 *
 * Input shape:
 *    4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *         `[batch, rows, cols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *        `[batch, channels, rows, cols]`
 *
 * Output shape:
 *     4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *        `[batch, upsampledRows, upsampledCols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *         `[batch, channels, upsampledRows, upsampledCols]`
 *
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"upSampling2d",()=>P),// Convolutional(depthwise) Layers.
/**
 * Depthwise separable 2D convolution.
 *
 * Depthwise Separable convolutions consists in performing just the first step
 * in a depthwise spatial convolution (which acts on each input channel
 * separately). The `depthMultiplier` argument controls how many output channels
 * are generated per input channel in the depthwise step.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */s.export(r,"depthwiseConv2d",()=>z),// Basic Layers.
/**
 * Applies an activation function to an output.
 *
 * This layer applies element-wise activation function.  Other layers, notably
 * `dense` can also apply activation functions.  Use this isolated activation
 * function to extract the values before and after the
 * activation. For instance:
 *
 * ```js
 * const input = tf.input({shape: [5]});
 * const denseLayer = tf.layers.dense({units: 1});
 * const activationLayer = tf.layers.activation({activation: 'relu6'});
 *
 * // Obtain the output symbolic tensors by applying the layers in order.
 * const denseOutput = denseLayer.apply(input);
 * const activationOutput = activationLayer.apply(denseOutput);
 *
 * // Create the model based on the inputs.
 * const model = tf.model({
 *     inputs: input,
 *     outputs: [denseOutput, activationOutput]
 * });
 *
 * // Collect both outputs and print separately.
 * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));
 * denseOut.print();
 * activationOut.print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"activation",()=>M),/**
 * Creates a dense (fully connected) layer.
 *
 * This layer implements the operation:
 *   `output = activation(dot(input, kernel) + bias)`
 *
 * `activation` is the element-wise activation function
 *   passed as the `activation` argument.
 *
 * `kernel` is a weights matrix created by the layer.
 *
 * `bias` is a bias vector created by the layer (only applicable if `useBias`
 * is `true`).
 *
 * **Input shape:**
 *
 *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.
 *
 *   The most common situation would be
 *   a 2D input with shape `(batchSize, inputDim)`.
 *
 * **Output shape:**
 *
 *   nD tensor with shape: `(batchSize, ..., units)`.
 *
 *   For instance, for a 2D input with shape `(batchSize, inputDim)`,
 *   the output would have shape `(batchSize, units)`.
 *
 * Note: if the input to the layer has a rank greater than 2, then it is
 * flattened prior to the initial dot product with the kernel.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"dense",()=>O),/**
 * Applies
 * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to
 * the input.
 *
 * Dropout consists in randomly setting a fraction `rate` of input units to 0 at
 * each update during training time, which helps prevent overfitting.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"dropout",()=>L),/**
 * Spatial 1D version of Dropout.
 *
 * This Layer type performs the same function as the Dropout layer, but it drops
 * entire 1D feature maps instead of individual elements. For example, if an
 * input example consists of 3 timesteps and the feature map for each timestep
 * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps
 * of the 1st timesteps and 2nd timesteps completely while sparing all feature
 * elements of the 3rd timestep.
 *
 * If adjacent frames (timesteps) are strongly correlated (as is normally the
 * case in early convolution layers), regular dropout will not regularize the
 * activation and will otherwise just result in merely an effective learning
 * rate decrease. In this case, `spatialDropout1d` will help promote
 * independence among feature maps and should be used instead.
 *
 * **Arguments:**
 *   rate: A floating-point number >=0 and <=1. Fraction of the input elements
 *     to drop.
 *
 * **Input shape:**
 *   3D tensor with shape `(samples, timesteps, channels)`.
 *
 * **Output shape:**
 *   Same as the input shape.
 *
 * References:
 *   - [Efficient Object Localization Using Convolutional
 *      Networks](https://arxiv.org/abs/1411.4280)
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"spatialDropout1d",()=>B),/**
 * Flattens the input. Does not affect the batch size.
 *
 * A `Flatten` layer flattens each batch in its inputs to 1D (making the output
 * 2D).
 *
 * For example:
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const flattenLayer = tf.layers.flatten();
 * // Inspect the inferred output shape of the flatten layer, which
 * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the
 * // flattening. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(flattenLayer.apply(input).shape));
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"flatten",()=>U),/**
 * Repeats the input n times in a new dimension.
 *
 * ```js
 *  const model = tf.sequential();
 *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));
 *  const x = tf.tensor2d([[10, 20]]);
 *  // Use the model to do inference on a data point the model hasn't see
 *  model.predict(x).print();
 *  // output shape is now [batch, 2, 4]
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"repeatVector",()=>V),/**
 * Reshapes an input to a certain shape.
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});
 * // Inspect the inferred output shape of the Reshape layer, which
 * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(reshapeLayer.apply(input).shape));
 * ```
 *
 * Input shape:
 *   Arbitrary, although all dimensions in the input shape must be fixed.
 *   Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 *
 * Output shape:
 *   [batchSize, targetShape[0], targetShape[1], ...,
 *    targetShape[targetShape.length - 1]].
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"reshape",()=>G),/**
 * Permutes the dimensions of the input according to a given pattern.
 *
 * Useful for, e.g., connecting RNNs and convnets together.
 *
 * Example:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.permute({
 *   dims: [2, 1],
 *   inputShape: [10, 64]
 * }));
 * console.log(model.outputShape);
 * // Now model's output shape is [null, 64, 10], where null is the
 * // unpermuted sample (batch) dimension.
 * ```
 *
 * Input shape:
 *   Arbitrary. Use the configuration field `inputShape` when using this
 *   layer as the first layer in a model.
 *
 * Output shape:
 *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,
 *   permuted) according to the `dims` configuration of this layer.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"permute",()=>W),/**
 * Maps positive integers (indices) into dense vectors of fixed size.
 * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]
 *
 * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.
 *
 * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,
 * outputDim]`.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */s.export(r,"embedding",()=>q),// Merge Layers.
/**
 * Layer that performs element-wise addition on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). The inputs are specified as an
 * `Array` when the `apply` method of the `Add` layer instance is called. For
 * example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const addLayer = tf.layers.add();
 * const sum = addLayer.apply([input1, input2]);
 * console.log(JSON.stringify(sum.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"add",()=>K),/**
 * Layer that performs element-wise averaging on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const averageLayer = tf.layers.average();
 * const average = averageLayer.apply([input1, input2]);
 * console.log(JSON.stringify(average.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"average",()=>H),/**
 * Layer that concatenates an `Array` of inputs.
 *
 * It takes a list of tensors, all of the same shape except for the
 * concatenation axis, and returns a single tensor, the concatenation
 * of all inputs. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 3]});
 * const concatLayer = tf.layers.concatenate();
 * const output = concatLayer.apply([input1, input2]);
 * console.log(JSON.stringify(output.shape));
 * // You get [null, 2, 5], with the first dimension as the undetermined batch
 * // dimension. The last dimension (5) is the result of concatenating the
 * // last dimensions of the inputs (2 and 3).
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"concatenate",()=>X),/**
 * Layer that computes the element-wise maximum of an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const maxLayer = tf.layers.maximum();
 * const max = maxLayer.apply([input1, input2]);
 * console.log(JSON.stringify(max.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"maximum",()=>Y),/**
 * Layer that computes the element-wise minimum of an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const minLayer = tf.layers.minimum();
 * const min = minLayer.apply([input1, input2]);
 * console.log(JSON.stringify(min.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"minimum",()=>Z),/**
 * Layer that multiplies (element-wise) an `Array` of inputs.
 *
 * It takes as input an Array of tensors, all of the same
 * shape, and returns a single tensor (also of the same shape).
 * For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const input3 = tf.input({shape: [2, 2]});
 * const multiplyLayer = tf.layers.multiply();
 * const product = multiplyLayer.apply([input1, input2, input3]);
 * console.log(product.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"multiply",()=>J),/**
 * Layer that computes a dot product between samples in two tensors.
 *
 * E.g., if applied to a list of two tensors `a` and `b` both of shape
 * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,
 * where each entry at index `[i, 0]` will be the dot product between
 * `a[i, :]` and `b[i, :]`.
 *
 * Example:
 *
 * ```js
 * const dotLayer = tf.layers.dot({axes: -1});
 * const x1 = tf.tensor2d([[10, 20], [30, 40]]);
 * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);
 *
 * // Invoke the layer's apply() method in eager (imperative) mode.
 * const y = dotLayer.apply([x1, x2]);
 * y.print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */s.export(r,"dot",()=>Q),// Normalization Layers.
/**
 * Batch normalization layer (Ioffe and Szegedy, 2014).
 *
 * Normalize the activations of the previous layer at each batch,
 * i.e. applies a transformation that maintains the mean activation
 * close to 0 and the activation standard deviation close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does
 *   not include the sample axis) when calling the constructor of this class,
 *   if this layer is used as a first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Batch Normalization: Accelerating Deep Network Training by Reducing
 * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)
 *
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */s.export(r,"batchNormalization",()=>ee),/**
 * Layer-normalization layer (Ba et al., 2016).
 *
 * Normalizes the activations of the previous layer for each given example in a
 * batch independently, instead of across a batch like in `batchNormalization`.
 * In other words, this layer applies a transformation that maintains the mean
 * activation within each example close to 0 and activation variance close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the argument `inputShape` when using this layer as the first
 *   layer in a model.
 *
 * Output shape:
 *   Same as input.
 *
 * References:
 *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)
 *
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */s.export(r,"layerNormalization",()=>et),// Padding Layers.
/**
 * Zero-padding layer for 2D input (e.g., image).
 *
 * This layer can add rows and columns of zeros
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, paddedRows, paddedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, paddedRows, paddedCols]`.
 *
 * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}
 */s.export(r,"zeroPadding2d",()=>er),// Pooling Layers.
/**
 * Average pooling operation for spatial data.
 *
 * Input shape: `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 *
 * `tf.avgPool1d` is an alias.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"averagePooling1d",()=>es),s.export(r,"avgPool1d",()=>en),// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
s.export(r,"avgPooling1d",()=>ea),/**
 * Average pooling operation for spatial data.
 *
 * Input shape:
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, rows, cols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, pooledRows, pooledCols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, pooledRows, pooledCols]`
 *
 * `tf.avgPool2d` is an alias.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"averagePooling2d",()=>eo),s.export(r,"avgPool2d",()=>ei),// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
s.export(r,"avgPooling2d",()=>el),/**
 * Average pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      4D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"averagePooling3d",()=>eu),s.export(r,"avgPool3d",()=>ep),// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
s.export(r,"avgPooling3d",()=>ec),/**
 * Global average pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape: 2D tensor with shape: `[batchSize, features]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"globalAveragePooling1d",()=>ed),/**
 * Global average pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"globalAveragePooling2d",()=>eh),/**
 * Global max pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape: 2D tensor with shape: `[batchSize, features]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"globalMaxPooling1d",()=>ef),/**
 * Global max pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"globalMaxPooling2d",()=>em),/**
 * Max pooling operation for temporal data.
 *
 * Input shape:  `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"maxPooling1d",()=>eg),/**
 * Max pooling operation for spatial data.
 *
 * Input shape
 *   - If `dataFormat === CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, rows, cols, channels]`
 *   - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *       `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=CHANNEL_FIRST`:
 *       4D tensor with shape:
 *       `[batchSize, channels, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"maxPooling2d",()=>ex),/**
 * Max pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      5D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */s.export(r,"maxPooling3d",()=>ev),// Recurrent Layers.
/**
 * Gated Recurrent Unit - Cho et al. 2014.
 *
 * This is an `RNN` layer consisting of one `GRUCell`. However, unlike
 * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.gru({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `GRUCell`'s number of units.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"gru",()=>eb),/**
 * Cell class for `GRU`.
 *
 * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `GRU` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.gruCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.gruCell({units: 4}),
 *   tf.layers.gruCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `gruCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `GRUCell`, use the
 * `tf.layers.gru`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"gruCell",()=>ey),/**
 * Long-Short Term Memory layer - Hochreiter 1997.
 *
 * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike
 * the underlying `LSTMCell`, the `apply` method of `LSTM` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const lstm = tf.layers.lstm({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = lstm.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `LSTMCell`'s number of units.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"lstm",()=>ej),/**
 * Cell class for `LSTM`.
 *
 * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `LSTM` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.lstmCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.lstmCell({units: 4}),
 *   tf.layers.lstmCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `lstmCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `LSTMCell`, use the
 * `tf.layers.lstm`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"lstmCell",()=>e_),/**
 * Fully-connected RNN where the output is to be fed back to input.
 *
 * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike
 * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `SimpleRNNCell`'s number of units.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"simpleRNN",()=>ek),/**
 * Cell class for `SimpleRNN`.
 *
 * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `SimpleRNN` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.simpleRNNCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.simpleRNNCell({units: 4}),
 *   tf.layers.simpleRNNCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `SimpleRNNCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the
 * `tf.layers.simpleRNN`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"simpleRNNCell",()=>eI),/**
 * Convolutional LSTM layer - Xingjian Shi 2015.
 *
 * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,
 * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`
 * operates on a sequence of inputs. The shape of the input (not including the
 * first, batch dimension) needs to be 4-D, with the first dimension being time
 * steps. For example:
 *
 * ```js
 * const filters = 3;
 * const kernelSize = 3;
 *
 * const batchSize = 4;
 * const sequenceLength = 2;
 * const size = 5;
 * const channels = 3;
 *
 * const inputShape = [batchSize, sequenceLength, size, size, channels];
 * const input = tf.ones(inputShape);
 *
 * const layer = tf.layers.convLstm2d({filters, kernelSize});
 *
 * const output = layer.apply(input);
 * ```
 *//** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */s.export(r,"convLstm2d",()=>ew),/**
 * Cell class for `ConvLSTM2D`.
 *
 * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in
 * that its `call` method takes the input data of only a single time step and
 * returns the cell's output at the time step, while `ConvLSTM2D` takes the
 * input data over a number of time steps. For example:
 *
 * ```js
 * const filters = 3;
 * const kernelSize = 3;
 *
 * const sequenceLength = 1;
 * const size = 5;
 * const channels = 3;
 *
 * const inputShape = [sequenceLength, size, size, channels];
 * const input = tf.ones(inputShape);
 *
 * const cell = tf.layers.convLstm2dCell({filters, kernelSize});
 *
 * cell.build(input.shape);
 *
 * const outputSize = size - kernelSize + 1;
 * const outShape = [sequenceLength, outputSize, outputSize, filters];
 *
 * const initialH = tf.zeros(outShape);
 * const initialC = tf.zeros(outShape);
 *
 * const [o, h, c] = cell.call([input, initialH, initialC], {});
 * ```
 *//** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */s.export(r,"convLstm2dCell",()=>eC),/**
 * Base class for recurrent layers.
 *
 * Input shape:
 *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.
 *
 * Output shape:
 *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first
 *     tensor is the output. The remaining tensors are the states at the
 *     last time step, each with shape `[batchSize, units]`.
 *   - if `returnSequences`, the output will have shape
 *     `[batchSize, timeSteps, units]`.
 *   - else, the output will have shape `[batchSize, units]`.
 *
 * Masking:
 *   This layer supports masking for input data with a variable number
 *   of timesteps. To introduce masks to your data,
 *   use an embedding layer with the `mask_zero` parameter
 *   set to `True`.
 *
 * Notes on using statefulness in RNNs:
 *   You can set RNN layers to be 'stateful', which means that the states
 *   computed for the samples in one batch will be reused as initial states
 *   for the samples in the next batch. This assumes a one-to-one mapping
 *   between samples in different successive batches.
 *
 *   To enable statefulness:
 *     - specify `stateful: true` in the layer constructor.
 *     - specify a fixed batch size for your model, by passing
 *       if sequential model:
 *         `batchInputShape=[...]` to the first layer in your model.
 *       else for functional model with 1 or more Input layers:
 *         `batchShape=[...]` to all the first layers in your model.
 *       This is the expected shape of your inputs *including the batch size*.
 *       It should be a tuple of integers, e.g. `(32, 10, 100)`.
 *     - specify `shuffle=False` when calling fit().
 *
 *   To reset the states of your model, call `.resetStates()` on either
 *   a specific layer, or on your entire model.
 *
 * Note on specifying the initial state of RNNs
 *   You can specify the initial state of RNN layers symbolically by
 *   calling them with the option `initialState`. The value of
 *   `initialState` should be a tensor or list of tensors representing
 *   the initial state of the RNN layer.
 *
 *   You can specify the initial state of RNN layers numerically by
 *   calling `resetStates` with the keyword argument `states`. The value of
 *   `states` should be a numpy array or list of numpy arrays representing
 *   the initial state of the RNN layer.
 *
 * Note on passing external constants to RNNs
 *   You can pass "external" constants to the cell using the `constants`
 *   keyword argument of `RNN.call` method. This requires that the `cell.call`
 *   method accepts the same keyword argument `constants`. Such constants
 *   can be used to condition the cell transformation on additional static
 *   inputs (not changing over time), a.k.a. an attention mechanism.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"rnn",()=>eS),/**
 * Wrapper allowing a stack of RNN cells to behave as a single cell.
 *
 * Used to implement efficient stacked RNNs.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */s.export(r,"stackedRNNCells",()=>eT),// Wrapper Layers.
/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */s.export(r,"bidirectional",()=>eN),/**
 * This wrapper applies a layer to every temporal slice of an input.
 *
 * The input should be at least 3D,  and the dimension of the index `1` will be
 * considered to be the temporal dimension.
 *
 * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors
 * of 16 dimensions. The batch input shape of the layer is then `[32,  10,
 * 16]`, and the `inputShape`, not including the sample dimension, is
 * `[10, 16]`.
 *
 * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10
 * timesteps, independently:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.dense({units: 8}),
 *   inputShape: [10, 16],
 * }));
 *
 * // Now model.outputShape = [null, 10, 8].
 * // The output will then have shape `[32, 10, 8]`.
 *
 * // In subsequent layers, there is no need for `inputShape`:
 * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * // Now model.outputShape = [null, 10, 32].
 * ```
 *
 * The output will then have shape `[32, 10, 32]`.
 *
 * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for
 * instance a `Conv2D` layer.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),
 *   inputShape: [10, 299, 299, 3],
 * }));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}
 */s.export(r,"timeDistributed",()=>eE),s.export(r,"globalMaxPool1d",()=>eF),s.export(r,"globalMaxPool2d",()=>eA),s.export(r,"maxPool1d",()=>eR),s.export(r,"maxPool2d",()=>eD),s.export(r,"Layer",()=>a.Layer),s.export(r,"RNN",()=>b.RNN),s.export(r,"RNNCell",()=>b.RNNCell),s.export(r,"input",()=>o.input/* alias for tf.input */),/**
 * Apply additive zero-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * This is useful to mitigate overfitting
 * (you could see it as a form of random data augmentation).
 * Gaussian Noise (GS) is a natural choice as corruption process
 * for real valued inputs.
 *
 * # Arguments
 * stddev: float, standard deviation of the noise distribution.
 *
 * # Input shape
 * Arbitrary. Use the keyword argument `input_shape`
 * (tuple of integers, does not include the samples axis)
 * when using this layer as the first layer in a model.
 *
 * # Output shape
 * Same shape as input.
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */s.export(r,"gaussianNoise",()=>e$),/**
 * Apply multiplicative 1-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](
 *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */s.export(r,"gaussianDropout",()=>eP),/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */s.export(r,"alphaDropout",()=>ez),/**
 * Masks a sequence by using a mask value to skip timesteps.
 *
 * If all features for a given sample timestep are equal to `mask_value`,
 * then the sample timestep will be masked (skipped) in all downstream layers
 * (as long as they support masking).
 *
 * If any downstream layer does not support masking yet receives such
 * an input mask, an exception will be raised.
 *
 * Arguments:
 *   - `maskValue`: Either None or mask value to skip.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}
 */s.export(r,"masking",()=>eM),/**
 * A preprocessing layer which rescales input values to a new range.
 *
 * This layer rescales every value of an input (often an image) by multiplying
 * by `scale` and adding `offset`.
 *
 * For instance:
 * 1. To rescale an input in the ``[0, 255]`` range
 * to be in the `[0, 1]` range, you would pass `scale=1/255`.
 * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`
 * range, you would pass `scale=1./127.5, offset=-1`.
 * The rescaling is applied both during training and inference. Inputs can be
 * of integer or floating point dtype, and by default the layer will output
 * floats.
 *
 * Arguments:
 *   - `scale`: Float, the scale to apply to the inputs.
 *   - `offset`: Float, the offset to apply to the inputs.
 *
 * Input shape:
 *   Arbitrary.
 *
 * Output shape:
 *   Same as input.
 *
 * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}
 */s.export(r,"rescaling",()=>eO);var n=e("./engine/input_layer"),a=e("./engine/topology"),o=e("./exports"),i=e("./layers/advanced_activations"),l=e("./layers/convolutional"),u=e("./layers/convolutional_depthwise"),p=e("./layers/convolutional_recurrent"),c=e("./layers/core"),d=e("./layers/embeddings"),h=e("./layers/merge"),f=e("./layers/noise"),m=e("./layers/normalization"),g=e("./layers/padding"),x=e("./layers/pooling"),b=e("./layers/recurrent"),y=e("./layers/wrappers"),j=e("./layers/preprocessing/image_preprocessing");function _(e){return new n.InputLayer(e)}function k(e){return new i.ELU(e)}function I(e){return new i.ReLU(e)}function w(e){return new i.LeakyReLU(e)}function C(e){return new i.PReLU(e)}function S(e){return new i.Softmax(e)}function T(e){return new i.ThresholdedReLU(e)}function N(e){return new l.Conv1D(e)}function E(e){return new l.Conv2D(e)}function F(e){return new l.Conv2DTranspose(e)}function A(e){return new l.Conv3D(e)}function R(e){return new l.Conv3DTranspose(e)}function D(e){return new l.SeparableConv2D(e)}function $(e){return new l.Cropping2D(e)}function P(e){return new l.UpSampling2D(e)}function z(e){return new u.DepthwiseConv2D(e)}function M(e){return new c.Activation(e)}function O(e){return new c.Dense(e)}function L(e){return new c.Dropout(e)}function B(e){return new c.SpatialDropout1D(e)}function U(e){return new c.Flatten(e)}function V(e){return new c.RepeatVector(e)}function G(e){return new c.Reshape(e)}function W(e){return new c.Permute(e)}function q(e){return new d.Embedding(e)}function K(e){return new h.Add(e)}function H(e){return new h.Average(e)}function X(e){return new h.Concatenate(e)}function Y(e){return new h.Maximum(e)}function Z(e){return new h.Minimum(e)}function J(e){return new h.Multiply(e)}function Q(e){return new h.Dot(e)}function ee(e){return new m.BatchNormalization(e)}function et(e){return new m.LayerNormalization(e)}function er(e){return new g.ZeroPadding2D(e)}function es(e){return new x.AveragePooling1D(e)}function en(e){return es(e)}function ea(e){return es(e)}function eo(e){return new x.AveragePooling2D(e)}function ei(e){return eo(e)}function el(e){return eo(e)}function eu(e){return new x.AveragePooling3D(e)}function ep(e){return eu(e)}function ec(e){return eu(e)}function ed(e){return new x.GlobalAveragePooling1D(e)}function eh(e){return new x.GlobalAveragePooling2D(e)}function ef(e){return new x.GlobalMaxPooling1D(e)}function em(e){return new x.GlobalMaxPooling2D(e)}function eg(e){return new x.MaxPooling1D(e)}function ex(e){return new x.MaxPooling2D(e)}function ev(e){return new x.MaxPooling3D(e)}function eb(e){return new b.GRU(e)}function ey(e){return new b.GRUCell(e)}function ej(e){return new b.LSTM(e)}function e_(e){return new b.LSTMCell(e)}function ek(e){return new b.SimpleRNN(e)}function eI(e){return new b.SimpleRNNCell(e)}function ew(e){return new p.ConvLSTM2D(e)}function eC(e){return new p.ConvLSTM2DCell(e)}function eS(e){return new b.RNN(e)}function eT(e){return new b.StackedRNNCells(e)}function eN(e){return new y.Bidirectional(e)}function eE(e){return new y.TimeDistributed(e)}let eF=ef,eA=em,eR=eg,eD=ex;function e$(e){return new f.GaussianNoise(e)}function eP(e){return new f.GaussianDropout(e)}function ez(e){return new f.AlphaDropout(e)}function eM(e){return new c.Masking(e)}function eO(e){return new j.Rescaling(e)}},{"./engine/input_layer":"eHBTI","./engine/topology":"3moPG","./exports":"5SKIB","./layers/advanced_activations":"eeARn","./layers/convolutional":"lwxvP","./layers/convolutional_depthwise":"2Dkny","./layers/convolutional_recurrent":"9kvMf","./layers/core":"kBHor","./layers/embeddings":"9PNRM","./layers/merge":"jyZeF","./layers/noise":"8Jwpa","./layers/normalization":"dT7ej","./layers/padding":"8Ztqp","./layers/pooling":"1PWG0","./layers/recurrent":"jtjtM","./layers/wrappers":"7icEN","./layers/preprocessing/image_preprocessing":"8GZHB","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5SKIB":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// LayersModel and related factory methods.
/**
 * A model is a data structure that consists of `Layers` and defines inputs
 * and outputs.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.model` is more generic, supporting an arbitrary graph (without
 * cycles) of layers. `tf.sequential` is less generic and supports only a linear
 * stack of layers.
 *
 * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers
 * are used to wire input(s) to output(s).
 *
 * For example, the following code snippet defines a model consisting of
 * two `dense` layers, with 10 and 4 units, respectively.
 *
 * ```js
 * // Define input, which has a size of 5 (not including batch dimension).
 * const input = tf.input({shape: [5]});
 *
 * // First dense layer uses relu activation.
 * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});
 * // Second dense layer uses softmax activation.
 * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});
 *
 * // Obtain the output symbolic tensor by applying the layers on the input.
 * const output = denseLayer2.apply(denseLayer1.apply(input));
 *
 * // Create the model based on the inputs.
 * const model = tf.model({inputs: input, outputs: output});
 *
 * // The model can be used for training, evaluation and prediction.
 * // For example, the following line runs prediction with the model on
 * // some fake data.
 * model.predict(tf.ones([2, 5])).print();
 * ```
 * See also:
 *   `tf.sequential`, `tf.loadLayersModel`.
 *
 * @doc {heading: 'Models', subheading: 'Creation'}
 */s.export(r,"model",()=>l),/**
 * Creates a `tf.Sequential` model.  A sequential model is any model where the
 * outputs of one layer are the inputs to the next layer, i.e. the model
 * topology is a simple 'stack' of layers, with no branching or skipping.
 *
 * This means that the first layer passed to a `tf.Sequential` model should have
 * a defined input shape. What that means is that it should have received an
 * `inputShape` or `batchInputShape` argument, or for some type of layers
 * (recurrent, Dense...) an `inputDim` argument.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.sequential` is less generic, supporting only a linear stack of layers.
 * `tf.model` is more generic and supports an arbitrary graph (without
 * cycles) of layers.
 *
 * Examples:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have an input shape defined.
 * model.add(tf.layers.dense({units: 32, inputShape: [50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output, which equals
 * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the
 * // 2nd is the output size of the model's last layer.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * It is also possible to specify a batch size (with potentially undetermined
 * batch dimension, denoted by "null") for the first layer using the
 * `batchInputShape` key. The following example is equivalent to the above:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have a defined input shape
 * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * You can also use an `Array` of already-constructed `Layer`s to create
 * a `tf.Sequential` model:
 *
 * ```js
 * const model = tf.sequential({
 *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),
 *            tf.layers.dense({units: 4})]
 * });
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * @doc {heading: 'Models', subheading: 'Creation'}
 */s.export(r,"sequential",()=>u),/**
 * Load a model composed of Layer objects, including its topology and optionally
 * weights. See the Tutorial named "How to import a Keras Model" for usage
 * examples.
 *
 * This method is applicable to:
 *
 * 1. Models created with the `tf.layers.*`, `tf.sequential`, and
 * `tf.model` APIs of TensorFlow.js and later saved with the
 * `tf.LayersModel.save` method.
 * 2. Models converted from Keras or TensorFlow tf.keras using the
 * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).
 *
 * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted
 * forms. For those models, use `tf.loadGraphModel`.
 *
 * Example 1. Load a model from an HTTP server.
 *
 * ```js
 * const model = await tf.loadLayersModel(
 *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');
 * model.summary();
 * ```
 *
 * Example 2: Save `model`'s topology and weights to browser [local
 * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('localstorage://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 3. Saving `model`'s topology and weights to browser
 * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('indexeddb://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 4. Load a model from user-selected files from HTML
 * [file input
 * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
 *
 * ```js
 * // Note: this code snippet will not work without the HTML elements in the
 * //   page
 * const jsonUpload = document.getElementById('json-upload');
 * const weightsUpload = document.getElementById('weights-upload');
 *
 * const model = await tf.loadLayersModel(
 *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));
 * ```
 *
 * @param pathOrIOHandler Can be either of the two formats
 *   1. A string path to the `ModelAndWeightsConfig` JSON describing
 *      the model in the canonical TensorFlow.js format. For file://
 *      (tfjs-node-only), http:// and https:// schemas, the path can be
 *      either absolute or relative.
 *   2. A `tf.io.IOHandler` object that loads model artifacts with its `load`
 *      method.
 * @param options Optional configuration arguments for the model loading,
 *   including:
 *   - `strict`: Require that the provided weights exactly match those required
 *     by the layers.  Default true.  Passing false means that both extra
 *     weights and missing weights will be silently ignored.
 *   - `onProgress`: A function of the signature `(fraction: number) => void',
 *     that can be used as the progress callback for the model loading.
 * @returns A `Promise` of `tf.LayersModel`, with the topology and weights
 *     loaded.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */s.export(r,"loadLayersModel",()=>p),/**
 * Used to instantiate an input to a model as a `tf.SymbolicTensor`.
 *
 * Users should call the `input` factory function for
 * consistency with other generator functions.
 *
 * Example:
 *
 * ```js
 * // Defines a simple logistic regression model with 32 dimensional input
 * // and 3 dimensional output.
 * const x = tf.input({shape: [32]});
 * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);
 * const model = tf.model({inputs: x, outputs: y});
 * model.predict(tf.ones([2, 32])).print();
 * ```
 *
 * Note: `input` is only necessary when using `model`. When using
 * `sequential`, specify `inputShape` for the first layer or use `inputLayer`
 * as the first layer.
 *
 * @doc {heading: 'Models', subheading: 'Inputs'}
 */s.export(r,"input",()=>c),s.export(r,"registerCallbackConstructor",()=>d);var n=e("./base_callbacks"),a=e("./engine/input_layer"),o=e("./engine/training"),i=e("./models");function l(e){return new o.LayersModel(e)}function u(e){return new i.Sequential(e)}function p(e,t){return null==t&&(t={}),(0,i.loadLayersModelInternal)(e,t)}function c(e){return(0,a.Input)(e)}function d(e,t){(0,n.CallbackConstructorRegistry).registerCallbackConstructor(e,t)}},{"./base_callbacks":"hD10S","./engine/input_layer":"eHBTI","./engine/training":"jTWm9","./models":"2MIjb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hD10S:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: keras/callbacks.py */var s,n,a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"ModelLoggingVerbosity",()=>n),a.export(r,"DEFAULT_YIELD_EVERY_MS",()=>p),/**
 * Abstract base class used to build new callbacks.
 *
 * The `logs` dictionary that callback methods take as argument will contain
 * keys for quantities relevant to the current batch or epoch.
 *
 * Currently, the `.fit()` method of the `Sequential` model class
 * will include the following quantities in the `logs` that
 * it passes to its callbacks:
 *
 * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`
 *   (if validation is enabled in `fit`), and `valAcc` (if validation and
 *   accuracy monitoring are enabled).
 * onBatchBegin: Logs include `size`, the number of samples in the current
 *   batch.
 * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring
 *   is enabled).
 */a.export(r,"BaseCallback",()=>c),/**
 * Container abstracting a list of callbacks.
 */a.export(r,"CallbackList",()=>d),/**
 * Callback that accumulates epoch averages of metrics.
 *
 * This callback is automatically applied to every LayersModel.
 */a.export(r,"BaseLogger",()=>h),/**
 * Callback that records events into a `History` object. This callback is
 * automatically applied to every TF.js Layers model. The `History` object
 * gets returned by the `fit` method of models.
 */a.export(r,"History",()=>f),/**
 * Custom callback for training.
 */a.export(r,"CustomCallback",()=>m),/**
 * Standardize callbacks or configurations of them to an Array of callbacks.
 */a.export(r,"standardizeCallbacks",()=>g),/**
 * A global registry for callback constructors to be used during
 * LayersModel.fit().
 */a.export(r,"CallbackConstructorRegistry",()=>x),a.export(r,"configureCallbacks",()=>b);var o=e("@tensorflow/tfjs-core"),i=e("./errors"),l=e("./logs"),u=e("./utils/generic_utils");(s=n||(n={}))[s.SILENT=0]="SILENT",s[s.VERBOSE=1]="VERBOSE";let p=125;class c{constructor(){// TODO(michaelterry): This type is a best guess.
this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}// LayersModel needs to call Callback.setModel(), but cannot actually depend
// on Callback because that creates a cyclic dependency.  Providing this no-op
// method on BaseCallback breaks the cycle: this way LayersModel can depend on
// BaseCallback but not on Callback.  The argument is typed as `Container`
// (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
// overrides this method and enforces that the argument is really a
// LayersModel.
setModel(e){// Do nothing. Use Callback instead of BaseCallback to track the model.
}}class d{// TODO(cais): When the need arises, uncomment the following lines and
// implement the queue for time values.
// private deltaTBatch: number;
// private deltaTsBatchBegin: Array<number>;
// private deltaTsBatchEnd: Array<number>;
/**
     * Constructor of CallbackList.
     * @param callbacks Array of `Callback` instances.
     * @param queueLength Queue length for keeping running statistics over
     *   callback execution time.
     */constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(let t of this.callbacks)t.setParams(e)}setModel(e){for(let t of this.callbacks)t.setModel(e)}/**
     * Called at the start of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */async onEpochBegin(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onEpochBegin(e,t)}/**
     * Called at the end of an epoch.
     * @param epoch Index of epoch.
     * @param logs Dictionary of logs.
     */async onEpochEnd(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onEpochEnd(e,t)}/**
     * Called  right before processing a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */async onBatchBegin(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onBatchBegin(e,t)}/**
     * Called at the end of a batch.
     * @param batch Index of batch within the current epoch.
     * @param logs Dictionary of logs.
     */async onBatchEnd(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onBatchEnd(e,t)}/**
     * Called at the beginning of training.
     * @param logs Dictionary of logs.
     */async onTrainBegin(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainBegin(e)}/**
     * Called at the end of training.
     * @param logs Dictionary of logs.
     */async onTrainEnd(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainEnd(e)}}class h extends c{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});let r=null==t.size?0:t.size;for(let e in this.seen+=r,t){let s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*r;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;let n=(0,o.tidy)(()=>(0,o.add)(this.totals[e],(0,o.mul)(s,r)));this.totals[e]=n,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(let e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:(0,o.tidy)(()=>{let r=(0,o.mul)((0,o.div)(1,this.seen),this.totals[e]);t[e]=r,this.totals[e].dispose(),(0,o.keep)(t[e])}))}}class f extends c{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){for(let r in null==t&&(t={}),this.epoch.push(e),t)null==this.history[r]&&(this.history[r]=[]),this.history[r].push(t[r])}/**
     * Await the values of all losses and metrics.
     */async syncData(){let e=[],t=[],r=[];for(let s in this.history){let n=this.history[s];for(let a=0;a<n.length;++a)if("number"!=typeof n[a]){let o=n[a];e.push(o.data()),t.push(s),r.push(a)}}let s=await Promise.all(e);for(let e=0;e<s.length;++e){let n=this.history[t[e]][r[e]];n.dispose(),this.history[t[e]][r[e]]=s[e][0]}}}class m extends c{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||o.nextFrame,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=p),"never"===this.yieldEvery&&null!=e.onYield)throw Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");(0,o.util).isNumber(this.yieldEvery)&&// `yieldEvery` ms.
(this.maybeWait=u.debounce(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,r){let s=[];null!=this.yield&&(await (0,l.resolveScalarsInLogs)(r),s.push(this.yield(e,t,r))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await (0,l.resolveScalarsInLogs)(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){let r=[];null!=this.epochEnd&&(await (0,l.resolveScalarsInLogs)(t),r.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&r.push(this.nextFrameFunc()),await Promise.all(r)}async onBatchBegin(e,t){null!=this.batchBegin&&(await (0,l.resolveScalarsInLogs)(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){let r=[];null!=this.batchEnd&&(await (0,l.resolveScalarsInLogs)(t),r.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?r.push(this.nextFrameFunc()):(0,o.util).isNumber(this.yieldEvery)&&r.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(r)}async onTrainBegin(e){null!=this.trainBegin&&(await (0,l.resolveScalarsInLogs)(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await (0,l.resolveScalarsInLogs)(e),await this.trainEnd(e))}}function g(e,t){if(null==e&&(e={}),e instanceof c)return[e];if(Array.isArray(e)&&e[0]instanceof c)return e;// Convert custom callback configs to custom callback objects.
let r=u.toList(e);return r.map(e=>new m(e,t))}class x{/**
     * Blocks public access to constructor.
     */constructor(){}/**
     * Register a tf.LayersModel.fit() callback constructor.
     *
     * The registered callback constructor will be used to instantiate
     * callbacks for every tf.LayersModel.fit() call afterwards.
     *
     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
     *   is to be reigstered.
     * @param callbackConstructor A no-arg constructor for `tf.Callback`.
     * @throws Error, if the same callbackConstructor has been registered before,
     *   either at the same or a different `verbosityLevel`.
     */static registerCallbackConstructor(e,t){(0,o.util).assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),x.checkForDuplicate(t),null==x.constructors[e]&&(x.constructors[e]=[]),x.constructors[e].push(t)}static checkForDuplicate(e){for(let t in x.constructors){let r=x.constructors[+t];r.forEach(t=>{if(t===e)throw new i.ValueError("Duplicate callback constructor.")})}}/**
     * Clear all registered callback constructors.
     */static clear(){x.constructors={}}/**
     * Create callbacks using the registered callback constructors.
     *
     * Given `verbosityLevel`, all constructors registered at that level or above
     * will be called and the instantiated callbacks will be used.
     *
     * @param verbosityLevel: Level of verbosity.
     */static createCallbacks(e){let t=[];for(let r in x.constructors){let s=+r;e>=s&&t.push(...x.constructors[s])}return t.map(e=>new e)}}function b(e,t,r,s,n,a,o,i,l){let u=new f,p=[new h,...x.createCallbacks(t)];null!=e&&p.push(...e),p.push(u);let c=new d(p);return(// TODO(cais): Figure out when this LayersModel instance can have a
// dynamically
//   set property called 'callback_model' as in PyKeras.
c.setParams({epochs:r,initialEpoch:s,samples:n,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:c,history:u})}x.constructors={}},{"@tensorflow/tfjs-core":"U1ela","./errors":"2onZT","./logs":"klT3H","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],klT3H:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Turn any Scalar values in a Logs object into actual number values.
 *
 * @param logs The `Logs` object to be resolved in place.
 */s.export(r,"resolveScalarsInLogs",()=>a),/**
 * Dispose all Tensors in an UnresolvedLogs object.
 *
 * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in
 *   places where the values can be `tf.Tensor` or `number`.
 */s.export(r,"disposeTensorsInLogs",()=>o);var n=e("@tensorflow/tfjs-core");async function a(e){if(null==e)return;let t=[],r=[],s=[];for(let n in e){let a=e[n];"number"!=typeof a&&(t.push(a.data()),r.push(n),s.push(a))}if(t.length>0){let a=await Promise.all(t);for(let t=0;t<a.length;++t)e[r[t]]=a[t][0];// Dispose the original scalar tensors.
(0,n.dispose)(s)}}function o(e){if(null!=e)for(let t in e){let r=e[t];"number"!=typeof r&&r.dispose()}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jTWm9:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original Source: engine/training.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Helper function for polymorphic input data: 1. singleton Tensor.
 */s.export(r,"isDataTensor",()=>I),/**
 * Helper function for polymorphic input data: 2. Array of Tensor.
 */s.export(r,"isDataArray",()=>w),/**
 * Helper function for polymorphic input data: 3. "dict" of Tensor.
 */s.export(r,"isDataDict",()=>C),/**
 * Normalizes inputs and targets provided by users.
 * @param data User-provided input data (polymorphic).
 * @param names An Array of expected Tensor names.
 * @param shapes Optional Array of expected Tensor shapes.
 * @param checkBatchAxis Whether to check that the batch axis of the arrays
 *   match  the expected value found in `shapes`.
 * @param exceptionPrefix String prefix used for exception formatting.
 * @returns List of standardized input Tensors (one Tensor per model input).
 * @throws ValueError: in case of improperly formatted user data.
 */s.export(r,"standardizeInputData",()=>S),/**
 * User input validation for Tensors.
 * @param inputs `Array` of `tf.Tensor`s for inputs.
 * @param targets `Array` of `tf.Tensor`s for targets.
 * @param weights Optional `Array` of `tf.Tensor`s for sample weights.
 * @throws ValueError: in case of incorrectly formatted data.
 */s.export(r,"checkArrayLengths",()=>T),/**
 * Maps metric functions to model outputs.
 * @param metrics An shortcut strings name, metric function, `Array` or dict
 *   (`Object`) of metric functions.
 * @param outputNames An `Array` of the names of model outputs.
 * @returns An `Array` (one entry per model output) of `Array` of metric
 *   functions. For instance, if the model has 2 outputs, and for the first
 *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,
 *   and just `binaryAccuracy` for the second output, the `Array` would look
 *   like:
 *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`
 * @throws TypeError: incompatible metrics format.
 */s.export(r,"collectMetrics",()=>E),/**
 * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods
 * for training, evaluation, prediction and saving.
 *
 * `tf.LayersModel` is the basic unit of training, inference and evaluation in
 * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.
 *
 * See also:
 *   `tf.Sequential`, `tf.loadLayersModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */s.export(r,"LayersModel",()=>F),/**
 * A `tf.Functional` is an alias to `tf.LayersModel`.
 *
 * See also:
 *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.
 *//** @doc {heading: 'Models', subheading: 'Classes'} */s.export(r,"Functional",()=>A);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../common"),i=e("../errors"),l=e("../layers/serialization"),u=e("../losses"),p=e("../metrics"),c=e("../optimizers"),d=e("../user_defined_metadata"),h=e("../utils/generic_utils"),f=e("../utils/layer_utils"),m=e("../utils/math_utils"),g=e("../utils/serialization_utils"),x=e("../version"),b=e("./container"),y=e("./executor"),j=e("./training_dataset"),_=e("./training_tensors"),k=e("./training_utils");function I(e){return e instanceof n.Tensor}function w(e){return Array.isArray(e)}function C(e){return!I(e)&&!w(e)}function S(e,t,r,s=!0,n=""){let a;if(null==t||0===t.length){// Check for the case where the model expected no data, but some data got
// sent.
if(null!=e){let t=!1;if(w(e)&&e.length>0)t=!0;else if(C(e)){for(let r in e)if(e.hasOwnProperty(r)){t=!0;break}}else t=!0;if(t)throw new i.ValueError(`Error when checking model ${n} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);if(C(e))for(let r of(a=[],t)){if(null==e[r])throw new i.ValueError(`No data provided for "${r}". Need data for each key in: ${t}`);a.push(e[r])}else if(w(e)){if(e.length!==t.length)throw new i.ValueError(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new i.ValueError(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}// Check shape compatibility.
if(a=(0,_.ensureTensorsRank2OrHigher)(a),null!=r)for(let e=0;e<t.length;++e){if(null==r[e])continue;let o=a[e];if(o.shape.length!==r[e].length)throw new i.ValueError(`Error when checking ${n}: expected ${t[e]} to have ${r[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<r[e].length;++t){if(0===t&&!s)continue;let a=o.shape[t],l=r[e][t];if(null!=l&&l>=0&&a!==l)throw new i.ValueError(`${n} expected a batch of elements where each example has shape [${r[e].slice(1,r[e].length)}] (i.e.,tensor shape [*,${r[e].slice(1,r[e].length)}]) but the ${n} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function T(e,t,r){let s=(0,h.unique)(e.map(e=>e.shape[0]));s.sort();let a=(0,h.unique)(t.map(e=>e.shape[0]));// TODO(cais): Check `weights` as well.
if(a.sort(),s.length>1)throw new i.ValueError(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(a.length>1)throw new i.ValueError(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(s.length>0&&a.length>0&&!(0,n.util).arraysEqual(s,a))throw new i.ValueError(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}/**
 * Check inputs provided by the user.
 *
 * Porting Note: This corresponds to _standardize_input_data() in Python
 *   Keras. Because of the strong typing in TF.js, we do not need to convert
 *   the data. Specifically:
 *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for
 *      example. We don't need to worry about that here because there is no
 *      widely popular javascript/typesdcript equivalent of pandas (so far).
 *      If one becomes available in the future, we can add support.
 *   2) in PyKeras, inputs can be Python dict. But here we are stipulating
 * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We
 * may add support for `Object` data inputs in the future when the need
 * arises.
 *
 * Instead, we perform basic checks for number of parameters and shapes.
 *
 * @param data: The input data.
 * @param names: Name for the inputs, from the model.
 * @param shapes: Expected shapes for the input data, from the model.
 * @param checkBatchAxis: Whether the size along the batch axis (i.e., the
 *   first dimension) will be checked for matching.
 * @param exceptionPrefix: Execption prefix message, used in generating error
 *   messages.
 * @throws ValueError: on incorrect number of inputs or mismatches in shapes.
 */function N(e,t,r,s=!0,n=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new i.ValueError(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new i.ValueError(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=r)for(let e=0;e<t.length;++e){if(null==r[e])continue;let o=a[e];if(o.shape.length!==r[e].length)throw new i.ValueError(`Error when checking ${n}: expected ${t[e]} to have ${r[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<r[e].length;++a){if(0===a&&!s)continue;let l=o.shape[a],u=r[e][a];if(null!=u&&u!==l)throw new i.ValueError(`Error when checking ${n}: expected ${t[e]} to have shape ${JSON.stringify(r[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}function E(e,t){let r;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);if("string"==typeof e||"function"==typeof e)r=[e];else if(Array.isArray(e)||"object"==typeof e)r=e;else throw TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);if(Array.isArray(r))return t.map(e=>r);{// In this case, metrics is a dict.
let e=[];for(let s of t){let t=r.hasOwnProperty(s)?r[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}class F extends b.Container{constructor(e){super(e),this.isTraining=!1}/**
     * Print a text summary of the model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - If the model has non-sequential-like topology, the inputs each layer
     *   receives
     * - The total number of trainable and non-trainable parameters of the model.
     *
     * ```js
     * const input1 = tf.input({shape: [10]});
     * const input2 = tf.input({shape: [20]});
     * const dense1 = tf.layers.dense({units: 4}).apply(input1);
     * const dense2 = tf.layers.dense({units: 8}).apply(input2);
     * const concat = tf.layers.concatenate().apply([dense1, dense2]);
     * const output =
     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
     *
     * const model = tf.model({inputs: [input1, input2], outputs: output});
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */summary(e,t,r=console.log){if(!this.built)throw new i.ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");(0,f.printSummary)(this,e,t,r)}/**
     * Configures and prepares the model for training and evaluation.  Compiling
     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
     * or `evaluate` on an un-compiled model will throw an error.
     *
     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
     * metrics to be used for fitting and evaluating this model.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=c.getOptimizer(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof n.Optimizer))throw new i.ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}// TODO(cais): Add lossWeights.
// TODO(cais): Add sampleWeightMode.
// Prepare loss functions.
let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss){if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new i.ValueError(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);let r=e.loss;t=r.map(e=>u.get(e))}else{let r=u.get(e.loss);this.outputs.forEach(e=>{t.push(r)})}}else{for(let t in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(t))throw new i.ValueError(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(let r of this.outputNames)null==e.loss[r]&&console.warn(`Output "${r}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${r} during training`),t.push(u.get(e.loss[r]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){// TODO(cais): Logic for skipping target(s).
let t=this.internalOutputShapes[e],r=this.outputNames[e];this.feedOutputNames.push(r),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}// TODO(cais): Add logic for output masks.
// TODO(cais): Add logic for sample weights.
let r=[];// Prepare metrics.
this.metrics=e.metrics,// TODO(cais): Add weightedMetrics.
this.metricsNames=["loss"],this.metricsTensors=[],// Compute total loss.
// Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.
//   Here, metricsTensors are TypeScript functions. This difference is due
//   to the difference in symbolic/imperative property of the backends.
(0,o.nameScope)("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==r.indexOf(e))continue;// TODO(cais): Add weightedLoss, sampleWeight and mask.
//   The following line should be weightedLoss
let t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}// Porting Note: Due to the imperative nature of the backend, we calculate
//   the regularizer penalties in the totalLossFunction, instead of here.
});let s=E(e.metrics,this.outputNames),a=(e,t,r)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([r,e])};(0,o.nameScope)("metric",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==r.indexOf(e))continue;let t=s[e],n=t=>{let r,s,n;//  TODO(cais): Use 'weights_' for weighted metrics.
for(let i of t){let t;if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){let t;let a=this.internalOutputShapes[e];1===a[a.length-1]||this.lossFunctions[e]===u.binaryCrossentropy?-1!==["accuracy","acc"].indexOf(i)?s=p.binaryAccuracy:-1!==["crossentropy","ce"].indexOf(i)&&(s=p.binaryCrossentropy):this.lossFunctions[e]===u.sparseCategoricalCrossentropy?-1!==["accuracy","acc"].indexOf(i)?s=p.sparseCategoricalAccuracy:-1!==["crossentropy","ce"].indexOf(i)&&(s=p.sparseCategoricalCrossentropy):-1!==["accuracy","acc"].indexOf(i)?s=p.categoricalAccuracy:-1!==["crossentropy","ce"].indexOf(i)&&(s=p.categoricalCrossentropy),-1!==["accuracy","acc"].indexOf(i)?t="acc":-1!==["crossentropy","ce"].indexOf(i)&&(t="ce"),// TODO(cais): Add weighting actually.
n=s,r=""+t}else{let e=p.get(i);// TODO(cais): Add weighting actually.
n=e,r=""+p.getLossOrMetricName(i)}(0,o.nameScope)(r,()=>{t=n}),a(e,r,t)}};n(t);// TODO(cais): Call handleMetrics with weights.
}}),// Porting Notes: Given the imperative backend of tfjs-core,
//   there is no need for constructing the symbolic graph and placeholders.
this.collectedTrainableWeights=this.trainableWeights}/**
     * Check trainable weights count consistency.
     *
     * This will raise a warning if `this.trainableWeights` and
     * `this.collectedTrainableWeights` are inconsistent (i.e., have different
     * numbers of parameters).
     * Inconsistency will typically arise when one modifies `model.trainable`
     * without calling `model.compile()` again.
     */checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}/**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(
     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateArgs`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */evaluate(e,t,r={}){let s=null==r.batchSize?32:r.batchSize;(0,_.checkBatchSize)(s);let n=this.standardizeUserDataXY(e,t,!0,s);try{// TODO(cais): If uses `useLearningPhase`, set the corresponding element
// of the input to 0.
let e=n[0].concat(n[1]);this.makeTestFunction();let t=this.testFunction,a=this.testLoop(t,e,s,r.verbose,r.steps);return(0,h.singletonOrArray)(a)}finally{(0,_.disposeNewTensors)(n[0],e),(0,_.disposeNewTensors)(n[1],t)}}// TODO(cais): Add code snippet below once real dataset objects are
//   available.
/**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async evaluateDataset(e,t){return this.makeTestFunction(),(0,j.evaluateDataset)(this,e,t)}/**
     * Get number of samples provided for training, evaluation or prediction.
     *
     * @param ins Input `tf.Tensor`.
     * @param batchSize Integer batch size, optional.
     * @param steps Total number of steps (batches of samples) before
     * declaring loop finished. Optional.
     * @param stepsName The public API's parameter name for `steps`.
     * @returns Number of samples provided.
     */checkNumSamples(e,t,r,s="steps"){let n;if(null!=r){if(n=null,null!=t)throw new i.ValueError(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(null!=e)n=Array.isArray(e)?e[0].shape[0]:e.shape[0];else throw new i.ValueError(`Either the input data should have a defined shape, or ${s} shoud be specified.`);return n}/**
     * Execute internal tensors of the model with input data feed.
     * @param inputs Input data feed. Must match the inputs of the model.
     * @param outputs Names of the output tensors to be fetched. Must match
     *   names of the SymbolicTensors that belong to the graph.
     * @returns Fetched values for `outputs`.
     */execute(e,t){if(Array.isArray(t)&&0===t.length)throw new i.ValueError("`outputs` is an empty Array, which is not allowed.");let r=Array.isArray(t),s=r?t:[t],a=this.retrieveSymbolicTensors(s),o=new y.FeedDict;if(e instanceof n.Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new i.ValueError(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)o.add(this.inputs[t],e[t])}else for(let t of this.inputs){let r=e[t.name];if(null==r)throw new i.ValueError(`No value is provided for the model's input ${t.name}`);o.add(t,r)}// Run execution.
let l=(0,y.execute)(a,o);return r?l:l[0]}/**
     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
     */retrieveSymbolicTensors(e){let t=(0,h.pyListRepeat)(null,e.length),r=e.length;for(let s of this.layers){let n=Array.isArray(s.output)?s.output:[s.output],a=n.map(e=>e.name);for(let s=0;s<e.length;++s){let o=a.indexOf(e[s]);if(-1!==o&&(t[s]=n[o],r--),0===r)break}if(0===r)break}if(r>0){let r=[];throw t.forEach((t,s)=>{null==t&&r.push(e[s])}),new i.ValueError(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`)}return t}/**
     * Helper method to loop over some data in batches.
     *
     * Porting Note: Not using the functional approach in the Python equivalent
     *   due to the imperative backend.
     * Porting Note: Does not support step mode currently.
     *
     * @param ins: input data
     * @param batchSize: integer batch size.
     * @param verbose: verbosity model
     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
     *   `tf.Tensor` (if multipe outputs).
     */predictLoop(e,t=32,r=!1){return n.tidy(()=>{let s=this.checkNumSamples(e);if(r)throw new i.NotImplementedError("Verbose predictLoop() is not implemented yet.");// Sample-based predictions.
// Porting Note: Tensor currently does not support sliced assignments as
//   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while
//   iterating over the batches.
let a=(0,_.makeBatches)(s,t),o=this.outputs.map(e=>[]);// TODO(cais): Can the scope() be pushed down inside the for loop?
for(let t=0;t<a.length;++t){let r=n.tidy(()=>{let r=a[t][0],s=a[t][1],n=(0,_.sliceArrays)(e,r,s),o=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)o.push({key:this.inputs[e],value:n[e]});else o.push({key:this.inputs[0],value:n});let i=new y.FeedDict(o);return(0,y.execute)(this.outputs,i)});r.forEach((e,t)=>o[t].push(e))}return(0,h.singletonOrArray)(o.map(e=>n.concat(e,0)))})}/**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFlow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
     * ```
     *
     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param args A `ModelPredictArgs` object containing optional fields.
     *
     * @return Prediction results as a `tf.Tensor`(s).
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */predict(e,t={}){let r=(0,_.ensureTensorsRank2OrHigher)(e);N(r,this.inputNames,this.feedInputShapes,!1);try{// TODO(cais): Take care of stateful models.
//   if (this.stateful) ...
// TODO(cais): Take care of the learning_phase boolean flag.
//   if (this.useLearningPhase) ...
let e=null==t.batchSize?32:t.batchSize;return(0,_.checkBatchSize)(e),this.predictLoop(r,e)}finally{(0,_.disposeNewTensors)(r,e)}}/**
     * Returns predictions for a single batch of samples.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predictOnBatch(tf.ones([8, 10])).print();
     * ```
     * @param x: Input samples, as a Tensor (for models with exactly one
     *   input) or an array of Tensors (for models with more than one input).
     * @return Tensor(s) of predictions
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */predictOnBatch(e){N(e,this.inputNames,this.feedInputShapes,!0);// TODO(cais): Take care of the learning_phase boolean flag.
//   if (this.useLearningPhase) ...
let t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,r=!0,s){// TODO(cais): Add sampleWeight, classWeight
if(null==this.optimizer_)throw new i.RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let n=[];for(let e=0;e<this.feedOutputShapes.length;++e){let t=this.feedOutputShapes[e],r=this.feedLossFns[e];r===u.sparseCategoricalCrossentropy?n.push(t.slice(0,t.length-1).concat([1])):n.push(t)}if(e=S(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=S(t,this.feedOutputNames,n,!1,"target"),// TODO(cais): Standardize sampleWeights & classWeights.
T(e,t,null),!// TODO(cais): Check sampleWeights as well.
/**
 * Validation on the compatibility of targes and loss functions.
 *
 * This helps prevent users from using loss functions incorrectly.
 *
 * @param targets `Array` of `tf.Tensor`s of targets.
 * @param lossFns `Array` of loss functions.
 * @param outputShapes `Array` of shapes of model outputs.
 */function(e,t,r){// TODO(cais): Dedicated test coverage?
let s=[u.meanSquaredError,u.binaryCrossentropy,u.categoricalCrossentropy];for(let n=0;n<e.length;++n){let a=e[n],o=t[n],l=r[n];if(null!=o){if(o===u.categoricalCrossentropy&&1===a.shape[a.shape.length-1])throw new i.ValueError(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(o)){let e=a.shape.slice(1),t=l.slice(1);for(let r=0;r<e.length;++r){let s=e[r],n=t[r];if(null!=n&&s!==n)throw new i.ValueError(`A target Tensor with shape ${a.shape} was passed for an output of shape ${l}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new i.ValueError(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,r,s,n=!0,a){let[o,i]=this.standardizeUserDataXY(e,t,n,a);// TODO(cais): Handle sampleWeights.
if(null!=r)throw Error("sample weight is not supported yet.");let l=null;if(null!=s){let e=(0,k.standardizeClassWeights)(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await (0,k.standardizeWeights)(i[t],null,e[t]))}// TODO(cais): Deal with the case of model.stateful == true.
return[o,i,l]}/**
     * Loop over some test data in batches.
     * @param f A Function returning a list of tensors.
     * @param ins Array of tensors to be fed to `f`.
     * @param batchSize Integer batch size or `null` / `undefined`.
     * @param verbose verbosity mode.
     * @param steps Total number of steps (batches of samples) before
     * declaring test finished. Ignored with the default value of `null` /
     * `undefined`.
     * @returns Array of Scalars.
     */testLoop(e,t,r,s=0,o){return n.tidy(()=>{let l=this.checkNumSamples(t,r,o,"steps"),u=[];if(s>0)throw new i.NotImplementedError("Verbose mode is not implemented yet.");// TODO(cais): Use `indicesForConversionToDense' to prevent slow down.
if(null!=o)throw new i.NotImplementedError("steps mode in testLoop() is not implemented yet");{let s=(0,_.makeBatches)(l,r),o=(0,n.tensor1d)((0,m.range)(0,l));for(let r=0;r<s.length;++r){let i=s[r][0],l=s[r][1],p=a.sliceAlongFirstAxis(o,i,l-i),c=(0,_.sliceArraysByIndices)(t,p),d=e(c);if(0===r)for(let e=0;e<d.length;++e)u.push((0,n.scalar)(0));for(let e=0;e<d.length;++e){let t=d[e];u[e]=n.add(u[e],n.mul(l-i,t))}}for(let e=0;e<u.length;++e)u[e]=n.div(u[e],l)}return u})}getDedupedMetricsNames(){let e=this.metricsNames,t=[];for(let r=0;r<e.length;++r){let s=e[r],n=s;if((0,h.count)(e,s)>1){let t=(0,h.count)(e.slice(0,r),s);n+=`_${t}`}t.push(n)}return t}/**
     * Creates a function that performs the following actions:
     *
     * 1. computes the losses
     * 2. sums them to get the total loss
     * 3. call the optimizer computes the gradients of the LayersModel's
     *    trainable weights w.r.t. the total loss and update the variables
     * 4. calculates the metrics
     * 5. returns the values of the losses and metrics.
     */makeTrainFunction(){return e=>{let t=[],r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),o=[],i=this.collectedTrainableWeights.map(e=>e.read()),l=this.optimizer_.minimize(()=>{let e;let i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:r[e]});let l=new y.FeedDict(i),u=(0,y.execute)(this.outputs,l,{training:!0});for(let r=0;r<this.lossFunctions.length;++r){let o=this.lossFunctions[r],i=o(s[r],u[r]);null!=a[r]&&(i=(0,k.computeWeightedLoss)(i,a[r]));// TODO(cais): push Scalar instead.
let l=n.mean(i);// TODO(cais): Use a scope() instead, to avoid ownership.
t.push(l),e=0===r?i:n.add(e,i)}// Compute the metrics.
// TODO(cais): These should probably be calculated outside
//   totalLossFunction to benefit speed?
for(let e=0;e<this.metricsTensors.length;++e){let r;if(this.outputs.length>1&&e<this.outputs.length)r=t[e];else{let t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];r=n.mean(t(s[a],u[a]))}n.keep(r),// TODO(cais): Use a scope() instead, to avoid ownership.
o.push(r)}return e=n.mean(e),// Add regularizer penalties.
this.calculateLosses().forEach(t=>{e=n.add(e,t)}),e},!0,i);return[l].concat(o)}}/**
     * Create a function which, when invoked with an array of `tf.Tensor`s as a
     * batch of inputs, returns the prespecified loss and metrics of the model
     * under the batch of input data.
     */makeTestFunction(){this.testFunction=e=>n.tidy(()=>{let t;let r=[],s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),o=[];for(let e=0;e<this.inputs.length;++e)o.push({key:this.inputs[e],value:s[e]});let i=new y.FeedDict(o),l=(0,y.execute)(this.outputs,i);// Compute total loss.
    for(let e=0;e<this.lossFunctions.length;++e){let s=this.lossFunctions[e],o=n.mean(s(a[e],l[e]));t=0===e?o:n.add(t,o),r.push(t)}// Compute the metrics.
    for(let e=0;e<this.metricsTensors.length;++e){let t=this.metricsTensors[e][0],s=this.metricsTensors[e][1],o=n.mean(t(a[s],l[s]));r.push(o)}return r})}/**
     * Trains the model for a fixed number of epochs (iterations on a
     * dataset).
     *
     * ```js
     * const model = tf.sequential({
     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * for (let i = 1; i < 5 ; ++i) {
     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *       batchSize: 4,
     *       epochs: 3
     *   });
     *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
     * }
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you
     * can also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named,
     * you can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args A `ModelFitArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input
     * data and what the model expects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async fit(e,t,r={}){return(0,_.fitTensors)(this,e,t,r)}// TODO(cais): Add code snippet below when it's possible to instantiate
//   actual dataset objects.
/**
     * Trains the model using a dataset object.
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for training. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs.
     *   Of the two items in the array, the first is the input feature(s) and
     *   the second is the output target(s).
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async fitDataset(e,t){return(0,j.fitDataset)(this,e,t)}/**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and metric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target data. It could be either a `tf.Tensor` or multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async trainOnBatch(e,t){// TODO(cais): Support sampleWeight and classWeight.
// TODO(cais): Support Dataset objects.
let r=await this.standardizeUserData(e,t),s=r[0],a=r[1],o=this.makeTrainFunction(),i=o(s.concat(a)),l=[];for(let e of i){let t=await e.data();l.push(t[0])}return n.dispose(i),(0,_.disposeNewTensors)(r[0],e),(0,_.disposeNewTensors)(r[1],t),(0,h.singletonOrArray)(l)}/**
     * Extract weight values of the model.
     *
     * @param config: An instance of `io.SaveConfig`, which specifies
     * model-saving options such as whether only trainable weights are to be
     * saved.
     * @returns A `NamedTensorMap` mapping original weight names (i.e.,
     *   non-uniqueified weight names) to their values.
     */getNamedWeights(e){let t=[],r=null!=e&&e.trainableOnly,s=r?this.trainableWeights:this.weights,n=this.getWeights(r);for(let e=0;e<s.length;++e)(!r||s[e].trainable)&&t.push({name:s[e].originalName,tensor:n[e]});return t}/**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const input = tf.input({shape: [10]});
     * const output = tf.layers.dense({units: 1}).apply(input);
     * const model = tf.model({inputs: [input], outputs: [output]});
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10
     * values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){let e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){let t=n.memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-n.memory().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=(0,h.toSnakeCase)(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if("string"!=typeof e)throw Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>(0,h.toSnakeCase)(e))}else{let t=Object.keys(this.loss);e={};let r=this.loss;for(let s of t)if("string"==typeof r[s])e[s]=(0,h.toSnakeCase)(r[s]);else throw Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[(0,h.toSnakeCase)(p.getLossOrMetricName(this.metrics))];{if(Array.isArray(this.metrics))return this.metrics.map(e=>(0,h.toSnakeCase)(p.getLossOrMetricName(e)));let e={};for(let t in this.metrics)e[t]=(0,h.toSnakeCase)(p.getLossOrMetricName(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}};// TODO(cais): Add weight_metrics when they are supported.
// TODO(cais): Add sample_weight_mode when it's supported.
// TODO(cais): Add loss_weights when it's supported.
}loadTrainingConfig(e){let t,r;if(null!=e.weighted_metrics)throw Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw Error("Loading sample_weight_mode is not supported yet.");let s=(0,g.convertPythonicToTs)(e.optimizer_config),n=(0,l.deserialize)(s);if("string"==typeof e.loss)t=(0,h.toCamelCase)(e.loss);else if(Array.isArray(e.loss))t=e.loss.map(e=>(0,h.toCamelCase)(e));else if(null!=e.loss)for(let r in t={},e.loss)t[r]=(0,h.toCamelCase)(e.loss[r]);if(Array.isArray(e.metrics))r=e.metrics.map(e=>(0,h.toCamelCase)(e));else if(null!=e.metrics)for(let t in r={},e.metrics)r[t]=(0,h.toCamelCase)(e.metrics[t]);this.compile({loss:t,metrics:r,optimizer:n})}/**
     * Save the configuration and/or weights of the LayersModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 2. Saving `model`'s topology and weights to browser
     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
     * then load it back.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * console.log('Prediction from original model:');
     * model.predict(tf.ones([1, 3])).print();
     *
     * const saveResults = await model.save('indexeddb://my-model-1');
     *
     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
     * console.log('Prediction from loaded model:');
     * loadedModel.predict(tf.ones([1, 3])).print();
     * ```
     *
     * Example 3. Saving `model`'s topology and weights as two files
     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
     * browser.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('downloads://my-model-1');
     * ```
     *
     * Example 4. Send  `model`'s topology and weights to an HTTP server.
     * See the documentation of `tf.io.http` for more details
     * including specifying request parameters and implementation of the
     * server.
     *
     * ```js
     * const model = tf.sequential(
     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
     * const saveResults = await model.save('http://my-server/model/upload');
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */async save(e,t){if("string"==typeof e){let t=(0,n.io).getSaveHandlers(e);if(0===t.length)throw new i.ValueError(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new i.ValueError(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new i.ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let r=await (0,n.io).encodeWeights(this.getNamedWeights(t)),s=this.toJSON(null,!1),a={modelTopology:s,format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${x.version}`,convertedBy:null},o=null!=t&&t.includeOptimizer;if(o&&null!=this.optimizer){a.trainingConfig=this.getTrainingConfig();let{data:e,specs:t}=await (0,n.io).encodeWeights(await this.optimizer.getWeights(),"optimizer");r.specs.push(...t),r.data=(0,n.io).concatenateArrayBuffers([r.data,e])}return null!=this.userDefinedMetadata&&((0,d.checkUserDefinedMetadata)(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=r.data,a.weightSpecs=r.specs,e.save(a)}/**
     * Set user-defined metadata.
     *
     * The set metadata will be serialized together with the topology
     * and weights of the model during `save()` calls.
     *
     * @param setUserDefinedMetadata
     */setUserDefinedMetadata(e){(0,d.checkUserDefinedMetadata)(e,this.name),this.userDefinedMetadata=e}/**
     * Get user-defined metadata.
     *
     * The metadata is supplied via one of the two routes:
     *   1. By calling `setUserDefinedMetadata()`.
     *   2. Loaded during model loading (if the model is constructed
     *      via `tf.loadLayersModel()`.)
     *
     * If no user-defined metadata is available from either of the
     * two routes, this function will return `undefined`.
     */getUserDefinedMetadata(){return this.userDefinedMetadata}}// The class name is 'Model' rather than 'LayersModel' for backwards
// compatibility since this class name shows up in the serialization format.
/** @nocollapse */F.className="Model",(0,n.serialization).registerClass(F);class A extends F{}A.className="Functional",(0,n.serialization).registerClass(A)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../errors":"2onZT","../layers/serialization":"fw7HP","../losses":"679KB","../metrics":"1LAxN","../optimizers":"a3jhs","../user_defined_metadata":"jiDFq","../utils/generic_utils":"ia9DW","../utils/layer_utils":"ahPJh","../utils/math_utils":"4BJyC","../utils/serialization_utils":"kgysQ","../version":"1kAQM","./container":"5kytZ","./executor":"i3VOs","./training_dataset":"lvdQ1","./training_tensors":"46x68","./training_utils":"j1CNJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fw7HP:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original Source layers/__init__.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Instantiate a layer from a config dictionary.
 * @param config dict of the form {class_name: str, config: dict}
 * @param customObjects dict mapping class names (or function names)
 *   of custom (non-Keras) objects to class/functions
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns Layer instance (may be LayersModel, Sequential, Layer...)
 */s.export(r,"deserialize",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("../utils/generic_utils");function o(e,t={},r=!1){return(0,a.deserializeKerasObject)(e,(0,n.serialization).SerializationMap.getMap().classNameMap,t,"layer",r)}},{"@tensorflow/tfjs-core":"U1ela","../utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"679KB":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original Source: losses.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Normalizes a tensor wrt the L2 norm alongside the specified axis.
 * @param x
 * @param axis Axis along which to perform normalization.
 */s.export(r,"l2Normalize",()=>l),s.export(r,"meanSquaredError",()=>u),s.export(r,"meanAbsoluteError",()=>p),s.export(r,"meanAbsolutePercentageError",()=>c),s.export(r,"meanSquaredLogarithmicError",()=>d),s.export(r,"squaredHinge",()=>h),s.export(r,"hinge",()=>f),s.export(r,"categoricalHinge",()=>m),/**
 * Logarithm of the hyperbolic cosine of the prediction error.
 *
 * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and
 * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly
 * like the mean squared error, but will not be so strongly affected by the
 * occasional wildly incorrect prediction.
 */s.export(r,"logcosh",()=>g),s.export(r,"categoricalCrossentropy",()=>x),/**
 * Categorical crossentropy with integer targets.
 *
 * @param target An integer tensor.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 */s.export(r,"sparseCategoricalCrossentropy",()=>b),/**
 * From TensorFlow's implementation in nn_impl.py:
 *
 * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
 *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
 *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
 *    = (1 - z) * x + log(1 + exp(-x))
 *    = x - x * z + log(1 + exp(-x))
 * For x < 0, to avoid overflow in exp(-x), we reformulate the above
 *      x - x * z + log(1 + exp(-x))
 *    = log(exp(x)) - x * z + log(1 + exp(-x))
 *    = - x * z + log(1 + exp(x))
 * Hence, to ensure stability and avoid overflow, the implementation uses this
 * equivalent formulation
 *    max(x, 0) - x * z + log(1 + exp(-abs(x)))
 *
 * @param labels The labels.
 * @param logits The logits.
 */s.export(r,"sigmoidCrossEntropyWithLogits",()=>y),s.export(r,"binaryCrossentropy",()=>j),s.export(r,"kullbackLeiblerDivergence",()=>_),s.export(r,"poisson",()=>k),s.export(r,"cosineProximity",()=>I),s.export(r,"mse",()=>w),s.export(r,"MSE",()=>C),s.export(r,"mae",()=>S),s.export(r,"MAE",()=>T),s.export(r,"mape",()=>N),s.export(r,"MAPE",()=>E),s.export(r,"msle",()=>F),s.export(r,"MSLE",()=>A),s.export(r,"kld",()=>R),s.export(r,"KLD",()=>D),s.export(r,"cosine",()=>$),s.export(r,"lossesMap",()=>P),// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
s.export(r,"get",()=>z);var n=e("@tensorflow/tfjs-core"),a=e("./backend/common"),o=e("./backend/tfjs_backend"),i=e("./errors");function l(e,t){return(0,n.tidy)(()=>{"float32"!==e.dtype&&(e=n.cast(e,"float32"));let r=n.sum(o.square(e),t,!0),s=n.fill(r.shape,(0,a.epsilon)()),i=n.sqrt(n.maximum(r,s));return n.div(e,i)})}function u(e,t){return(0,n.tidy)(()=>n.mean(o.square(n.sub(t,e)),-1))}function p(e,t){return(0,n.tidy)(()=>n.mean(n.abs(n.sub(t,e)),-1))}function c(e,t){return(0,n.tidy)(()=>{let r=n.sub(e,t),s=n.clipByValue(n.abs(e),(0,a.epsilon)(),Number.MAX_VALUE),o=n.abs(n.div(r,s));return n.mul(100,n.mean(o,-1))})}function d(e,t){return(0,n.tidy)(()=>{let r=n.clipByValue(t,(0,a.epsilon)(),Number.MAX_VALUE),s=n.log(n.add(1,r)),i=n.clipByValue(e,(0,a.epsilon)(),Number.MAX_VALUE),l=n.log(n.add(1,i));return n.mean(o.square(n.sub(s,l)),-1)})}function h(e,t){return(0,n.tidy)(()=>{let r=n.maximum(0,n.sub(1,n.mul(e,t)));return n.mean(o.square(r),-1)})}function f(e,t){return(0,n.tidy)(()=>{let r=n.maximum(0,n.sub(1,n.mul(e,t)));return n.mean(r,-1)})}function m(e,t){return(0,n.tidy)(()=>{let r=n.sum(n.mul(e,t),-1),s=n.max(n.mul(n.sub(1,e),t),-1);return n.maximum(0,n.add(1,n.sub(s,r)))})}function g(e,t){return(0,n.tidy)(()=>{let r=Math.log(2),s=n.sub(t,e),a=n.sub(n.add(s,n.softplus(n.mul(-2,s))),r);return n.mean(a,-1)})}function x(e,t,r=!1){return(0,n.tidy)(()=>{if(r)t=n.softmax(t);else{// scale preds so that the class probabilities of each sample sum to 1.
let e=n.sum(t,t.shape.length-1,!0);t=n.div(t,e)}return t=n.clipByValue(t,(0,a.epsilon)(),1-(0,a.epsilon)()),n.neg(n.sum(n.mul(n.cast(e,"float32"),n.log(t)),t.shape.length-1))})}function b(e,t,r=!1){return(0,n.tidy)(()=>{let s=n.cast(n.floor(o.flatten(e)),"int32");t=n.clipByValue(t,(0,a.epsilon)(),1-(0,a.epsilon)());let i=t.shape,l=n.reshape(n.oneHot(s,i[i.length-1]),i);return x(l,t,r)})}function y(e,t){if(!(0,n.util).arraysEqual(e.shape,t.shape))throw new i.ValueError(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return(0,n.tidy)(()=>{// The logistic loss formula from above is
//   x - x * z + log(1 + exp(-x))
// For x < 0, a more numerically stable formula is
//   -x * z + log(1 + exp(x))
// Note that these two expressions can be combined into the following:
//   max(x, 0) - x * z + log(1 + exp(-abs(x)))
let r=n.relu(t),s=n.neg(n.abs(t));return n.add(n.sub(r,n.mul(t,e)),n.log1p(n.exp(s)))})}function j(e,t){return(0,n.tidy)(()=>{let r;return r=n.clipByValue(t,(0,a.epsilon)(),1-(0,a.epsilon)()),r=n.log(n.div(r,n.sub(1,r))),n.mean(y(e,r),-1)})}function _(e,t){return(0,n.tidy)(()=>{let r=n.clipByValue(e,(0,a.epsilon)(),1),s=n.clipByValue(t,(0,a.epsilon)(),1);return n.sum(n.mul(e,n.log(n.div(r,s))),-1)})}function k(e,t){return(0,n.tidy)(()=>{let r=n.log(n.add((0,a.epsilon)(),t));return n.mean(n.sub(t,n.mul(e,r)),-1)})}function I(e,t){return(0,n.tidy)(()=>{let r=l(e,-1),s=l(t,-1),a=n.mul(r,s);return n.neg(n.sum(a,-1))})}let w=u,C=u,S=p,T=p,N=c,E=c,F=d,A=d,R=_,D=_,$=I,P={meanSquaredError:u,meanAbsoluteError:p,meanAbsolutePercentageError:c,meanSquaredLogarithmicError:d,squaredHinge:h,hinge:f,categoricalHinge:m,logcosh:g,categoricalCrossentropy:x,sparseCategoricalCrossentropy:b,binaryCrossentropy:j,kullbackLeiblerDivergence:_,poisson:k,cosineProximity:I};function z(e){if("string"!=typeof e)return e;{if(e in P)return P[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new i.ValueError(t)}}},{"@tensorflow/tfjs-core":"U1ela","./backend/common":"02oHM","./backend/tfjs_backend":"hBUWZ","./errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1LAxN":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Built-in metrics.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"binaryAccuracy",()=>u),s.export(r,"categoricalAccuracy",()=>p),s.export(r,"precision",()=>d),s.export(r,"recall",()=>h),s.export(r,"binaryCrossentropy",()=>f),s.export(r,"sparseCategoricalAccuracy",()=>m),s.export(r,"topKCategoricalAccuracy",()=>g),s.export(r,"sparseTopKCategoricalAccuracy",()=>x),s.export(r,"mse",()=>b),s.export(r,"MSE",()=>y),s.export(r,"mae",()=>j),s.export(r,"MAE",()=>_),s.export(r,"mape",()=>k),s.export(r,"MAPE",()=>I),s.export(r,"categoricalCrossentropy",()=>w),s.export(r,"cosine",()=>C),s.export(r,"sparseCategoricalCrossentropy",()=>S),s.export(r,"metricsMap",()=>T),s.export(r,"get",()=>N),/**
 * Get the shortcut function name.
 *
 * If the fn name is a string,
 *   directly return the string name.
 * If the function is included in metricsMap or lossesMap,
 *   return key of the map.
 *   - If the function relative to multiple keys,
 *     return the first found key as the function name.
 *   - If the function exists in both lossesMap and metricsMap,
 *     search lossesMap first.
 * If the function is not included in metricsMap or lossesMap,
 *   return the function name.
 *
 * @param fn loss function, metric function, or short cut name.
 * @returns Loss or Metric name in string.
 */s.export(r,"getLossOrMetricName",()=>E);var n=e("@tensorflow/tfjs-core"),a=e("./backend/tfjs_backend"),o=e("./errors"),i=e("./losses"),l=e("./utils/generic_utils");function u(e,t){return(0,n.tidy)(()=>{let r=n.mul(.5,n.onesLike(t)),s=a.cast(n.greater(t,r),e.dtype);return n.mean(n.equal(e,s),-1)})}function p(e,t){return(0,n.tidy)(()=>a.cast(n.equal(n.argMax(e,-1),n.argMax(t,-1)),"float32"))}function c(e,t){return(0,n.tidy)(()=>n.cast(n.sum(n.logicalAnd(n.equal(e,1),n.equal(t,1))),"float32"))}function d(e,t){return(0,n.tidy)(()=>{let r=c(e,t),s=(0,n.tidy)(()=>n.cast(n.sum(n.logicalAnd(n.equal(e,0),n.equal(t,1))),"float32")),a=n.add(r,s);return n.cast(n.where(n.greater(a,0),n.div(r,a),0),"float32")})}function h(e,t){return(0,n.tidy)(()=>{let r=c(e,t),s=(0,n.tidy)(()=>n.cast(n.sum(n.logicalAnd(n.equal(e,1),n.equal(t,0))),"float32")),a=n.add(r,s);return n.cast(n.where(n.greater(a,0),n.div(r,a),0),"float32")})}function f(e,t){return(0,i.binaryCrossentropy)(e,t)}function m(e,t){return e.rank===t.rank&&(e=n.squeeze(e,[e.rank-1])),(t=n.argMax(t,-1)).dtype!==e.dtype&&(t=n.cast(t,e.dtype)),n.cast(n.equal(e,t),"float32")}function g(e,t){throw new o.NotImplementedError}function x(e,t){throw new o.NotImplementedError}let b=i.meanSquaredError,y=i.meanSquaredError,j=i.meanAbsoluteError,_=i.meanAbsoluteError,k=i.meanAbsolutePercentageError,I=i.meanAbsolutePercentageError,w=i.categoricalCrossentropy,C=i.cosineProximity,S=i.sparseCategoricalCrossentropy,T={binaryAccuracy:u,categoricalAccuracy:p,precision:d,categoricalCrossentropy:w,sparseCategoricalCrossentropy:S,mse:b,MSE:y,mae:j,MAE:_,mape:k,MAPE:I,cosine:C};function N(e){if("string"==typeof e&&e in T)return T[e];if("string"!=typeof e&&null!=e)return e;throw new o.ValueError(`Unknown metric ${e}`)}function E(e){if(l.assert(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(let r of Object.keys(i.lossesMap))if(i.lossesMap[r]===e){t=r;break}if(void 0!==t)return t;for(let r of Object.keys(T))if(T[r]===e){t=r;break}return void 0!==t?t:e.name}}},{"@tensorflow/tfjs-core":"U1ela","./backend/tfjs_backend":"hBUWZ","./errors":"2onZT","./losses":"679KB","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],a3jhs:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Optimizers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// Add (de)serialize()
// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
s.export(r,"getOptimizer",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./backend/common"),o=e("./errors");function i(e){let t={Adagrad:()=>(0,n.train).adagrad(.01),Adadelta:()=>(0,n.train).adadelta(1,.95,(0,a.epsilon)()),Adam:()=>(0,n.train).adam(.001,.9,.999,(0,a.epsilon)()),Adamax:()=>(0,n.train).adamax(.002,.9,.999,(0,a.epsilon)(),0),RMSProp:()=>(0,n.train).rmsprop(.001,.9,0,(0,a.epsilon)()),SGD:()=>(0,n.train).sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new o.ValueError(`Unknown Optimizer ${e}`)}},{"@tensorflow/tfjs-core":"U1ela","./backend/common":"02oHM","./errors":"2onZT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jiDFq:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//** Utility functions related to user-defined metadata. */// Maximum recommended serialized size for user-defined metadata.
// Beyond this limit, a warning message will be printed during model loading and
// saving.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH",()=>n),/**
 * Check validity of user-defined metadata.
 *
 * @param userDefinedMetadata
 * @param modelName Name of the model that the user-defined metadata belongs to.
 *   Used during construction of error messages.
 * @param checkSize Whether to check the size of the metadata is under
 *   recommended limit. Default: `false`. If `true`, will try stringify the
 *   JSON object and print a console warning if the serialzied size is above the
 *   limit.
 * @throws Error if `userDefinedMetadata` is not a plain JSON object.
 */s.export(r,"checkUserDefinedMetadata",()=>a),/**
 * Check if an input is plain JSON object or any valid subfield of it.
 *
 * @param x The input to be checked.
 * @param assertObject Whether to assert `x` is a JSON object, i.e., reject
 *   cases of arrays and primitives.
 * @return Returns `true` if and only if `x` is a plain JSON object,
 *   a JSON-valid primitive including string, number, boolean and null,
 *   or an array of the said types.
 */// tslint:disable-next-line:no-any
s.export(r,"plainObjectCheck",()=>o);let n=1048576;function a(e,t,r=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!o(e))throw Error("User-defined metadata is expected to be a JSON object, but is not.");if(r){let r=JSON.stringify(e);r.length>n&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${r.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${n}.`)}}function o(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){// `x` is a JavaScript object and its prototype is Object.
let t=Object.keys(e);for(let r of t)if("string"!=typeof r||!o(e[r]))return!1;return!0}// `x` is a JavaScript object but its prototype is not Object.
if(!Array.isArray(e))// and it's not an Array. I.e., it's a complex object such as
// `Error` and `Date`.
return!1;// `x` is a JavaScript array.
for(let t of e)if(!o(t))return!1;return!0}{// `x` is not a JavaScript object or `null`.
let t=typeof e;return"string"===t||"number"===t||"boolean"===t}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ahPJh:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Print the summary of a LayersModel object.
 *
 * @param model tf.LayersModel instance.
 * @param lineLength Total length of printed lines. Set this to adapt to the
 *   display to different terminal or console sizes.
 * @param positions Relative or absolute positions of log elements in each
 *   line. Each number corresponds to right-most (i.e., ending) position of a
 *   column.
 *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like
 *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.
 * @param printFn Print function to use.
 *   It will be called on each line of the summary. You can provide a custom
 *   function in order to capture the string summary. Defaults to `console.log`.
 */s.export(r,"printSummary",()=>a);var n=e("./variable_utils");function a(e,t,r,s=console.log){let a;let i=function(e){let t=!0,r=[],s=[];for(let t in e.nodesByDepth)r.push(e.nodesByDepth[t]);for(let e of r){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(let r of e.layers){let e=!1;for(let n of r.inboundNodes)if(-1!==s.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),l=["Layer (type)","Input Shape","Output shape","Param #"];if(i?(t=t||90,r=r||[.32,.61,.89,1]):(t=t||115,r=r||[.24,.48,.7,.8,1]),r[r.length-1]<=1&&(r=r.map(e=>Math.floor(t*e))),!i)for(let t in l.push("Receives inputs"),a=[],e.nodesByDepth)a.push(...e.nodesByDepth[t]);s("_".repeat(t)),o(l,r,s),s("=".repeat(t));let u=e.layers;for(let e=0;e<u.length;++e)i?/**
 * Prints a summary for a single Layer, without connectivity information.
 *
 * @param layer: Layer instance to print.
 */function(e,t,r){let s,n;try{n=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){n="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}let a=e.name,i=e.getClassName(),l=[`${a} (${i})`,n,s,e.countParams().toString()];o(l,t,r)}(u[e],r,s):/**
 * Prints a summary for a single Layer, with connectivity information.
 */function(e,t,r,s){let n,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){a="multiple"}try{n=JSON.stringify(e.outputShape)}catch(e){n="multiple"}let i=[];for(let t of e.inboundNodes)if(null==r||!(r.length>0)||-1!==r.indexOf(t))for(let e=0;e<t.inboundLayers.length;++e){let r=t.inboundLayers[e].name,s=t.nodeIndices[e],n=t.tensorIndices[e];i.push(`${r}[${s}][${n}]`)}let l=e.name,u=e.getClassName(),p=0===i.length?"":i[0],c=[`${l} (${u})`,a,n,e.countParams().toString(),p];o(c,t,s);for(let e=1;e<i.length;++e)o(["","","","",i[e]],t,s)}(u[e],r,a,s),s((e===u.length-1?"=":"_").repeat(t));// tslint:disable-next-line:no-any
e.checkTrainableWeightsConsistency();let p=null!=e.collectedTrainableWeights?(0,n.countParamsInWeights)(e.collectedTrainableWeights):(0,n.countParamsInWeights)(e.trainableWeights),c=(0,n.countParamsInWeights)(e.nonTrainableWeights);s(`Total params: ${p+c}`),s(`Trainable params: ${p}`),s(`Non-trainable params: ${c}`),s("_".repeat(t))}function o(e,t,r=console.log){let s="";for(let r=0;r<e.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=e[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);r(s)}},{"./variable_utils":"aAuns","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kgysQ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Convert a Pythonic config object to TypeScript config object.
 * @param pythonicConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */s.export(r,"convertPythonicToTs",()=>function e(t,r){if(null===t)return null;if("string"==typeof t)return n.toCamelCase(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let s=[],n=t.length;for(let o=0;o<n;++o){let n=t[o];a(r,o,n)?s.push(n):s.push(e(n,r))}return s}{let r={};for(let s of Object.keys(t)){let a=t[s];if("name"===s&&"string"==typeof a)// the names of LayersModel and Layer instances, should not undergo the
    // camel-case conversion.
    r[s]=a;else{let t=n.toCamelCase(s);r[t]=e(a,t)}}return r}}),/**
 * Convert a TypeScript config object to Python config object.
 * @param tsConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */s.export(r,"convertTsToPythonic",()=>function e(t,r){if(null==t)return null;if("string"==typeof t)return n.toSnakeCase(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let s=[],n=t.length;for(let o=0;o<n;++o){let n=t[o];a(r,o,n)?s.push(n):s.push(e(n,r))}return s}{let r={};for(let s of Object.keys(t)){let a=t[s],o=n.toSnakeCase(s);("name"===s||"className"===s)&&"string"==typeof a?// the names of LayersModel and Layer instances, should not undergo the
    // snake-case conversion.
    r[o]=a:r[o]=e(a,s)}return r}});var n=e("../utils/generic_utils");// tslint:enable
/**
 * Test whether a value in an array is the name of a LayersModel or Layer.
 * @param key The key name that the value is found under. Note that the key
 *   may not be at the level immediately above the value, if the value is in a
 *   nested array.
 * @param index Index of the value in the Array that it is found in.
 * @param value The value object.
 * @returns A boolean indicating whether value is a name.
 */function a(e,t,r){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof r}},{"../utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1kAQM":[function(e,t,r){/** @license See the LICENSE file. */// This code is auto-generated, do not modify this file!
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"version",()=>n);let n="3.21.0"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5kytZ":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: keras/engine/topology.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * A Container is a directed acyclic graph of layers.
 *
 * It is the topological form of a "model". A LayersModel
 * is simply a Container with added training routines.
 *
 */s.export(r,"Container",()=>g);var n=e("@tensorflow/tfjs-core"),a=e("../backend/state"),o=e("../errors"),i=e("../layers/serialization"),l=e("../utils/generic_utils"),u=e("../utils/serialization_utils"),p=e("../utils/types_utils"),c=e("../variables"),d=e("../version"),h=e("./executor"),f=e("./input_layer"),m=e("./topology");class g extends m.Layer{constructor(e){if(// No args passed to super's constructor.
super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){let e=this.getClassName().toLowerCase();this.name=(0,a.getUid)(e)}// Check for redundancy in inputs.
if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],l.unique(this.inputs).length!==this.inputs.length)throw new o.ValueError(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);// TODO(michaelterry): Determine if caching still needed with eager
// backend.
/*
          This is for performance optimization when calling the Container on new
          inputs. Every time the Container is called on a set on input tensors,
          we compute the output tensors, output masks and output shapes in one pass,
          then cache them here. When one of these outputs is queried later,
          we retrieve it from there instead of recomputing it.
        */// this.outputTensorCache = {};
// this.outputShapeCache = {};
// Build this.outputLayers:
for(let e of(l.unique(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),/*
          List of initial layers (1 to 1 mapping with this.inputs, hence the same
          layer might appear twice)
        */this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],/*
          List of layers (1 to 1 mapping with this.outputs, hence the same layer
          might appear twice)
        */this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],/*
          All layers in order of horizontal graph traversal. Entries are unique.
          Includes input and output layers.
        */this.layers=[],/*
          References to container layers that were constructed internally. We need
          these to properly dispose of tensors from nested containers.
        */this.internalContainerRefs=[],this.outputs)){let t=e.sourceLayer,r=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(r),this.outputLayersTensorIndices.push(s)}// TODO(michaelterry): Add output mask cache code.
// Build this.inputLayers:
for(let e of this.inputs){let t=e.sourceLayer,r=e.nodeIndex,s=e.tensorIndex;/*
              It's supposed to be an input layer, so only one node
              and one tensor output.
            */l.assert(0===r,"input layer has >1 nodes"),l.assert(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(r),this.inputLayersTensorIndices.push(s)}// Build this.inputNames and this.outputNames.
this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){let r=this.inputLayers[t];// Check that layer is an InputLayer.
if(!(r instanceof f.InputLayer))throw TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${r.getClassName()}.`);this.inputNames.push(r.name),this.feedInputShapes.push(r.batchInputShape),this.feedInputNames.push(r.name)}for(let e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);/*
          Container_nodes: set of nodes included in the graph (not all nodes
          included in the layers are relevant to the current graph).
        */// ids of all nodes relevant to the Container:
let t={},r={},s={},n={},i={},u=[],p=(e,t,r,s,n,a)=>{(null==s||null==n||null==a)&&(s=e.sourceLayer,n=e.nodeIndex,a=e.tensorIndex);let l=s.inboundNodes[n];// Prevent cycles.
if(-1!==r.indexOf(l))throw new o.RuntimeError(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);// Don't repeat work for shared subgraphs
if(-1!==t.indexOf(l))return;// Update containerNodes.
this.containerNodes.add(g.nodeKey(s,n)),s.id in i||(i[s.id]=Object.keys(i).length),-1===r.indexOf(l)&&r.push(l);// Propagate to all previous tensors connected to this node.
let c=l.inboundLayers.length;for(let e=0;e<c;e++){let s=l.inputTensors[e],n=l.inboundLayers[e],a=l.nodeIndices[e],o=l.tensorIndices[e];p(s,t,r,n,a,o)}for(t.push(l);r.indexOf(l)>=0;)r.splice(r.indexOf(l),1);u.push(l)},c=[],d=[];for(let e of this.outputs)p(e,c,d);let h=u.slice().reverse();for(let e of h){r[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id],o=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];/*
              If we've seen this layer before at a higher depth, we should use that
              depth instead of the node depth.  This is necessary for shared layers
              that have inputs at different depth levels in the graph.
            */a=Math.max(a,o),s[e.outboundLayer.id]=a,n[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;// Update the depth of inbound nodes.
for(let s=0;s<e.inboundLayers.length;s++){let n=e.inboundLayers[s],o=e.nodeIndices[s],i=n.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,l),r[i.id]=i}}// Build a dict {depth: list of nodes with this depth}
let x={};for(let e in t){let s=t[e];s in x||(x[s]=[]),x[s].push(r[e])}// Build a dict {depth: list of layers with this depth}
let b={};for(let e in s){let t=s[e];t in b||(b[t]=[]),b[t].push(n[e])}// Get sorted list of layer depths.
let y=Object.keys(b).map(e=>parseInt(e,10)).sort(l.reverseNumberCompare);for(let e of(// Set this.layers and this.layersByDepth.
this.layers=[],y)){let t=b[e];for(let e of(// Container.layers needs to have a deterministic order:
// here we order them by traversal order.
t.sort((e,t)=>{let r=i[e.id],s=i[t.id];return r<s?-1:r>s?1:0}),t))e instanceof g&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=b,// Get sorted list of node depths;
y=Object.keys(x).map(e=>parseInt(e,10)).sort(l.reverseNumberCompare);// Check that all tensors required are computable.
// computable_tensors: all tensors in the graph
// that can be computed from the inputs provided.
let j=this.inputs.slice(),_=[];for(let e of y)for(let t of x[e]){let e=t.outboundLayer;if(null!=e){for(let r of t.inputTensors)if(-1===j.indexOf(r))throw new o.RuntimeError(`Graph disconnected: cannot obtain value for tensor ${r} at layer "${e.name}". The following previous layers were accessed without issue: ${_}`);for(let e of t.outputTensors)j.push(e);_.push(e.name)}}// Set this.containerNodes and this.nodesByDepth.
this.nodesByDepth=x;// Ensure name unicity, which will be crucial for serialization
// (since serialized nodes refer to layers by their name).
let k=this.layers.map(e=>e.name);for(let e of k){let t=k.filter(t=>t===e).length;if(1!==t)throw new o.RuntimeError(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(k))}// Layer parameters.
// The new container starts with a single inbound node
// for its inputs, and no outbound nodes.
// Will be appended to by future calls to apply().
this.outboundNodes=[],// Will be appended to below, and by future calls to apply().
this.inboundNodes=[],// Create the node linking internal inputs to internal outputs.
// (This call has side effects.)
// tslint:disable-next-line:no-unused-expression
new m.Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw Error(`Container '${this.name}' is already disposed.`)}/**
     * Attempt to dispose a LayersModel's weights.
     *
     * This method decrease the reference count of the LayersModel object by 1.
     *
     * A LayersModel is reference-counted. Its reference count is incremented by 1
     * when it is first constructed and when it is used as a Layer of another
     * LayersModel.
     *
     * If the reference count of a LayersModel becomes 0, the `dispose` method of
     * all its constituent `Layer`s will be called.
     *
     * Note: If the reference count is greater than 0 after the decrement, the
     * `dispose` method of its constituent `Layer`s will *not* be called.
     *
     * After a LayersModel is disposed, it cannot be used in calls such as
     * 'predict`, `evaluate` or `fit` anymore.
     *
     * @returns A DisposeResult Object with the following fields:
     *   - refCountAfterDispose: The reference count of the LayersModel after this
     *     `dispose()` call.
     *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
     *     during this `dispose()` call.
     * @throws {Error} If the layer is not built yet, or if the LayersModel has
     *   already been disposed.
     */dispose(){this.assertNotDisposed();let e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(let t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;// Call dispose on each internally created container layer again to ensure
// their refCounts hit zero and their tensors are subsequently deleted.
for(let t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{// tslint:disable-next-line:no-any
t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){// Porting Note: This check below is to prevent errors where the
//   _trainableWeights inherited from the parent class (Layer) gets
//   inadvertently used.
if(this._trainableWeights.length>0)throw new o.ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(let t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}/**
     * Loads all layer weights from a JSON object.
     *
     * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
     *   TypeScript. The utility script at `scripts/pykeras.py` offers means
     *   to convert them into JSON strings compatible with this method.
     * Porting Note: TensorFlow.js Layers supports only loading by name currently.
     *
     * @param weights A JSON mapping weight names to weight values as nested
     *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
     *   names to `tf.Tensor` objects.
     * @param strict Require that the provided weights exactly match those
     *   required by the container.  Default: `true`.  Passing `false` means that
     *   extra weights and missing weights will be silently ignored.
     */loadWeights(e,t=!0){let r={},s=0;for(let e of this.layers)for(let t of e.weights){if(null!=r[t.originalName])throw new o.ValueError(`Duplicate weight name: ${t.originalName}`);r[t.originalName]=t,s++}let n=[];for(let s in e){// TF 2.2.0 added cell name to the weight name in the format of
// layer_name/cell_name/weight_name, we need to remove
// the inner cell name.
let a=s;if(null==r[s]){let e=s.split("/"),t=e.slice(0,-2).concat([e[e.length-1]]);a=t.join("/")}if(null!=r[a])n.push([r[a],e[s]]);else if(t)throw new o.ValueError(`Provided weight data has no target variable: ${s}`);delete r[a]}if(t){// Check that all weights are set.
let e=[];for(let t in r)e.push(t);if(e.length>0)throw new o.ValueError(`${e.length} of ${s} weights are not set: ${e}`)}(0,c.batchSetValue)(n)}/**
     * Util shared between different serialization methods.
     * @returns LayersModel config with Keras version information added.
     */updatedConfig(){let e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${d.version}`,// TODO(nielsene): Replace something like K.backend() once
// possible.
t.backend="TensorFlow.js",t}/**
     * Returns a JSON string containing the network configuration.
     *
     * To load a network from a JSON save file, use
     * models.modelFromJSON(jsonString);
     * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
     * @param returnString Whether the return value should be stringified
     *    (default: `true`).
     * @returns a JSON string if `returnString` (default), or a JSON object if
     *   `!returnString`.
     */// tslint:disable-next-line:no-any
toJSON(e,t=!0){let r=(0,u.convertTsToPythonic)(this.updatedConfig());return t?JSON.stringify(r):r}/**
     * Call the model on new inputs.
     *
     * In this case `call` just reapplies all ops in the graph to the new inputs
     * (e.g. build a new computational graph from the provided inputs).
     *
     * @param inputs A tensor or list of tensors.
     * @param mask A mask or list of masks. A mask can be either a tensor or null
     *   (no mask).
     *
     * @return A tensor if there is a single output, or a list of tensors if there
     *   are more than one outputs.
     */call(e,t){return(0,n.tidy)(()=>{e=l.toList(e);let r=new h.FeedDict;for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t]);return(0,h.execute)(this.outputs,r,t)})}/**
     * Computes an output mask tensor.
     *
     * @param inputs Tensor or list of tensors.
     * @param mask Tensor or list of tensors.
     *
     * @return null or a tensor (or list of tensors, one per output tensor of the
     * layer).
     */computeMask(e,t){return(0,n.tidy)(()=>{let r;// TODO(michaelterry): Add support for mask caching.
return e=l.toList(e),r=null==t?l.pyListRepeat(null,e.length):l.toList(t),this.runInternalGraph(e,r)[1]})}/**
     * Computes the output shape of the layer.
     *
     * Assumes that the layer will be built to match that input shape provided.
     *
     * @param inputShape A shape (tuple of integers) or a list of shape tuples
     *   (one per output tensor of the layer). Shape tuples can include null for
     *   free dimensions, instead of an integer.
     */computeOutputShape(e){let t=p.normalizeShapeList(e);if(t.length!==this.inputLayers.length)throw new o.ValueError(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);// TODO(michaelterry): Add caching
let r={};for(let e=0;e<t.length;e++){let s=this.inputLayers[e],n=t[e],a=s.name+"_0_0";r[a]=n}let s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(l.reverseNumberCompare);// Iterate over nodes, by depth level.
if(s.length>1)for(let e of s){let t=this.nodesByDepth[e];for(let e of t){// This is always a single layer, never a list.
let t=e.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(t.id))continue;// Potentially redundant list, same size of node.inputTensors.
let s=[];for(let t=0;t<e.inboundLayers.length;t++){let n=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=`${n.name}_${a}_${o}`,l=r[i];s.push(l)}let n=t.computeOutputShape(l.singletonOrArray(s)),a=p.normalizeShapeList(n),o=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++){let s=`${t.name}_${o}_${e}`;r[s]=a[e]}}}// Read final output shapes from layersToOutputShapes.
let n=[],a=[];for(let e=0;e<this.outputLayers.length;e++){let t=this.outputLayers[e],r=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],n=`${t.name}_${r}_${s}`;a.push(n)}for(let e=0;e<a.length;e++){let t=a[e];l.assert(t in r),n.push(r[t])}// TODO(michaelterry): Update cache
return l.singletonOrArray(n)}/**
     * Computes output tensors for new inputs.
     *
     * Note:
     *   - Expects `inputs` to be a list (potentially with 1 element).
     *
     * @param inputs List of tensors
     * @param masks List of masks (tensors or null).
     * @return Three lists: outputTensors, outputMasks, outputShapes
     */runInternalGraph(e,t){null==t&&(t=l.pyListRepeat(null,e.length));// Dictionary mapping reference tensors to tuples
// (computed tensor, compute mask)
// we assume a 1:1 mapping from tensor to mask
// TODO: raise exception when a `.computeMask()` call
// does not return a list the same size as `call`
let r={};for(let s=0;s<this.inputs.length;++s){let n=this.inputs[s],a=e[s],o=t[s];r[n.id]=[a,o]}let s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(l.reverseNumberCompare);for(let e of s){let t=this.nodesByDepth[e];for(let e of t){// This is always a single layer, never a list.
let t=e.outboundLayer,s=e.inputTensors,n=e.outputTensors,a=[];for(let e of s)e.id in r&&a.push(r[e.id]);if(a.length===s.length){// TODO(michaelterry): Add K.name_scope here, if we need it.
let s,i,u,p,c={};if(null!=e.callArgs&&(c=e.callArgs),1===a.length){let[e,r]=a[0];null==c.mask&&(c.mask=r),u=l.toList(t.call(e,c)),p=l.toList(t.computeMask(e,r)),s=[e],i=[r]}else s=a.map(e=>e[0]),i=a.map(e=>e[1]),null==c.mask&&(c.mask=i),u=l.toList(t.call(s,c)),p=l.toList(t.computeMask(s,i));if(t.activityRegularizer)throw new o.NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");// TODO(michaelterry): Add model updates and losses
// Update tensor map.
for(let e=0;e<n.length;++e){let t=n[e],s=u[e],a=p[e];r[t.id]=[s,a]}}}}let n=[],a=[],i=[];for(let e of this.outputs){l.assert(e.id in r,`Could not compute output ${e.name} : ${e.id}`);let[t,s]=r[e.id];i.push(t.shape),n.push(t),a.push(s)}// TODO(michaelterry): Add support for caches.
return[n,a,i]}/**
     * Builds a map of internal node keys to node ordering.
     * Used in serializaion a node orderings may change as unused nodes are
     * dropped. Porting Note:  This helper method was pulled out of getConfig to
     * improve readability.
     * @param layers An array of Layers in the model.
     * @returns Map of Node Keys to index order within the layer.
     */buildNodeConversionMap(e){let t;let r={};for(let e of this.layers){t=e instanceof g?1:0;for(let s=0;s<e.inboundNodes.length;s++){let n=g.nodeKey(e,s);this.containerNodes.has(n)&&(// i.e. we mark it to be saved
r[n]=t,t+=1)}}return r}/**
     * Retrieves a layer based on either its name (unique) or index.
     *
     * Indices are based on order of horizontal graph traversal (bottom-up).
     *
     * If both `name` and `index` are specified, `index` takes precedence.
     *
     * @param name Name of layer.
     * @param index Index of layer.
     * @returns A Layer instance.
     * @throws ValueError: In case of invalid layer name or index.
     *
     * @doc {
     *    heading: 'Layers',
     *    subheading: 'Classes',
     *    namespace: 'layers',
     *    subclasses: ['LayersModel']
     * }
     */getLayer(e,t){if(null!=t){if(!(this.layers.length<=t))return this.layers[t];throw new o.ValueError(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`)}if(null==e)throw new o.ValueError("Provide either a layer name or layer index");for(let t of this.layers)if(t.name===e)return t;throw new o.ValueError(`No such layer: ${e}`)}/**
     * Retrieves the Container's current loss values.
     *
     * Used for regularizers during training.
     */calculateLosses(){// Porting Node: This is an augmentation to Container.loss in PyKeras.
//   In PyKeras, Container.loss returns symbolic tensors. Here a concrete
//   Tensor (specifically Scalar) values are returned. This is due to the
//   imperative backend.
return(0,n.tidy)(()=>{let e=[];for(let t of this.layers)for(let r=0;r<t.inboundNodes.length;++r){let s=g.nodeKey(t,r);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}// TODO(cais): Add any unconditional model-level losses?
return e})}getConfig(){let e={name:this.name},t=this.buildNodeConversionMap(this.layers),r=[];for(let e of this.layers){let s=e.getClassName(),n=e.getConfig(),a=[];for(let r=0;r<e.inboundNodes.length;r++){let s=e.inboundNodes[r],n=g.nodeKey(e,r),o={};if(this.containerNodes.has(n)){// The node is relevant to the model:
// add to filteredInboundNodes.
if(s.callArgs)try{JSON.stringify(s.callArgs),o=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(s.inboundLayers.length>0){let e=[];for(let r=0;r<s.inboundLayers.length;r++){let n=s.inboundLayers[r],a=s.nodeIndices[r],i=s.tensorIndices[r],l=g.nodeKey(n,a),u=t[l];null==u&&(u=0),e.push([n.name,u,i,o])}a.push(e)}}}let o={};o.name=e.name,o.className=s,o.config=n,o.inboundNodes=a,r.push(o)}e.layers=r;// Gather info about inputs and outputs
let s=[];for(let e=0;e<this.inputLayers.length;e++){let r=this.inputLayers[e],n=this.inputLayersNodeIndices[e],a=g.nodeKey(r,n);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);let i=this.inputLayersTensorIndices[e];s.push([r.name,o,i])}e.inputLayers=s;let n=[];for(let e=0;e<this.outputLayers.length;e++){let r=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=g.nodeKey(r,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);let i=this.outputLayersTensorIndices[e];n.push([r.name,o,i])}return e.outputLayers=n,e}/**
     * Instantiates a LayersModel from its config (output of `get_config()`).
     * @param cls the class to create
     * @param config LayersModel config dictionary.
     * @param customObjects An optional dictionary of custom objects.
     * @param fastWeightInit Optional flag to use fast weight initialization
     *   during deserialization. This is applicable to cases in which
     *   the initialization will be immediately overwritten by loaded weight
     *   values. Default: `false`.
     * @returns A LayersModel instance.
     * @throws ValueError: In case of improperly formatted config dict.
     *//** @nocollapse */static fromConfig(e,t,r={},s=!1){// Layer instances created during
// the graph reconstruction process
let n={},a={};function u(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}// First, we create all layers and enqueue nodes to be processed.
let p=t.name,c=t.layers;for(let e of c)!/**
         * Deserialize a layer, then call it on appropriate inputs.
         * @param layerData: layer config dict.
         * @throws ValueError: In case of improperly formatted `layer_data`
         * dict.
         */function(e){let r=e.name,a=(0,i.deserialize)(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),n[r]=a;// Gather layer inputs.
let l=e.inboundNodes;l.forEach(e=>{if(!(e instanceof Array))throw new o.ValueError(`Corrupted configuration, expected array for nodeData: ${e}`);// We don't process nodes (i.e. make layer calls)
// on the fly because the inbound node may not yet exist,
// in case of layer shared at different topological depths
// (e.g.a model such as A(B(A(B(x)))))
u(a,e)})}(e);// Then we process nodes in order of layer depth.
// Nodes that cannot yet be processed(if the inbound node
// does not yet exist) are re - enqueued, and the process
// is repeated until all nodes are processed.
for(;!l.isObjectEmpty(a);)for(let e of c){let t=n[e.name];if(t.name in a){let e=a[t.name];for(let r of(delete a[t.name],e))!function(e,t){let r;let s=[];for(let a of t){let o=a[0],i=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in n)){u(e,t);return}let p=n[o];if(p.inboundNodes.length<=i){u(e,t);return}let c=p.inboundNodes[i];s.push(c.outputTensors[l])}s.length>0&&e.apply(l.singletonOrArray(s),r);// was ** kwargs
}(t,r)}}let d=[],h=[],f=t.inputLayers;for(let e of f){let t=e[0],r=e[1],s=e[2];l.assert(t in n);let a=n[t],o=a.inboundNodes[r].outputTensors;d.push(o[s])}let m=t.outputLayers;for(let e of m){let t=e[0],r=e[1],s=e[2];l.assert(t in n);let a=n[t],o=a.inboundNodes[r].outputTensors;h.push(o[s])}return new e({inputs:d,outputs:h,name:p})}/**
     * Determine whether the container is stateful.
     *
     * Porting Note: this is the equivalent of the stateful @property of
     *   the Container class in PyKeras.
     */get stateful(){// Porting Note: This check is to prevent inadvertent setting of the
//   _stateful property of the Container instance.
if(this._stateful)throw new o.ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let e of this.layers)if(e.stateful)return!0;return!1}/**
     * Reset the state of all stateful constituent layers (if any).
     *
     * Examples of stateful layers include RNN layers whose `stateful` property
     * is set as `true`.
     */resetStates(){(0,n.tidy)(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates();// tslint:enable:no-any
})})}}},{"@tensorflow/tfjs-core":"U1ela","../backend/state":"7msxH","../errors":"2onZT","../layers/serialization":"fw7HP","../utils/generic_utils":"ia9DW","../utils/serialization_utils":"kgysQ","../utils/types_utils":"kXuwT","../variables":"lkqSL","../version":"1kAQM","./executor":"i3VOs","./input_layer":"eHBTI","./topology":"3moPG","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lvdQ1:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Interfaces and methods for training models using TensorFlow.js datasets.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fitDataset",()=>d),s.export(r,"evaluateDataset",()=>f);var n=e("@tensorflow/tfjs-core"),a=e("../base_callbacks"),o=e("../errors"),i=e("../logs"),l=e("../utils/generic_utils"),u=e("./training_utils");/**
 * Standardize the output of a dataset iterator for use by
 * LayersModel.fitDataset().
 *
 * @param model: A `tf.LayersModel` object.
 * @param iteratorOut The output of a dataset iterator. It is required to be
 *   an object of the form `{xs: TensorOrArrayOrMap, ys:
 * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,
 * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.
 * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s
 *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided
 *   as a map, the order in the resulting array is taken from the `inputNames`
 *   and `outputNames` of the model.
 */function p(// training.ts.
// tslint:disable-next-line:no-any
e,t){let r,s;r=t.xs,s=t.ys,n.util.assert(null!=r&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let a=c("input",e.inputNames,r),o=c("output",e.outputNames,s),i=a[0].shape[0];n.util.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),n.util.assert(o.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<a.length;t++)n.util.assert(a[t].shape[0]===i,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);for(let t=0;t<o.length;t++)n.util.assert(o[t].shape[0]===i,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);return{xs:a,ys:o}}function c(e,t,r){if(r instanceof n.Tensor)return[r];if(Array.isArray(r))return n.util.assert(r.length===t.length,()=>`Received an array of ${r.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),r;{let s=[];// Check that all the required keys are available.
for(let n of t){if(null==r[n])throw new o.ValueError(`The feature data generated by the dataset lacks the required ${e} key '${n}'.`);s.push(r[n])}return s}}async function d(// training.ts.
// tslint:disable-next-line:no-any
e,t,r){let s=null!=r.batchesPerEpoch;if(n.util.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),n.util.assert(null!=r,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),n.util.assert(null!=r.epochs&&r.epochs>0&&Number.isInteger(r.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${r.epochs}`),n.util.assert(!s||r.batchesPerEpoch>0&&Number.isInteger(r.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${r.batchesPerEpoch}`),n.util.assert(null==r.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{let c,d,f,m;let g=null!=r.validationData;if(g){if(h(r.validationData))n.util.assert(null==r.validationBatches||r.validationBatches>0&&Number.isInteger(r.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${r.validationBatches}`);else{let e=function(e){if(3===e.length)throw new o.NotImplementedError("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(r.validationData);c=e.xs,d=e.ys}}let x=e.makeTrainFunction(),b=e.getDedupedMetricsNames();f=g?b.slice().concat(b.map(e=>"val_"+e)):b.slice();let y=(0,a.standardizeCallbacks)(r.callbacks,r.yieldEvery),j=null==r.verbose?1:r.verbose,{callbackList:_,history:k}=(0,a.configureCallbacks)(y,j,r.epochs,null,null,(m=null,null!=r.batchesPerEpoch?m=r.batchesPerEpoch:Number.isFinite(t.size)&&(m=t.size),m),null,g,f);_.setModel(e),e.history=k,await _.onTrainBegin(),e.stopTraining_=!1;let I=null==r.initialEpoch?0:r.initialEpoch,w=await t.iterator();for(;I<r.epochs;){let a={};await _.onEpochBegin(I);let o=0,f=0;for(s||(w=await t.iterator());!s||o<r.batchesPerEpoch;){let t=await w.next();// If `batchesPerEpoch` is specified, the dataset should not be
// exhausted until all epoches are done.
if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${r.batchesPerEpoch}, but your dataset iterator ran out of data after ${o} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${r.batchesPerEpoch*r.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=t.value){let{xs:s,ys:a}=p(e,t.value),l={};l.batch=f,l.size=s[0].shape[0],await _.onBatchBegin(f,l);let c=[];if(null!=r.classWeight){let t=(0,u.standardizeClassWeights)(r.classWeight,e.outputNames);for(let e=0;e<t.length;++e)c.push(await (0,u.standardizeWeights)(a[e],null,t[e]))}// Train on batch.
let d=s.concat(a).concat(c),h=x(d);n.dispose(d);for(let e=0;e<b.length;++e){let t=b[e],r=h[e];l[t]=r,n.keep(r)}await _.onBatchEnd(f,l),(0,i.disposeTensorsInLogs)(l),f++,o++}if(s?o>=r.batchesPerEpoch:t.done){// Epoch finished. Perform validation.
if(g){let t;t=h(r.validationData)?(0,l.toList)(await e.evaluateDataset(r.validationData,{batches:r.validationBatches})):(0,l.toList)(e.evaluate(c,d,{batchSize:null==r.validationBatchSize?32:r.validationBatchSize,verbose:0}));for(let r=0;r<e.metricsNames.length;++r)a[`val_${e.metricsNames[r]}`]=t[r]}break}if(e.stopTraining_)break}if(await _.onEpochEnd(I,a),I++,e.stopTraining_)break}return await _.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}// Check if provided object is a Dataset object by checking its .iterator
// element.
function h(e){return"function"==typeof e.iterator}async function f(// training.ts.
// tslint:disable-next-line:no-any
e,t,r){r=r||{};let s=null!=r.batches,a=e.testFunction,i=[];if(r.verbose>0)throw new o.NotImplementedError("Verbose mode is not implemented yet.");n.util.assert(!s||r.batches>0&&Number.isInteger(r.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(r.batches)}`);let u="function"==typeof t.next?t:await t.iterator(),c=0,d=0;for(;!s||d<r.batches;){let t=await u.next();if(i=n.tidy(()=>{if(t.value){// TODO(cais): Once real dataset is available, use
//   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.
let{xs:r,ys:s}=p(e,t.value),o=r.concat(s),l=n.tidy(()=>a(o));if(n.dispose(o),0===d)for(let e=0;e<l.length;++e)i.push((0,n.scalar)(0));let u=o[0].shape[0];for(let e=0;e<l.length;++e){let t=l[e],r=i[e];i[e]=n.tidy(()=>n.add(i[e],n.mul(u,t))),d>0&&n.dispose(r)}n.dispose(l),c+=u,++d}return i}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${r.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<i.length;++e){let t=i[e];i[e]=n.div(i[e],c),n.dispose(t)}return(0,l.singletonOrArray)(i)}},{"@tensorflow/tfjs-core":"U1ela","../base_callbacks":"hD10S","../errors":"2onZT","../logs":"klT3H","../utils/generic_utils":"ia9DW","./training_utils":"j1CNJ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j1CNJ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Standardize class weighting objects.
 *
 * This function takes a single class-weighting object, an array of them,
 * or a map from output name to class-weighting object. It compares it to the
 * output name(s) of the model, base on which it outputs an array of
 * class-weighting objects of which the length matches the number of outputs.
 *
 * @param classWeight Input class-weighting object(s).
 * @param outputNames All output name(s) of the model.
 * @return An array of class-weighting objects. The length of the array matches
 *   the model's number of outputs.
 */s.export(r,"standardizeClassWeights",()=>o),s.export(r,"standardizeSampleWeights",()=>i),/**
 * Standardize by-sample and/or by-class weights for training.
 *
 * Note that this function operates on one model output at a time. For a model
 * with multiple outputs, you must call this function multiple times.
 *
 * @param y The target tensor that the by-sample and/or by-class weight is for.
 *     The values of y are assumed to encode the classes, either directly
 *     as an integer index, or as one-hot encoding.
 * @param sampleWeight By-sample weights.
 * @param classWeight By-class weights: an object mapping class indices
 *     (integers) to a weight (float) to apply to the model's loss for the
 *     samples from this class during training. This can be useful to tell the
 *     model to "pay more attention" to samples from an under-represented class.
 * @param sampleWeightMode The mode for the sample weights.
 * @return A Promise of weight tensor, of which the size of the first dimension
 *     matches that of `y`.
 */s.export(r,"standardizeWeights",()=>l),/**
 * Apply per-sample weights on the loss values from a number of samples.
 *
 * @param losses Loss tensor of shape `[batchSize]`.
 * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.
 * @returns Tensor of the same shape as`losses`.
 */s.export(r,"computeWeightedLoss",()=>u);var n=e("@tensorflow/tfjs-core");function a(e,t,r){let s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw Error(`Provided ${r} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){let r=[];return t.forEach(t=>{t in e?r.push(e[t]):r.push(null)}),r}throw Error(`The model has multiple (${s}) outputs, so ${r} must be either an array with ${s} elements or an object with ${t} keys. Provided ${r} not understood: ${JSON.stringify(e)}`)}function o(e,t){return a(e,t,"classWeight")}function i(e,t){return a(e,t,"sampleWeight")}async function l(e,t,r,s){if(null!=t||null!=s)// string.
throw Error("Support sampleWeight is not implemented yet");if(null==r)return null;{// Apply class weights per sample.
let t=(0,n.tidy)(()=>{if(1===e.shape.length)return(0,n.clone)(e);if(2===e.shape.length){if(e.shape[1]>1)return(0,n.argMax)(e,1);if(1===e.shape[1])return(0,n.reshape)(e,[e.shape[0]]);throw Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());(0,n.dispose)(t);let a=[];return s.forEach(e=>{if(null==r[e])throw Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(r[e])}),(0,n.tensor1d)(a,"float32")}}function u(e,t){return(0,n.mul)(e,t)}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"46x68":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Interfaces and methods for training models using tf.Tensor objects.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"checkBatchSize",()=>p),/**
 * Slice a Tensor or an Array of Tensors, by start and stop indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArraysByIndices()` together.
 *
 * @param arrays: the input.
 * @param start: the starting index (inclusive).
 * @param stop: the stopping index (exclusive).
 * @returns The result of the slicing. If `arrays` is an `Array` of
 *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`
 *   in the same way.
 */s.export(r,"sliceArrays",()=>c),/**
 * Slice a Tensor or an Array of Tensors, by random-order indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArrays()` together.
 *
 * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.
 *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the
 *   same fashion.
 * @param indices The indices to use for slicing along the first (batch)
 *   dimension.
 * @returns Result(s) of the slicing.
 */s.export(r,"sliceArraysByIndices",()=>d),/**
 * Returns a list of batch indices (tuples of indices).
 * @param size: Integer, total size of the data to slice into batches.
 * @param batchSize: Integer, batch size.
 * @returns An Array of [batchStart, batchEnd] tuples. batchStart is
 *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x
 *   that satisfy batchStart <= x < batchEnd.
 */s.export(r,"makeBatches",()=>h),s.export(r,"fitTensors",()=>m),/**
 * Ensure tensors all have a rank of at least 2.
 *
 * If a tensor has a rank of 1, it is dimension-expanded to rank 2.
 * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.
 */s.export(r,"ensureTensorsRank2OrHigher",()=>g),/**
 * Compare a set of tensors with a reference (old) set, discard the ones
 * in the new set that are not present in the reference set.
 *
 * This method is used for memory clenaup during calls such as
 * LayersModel.fit().
 *
 * @param tensors New set which may contain Tensors not present in
 *   `refTensors`.
 * @param refTensors Reference Tensor set.
 */// TODO(cais, kangyizhang): Deduplicate with tfjs-data.
s.export(r,"disposeNewTensors",()=>x);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../base_callbacks"),i=e("../errors"),l=e("../logs"),u=e("../utils/math_utils");function p(e){n.util.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function c(e,t,r){return null==e?[null]:Array.isArray(e)?e.map(e=>(0,a.sliceAlongFirstAxis)(e,t,r-t)):(0,a.sliceAlongFirstAxis)(e,t,r-t)}function d(e,t){return n.tidy(()=>null==e?null:Array.isArray(e)?e.map(e=>d(e,t)):(0,a.gather)(e,"int32"===t.dtype?t:n.cast(t,"int32")))}function h(e,t){let r=[],s=0,n=null;for(;s<e;)(n=s+t)>=e&&(n=e),r.push([s,n]),s=n;return r}/**
 * Abstract fit function for `f(ins)`.
 * @param f A Function returning a list of tensors. For training, this
 *   function is expected to perform the updates to the variables.
 * @param ins List of tensors to be fed to `f`.
 * @param outLabels List of strings, display names of the outputs of `f`.
 * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
 * @param epochs Number of times to iterate over the data. Default : 1.
 * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
 * @param callbacks List of callbacks to be called during training.
 * @param valF Function to call for validation.
 * @param valIns List of tensors to be fed to `valF`.
 * @param shuffle Whether to shuffle the data at the beginning of every
 * epoch. Default : true.
 * @param callbackMetrics List of strings, the display names of the metrics
 *   passed to the callbacks. They should be the concatenation of the
 *   display names of the outputs of `f` and the list of display names
 *   of the outputs of `valF`.
 * @param initialEpoch Epoch at which to start training (useful for
 *   resuming a previous training run). Default : 0.
 * @param stepsPerEpoch Total number of steps (batches on samples) before
 *   declaring one epoch finished and starting the next epoch. Ignored with
 *   the default value of `undefined` or `null`.
 * @param validationSteps Number of steps to run validation for (only if
 *   doing validation from data tensors). Not applicable for tfjs-layers.
 * @returns A `History` object.
 */async function f(// tslint:disable-next-line:no-any
e,t,r,s,p,c,f,m,g,x,b,y,j,_,k){let I;null==p&&(p=32),null==c&&(c=1),null==b&&(b=!0),null==j&&(j=0);// TODO(cais): Change const to let below when implementing validation.
let w=!1;if(null!=g&&null!=x&&(w=!0),null!=k&&(w=!0,null==_))throw new i.ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let C=e.checkNumSamples(r,p,_,"steps_per_epoch");null!=C&&(I=(0,u.range)(0,C)),null==f&&(f=1);let{callbackList:S,history:T}=(0,o.configureCallbacks)(m,f,c,j,C,_,p,w,y);S.setModel(e),e.history=T,await S.onTrainBegin(),e.stopTraining_=!1;// TODO(cais): Take care of callbacks.validation_data as in PyKeras.
// TODO(cais): Pre-convert feeds for performance as in PyKeras.
for(let o=j;o<c;++o){await S.onEpochBegin(o);let u={};if(null!=_)throw new i.NotImplementedError("stepsPerEpoch mode is not implemented yet.");{if("batch"===b)throw new i.NotImplementedError("batch shuffling is not implemneted yet");b&&(0,n.util).shuffle(I);// Convert the potentially shuffled indices to Tensor1D, to avoid the
// cost of repeated creation of Array1Ds later on.
let o=(0,n.tensor1d)(I),c=h(C,p);for(let i=0;i<c.length;++i){let h={};if(await S.onBatchBegin(i,h),n.tidy(()=>{let l=c[i][0],f=c[i][1],m=(0,a.sliceAlongFirstAxis)(o,l,f-l);h.batch=i,h.size=f-l;// TODO(cais): In ins, train flag can be a number, instead of an
//   Tensor? Do we need to handle this in tfjs-layers?
let b=d(r,m),y=t(b);for(let e=0;e<s.length;++e){let t=s[e],r=y[e];h[t]=r,n.keep(r);// TODO(cais): Use scope() to avoid ownership.
}if(i===c.length-1&&w){let t=e.testLoop(g,x,p);// Porting Notes: In tfjs-layers, valOuts is always an Array.
for(let e=0;e<s.length;++e){let r=s[e],a=t[e];n.keep(a),// TODO(cais): Use scope() to avoid ownership.
u["val_"+r]=a}}}),await S.onBatchEnd(i,h),(0,l.disposeTensorsInLogs)(h),e.stopTraining_)break;// TODO(cais): return outs as list of Tensor.
}o.dispose()}if(// TODO(cais): Run validation at the end of the epoch.
await S.onEpochEnd(o,u),e.stopTraining_)break}return await S.onTrainEnd(),await e.history.syncData(),e.history}async function m(// tslint:disable-next-line:no-any
e,t,r,s={}){let a,l,u,d,h,m,g,b,y;if(e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{let n,x,j;let _=null==s.batchSize?32:s.batchSize;p(_);let k=await e.standardizeUserData(t,r,s.sampleWeight,s.classWeight,!1,_);a=k[0],l=k[1],y=k[2];// Prepare validation data.
let I=!1;if(null!=s.validationData&&s.validationData.length>0){if(I=!0,2===s.validationData.length)// config.validationData consists of valX and valY.
h=s.validationData[0],m=s.validationData[1];else if(3===s.validationData.length)throw new i.NotImplementedError("validationData including sample weights is not supported yet.");else throw new i.ValueError(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);let t=await e.standardizeUserData(h,m,null,/** Unused sample weights. */null,!0,_);g=t[0],b=t[1],n=g.concat(b);// TODO(cais): Add useLearningPhase data properly.
}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){I=!0;// Porting Note: In tfjs-layers, inputs[0] is always a Tensor.
let e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];g=c(a,e,t),u=a,a=c(a,0,e),b=c(l,e,t),d=l,l=c(l,0,e),// TODO(cais): Once sampleWeights becomes available, slice it to get
//   valSampleWeights.
n=g.concat(b);// TODO(cais): Add useLearningPhase data properly.
}else null!=s.validationSteps&&(I=!0);let w=a.concat(l).concat(y);e.checkTrainableWeightsConsistency();// TODO(cais): Handle use_learning_phase and learning_phase?
// Porting Note: Here we see a key deviation of tfjs-layers from
// Keras.
//  Due to the imperative nature of tfjs-layers' backend (tfjs-core),
//  we do not construct symbolic computation graphs to embody the
//  training process. Instead, we define a function that performs the
//  training action. In PyKeras, the data (inputs and targets) are fed
//  through graph placeholders. In tfjs-layers, the data are fed as
//  function arguments. Since the function are defined below in the
//  scope, we don't have equivalents of PyKeras's
//  `_make_train_funciton`.
let C=e.makeTrainFunction(),S=e.getDedupedMetricsNames();I?(e.makeTestFunction(),x=e.testFunction,j=S.slice().concat(S.map(e=>"val_"+e))):(x=null,n=[],j=S.slice());let T=(0,o.standardizeCallbacks)(s.callbacks,s.yieldEvery),N=await f(e,C,w,S,_,s.epochs,s.verbose,T,x,n,s.shuffle,j,s.initialEpoch,null,null);return N}finally{e.isTraining=!1,// Memory clean up.
x(a,t),x(l,r),x(u,t),x(d,r),x(g,h),x(b,m),null!=y&&n.dispose(y)}// TODO(cais): Add value to outLabels.
}function g(e){let t=[];e instanceof n.Tensor&&(e=[e]);// Make Tensors at least 2D.
for(let r=0;r<e.length;++r){let s=e[r];if(1===s.rank)t.push((0,a.expandDims)(s,1));else if(0===s.rank)throw Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");else t.push(s)}return t}function x(e,t){if(null==e)return;let r=[];if(t instanceof n.Tensor)r.push(t.id);else if(Array.isArray(t))t.forEach(e=>r.push(e.id));else if(null!=t)for(let e in t){let s=t[e];r.push(s.id)}let s=[];if(e instanceof n.Tensor)-1===r.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===r.indexOf(e.id)&&s.push(e)});else if(null!=e)for(let t in e){let n=e[t];-1===r.indexOf(n.id)&&s.push(n)}s.forEach(e=>{e.isDisposed||e.dispose()})}},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../base_callbacks":"hD10S","../errors":"2onZT","../logs":"klT3H","../utils/math_utils":"4BJyC","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2MIjb":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source keras/models.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Parses a JSON model configuration file and returns a model instance.
 *
 * ```js
 * // This example shows how to serialize a model using `toJSON()` and
 * // deserialize it as another model using `tf.models.modelFromJSON()`.
 * // Note: this example serializes and deserializes only the topology
 * // of the model; the weights of the loaded model will be different
 * // from those of the the original model, due to random weight
 * // initialization.
 * // To load the topology and weights of a model, use `tf.loadLayersModel()`.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));
 * // Serialize `model1` as a JSON object.
 * const model1JSON = model1.toJSON(null, false);
 * model1.summary();
 *
 * const model2 = await tf.models.modelFromJSON(model1JSON);
 * model2.summary();
 * ```
 *
 *  @param modelAndWeightsConfig JSON object or string encoding a model and
 *       weights configuration. It can also be only the topology JSON of the
 *       model, in which case the weights will not be loaded.
 *  @param custom_objects Optional dictionary mapping names
 *       (strings) to custom classes or functions to be
 *       considered during deserialization.
 * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).
 */s.export(r,"modelFromJSON",()=>f),/**
 * Load a model, including its topology and optionally weights.  See the
 * Tutorial named "How to import a Keras Model" for usage examples.
 *
 * Example 1: Save `model`'s topology and weights to browser [local
 * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('localstorage://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 2. Saving `model`'s topology and weights to browser
 * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('indexeddb://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 3. Load a model from user-selected files from HTML
 * [file input
 * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
 *
 * ```js
 * // Note: this code snippet will not work without the HTML elements in the
 * //   page
 * const jsonUpload = document.getElementById('json-upload');
 * const weightsUpload = document.getElementById('weights-upload');
 *
 * const model = await tf.loadLayersModel(
 *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));
 * ```
 *
 * Example 4. Load a model from an HTTP server.
 *
 * ```js
 * const model = await
 *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');
 * model.summary();
 * ```
 *
 * @param pathOrIOHandler Can be either of the two formats
 *   1. A string path to the `ModelAndWeightsConfig` JSON describing
 *      the model in the canonical TensorFlow.js format. This path will be
 *      interpreted as a relative HTTP path, to which `fetch` will be used to
 *      request the model topology and weight manifest JSON.
 *      The content of the JSON file is assumed to be a JSON object with the
 *      following fields and values:
 *      - 'modelTopology': A JSON object that can be either of:
 *        1. a model architecture JSON consistent with the format of the return
 *            value of `keras.Model.to_json()`
 *        2. a full model JSON in the format of `keras.models.save_model()`.
 *      - 'weightsManifest': A TensorFlow.js weights manifest.
 *      See the Python converter function `save_model()` for more details.
 *      It is also assumed that model weights can be accessed from relative
 *      paths described by the `paths` fields in weights manifest.
 *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`
 *      method.
 * @param options Optional configuration arguments for the model loading,
 *   including:
 *   - `strict`: Require that the provided weights exactly match those required
 *     by the layers.  Default true.  Passing false means that both extra
 *     weights and missing weights will be silently ignored.
 *   - `onProgress`: A progress callback of the form:
 *     `(fraction: number) => void`. This callback can be used to monitor the
 *     model-loading process.
 * @returns A `Promise` of `tf.LayersModel`, with the topology and weights
 *     loaded.
 */s.export(r,"loadLayersModelInternal",()=>m),/**
 * Load a model and optionally its weights, using an IOHandler object.
 *
 * @param handler The instance of `IOHandler` to be used during the model
 *   loading.
 * @param customObjects Any optional custom objects to be used during model
 *   loading.
 * @param strict Whether the weight loading will be done in strict mode.
 *   Default: `true`.
 */s.export(r,"loadLayersModelFromIOHandler",()=>g),/**
 * A model with a stack of layers, feeding linearly from one to the next.
 *
 * `tf.sequential` is a factory function that creates an instance of
 * `tf.Sequential`.
 *
 * ```js
 *  // Define a model for linear regression.
 *  const model = tf.sequential();
 *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));
 *
 *  // Prepare the model for training: Specify the loss and the optimizer.
 *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
 *
 *  // Generate some synthetic data for training.
 *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);
 *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);
 *
 *  // Train the model using the data then do inference on a data point the
 *  // model hasn't seen:
 *  await model.fit(xs, ys);
 *  model.predict(tf.tensor2d([5], [1, 1])).print();
 * ```
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */s.export(r,"Sequential",()=>x);var n=e("@tensorflow/tfjs-core"),a=e("./backend/state"),o=e("./engine/input_layer"),i=e("./engine/topology"),l=e("./engine/training"),u=e("./errors"),p=e("./layers/serialization"),c=e("./utils/generic_utils"),d=e("./utils/serialization_utils"),h=e("./utils/types_utils");async function f(e,t){"modelTopology"in e||(e={modelTopology:e});let r=e.modelTopology;null!=r.model_config&&// a full model JSON (e.g., from `keras.Model.save()`), which contains
// not only the model's architecture in its 'model_config' field, but
// additional information such as the model's optimizer. We use only the
// 'model_config' field currently.
(r=r.model_config);let s=(0,d.convertPythonicToTs)(r),a=(0,p.deserialize)(s,t);if(null!=e.weightsManifest){// Load the weight values keyed by the original tensor names in the model
// file that was loaded.  These should match the keys of the weight
// manifest.
let t=await (0,n.io).loadWeights(e.weightsManifest,e.pathPrefix,a.weights.map(e=>e.originalName)),r={};for(let e of a.weights)r[e.originalName]=t[e.originalName];a.loadWeights(r),// Dispose temporary weight values.
(0,n.dispose)(t)}return a}async function m(e,t){if(null==t&&(t={}),"string"==typeof e){let r=(0,n.io).getLoadHandlers(e,t);if(0===r.length)// assume it is a relative http path.
// TODO(cais): Reformat the args into a single `LoadOptions` once the core
// is refactored.
r.push((0,n.io).browserHTTPRequest(e,t));else if(r.length>1)throw new u.ValueError(`Found more than one (${r.length}) load handlers for URL '${e}'`);e=r[0]}return g(e,void 0,t)}async function g(e,t,r){if(null==r&&(r={}),null==e.load)throw new u.ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let s=await e.load(),a=s.modelTopology;null!=a.model_config&&(a=a.model_config);let o=null==r.strict||r.strict,i=null!=s.weightData&&null!=s.weightSpecs&&o,l=(0,p.deserialize)((0,d.convertPythonicToTs)(a),t,i),c=s.trainingConfig;// If weightData is present, load the weights into the model.
if(null!=c&&l.loadTrainingConfig(c),null!=s.userDefinedMetadata&&l.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){// Loading weights requires weightSpecs.
if(null==s.weightSpecs)throw new u.ValueError("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");let{modelWeights:e,optimizerWeights:t}=function(e,t){let r=(0,n.io).decodeWeights(e,t),s={},a=[];return t.forEach(e=>{"optimizer"===e.group?a.push({name:e.name,tensor:r[e.name]}):s[e.name]=r[e.name]}),{modelWeights:s,optimizerWeights:a}}(s.weightData,s.weightSpecs);l.loadWeights(e,o),null!=l.optimizer&&t.length>0&&await l.optimizer.setWeights(t),// Dispose temporary weight values.
(0,n.dispose)(e),(0,n.dispose)(t.map(e=>e.tensor))}return l}class x extends l.LayersModel{constructor(e){// Add to the model any layers passed to the constructor.
if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,// Set model name.
this.name=null!=e.name?e.name:(0,a.getUid)("sequential_"),null!=e.layers)for(let t of e.layers)this.add(t)}// Helper function to Sequential.add  Throws if the new output shape will be
// invalid.
checkShape(e){let t=e.inboundNodes[0].outputTensors[0].shape;if(t.some(e=>e<0))throw new u.ValueError(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}/**
     * Adds a layer instance on top of the layer stack.
     *
     * ```js
     *  const model = tf.sequential();
     *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
     *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
     *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
     *  // Note that the untrained model is random at this point.
     *  model.predict(tf.randomNormal([10, 1])).print();
     * ```
     * @param layer Layer instance.
     *
     * @exception ValueError In case the `layer` argument does not know its
     * input shape.
     * @exception ValueError In case the `layer` argument has multiple output
     *   tensors, or is already connected somewhere else (forbidden in
     *   `Sequential` models).
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */add(e){let t;let r=e instanceof x||e instanceof l.LayersModel;if(r){if(1!==(t=e).outputs.length)throw new u.ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==t.inputs.length)throw new u.ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){// first layer in model: check that it is an input layer
if(0===e.inboundNodes.length){// create an input layer
if(null==e.batchInputShape)throw new u.ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");// Instantiate the input layer.
let t=(0,o.Input)({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});// This will build the current layer and create the node connecting
// the current layer to the input layer we just created.
e.apply(t)}if(r)this.outputs=t.outputs,this.inputs=t.inputs;else{if(1!==e.inboundNodes.length)throw new u.ValueError(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new u.ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=(0,i.getSourceInputs)(this.outputs[0])}this.inboundNodes=[],// We create an input node, which we will keep updated
// as we add more layers.
// (This call has side effects.)
// tslint:disable-next-line:no-unused-expression
new i.Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,// no model-level masking for now
inputMasks:c.pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{let t=e.apply(this.outputs[0]);if(Array.isArray(t))throw TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],// update self.inbound_nodes
this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}/**
     * Removes the last layer in the model.
     *
     * @exception TypeError if there are no layers in the model.
     */pop(){if(0===this.layers.length)throw TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],// update self.inbound_nodes
this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(// Call `getExactlyOneShape` without using its return value,
// to verify that exactly one input shape is provided.
(0,h.getExactlyOneShape)(e),0===this.inputs.length||0===this.outputs.length)throw TypeError("Sequential model cannot be built: model is empty. Add some layers first.");// actually create the model
this.model=new l.LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,// mirror model attributes
this.supportsMasking=this.model.supportsMasking,// TODO(michaelterry): Add caches
this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,// TODO(michaelterry): Add feedInputNames, feedInputs, if needed.
// TODO(michaelterry): Add callbackModel if needed.
this.built=!0}countParams(){return this.built||this.build(),super.countParams()}/**
     * Print a text summary of the Sequential model's layers.
     *
     * The summary includes
     * - Name and type of all layers that comprise the model.
     * - Output shape(s) of the layers
     * - Number of weight parameters of each layer
     * - The total number of trainable and non-trainable parameters of the
     * model.
     *
     * ```js
     * const model = tf.sequential();
     * model.add(
     *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
     * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
     *
     * model.summary();
     * ```
     *
     * @param lineLength Custom line length, in number of characters.
     * @param positions Custom widths of each of the columns, as either
     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
     *   right-most (i.e., ending) position of a column.
     * @param printFn Custom print function. Can be used to replace the default
     *   `console.log`. For example, you can use `x => {}` to mute the printed
     *   messages in the console.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */summary(e,t,r=console.log){this.built||this.build(),super.summary(e,t,r)}/**
     * Sets the weights of the model.
     *
     * @param weights Should be a list of Tensors with shapes and types matching
     *   the output of `model.getWeights()`.
     */setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}/**
     * Returns the loss value & metrics values for the model in test mode.
     *
     * Loss and metrics are specified during `compile()`, which needs to happen
     * before calls to `evaluate()`.
     *
     * Computation is done in batches.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     * });
     * result.print();
     * ```
     *
     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
     * model has multiple inputs.
     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
     * model has multiple outputs.
     * @param args A `ModelEvaluateConfig`, containing optional fields.
     *
     * @return `Scalar` test loss (if the model has a single output and no
     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
     *   and/or metrics). The attribute `model.metricsNames`
     *   will give you the display labels for the scalar outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */evaluate(e,t,r={}){if(!this.built)throw new u.RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e,t,r)}// TODO(cais): Add code snippet below once real dataset objects are
//   available.
/**
     * Evaluate model using a dataset object.
     *
     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
     *
     * @param dataset A dataset object. Its `iterator()` method is expected
     *   to generate a dataset iterator object, the `next()` method of which
     *   is expected to produce data batches for evaluation. The return value
     *   of the `next()` call ought to contain a boolean `done` field and a
     *   `value` field. The `value` field is expected to be an array of two
     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
     *   case is for models with exactly one input and one output (e.g.
     *   a sequential model). The latter case is for models with multiple
     *   inputs and/or multiple outputs. Of the two items in the array, the
     *   first is the input feature(s) and the second is the output target(s).
     * @param args A configuration object for the dataset-based evaluation.
     * @returns Loss and metric values as an Array of `Scalar` objects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async evaluateDataset(e,t){if(!this.built)throw new u.RuntimeError("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}/**
     * Generates output predictions for the input samples.
     *
     * Computation is done in batches.
     *
     * Note: the "step" mode of predict() is currently not supported.
     *   This is because the TensorFlow.js core backend is imperative only.
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.predict(tf.ones([2, 10])).print();
     * ```
     *
     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
     *   the model has multiple inputs.
     * @param conifg A `ModelPredictConfig` object containing optional fields.
     *
     * @return `tf.Tensor`(s) of predictions.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and the model's expectations, or in case a stateful model receives a
     *   number of samples that is not a multiple of the batch size.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}/**
     * Returns predictions for a single batch of samples.
     *
     * @param x: Input samples, as a Tensor, or list of Tensors (if the model
     *   has multiple inputs).
     * @return Tensor(s) of predictions
     */predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}/**
     * See `LayersModel.compile`.
     *
     * @param args
     */compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,// tslint:disable-next-line:no-any
this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,// TODO(cais): Add this.lossWeights, this.sampleWeightMode,
//   this.weightedMetrics, this.targets.
this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames;// TODO(cais): Add sampleWeights.
}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}/**
     * Trains the model for a fixed number of epochs (iterations on a dataset).
     *
     * ```js
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
     *   batchSize: 4,
     *   epochs: 3
     * });
     * console.log(history.history.loss[0]);
     * ```
     *
     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
     * model has multiple inputs. If all inputs in the model are named, you can
     * also pass a dictionary mapping input names to `tf.Tensor`s.
     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
     * the model has multiple outputs. If all outputs in the model are named, you
     *  can also pass a dictionary mapping output names to `tf.Tensor`s.
     * @param args  A `ModelFitConfig`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @exception ValueError In case of mismatch between the provided input data
     *   and what the model expects.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async fit(e,t,r={}){if(!this.built)throw new u.RuntimeError("The model needs to be compiled before being used.");return this.model.fit(e,t,r)}/**
     * Trains the model using a dataset object.
     *
     * ```js
     * const xArray = [
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
     * ];
     * const yArray = [1, 1, 1, 1];
     * // Create a dataset from the JavaScript array.
     * const xDataset = tf.data.array(xArray);
     * const yDataset = tf.data.array(yArray);
     * // Zip combines the `x` and `y` Datasets into a single Dataset, the
     * // iterator of which will return an object containing of two tensors,
     * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
     * // four such samples into a single object, with the same keys now pointing
     * // to tensors that hold 4 examples, organized along the batch dimension.
     * // The call to `shuffle(4)` causes each iteration through the dataset to
     * // happen in a different order.  The size of the shuffle window is 4.
     * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
     *     .batch(4)
     *     .shuffle(4);
     * const model = tf.sequential({
     *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
     * });
     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
     * const history = await model.fitDataset(xyDataset, {
     *   epochs: 4,
     *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
     * });
     * ```
     *
     * @param dataset A dataset object. Its `iterator()` method is expected to
     *   generate a dataset iterator object, the `next()` method of which is
     *   expected to produce data batches for evaluation. The return value of the
     *   `next()` call ought to contain a boolean `done` field and a `value`
     *   field.
     *
     *   The `value` field is expected to be an object of with fields
     *   `xs` and `ys`, which point to the feature tensor and the target tensor,
     *   respectively. This case is for models with exactly one input and one
     *   output (e.g. a sequential model). For example:
     *   ```js
     *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
     *   ```
     *
     *   If the model has multiple inputs, the `xs` field of `value` should
     *   be an object mapping input names to their respective feature tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: {
     *         input_1: xsTensor1,
     *         input_2: xsTensor2
     *       },
     *       ys: ysTensor
     *     },
     *     done: false
     *   }
     *   ```
     *   If the model has multiple outputs, the `ys` field of `value` should
     *   be an object mapping output names to their respective target tensors.
     *   For example:
     *   ```js
     *   {
     *     value: {
     *       xs: xsTensor,
     *       ys: {
     *         output_1: ysTensor1,
     *         output_2: ysTensor2
     *       },
     *     },
     *     done: false
     *   }
     *   ```
     * @param args A `ModelFitDatasetArgs`, containing optional fields.
     *
     * @return A `History` instance. Its `history` attribute contains all
     *   information collected during training.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */async fitDataset(e,t){if(!this.built)throw new u.RuntimeError("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}/**
     * Runs a single gradient update on a single batch of data.
     *
     * This method differs from `fit()` and `fitDataset()` in the following
     * regards:
     *   - It operates on exactly one batch of data.
     *   - It returns only the loss and metric values, instead of
     *     returning the batch-by-batch loss and metric values.
     *   - It doesn't support fine-grained options such as verbosity and
     *     callbacks.
     *
     * @param x Input data. It could be one of the following:
     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
     *     multiple inputs).
     *   - An Object mapping input names to corresponding `tf.Tensor` (if the
     *     model has named inputs).
     * @param y Target data. It could be either a `tf.Tensor` or multiple
     *   `tf.Tensor`s. It should be consistent with `x`.
     * @returns Training loss or losses (in case the model has
     *   multiple outputs), along with metrics (if any), as numbers.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}/* See parent class for JsDoc *//** @nocollapse */static fromConfig(e,t,r={},s=!1){let a;let o={};if(t instanceof Array){if(!(null!=t[0].className)||"Merge"===t[0].className)throw new u.ValueError("Legacy serialization format not supported yet.");a=t}else(0,n.util).assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,o=t;let i=new e(o);if(!(i instanceof x))throw new u.NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(let e of a){let t=void 0,r=(0,p.deserialize)(e,t,s);s&&r.setFastWeightInitDuringBuild(!0),i.add(r)}return i}/**
     * Setter used for force stopping of LayersModel.fit() (i.e., training).
     *
     * Example:
     *
     * ```js
     * const model = tf.sequential();
     * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
     * const xs = tf.ones([8, 10]);
     * const ys = tf.zeros([8, 1]);
     *
     * const history = await model.fit(xs, ys, {
     *   epochs: 10,
     *   callbacks: {
     *     onEpochEnd: async (epoch, logs) => {
     *       if (epoch === 2) {
     *         model.stopTraining = true;
     *       }
     *     }
     *   }
     * });
     *
     * // There should be only 3 values in the loss array, instead of 10 values,
     * // due to the stopping after 3 epochs.
     * console.log(history.history.loss);
     * ```
     */set stopTraining(e){// TODO(cais): When refactoring to remove the composition pattern happens,
// remove this method overriding.
if(null==this.model)throw new u.ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new u.ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}// TODO(cais): Override get trainableWeights() here
// tslint:disable-next-line:no-any
getConfig(){// NOTE(cais): We override the return type of getConfig() to `any` here,
//   because the `Sequential` class is a special case among `Container`
//   subtypes in that its getConfig() method returns an Array (not a
//   dict).
let e=[];for(let t of this.layers){let r={};r.className=t.getClassName(),r.config=t.getConfig(),e.push(r)}return{name:this.name,layers:e}}}/** @nocollapse */x.className="Sequential",(0,n.serialization).registerClass(x)},{"@tensorflow/tfjs-core":"U1ela","./backend/state":"7msxH","./engine/input_layer":"eHBTI","./engine/topology":"3moPG","./engine/training":"jTWm9","./errors":"2onZT","./layers/serialization":"fw7HP","./utils/generic_utils":"ia9DW","./utils/serialization_utils":"kgysQ","./utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eeARn:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 *  Advanced activation layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ReLU",()=>d),s.export(r,"LeakyReLU",()=>h),s.export(r,"PReLU",()=>f),s.export(r,"ELU",()=>m),s.export(r,"ThresholdedReLU",()=>g),s.export(r,"Softmax",()=>x);var n=e("@tensorflow/tfjs-core"),a=e("../activations"),o=e("../constraints"),i=e("../engine/topology"),l=e("../errors"),u=e("../initializers"),p=e("../regularizers"),c=e("../utils/types_utils");class d extends i.Layer{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=(0,c.getExactlyOneTensor)(e);let r=(0,n.relu)(e);return null!=this.maxValue&&(r=(0,n.clipByValue)(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){let e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */d.className="ReLU",(0,n.serialization).registerClass(d);class h extends i.Layer{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){let r=(0,c.getExactlyOneTensor)(e);return(0,n.leakyRelu)(r,this.alpha)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */h.className="LeakyReLU",(0,n.serialization).registerClass(h);class f extends i.Layer{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=(0,u.getInitializer)(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=(0,p.getRegularizer)(e.alphaRegularizer),this.alphaConstraint=(0,o.getConstraint)(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if("number"==typeof e.sharedAxes)this.sharedAxes=[e.sharedAxes];else throw new l.ValueError(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){e=(0,c.getExactlyOneShape)(e);let t=e.slice(1);if(null!=this.sharedAxes)for(let e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);// Set input spec.
let r={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)r[t]=e[t];this.inputSpec=[new i.InputSpec({ndim:e.length,axes:r})],this.built=!0}call(e,t){return e=(0,c.getExactlyOneTensor)(e),(0,n.prelu)(e,this.alpha.read())}getConfig(){let e={alphaInitializer:(0,u.serializeInitializer)(this.alphaInitializer),alphaRegularizer:(0,p.serializeRegularizer)(this.alphaRegularizer),alphaConstraint:(0,o.serializeConstraint)(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */f.className="PReLU",(0,n.serialization).registerClass(f);class m extends i.Layer{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new l.NotImplementedError(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){let r=(0,c.getExactlyOneTensor)(e);return(0,n.elu)(r)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */m.className="ELU",(0,n.serialization).registerClass(m);class g extends i.Layer{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){let r=(0,c.getExactlyOneTensor)(e);return(0,n.mul)(r,(0,n.cast)((0,n.greater)(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){let e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */g.className="ThresholdedReLU",(0,n.serialization).registerClass(g);class x extends i.Layer{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=new a.Softmax().apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){let r=(0,c.getExactlyOneTensor)(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */x.className="Softmax",(0,n.serialization).registerClass(x)},{"@tensorflow/tfjs-core":"U1ela","../activations":"UODIR","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],UODIR:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */// Layer activation functions
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Base class for Activations.
 *
 * Special note: due to cross-language compatibility reasons, the
 * static readonly className field in this family of classes must be set to
 * the initialLowerCamelCase name of the activation.
 */s.export(r,"Activation",()=>i),/**
 * Exponential linear unit (ELU).
 * Reference: https://arxiv.org/abs/1511.07289
 */s.export(r,"Elu",()=>l),/**
 * Scaled Exponential Linear Unit. (Klambauer et al., 2017).
 * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515
 * Notes:
 *   - To be used together with the initialization "lecunNormal".
 *   - To be used together with the dropout variant "AlphaDropout".
 */s.export(r,"Selu",()=>u),/**
 *  Rectified linear unit
 */s.export(r,"Relu",()=>p),/**
 * Rectified linear unit activation maxing out at 6.0.
 */s.export(r,"Relu6",()=>c),//* Linear activation (no-op) */
s.export(r,"Linear",()=>d),/**
 * Sigmoid activation function.
 */s.export(r,"Sigmoid",()=>h),/**
 * Segment-wise linear approximation of sigmoid.
 */s.export(r,"HardSigmoid",()=>f),/**
 * Softplus activation function.
 */s.export(r,"Softplus",()=>m),/**
 * Softsign activation function.
 */s.export(r,"Softsign",()=>g),/**
 * Hyperbolic tangent function.
 */s.export(r,"Tanh",()=>x),/**
 * Softmax activation function
 */s.export(r,"Softmax",()=>b),/**
 * Log softmax activation function
 */s.export(r,"LogSoftmax",()=>y),/**
 * Swish activation function
 */s.export(r,"Swish",()=>j),/**
 * Mish activation function
 */s.export(r,"Mish",()=>_),s.export(r,"serializeActivation",()=>k),s.export(r,"deserializeActivation",()=>I),s.export(r,"getActivation",()=>w);var n=e("@tensorflow/tfjs-core"),a=e("./backend/tfjs_backend"),o=e("./utils/generic_utils");class i extends n.serialization.Serializable{getConfig(){return{}}}class l extends i{/**
     * Calculate the activation function.
     *
     * @param x: Input.
     * @param alpha: Scaling factor the negative section.
     * @return Output of the ELU activation.
     */apply(e,t=1){return a.elu(e,t)}}/** @nocollapse */l.className="elu",(0,n.serialization).registerClass(l);class u extends i{apply(e){return n.selu(e)}}/** @nocollapse */u.className="selu",(0,n.serialization).registerClass(u);class p extends i{apply(e){return n.relu(e)}}/** @nocollapse */p.className="relu",(0,n.serialization).registerClass(p);class c extends i{apply(e){return(0,n.tidy)(()=>n.minimum(6,n.relu(e)))}}/** @nocollapse */c.className="relu6",(0,n.serialization).registerClass(c);class d extends i{apply(e){return e}}/** @nocollapse */d.className="linear",(0,n.serialization).registerClass(d);class h extends i{apply(e){return n.sigmoid(e)}}/** @nocollapse */h.className="sigmoid",(0,n.serialization).registerClass(h);class f extends i{apply(e){return a.hardSigmoid(e)}}/** @nocollapse */f.className="hardSigmoid",(0,n.serialization).registerClass(f);class m extends i{apply(e){return n.softplus(e)}}/** @nocollapse */m.className="softplus",(0,n.serialization).registerClass(m);class g extends i{apply(e){return a.softsign(e)}}/** @nocollapse */g.className="softsign",(0,n.serialization).registerClass(g);class x extends i{apply(e){return n.tanh(e)}}/** @nocollapse */x.className="tanh",(0,n.serialization).registerClass(x);class b extends i{/**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */apply(e,t=-1){return n.softmax(e,t)}}/** @nocollapse */b.className="softmax",(0,n.serialization).registerClass(b);class y extends i{/**
     * Calculate the activation function of log softmax:
     * log( exp(x_i) / sum(exp(x)) )
     *
     * @param x Tensor.
     * @param axis Integer, axis along which the softmax normalization is applied.
     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
     * an error.
     *
     * @returns a Tensor of the same shape as x
     *
     * @throws ValueError: In case `dim(x) < 2`.
     */apply(e,t=-1){return n.logSoftmax(e,t)}}/** @nocollapse */y.className="logSoftmax",(0,n.serialization).registerClass(y);class j extends i{/**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @param alpha Scaling factor for the sigmoid function.
     * @returns a Tensor of the same shape as x
     */apply(e,t=1){return(0,n.tidy)(()=>n.mul(n.sigmoid(n.mul(e,t)),e))}}/** @nocollapse */j.className="swish",(0,n.serialization).registerClass(j);class _ extends i{/**
     * Calculate the activation function.
     *
     * @param x Tensor.
     * @returns a Tensor of the same shape as x
     */apply(e){return(0,n.tidy)(()=>n.mul(e,n.tanh(n.softplus(e))))}}function k(e){return e.getClassName()}function I(e,t={}){return(0,o.deserializeKerasObject)(e,(0,n.serialization).SerializationMap.getMap().classNameMap,t,"activation")}function w(e){if(null==e){let e={};return e.className="linear",e.config={},I(e)}if("string"==typeof e){let t={};return t.className=e,t.config={},I(t)}return e instanceof i?e:I(e)}/** @nocollapse */_.className="mish",(0,n.serialization).registerClass(_)},{"@tensorflow/tfjs-core":"U1ela","./backend/tfjs_backend":"hBUWZ","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bzJO0:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* original source: keras/regularizers.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Regularizer base class.
 */s.export(r,"Regularizer",()=>l),s.export(r,"L1L2",()=>u),s.export(r,"l1",()=>p),s.export(r,"l2",()=>c),s.export(r,"REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP",()=>d),s.export(r,"serializeRegularizer",()=>h),s.export(r,"deserializeRegularizer",()=>f),s.export(r,"getRegularizer",()=>m);var n=e("@tensorflow/tfjs-core"),a=e("./backend/tfjs_backend"),o=e("./utils/generic_utils");function i(e){if(null!=e&&"object"!=typeof e)throw Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}class l extends n.serialization.Serializable{}class u extends l{constructor(e){super(),i(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}/**
     * Porting note: Renamed from __call__.
     * @param x Variable of which to calculate the regularization score.
     */apply(e){return(0,n.tidy)(()=>{let t=(0,n.zeros)([1]);return this.hasL1&&(t=(0,n.add)(t,(0,n.sum)(n.mul(this.l1,(0,n.abs)(e))))),this.hasL2&&(t=(0,n.add)(t,(0,n.sum)(n.mul(this.l2,a.square(e))))),n.reshape(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}/** @nocollapse */static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}function p(e){return i(e),new u({l1:null!=e?e.l1:null,l2:0})}function c(e){return i(e),new u({l2:null!=e?e.l2:null,l1:0})}/** @nocollapse */u.className="L1L2",(0,n.serialization).registerClass(u);let d={l1l2:"L1L2"};function h(e){return(0,o.serializeKerasObject)(e)}function f(e,t={}){return(0,o.deserializeKerasObject)(e,(0,n.serialization).SerializationMap.getMap().classNameMap,t,"regularizer")}function m(e){if(null==e)return null;if("string"==typeof e){let t=e in d?d[e]:e;return f({className:t,config:{}})}return e instanceof l?e:f(e)}},{"@tensorflow/tfjs-core":"U1ela","./backend/tfjs_backend":"hBUWZ","./utils/generic_utils":"ia9DW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lwxvP:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Convolutional Layers
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Transpose and cast the input before the conv2d.
 * @param x Input image tensor.
 * @param dataFormat
 */s.export(r,"preprocessConv2DInput",()=>x),/**
 * Transpose and cast the input before the conv3d.
 * @param x Input image tensor.
 * @param dataFormat
 */s.export(r,"preprocessConv3DInput",()=>b),/**
 * 1D-convolution with bias added.
 *
 * Porting Note: This function does not exist in the Python Keras backend.
 *   It is exactly the same as `conv2d`, except the added `bias`.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.
 * @param bias Bias, rank-3, of shape `[outDepth]`.
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */s.export(r,"conv1dWithBias",()=>y),/**
 * 1D-convolution.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */s.export(r,"conv1d",()=>j),/**
 * 2D Convolution
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 2D pooling.
 */s.export(r,"conv2d",()=>_),/**
 * 2D Convolution with an added bias and optional activation.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv2d`, except the added `bias`.
 */s.export(r,"conv2dWithBiasActivation",()=>k),/**
 * 3D Convolution.
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 3D convolution.
 */s.export(r,"conv3d",()=>I),/**
 * 3D Convolution with an added bias.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv3d`, except the added `bias`.
 */s.export(r,"conv3dWithBias",()=>w),/**
 * Abstract convolution layer.
 */s.export(r,"BaseConv",()=>C),/**
 * Abstract nD convolution layer.  Ancestor of convolution layers which reduce
 * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.
 */s.export(r,"Conv",()=>S),s.export(r,"Conv2D",()=>T),s.export(r,"Conv3D",()=>N),s.export(r,"Conv2DTranspose",()=>E),s.export(r,"Conv3DTranspose",()=>F),s.export(r,"SeparableConv",()=>A),s.export(r,"SeparableConv2D",()=>R),s.export(r,"Conv1D",()=>D),s.export(r,"Cropping2D",()=>$),s.export(r,"UpSampling2D",()=>P);var n=e("@tensorflow/tfjs-core"),a=e("../activations"),o=e("../backend/common"),i=e("../backend/tfjs_backend"),l=e("../common"),u=e("../constraints"),p=e("../engine/topology"),c=e("../errors"),d=e("../initializers"),h=e("../regularizers"),f=e("../utils/conv_utils"),m=e("../utils/generic_utils"),g=e("../utils/types_utils");function x(e,t){// TODO(cais): Cast type to float32 if not.
return(0,n.tidy)(()=>((0,l.checkDataFormat)(t),"channelsFirst"===t)?n.transpose(e,[0,2,3,1]):e)}function b(e,t){return(0,n.tidy)(()=>((0,l.checkDataFormat)(t),"channelsFirst"===t)?n.transpose(e,[0,2,3,4,1]):e)}function y(e,t,r,s=1,a="valid",u,p=1){return(0,n.tidy)(()=>{// Check the ranks of x, kernel and bias.
if(null==u&&(u=(0,o.imageDataFormat)()),(0,l.checkDataFormat)(u),3!==e.shape.length)throw new c.ValueError(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new c.ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=r&&1!==r.shape.length)throw new c.ValueError(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===u&&(e=n.transpose(e,[0,2,1])),"causal"===a)throw new c.NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let d=n.conv1d(e,t,s,"same"===a?"same":"valid","NWC",p);return null!=r&&(d=i.biasAdd(d,r)),d})}function j(e,t,r=1,s="valid",a,o=1){return(0,n.tidy)(()=>((0,l.checkDataFormat)(a),y(e,t,null,r,s,a,o)))}function _(e,t,r=[1,1],s="valid",a,o){return(0,n.tidy)(()=>((0,l.checkDataFormat)(a),k(e,t,null,r,s,a,o)))}function k(e,t,r,s=[1,1],a="valid",i,u,p=null){return(0,n.tidy)(()=>{if(null==i&&(i=(0,o.imageDataFormat)()),(0,l.checkDataFormat)(i),3!==e.rank&&4!==e.rank)throw new c.ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new c.ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let d=x(e,i);if("causal"===a)throw new c.NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return d=n.fused.conv2d({x:d,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:u,dataFormat:"NHWC",bias:r,activation:p}),"channelsFirst"===i&&(d=n.transpose(d,[0,3,1,2])),d})}function I(e,t,r=[1,1,1],s="valid",a,o){return(0,n.tidy)(()=>((0,l.checkDataFormat)(a),w(e,t,null,r,s,a,o)))}function w(e,t,r,s=[1,1,1],a="valid",u,p){return(0,n.tidy)(()=>{if(null==u&&(u=(0,o.imageDataFormat)()),(0,l.checkDataFormat)(u),4!==e.rank&&5!==e.rank)throw new c.ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new c.ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let d=b(e,u);if("causal"===a)throw new c.NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return d=n.conv3d(d,t,s,"same"===a?"same":"valid","NDHWC",p),null!=r&&(d=i.biasAdd(d,r)),"channelsFirst"===u&&(d=n.transpose(d,[0,4,1,2,3])),d})}class C extends p.Layer{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",C.verifyArgs(t),this.rank=e,m.assertPositiveInteger(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new c.NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=(0,f.normalizeArray)(t.kernelSize,e,"kernelSize"),this.strides=(0,f.normalizeArray)(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,(0,l.checkPaddingMode)(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,(0,l.checkDataFormat)(this.dataFormat),this.activation=(0,a.getActivation)(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=(0,d.getInitializer)(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=(0,u.getConstraint)(t.biasConstraint),this.biasRegularizer=(0,h.getRegularizer)(t.biasRegularizer),this.activityRegularizer=(0,h.getRegularizer)(t.activityRegularizer),this.dilationRate=(0,f.normalizeArray)(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new c.ValueError(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new c.ValueError(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new c.ValueError(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(// Check config.kernelSize type and shape.
m.assert("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!m.checkArrayTypeAndLength(e.kernelSize,"number",1,3))throw new c.ValueError(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){let e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:(0,a.serializeActivation)(this.activation),useBias:this.useBias,biasInitializer:(0,d.serializeInitializer)(this.biasInitializer),biasRegularizer:(0,h.serializeRegularizer)(this.biasRegularizer),activityRegularizer:(0,h.serializeRegularizer)(this.activityRegularizer),biasConstraint:(0,u.serializeConstraint)(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class S extends C{constructor(e,t){super(e,t),this.kernel=null,S.verifyArgs(t),this.filters=t.filters,m.assertPositiveInteger(this.filters,"filters"),this.kernelInitializer=(0,d.getInitializer)(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=(0,u.getConstraint)(t.kernelConstraint),this.kernelRegularizer=(0,h.getRegularizer)(t.kernelRegularizer)}build(e){e=(0,g.getExactlyOneShape)(e);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new c.ValueError(`The channel dimension of the input should be defined. Found ${e[t]}`);let r=e[t],s=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:r}}],this.built=!0}call(e,t){return(0,n.tidy)(()=>{let t;e=(0,g.getExactlyOneTensor)(e);let r=null==this.bias?null:this.bias.read(),s=m.mapActivationToFusedKernel(this.activation.getClassName());if(null!=s&&2===this.rank)t=k(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=y(e,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=k(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(3===this.rank)t=w(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new c.NotImplementedError("convolutions greater than 3D are not implemented yet.");null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=(0,g.getExactlyOneShape)(e);let t=[],r="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<r.length;++e){let s=(0,f.convOutputLength)(r[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t)).push(this.filters):(s.push(this.filters),s=s.concat(t)),s}getConfig(){let e={filters:this.filters,kernelInitializer:(0,d.serializeInitializer)(this.kernelInitializer),kernelRegularizer:(0,h.serializeRegularizer)(this.kernelRegularizer),kernelConstraint:(0,u.serializeConstraint)(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){// Check config.filters type, shape, and value.
if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new c.ValueError(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class T extends S{constructor(e){super(2,e),T.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){// config.kernelSize must be a number or array of numbers.
if("number"!=typeof e.kernelSize&&!m.checkArrayTypeAndLength(e.kernelSize,"number",1,2))throw new c.ValueError(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}/** @nocollapse */T.className="Conv2D",(0,n.serialization).registerClass(T);class N extends S{constructor(e){super(3,e),N.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){// config.kernelSize must be a number or array of numbers.
if("number"!=typeof e.kernelSize&&!(Array.isArray(e.kernelSize)&&(1===e.kernelSize.length||3===e.kernelSize.length)))throw new c.ValueError(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}/** @nocollapse */N.className="Conv3D",(0,n.serialization).registerClass(N);class E extends T{constructor(e){if(super(e),this.inputSpec=[new p.InputSpec({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new c.ValueError(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=(0,g.getExactlyOneShape)(e)).length)throw new c.ValueError("Input should have rank 4; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new c.ValueError("The channel dimension of the inputs should be defined. Found `None`.");let r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),// Set input spec.
this.inputSpec=[new p.InputSpec({ndim:4,axes:{[t]:r}})],this.built=!0}call(e,t){return n.tidy(()=>{let t,r,s=(0,g.getExactlyOneTensor)(e);if(4!==s.shape.length)throw new c.ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);let a=s.shape,o=a[0];"channelsFirst"===this.dataFormat?(t=2,r=3):(t=1,r=2);let l=a[t],u=a[r],p=this.kernelSize[0],d=this.kernelSize[1],h=this.strides[0],m=this.strides[1],x=(0,f.deconvLength)(l,h,p,this.padding),b=(0,f.deconvLength)(u,m,d,this.padding),y=[o,x,b,this.filters];"channelsLast"!==this.dataFormat&&(s=n.transpose(s,[0,2,3,1]));let j=n.conv2dTranspose(s,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(j=n.transpose(j,[0,3,1,2])),null!=this.bias&&(j=i.biasAdd(j,this.bias.read(),this.dataFormat)),null!=this.activation&&(j=this.activation.apply(j)),j})}computeOutputShape(e){let t,r,s;e=(0,g.getExactlyOneShape)(e);let n=e.slice();"channelsFirst"===this.dataFormat?(t=1,r=2,s=3):(t=3,r=1,s=2);let a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return n[t]=this.filters,n[r]=(0,f.deconvLength)(n[r],i,a,this.padding),n[s]=(0,f.deconvLength)(n[s],l,o,this.padding),n}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}/** @nocollapse */E.className="Conv2DTranspose",(0,n.serialization).registerClass(E);class F extends N{constructor(e){if(super(e),this.inputSpec=[new p.InputSpec({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new c.ValueError(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=(0,g.getExactlyOneShape)(e)).length)throw new c.ValueError("Input should have rank 5; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new c.ValueError("The channel dimension of the inputs should be defined. Found `None`.");let r=e[t],s=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),// Set input spec.
this.inputSpec=[new p.InputSpec({ndim:5,axes:{[t]:r}})],this.built=!0}call(e,t){return n.tidy(()=>{let t,r,s,a=(0,g.getExactlyOneTensor)(e);if(5!==a.shape.length)throw new c.ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${a.shape.length}`);let o=a.shape,l=o[0];"channelsFirst"===this.dataFormat?(s=2,t=3,r=4):(s=1,t=2,r=3);let u=o[s],p=o[t],d=o[r],h=this.kernelSize[0],m=this.kernelSize[1],x=this.kernelSize[2],b=this.strides[0],y=this.strides[1],j=this.strides[2],_=(0,f.deconvLength)(u,b,h,this.padding),k=(0,f.deconvLength)(p,y,m,this.padding),I=(0,f.deconvLength)(d,j,x,this.padding),w=[l,_,k,I,this.filters];"channelsLast"!==this.dataFormat&&(a=n.transpose(a,[0,2,3,4,1]));let C=n.conv3dTranspose(a,this.kernel.read(),w,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(C=n.transpose(C,[0,4,1,2,3])),null!==this.bias&&(C=i.biasAdd(C,this.bias.read(),this.dataFormat)),null!==this.activation&&(C=this.activation.apply(C)),C})}computeOutputShape(e){let t,r,s,n;e=(0,g.getExactlyOneShape)(e);let a=e.slice();"channelsFirst"===this.dataFormat?(t=1,r=2,s=3,n=4):(t=4,r=1,s=2,n=3);let o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],p=this.strides[1],c=this.strides[2];return a[t]=this.filters,a[r]=(0,f.deconvLength)(a[r],u,o,this.padding),a[s]=(0,f.deconvLength)(a[s],p,i,this.padding),a[n]=(0,f.deconvLength)(a[n],c,l,this.padding),a}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}/** @nocollapse */F.className="Conv3DTranspose",(0,n.serialization).registerClass(F);class A extends S{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new c.ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new c.ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new c.ValueError(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=(0,d.getInitializer)(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=(0,h.getRegularizer)(t.depthwiseRegularizer),this.depthwiseConstraint=(0,u.getConstraint)(t.depthwiseConstraint),this.pointwiseInitializer=(0,d.getInitializer)(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=(0,h.getRegularizer)(t.pointwiseRegularizer),this.pointwiseConstraint=(0,u.getConstraint)(t.pointwiseConstraint)}build(e){if((e=(0,g.getExactlyOneShape)(e)).length<this.rank+2)throw new c.ValueError(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new c.ValueError(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);let r=e[t],s=this.kernelSize.concat([r,this.depthMultiplier]),n=[];for(let e=0;e<this.rank;++e)n.push(1);n.push(r*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",n,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new p.InputSpec({ndim:this.rank+2,axes:{[t]:r}})],this.built=!0}call(e,t){return(0,n.tidy)(()=>{let t;if(e=(0,g.getExactlyOneTensor)(e),1===this.rank)throw new c.NotImplementedError("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=n.transpose(e,[0,2,3,1])),t=n.separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=i.biasAdd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=n.transpose(t,[0,3,1,2])),t})}getConfig(){let e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=(0,d.serializeInitializer)(this.depthwiseInitializer),e.pointwiseInitializer=(0,d.serializeInitializer)(this.pointwiseInitializer),e.depthwiseRegularizer=(0,h.serializeRegularizer)(this.depthwiseRegularizer),e.pointwiseRegularizer=(0,h.serializeRegularizer)(this.pointwiseRegularizer),e.depthwiseConstraint=(0,u.serializeConstraint)(this.depthwiseConstraint),e.pointwiseConstraint=(0,u.serializeConstraint)(this.pointwiseConstraint),e}}/** @nocollapse */A.className="SeparableConv";class R extends A{constructor(e){super(2,e)}}/** @nocollapse */R.className="SeparableConv2D",(0,n.serialization).registerClass(R);class D extends S{constructor(e){super(1,e),D.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){let e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){// config.kernelSize must be a number or array of numbers.
if("number"!=typeof e.kernelSize&&!m.checkArrayTypeAndLength(e.kernelSize,"number",1,1))throw new c.ValueError(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}/** @nocollapse */D.className="Conv1D",(0,n.serialization).registerClass(D);class $ extends p.Layer{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return(0,n.tidy)(()=>{if(e=(0,g.getExactlyOneTensor)(e),"channelsLast"===this.dataFormat){let t=i.sliceAlongAxis(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return i.sliceAlongAxis(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{let t=i.sliceAlongAxis(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return i.sliceAlongAxis(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */$.className="Cropping2D",(0,n.serialization).registerClass($);class P extends p.Layer{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,l.checkDataFormat)(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,(0,l.checkInterpolationFormat)(this.interpolation)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){let t=null==e[2]?null:this.size[0]*e[2],r=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,r]}{let t=null==e[1]?null:this.size[0]*e[1],r=null==e[2]?null:this.size[1]*e[2];return[e[0],t,r,e[3]]}}call(e,t){return n.tidy(()=>{let t=(0,g.getExactlyOneTensor)(e),r=t.shape;if("channelsFirst"===this.dataFormat){t=n.transpose(t,[0,2,3,1]);let e=this.size[0]*r[2],s=this.size[1]*r[3],a="nearest"===this.interpolation?n.image.resizeNearestNeighbor(t,[e,s]):n.image.resizeBilinear(t,[e,s]);return n.transpose(a,[0,3,1,2])}{let e=this.size[0]*r[1],s=this.size[1]*r[2];return"nearest"===this.interpolation?n.image.resizeNearestNeighbor(t,[e,s]):n.image.resizeBilinear(t,[e,s])}})}getConfig(){let e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */P.className="UpSampling2D",(0,n.serialization).registerClass(P)},{"@tensorflow/tfjs-core":"U1ela","../activations":"UODIR","../backend/common":"02oHM","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/conv_utils":"ccwXo","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ccwXo:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Transforms a single number of array of numbers into an array of numbers.
 * @param value
 * @param n: The size of the tuple to be returned.
 * @param name: Name of the parameter, used for generating error messages.
 * @returns An array of numbers.
 */s.export(r,"normalizeArray",()=>i),/**
 * Determines output length of a convolution given input length.
 * @param inputLength
 * @param filterSize
 * @param padding
 * @param stride
 * @param dilation: dilation rate.
 */s.export(r,"convOutputLength",()=>l),s.export(r,"deconvLength",()=>u);var n=e("../errors"),a=e("./generic_utils"),o=e("./math_utils");function i(e,t,r){if("number"==typeof e)return(0,a.pyListRepeat)(e,t);if(e.length!==t)throw new n.ValueError(`The ${r} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){let a=e[s];if(!(0,o.isInteger)(a))throw new n.ValueError(`The ${r} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e}function l(e,t,r,s,n=1){return null==e?e:Math.floor((("same"===r?e:e-(t+(t-1)*(n-1))+1)+s-1)/s)}function u(e,t,r,s){if(null==e)return null;if("valid"===s)e=e*t+(0,o.max)([r-t,0]);else if("same"===s)e*=t;else throw new n.ValueError(`Unsupport padding mode: ${s}.`);return e}},{"../errors":"2onZT","./generic_utils":"ia9DW","./math_utils":"4BJyC","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2Dkny":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Depthwise Convolutional Layers
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * 2D convolution with separable filters.
 * @param x Input tensor.
 * @param depthwiseKernel Convolution kernel for depthwise convolution.
 * @param strides Strides (Array of two integers).
 * @param padding Padding model.
 * @param dataFormat Data format.
 * @param dilationRate Array of two integers, dilation rates for the separable
 *   convolution.
 * @returns Output tensor.
 * @throws ValueError If depthwiseKernel is not a 4D array.
 */s.export(r,"depthwiseConv2d",()=>m),s.export(r,"DepthwiseConv2D",()=>g);var n=e("@tensorflow/tfjs-core"),a=e("../backend/common"),o=e("../backend/tfjs_backend"),i=e("../common"),l=e("../constraints"),u=e("../errors"),p=e("../initializers"),c=e("../regularizers"),d=e("../utils/conv_utils"),h=e("../utils/types_utils"),f=e("./convolutional");function m(e,t,r=[1,1],s="valid",o,l){return(0,n.tidy)(()=>{null==o&&(o=(0,a.imageDataFormat)()),(0,i.checkDataFormat)(o);let p=(0,f.preprocessConv2DInput)(e,o);if(4!==e.rank)throw new u.ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new u.ValueError(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return p=n.depthwiseConv2d(p,t,r,"same"===s?"same":"valid","NHWC",l),"channelsFirst"===o&&(p=n.transpose(p,[0,3,1,2])),p})}class g extends f.BaseConv{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=(0,p.getInitializer)(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=(0,l.getConstraint)(e.depthwiseConstraint),this.depthwiseRegularizer=(0,c.getRegularizer)(e.depthwiseRegularizer)}build(e){if((e=(0,h.getExactlyOneShape)(e)).length<4)throw new u.ValueError(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);let t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new u.ValueError(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);let r=e[t],s=[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,n.tidy)(()=>{let t=m(e=(0,h.getExactlyOneTensor)(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=o.biasAdd(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=(0,h.getExactlyOneShape)(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,n=(0,d.convOutputLength)(t,this.kernelSize[0],this.padding,this.strides[0]),a=(0,d.convOutputLength)(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,n,a]:[e[0],n,a,s]}getConfig(){let e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=(0,p.serializeInitializer)(this.depthwiseInitializer),e.depthwiseRegularizer=(0,c.serializeRegularizer)(this.depthwiseRegularizer),e.depthwiseConstraint=(0,l.serializeConstraint)(this.depthwiseRegularizer),e}}/** @nocollapse */g.className="DepthwiseConv2D",(0,n.serialization).registerClass(g)},{"@tensorflow/tfjs-core":"U1ela","../backend/common":"02oHM","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../constraints":"kQcHo","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/conv_utils":"ccwXo","../utils/types_utils":"kXuwT","./convolutional":"lwxvP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9kvMf":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ConvLSTM2DCell",()=>g),s.export(r,"ConvLSTM2D",()=>x);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../common"),i=e("../engine/topology"),l=e("../errors"),u=e("../initializers"),p=e("../utils/conv_utils"),c=e("../utils/generic_utils"),d=e("../utils/types_utils"),h=e("./recurrent"),f=function(e,t){var r={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&0>t.indexOf(s)&&(r[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,s=Object.getOwnPropertySymbols(e);n<s.length;n++)0>t.indexOf(s[n])&&Object.prototype.propertyIsEnumerable.call(e,s[n])&&(r[s[n]]=e[s[n]]);return r};/**
 * Base class for convolutional-recurrent layers.
 */class m extends h.RNN{constructor(e){if(e.unroll)throw new l.NotImplementedError("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new l.NotImplementedError("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new i.InputSpec({ndim:5})]}call(e,t){return n.tidy(()=>{if(null!=this.cell.dropoutMask&&(n.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(n.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new l.ValueError("ConvRNN2D cell does not support constants");let r=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...[,,].fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return n.tidy(()=>{let{stateSize:t}=this.cell,r=e.shape,s=this.computeSingleOutputShape(r),a=[s[0],...s.slice(2)],o=n.zeros(a);return Array.isArray(t)?Array(t.length).fill(o):[o]})}resetStates(e,t=!1){n.tidy(()=>{if(!this.stateful)throw new l.AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");let r=this.inputSpec[0].shape,s=this.computeSingleOutputShape(r),a=[s[0],...s.slice(2)],o=r[0];if(null==o)throw new l.ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");// Initialize state if null.
if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>n.zeros(a)):this.states_=[n.zeros(a)];else if(null==e)// Dispose old state tensors.
n.dispose(this.states_),null!=this.keptStates&&(n.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>n.zeros(a)):this.states_[0]=n.zeros(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new l.ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?// the next no-arg call to this method. We do not dispose the old
// states immediately because that BPTT (among other things) require
// them.
this.keptStates.push(this.states_.slice()):n.dispose(this.states_);for(let t=0;t<this.states_.length;++t){let r=e[t];if(!(0,n.util).arraysEqual(r.shape,a))throw new l.ValueError(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map(e=>n.keep(e.clone()))})}computeSingleOutputShape(e){let{dataFormat:t,filters:r,kernelSize:s,padding:n,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=(0,p.convOutputLength)(l,s[0],n,a[0],o[0]),d=(0,p.convOutputLength)(u,s[1],n,a[1],o[1]),h=[...e.slice(0,2),...i?[r,c,d]:[c,d,r]];return h}}/** @nocollapse */m.className="ConvRNN2D";class g extends h.LSTMCell{constructor(e){let{filters:t,kernelSize:r,strides:s,padding:n,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,(0,c.assertPositiveInteger)(this.filters,"filters"),this.kernelSize=(0,p.normalizeArray)(r,2,"kernelSize"),this.kernelSize.forEach(e=>(0,c.assertPositiveInteger)(e,"kernelSize")),this.strides=(0,p.normalizeArray)(s||1,2,"strides"),this.strides.forEach(e=>(0,c.assertPositiveInteger)(e,"strides")),this.padding=n||"valid",(0,o.checkPaddingMode)(this.padding),this.dataFormat=a||"channelsLast",(0,o.checkDataFormat)(this.dataFormat),this.dilationRate=(0,p.normalizeArray)(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>(0,c.assertPositiveInteger)(e,"dilationRate"))}build(e){var t;e=(0,d.getExactlyOneShape)(e);let r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new l.ValueError(`The channel dimension of the input should be defined. Found ${e[r]}`);let s=e[r],o=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",o,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){let r=this.biasInitializer,s=this.filters;e=new(/** @nocollapse */(t=class extends u.Initializer{apply(e,t){let o=r.apply([s]),i=n.ones([s]),l=r.apply([2*s]);return a.concatenate([o,i,l])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return n.tidy(()=>{if(3!==e.length)throw new l.ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=t.training||!1,s=e[0],a=e[1],o=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=(0,h.generateDropoutMask)({ones:()=>n.onesLike(s),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,u=(e,t,r)=>t&&t[r]?n.mul(t[r],e):e,p=u(s,i,0),c=u(s,i,1),d=u(s,i,2),f=u(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=(0,h.generateDropoutMask)({ones:()=>n.onesLike(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));let m=this.recurrentDropoutMask,g=u(a,m,0),x=u(a,m,1),b=u(a,m,2),y=u(a,m,3),[j,_,k,I]=n.split(this.kernel.read(),4,3),[w,C,S,T]=this.useBias?n.split(this.bias.read(),4):[null,null,null,null];p=this.inputConv(p,j,w,this.padding),c=this.inputConv(c,_,C,this.padding),d=this.inputConv(d,k,S,this.padding),f=this.inputConv(f,I,T,this.padding);let[N,E,F,A]=n.split(this.recurrentKernel.read(),4,3);g=this.recurrentConv(g,N),x=this.recurrentConv(x,E),b=this.recurrentConv(b,F),y=this.recurrentConv(y,A);let R=this.recurrentActivation.apply(n.add(p,g)),D=this.recurrentActivation.apply(n.add(c,x)),$=n.add(n.mul(D,o),n.mul(R,this.activation.apply(n.add(d,b)))),P=n.mul(this.recurrentActivation.apply(n.add(f,y)),this.activation.apply($));return[P,P,$]})}getConfig(){let e=super.getConfig(),{units:t}=e,r=f(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},r,s)}inputConv(e,t,r,s){let o=n.conv2d(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?a.biasAdd(o,r,this.dataFormat):o}recurrentConv(e,t){return n.conv2d(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}/** @nocollapse */g.className="ConvLSTM2DCell",n.serialization.registerClass(g);class x extends m{constructor(e){let t=new g(e);super(Object.assign({},e,{cell:t}))}/** @nocollapse */static fromConfig(e,t){return new e(t)}}/** @nocollapse */x.className="ConvLSTM2D",n.serialization.registerClass(x)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../utils/conv_utils":"ccwXo","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","./recurrent":"jtjtM","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jtjtM:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Recurrent Neural Network Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Standardize `apply()` args to a single list of tensor inputs.
 *
 * When running a model loaded from file, the input tensors `initialState` and
 * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the
 * dedicated kwargs fields. `inputs` consists of
 * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this
 * case.
 * This method makes sure that arguments are
 * separated and that `initialState` and `constants` are `Array`s of tensors
 * (or None).
 *
 * @param inputs Tensor or `Array` of  tensors.
 * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.
 * @param constants Tensor or `Array` of tensors or `null`/`undefined`.
 * @returns An object consisting of
 *   inputs: A tensor.
 *   initialState: `Array` of tensors or `null`.
 *   constants: `Array` of tensors or `null`.
 * @throws ValueError, if `inputs` is an `Array` but either `initialState` or
 *   `constants` is provided.
 */s.export(r,"standardizeArgs",()=>b),/**
 * Iterates over the time dimension of a tensor.
 *
 * @param stepFunction RNN step function.
 *   Parameters:
 *     inputs: tensor with shape `[samples, ...]` (no time dimension),
 *       representing input for the batch of samples at a certain time step.
 *     states: an Array of tensors.
 *   Returns:
 *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).
 *     newStates: list of tensors, same length and shapes as `states`. The first
 *       state in the list must be the output tensor at the previous timestep.
 * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at
 *   least 3D).
 * @param initialStates Tensor with shape `[samples, outputDim]` (no time
 *   dimension), containing the initial values of the states used in the step
 *   function.
 * @param goBackwards If `true`, do the iteration over the time dimension in
 *   reverse order and return the reversed sequence.
 * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for
 *   every element that is masked.
 * @param constants An Array of constant values passed at each step.
 * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*
 *   applicable to this imperative deeplearn.js backend. Its value is ignored.
 * @param needPerStepOutputs Whether the per-step outputs are to be
 *   concatenated into a single tensor and returned (as the second return
 *   value). Default: `false`. This arg is included so that the relatively
 *   expensive concatenation of the stepwise outputs can be omitted unless
 *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which
 *   `returnSequence` is `true`.)
 * @returns An Array: `[lastOutput, outputs, newStates]`.
 *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.
 *   outputs: tensor with shape `[samples, time, ...]` where each entry
 *     `output[s, t]` is the output of the step function at time `t` for sample
 *     `s`. This return value is provided if and only if the
 *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this
 *     return value will be `undefined`.
 *   newStates: Array of tensors, latest states returned by the step function,
 *      of shape `(samples, ...)`.
 * @throws ValueError If input dimension is less than 3.
 *
 * TODO(nielsene): This needs to be tidy-ed.
 */s.export(r,"rnn",()=>y),s.export(r,"RNN",()=>j),// Porting Note: This is a common parent class for RNN cells. There is no
// equivalent of this in PyKeras. Having a common parent class forgoes the
//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.
/**
 * An RNNCell layer.
 *
 * @doc {heading: 'Layers', subheading: 'Classes'}
 */s.export(r,"RNNCell",()=>_),s.export(r,"SimpleRNNCell",()=>k),s.export(r,"SimpleRNN",()=>I),s.export(r,"GRUCell",()=>w),s.export(r,"GRU",()=>C),s.export(r,"LSTMCell",()=>S),s.export(r,"LSTM",()=>T),s.export(r,"StackedRNNCells",()=>N),s.export(r,"generateDropoutMask",()=>E);var n=e("@tensorflow/tfjs-core"),a=e("../activations"),o=e("../backend/tfjs_backend"),i=e("../common"),l=e("../constraints"),u=e("../engine/topology"),p=e("../errors"),c=e("../initializers"),d=e("../regularizers"),h=e("../utils/generic_utils"),f=e("../utils/math_utils"),m=e("../utils/types_utils"),g=e("../variables"),x=e("./serialization");function b(e,t,r,s){if(Array.isArray(e)){if(null!=t||null!=r)throw new p.ValueError("When inputs is an array, neither initialState or constants should be provided");null!=s&&(r=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function n(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=n(t),constants:r=n(r)}}function y(e,t,r,s=!1,a,o,i=!1,l=!1){return n.tidy(()=>{let u,c,d;let h=t.shape.length;if(h<3)throw new p.ValueError(`Input should be at least 3D, but is ${h}D.`);// Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,
// ...].
let m=[1,0].concat(f.range(2,h));if(t=n.transpose(t,m),null!=o)throw new p.NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=n.cast(n.cast(a,"bool"),"float32")).rank===h-1&&(a=n.expandDims(a,-1)),a=n.transpose(a,m)),s&&(t=n.reverse(t,0),null!=a&&(a=n.reverse(a,0)));// Porting Note: PyKeras with TensorFlow backend uses a symbolic loop
//   (tf.while_loop). But for the imperative deeplearn.js backend, we just
//   use the usual TypeScript control flow to iterate over the time steps in
//   the inputs.
// Porting Note: PyKeras patches a "_use_learning_phase" attribute to
// outputs.
//   This is not idiomatic in TypeScript. The info regarding whether we are
//   in a learning (i.e., training) phase for RNN is passed in a different
//   way.
let g=[],x=r,b=t.shape[0],y=n.unstack(t);null!=a&&(c=n.unstack(a));for(let t=0;t<b;++t){let r=y[t],s=n.tidy(()=>e(r,x));if(null==a)u=s[0],x=s[1];else{let e=n.tidy(()=>{let e=c[t],r=n.sub(n.onesLike(e),e),a=n.add(n.mul(s[0],e),n.mul(x[0],r)),o=x.map((t,a)=>n.add(n.mul(s[1][a],e),n.mul(t,r)));return{output:a,newStates:o}});u=e.output,x=e.newStates}l&&g.push(u)}return l&&(d=n.stack(g,1)),[u,d,x]})}class j extends u.Layer{constructor(e){let t;if(super(e),null==e.cell)throw new p.ValueError("cell property is missing for the constructor of RNN.");if(null==(t=Array.isArray(e.cell)?new N({cells:e.cell}):e.cell).stateSize)throw new p.ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new u.InputSpec({ndim:3})],this.stateSpec=null,this.states_=null,// TODO(cais): Add constantsSpec and numConstants.
this.numConstants=null,// TODO(cais): Look into the use of initial_state in the kwargs of the
//   constructor.
this.keptStates=[]}// Porting Note: This is the equivalent of `RNN.states` property getter in
//   PyKeras.
getStates(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return f.range(0,e).map(e=>null)}}// Porting Note: This is the equivalent of the `RNN.states` property setter in
//   PyKeras.
setStates(e){this.states_=e}computeOutputShape(e){let t;(0,m.isArrayOfShapes)(e)&&(e=e[0]);// TODO(cais): Remove the casting once stacked RNN cells become supported.
let r=this.cell.stateSize;Array.isArray(r)||(r=[r]);let s=r[0];if(t=this.returnSequences?[e[0],e[1],s]:[e[0],s],!this.returnState)return t;{let s=[];for(let t of r)s.push([e[0],t]);return[t].concat(s)}}computeMask(e,t){return n.tidy(()=>{Array.isArray(t)&&(t=t[0]);let e=this.returnSequences?t:null;if(!this.returnState)return e;{let t=this.states.map(e=>null);return[e].concat(t)}})}/**
     * Get the current state tensors of the RNN.
     *
     * If the state hasn't been set, return an array of `null`s of the correct
     * length.
     */get states(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let r=0;r<e;++r)t.push(null);return t}}set states(e){this.states_=e}build(e){let t;if(null!=this.numConstants)throw new p.NotImplementedError("Constants support is not implemented in RNN yet.");(0,m.isArrayOfShapes)(e)&&(e=e[0]);let r=this.stateful?e[0]:null,s=e.slice(2);this.inputSpec[0]=new u.InputSpec({shape:[r,null,...s]});// Allow cell (if RNNCell Layer) to build before we set or validate
// stateSpec.
let a=[e[0]].concat(e.slice(2));if(this.cell.build(a),t=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!(0,n.util).arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),t))throw new p.ValueError(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=t.map(e=>new u.InputSpec({shape:[null,e]}));this.stateful&&this.resetStates()}/**
     * Reset the state tensors of the RNN.
     *
     * If the `states` argument is `undefined` or `null`, will set the
     * state tensor(s) of the RNN to all-zero tensors of the appropriate
     * shape(s).
     *
     * If `states` is provided, will set the state tensors of the RNN to its
     * value.
     *
     * @param states Optional externally-provided initial states.
     * @param training Whether this call is done during training. For stateful
     *   RNNs, this affects whether the old states are kept or discarded. In
     *   particular, if `training` is `true`, the old states will be kept so
     *   that subsequent backpropgataion through time (BPTT) may work properly.
     *   Else, the old states will be discarded.
     */resetStates(e,t=!1){(0,n.tidy)(()=>{if(!this.stateful)throw new p.AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");let r=this.inputSpec[0].shape[0];if(null==r)throw new p.ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");// Initialize state if null.
if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>n.zeros([r,e])):this.states_=[n.zeros([r,this.cell.stateSize])];else if(null==e)// Dispose old state tensors.
n.dispose(this.states_),null!=this.keptStates&&(n.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>n.zeros([r,e])):this.states_[0]=n.zeros([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new p.ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?// the next no-arg call to this method. We do not dispose the old
// states immediately because that BPTT (among other things) require
// them.
this.keptStates.push(this.states_.slice()):n.dispose(this.states_);for(let t=0;t<this.states_.length;++t){let s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,o=[r,a];if(!(0,n.util).arraysEqual(s.shape,o))throw new p.ValueError(`State ${t} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>n.keep(e.clone()))})}apply(e,t){// TODO(cais): Figure out whether initialState is in kwargs or inputs.
let r=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});let n=b(e,r,s,this.numConstants);e=n.inputs,r=n.initialState,s=n.constants;// If any of `initial_state` or `constants` are specified and are
// `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify
// the input_spec to include them.
let a=[],o=[];if(null!=r){for(let e of(t.initialState=r,a=a.concat(r),this.stateSpec=[],r))this.stateSpec.push(new u.InputSpec({shape:e.shape}));// TODO(cais): Use the following instead.
// this.stateSpec = initialState.map(state => new InputSpec({shape:
// state.shape}));
o=o.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),// TODO(cais): Add this.constantsSpec.
this.numConstants=s.length);let i=a[0]instanceof u.SymbolicTensor;if(!i)return super.apply(e,t);{// Compute full input spec, including state and constants.
let r=[e].concat(a),s=this.inputSpec.concat(o),n=this.inputSpec;this.inputSpec=s;let i=super.apply(r,t);return this.inputSpec=n,i}}// tslint:disable-next-line:no-any
call(e,t){// Input shape: `[samples, time (padded with zeros), input_dim]`.
// Note that the .build() method of subclasses **must** define
// this.inputSpec and this.stateSpec owith complete input shapes.
return(0,n.tidy)(()=>{let r=null==t?null:t.mask,s=null==t?null:t.training,n=null==t?null:t.initialState;e=(0,m.getExactlyOneTensor)(e),null==n&&(n=this.stateful?this.states_:this.getInitialState(e));let a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(n.length!==a)throw new p.ValueError(`RNN Layer has ${a} state(s) but was passed ${n.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let o={training:s},i=y((e,t)=>{// `inputs` and `states` are concatenated to form a single `Array` of
// `tf.Tensor`s as the input to `cell.call()`.
let r=this.cell.call([e].concat(t),o);// Marshall the return value into output and new states.
return[r[0],r.slice(1)]},e,n,this.goBackwards,r,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,s);let d=this.returnSequences?u:l;return(// TODO(cais): Porperty set learning phase flag.
this.returnState?[d].concat(c):d)})}getInitialState(e){return(0,n.tidy)(()=>{// Build an all-zero tensor of shape [samples, outputDim].
// [Samples, timeSteps, inputDim].
let t=n.zeros(e.shape);return(// [Samples].
t=n.sum(t,[1,2]),t=o.expandDims(t),Array.isArray(this.cell.stateSize))?this.cell.stateSize.map(e=>e>1?o.tile(t,[1,e]):t):this.cell.stateSize>1?[o.tile(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return(// Porting Note: In TypeScript, `this` is always an instance of `Layer`.
this.trainable?this.cell.nonTrainableWeights:this.cell.weights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){let e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);let r=this.cell.getConfig();// this order is necessary, to prevent cell name from replacing layer name
return this.getClassName()===j.className&&(t.cell={className:this.cell.getClassName(),config:r}),Object.assign({},r,e,t)}/** @nocollapse */static fromConfig(e,t,r={}){let s=t.cell,n=(0,x.deserialize)(s,r);return new e(Object.assign(t,{cell:n}))}}/** @nocollapse */j.className="RNN",(0,n.serialization).registerClass(j);class _ extends u.Layer{}class k extends _{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,(0,h.assertPositiveInteger)(this.units,"units"),this.activation=(0,a.getActivation)(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=(0,c.getInitializer)(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=(0,c.getInitializer)(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=(0,c.getInitializer)(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=(0,d.getRegularizer)(e.kernelRegularizer),this.recurrentRegularizer=(0,d.getRegularizer)(e.recurrentRegularizer),this.biasRegularizer=(0,d.getRegularizer)(e.biasRegularizer),this.kernelConstraint=(0,l.getConstraint)(e.kernelConstraint),this.recurrentConstraint=(0,l.getConstraint)(e.recurrentConstraint),this.biasConstraint=(0,l.getConstraint)(e.biasConstraint),this.dropout=f.min([1,f.max([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=f.min([1,f.max([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=(0,m.getExactlyOneShape)(e),// TODO(cais): Use regularizer.
this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}// Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
//   `inputs` and `states`. Here, the two tensors are combined into an
//   `Tensor[]` Array as the first input argument.
//   Similarly, PyKeras' equivalent of this method returns two values:
//    `output` and `[output]`. Here the two are combined into one length-2
//    `Tensor[]`, consisting of `output` repeated.
call(e,t){return(0,n.tidy)(()=>{let r;if(2!==e.length)throw new p.ValueError(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let s=e[1];e=e[0];let a=null!=t.training&&t.training;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=E({ones:()=>n.onesLike(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=E({ones:()=>n.onesLike(s),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,l=this.recurrentDropoutMask;r=null!=i?o.dot(n.mul(e,i),this.kernel.read()):o.dot(e,this.kernel.read()),null!=this.bias&&(r=o.biasAdd(r,this.bias.read())),null!=l&&(s=n.mul(s,l));let u=n.add(r,o.dot(s,this.recurrentKernel.read()));// TODO(cais): Properly set learning phase on output tensor?
return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:(0,a.serializeActivation)(this.activation),useBias:this.useBias,kernelInitializer:(0,c.serializeInitializer)(this.kernelInitializer),recurrentInitializer:(0,c.serializeInitializer)(this.recurrentInitializer),biasInitializer:(0,c.serializeInitializer)(this.biasInitializer),kernelRegularizer:(0,d.serializeRegularizer)(this.kernelRegularizer),recurrentRegularizer:(0,d.serializeRegularizer)(this.recurrentRegularizer),biasRegularizer:(0,d.serializeRegularizer)(this.biasRegularizer),activityRegularizer:(0,d.serializeRegularizer)(this.activityRegularizer),kernelConstraint:(0,l.serializeConstraint)(this.kernelConstraint),recurrentConstraint:(0,l.serializeConstraint)(this.recurrentConstraint),biasConstraint:(0,l.serializeConstraint)(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}/** @nocollapse */k.className="SimpleRNNCell",(0,n.serialization).registerClass(k);class I extends j{constructor(e){e.cell=new k(e),super(e);// TODO(cais): Add activityRegularizer.
}call(e,t){return(0,n.tidy)(()=>{null!=this.cell.dropoutMask&&(n.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(n.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}/** @nocollapse */static fromConfig(e,t){return new e(t)}}/** @nocollapse */I.className="SimpleRNN",(0,n.serialization).registerClass(I);class w extends _{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new p.ValueError("GRUCell does not support reset_after parameter set to true.");this.units=e.units,(0,h.assertPositiveInteger)(this.units,"units"),this.activation=(0,a.getActivation)(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=(0,a.getActivation)(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=(0,c.getInitializer)(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=(0,c.getInitializer)(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=(0,c.getInitializer)(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=(0,d.getRegularizer)(e.kernelRegularizer),this.recurrentRegularizer=(0,d.getRegularizer)(e.recurrentRegularizer),this.biasRegularizer=(0,d.getRegularizer)(e.biasRegularizer),this.kernelConstraint=(0,l.getConstraint)(e.kernelConstraint),this.recurrentConstraint=(0,l.getConstraint)(e.recurrentConstraint),this.biasConstraint=(0,l.getConstraint)(e.biasConstraint),this.dropout=f.min([1,f.max([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=f.min([1,f.max([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=(0,m.getExactlyOneShape)(e);let t=e[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,// Porting Notes: Unlike the PyKeras implementation, we perform slicing
//   of the weights and bias in the call() method, at execution time.
this.built=!0}call(e,t){return(0,n.tidy)(()=>{let r,s,a;if(2!==e.length)throw new p.ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);let i=null!=t.training&&t.training,l=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=E({ones:()=>n.onesLike(e),rate:this.dropout,training:i,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=E({ones:()=>n.onesLike(l),rate:this.recurrentDropout,training:i,count:3,dropoutFunc:this.dropoutFunc}));let u=this.dropoutMask,c=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=n.mul(e,u[0]));let d=o.dot(e,this.kernel.read());this.useBias&&(d=o.biasAdd(d,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(l=n.mul(l,c[0]));let h=this.recurrentKernel.read(),[f,m]=n.split(h,[2*this.units,this.units],h.rank-1),g=o.dot(l,f),[x,b,y]=n.split(d,3,d.rank-1),[j,_]=n.split(g,2,g.rank-1);r=this.recurrentActivation.apply(n.add(x,j)),s=this.recurrentActivation.apply(n.add(b,_));let k=o.dot(n.mul(s,l),m);a=this.activation.apply(n.add(y,k));let I=n.add(n.mul(r,l),n.mul(n.add(1,n.neg(r)),a));// TODO(cais): Add use_learning_phase flag properly.
return[I,I]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:(0,a.serializeActivation)(this.activation),recurrentActivation:(0,a.serializeActivation)(this.recurrentActivation),useBias:this.useBias,kernelInitializer:(0,c.serializeInitializer)(this.kernelInitializer),recurrentInitializer:(0,c.serializeInitializer)(this.recurrentInitializer),biasInitializer:(0,c.serializeInitializer)(this.biasInitializer),kernelRegularizer:(0,d.serializeRegularizer)(this.kernelRegularizer),recurrentRegularizer:(0,d.serializeRegularizer)(this.recurrentRegularizer),biasRegularizer:(0,d.serializeRegularizer)(this.biasRegularizer),activityRegularizer:(0,d.serializeRegularizer)(this.activityRegularizer),kernelConstraint:(0,l.serializeConstraint)(this.kernelConstraint),recurrentConstraint:(0,l.serializeConstraint)(this.recurrentConstraint),biasConstraint:(0,l.serializeConstraint)(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}/** @nocollapse */w.className="GRUCell",(0,n.serialization).registerClass(w);class C extends j{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new w(e),super(e);// TODO(cais): Add activityRegularizer.
}call(e,t){return(0,n.tidy)(()=>{null!=this.cell.dropoutMask&&(n.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(n.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}/** @nocollapse */static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}/** @nocollapse */C.className="GRU",(0,n.serialization).registerClass(C);class S extends _{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,(0,h.assertPositiveInteger)(this.units,"units"),this.activation=(0,a.getActivation)(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=(0,a.getActivation)(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=(0,c.getInitializer)(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=(0,c.getInitializer)(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=(0,c.getInitializer)(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=(0,d.getRegularizer)(e.kernelRegularizer),this.recurrentRegularizer=(0,d.getRegularizer)(e.recurrentRegularizer),this.biasRegularizer=(0,d.getRegularizer)(e.biasRegularizer),this.kernelConstraint=(0,l.getConstraint)(e.kernelConstraint),this.recurrentConstraint=(0,l.getConstraint)(e.recurrentConstraint),this.biasConstraint=(0,l.getConstraint)(e.biasConstraint),this.dropout=f.min([1,f.max([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=f.min([1,f.max([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let r;e=(0,m.getExactlyOneShape)(e);let s=e[e.length-1];if(this.kernel=this.addWeight("kernel",[s,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){let e=this.biasInitializer,s=this.units;r=new(/** @nocollapse */(t=class extends c.Initializer{apply(t,r){// TODO(cais): More informative variable names?
let n=e.apply([s]),a=new(0,c.Ones)().apply([s]),i=e.apply([2*s]);return o.concatAlongFirstAxis(o.concatAlongFirstAxis(n,a),i)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;// Porting Notes: Unlike the PyKeras implementation, we perform slicing
//   of the weights and bias in the call() method, at execution time.
this.built=!0}call(e,t){return(0,n.tidy)(()=>{let r,s,a,i;let l=null!=t.training&&t.training;if(3!==e.length)throw new p.ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let u=e[1],c=e[2];// Previous memory state.
e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=E({ones:()=>n.onesLike(e),rate:this.dropout,training:l,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=E({ones:()=>n.onesLike(u),rate:this.recurrentDropout,training:l,count:4,dropoutFunc:this.dropoutFunc}));let d=this.dropoutMask,h=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=n.mul(e,d[0]));let f=o.dot(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(u=n.mul(u,h[0])),f=n.add(f,o.dot(u,this.recurrentKernel.read())),this.useBias&&(f=o.biasAdd(f,this.bias.read()));let[m,g,x,b]=n.split(f,4,f.rank-1);r=this.recurrentActivation.apply(m),s=this.recurrentActivation.apply(g),a=n.add(n.mul(s,c),n.mul(r,this.activation.apply(x))),i=this.recurrentActivation.apply(b);let y=n.mul(i,this.activation.apply(a));// TODO(cais): Add use_learning_phase flag properly.
return[y,y,a]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:(0,a.serializeActivation)(this.activation),recurrentActivation:(0,a.serializeActivation)(this.recurrentActivation),useBias:this.useBias,kernelInitializer:(0,c.serializeInitializer)(this.kernelInitializer),recurrentInitializer:(0,c.serializeInitializer)(this.recurrentInitializer),biasInitializer:(0,c.serializeInitializer)(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:(0,d.serializeRegularizer)(this.kernelRegularizer),recurrentRegularizer:(0,d.serializeRegularizer)(this.recurrentRegularizer),biasRegularizer:(0,d.serializeRegularizer)(this.biasRegularizer),activityRegularizer:(0,d.serializeRegularizer)(this.activityRegularizer),kernelConstraint:(0,l.serializeConstraint)(this.kernelConstraint),recurrentConstraint:(0,l.serializeConstraint)(this.recurrentConstraint),biasConstraint:(0,l.serializeConstraint)(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}/** @nocollapse */S.className="LSTMCell",(0,n.serialization).registerClass(S);class T extends j{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new S(e),super(e);// TODO(cais): Add activityRegularizer.
}call(e,t){return(0,n.tidy)(()=>{null!=this.cell.dropoutMask&&(n.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(n.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:s,initialState:a})})}/** @nocollapse */static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}/** @nocollapse */T.className="LSTM",(0,n.serialization).registerClass(T);class N extends _{constructor(e){super(e),this.cells=e.cells}get stateSize(){// States are a flat list in reverse order of the cell stack.
// This allows perserving the requirement `stack.statesize[0] ===
// outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,
// assuming one LSTM has states `[h, c]`.
let e=[];for(let t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return(0,n.tidy)(()=>{let r;let s=e.slice(1),n=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?n.push(s.splice(0,e.stateSize.length)):n.push(s.splice(0,1));n.reverse();// Call the cells in order and store the returned states.
let a=[];for(let o=0;o<this.cells.length;++o){let i=this.cells[o];s=n[o],r=0===o?[e[0]].concat(s):[r[0]].concat(s),r=i.call(r,t),a.push(r.slice(1))}for(let e of(// Format the new states as a flat list in reverse cell order.
s=[],a.slice().reverse()))s.push(...e);return[r[0]].concat(s)})}build(e){let t;(0,m.isArrayOfShapes)(e)&&// const constantShape = inputShape.slice(1);
(e=e[0]),this.cells.forEach((r,s)=>{(0,i.nameScope)(`RNNCell_${s}`,()=>{// TODO(cais): Take care of input constants.
r.build(e),t=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){let e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}/** @nocollapse */static fromConfig(e,t,r={}){let s=[];for(let e of t.cells)s.push((0,x.deserialize)(e,r));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];let e=[];for(let t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}/**
     * Retrieve the weights of a the model.
     *
     * @returns A flat `Array` of `tf.Tensor`s.
     */getWeights(){let e=[];for(let t of this.cells)e.push(...t.weights);return(0,g.batchGetValue)(e)}/**
     * Set the weights of the model.
     *
     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
     *     the output of `getWeights()`.
     */setWeights(e){let t=[];for(let r of this.cells){let s=r.weights.length,n=e.splice(s);for(let e=0;e<r.weights.length;++e)t.push([r.weights[e],n[e]])}(0,g.batchSetValue)(t)}}function E(e){let{ones:t,rate:r,training:s=!1,count:a=1,dropoutFunc:i}=e,l=()=>null!=i?i(t(),r):o.dropout(t(),r),u=()=>o.inTrainPhase(l,t,s);// just in case count is provided with null or undefined
if(!a||a<=1)return n.keep(u().clone());let p=Array(a).fill(void 0).map(u);return p.map(e=>n.keep(e.clone()))}/** @nocollapse */N.className="StackedRNNCells",(0,n.serialization).registerClass(N)},{"@tensorflow/tfjs-core":"U1ela","../activations":"UODIR","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/generic_utils":"ia9DW","../utils/math_utils":"4BJyC","../utils/types_utils":"kXuwT","../variables":"lkqSL","./serialization":"fw7HP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kBHor:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Basic Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Dropout",()=>m),s.export(r,"SpatialDropout1D",()=>g),s.export(r,"Dense",()=>x),s.export(r,"Flatten",()=>b),s.export(r,"Activation",()=>y),s.export(r,"RepeatVector",()=>j),s.export(r,"Reshape",()=>_),s.export(r,"Permute",()=>k),s.export(r,"Masking",()=>I);var n=e("@tensorflow/tfjs-core"),a=e("../activations"),o=e("../backend/tfjs_backend"),i=e("../constraints"),l=e("../engine/topology"),u=e("../errors"),p=e("../initializers"),c=e("../regularizers"),d=e("../utils/generic_utils"),h=e("../utils/math_utils"),f=e("../utils/types_utils");class m extends l.Layer{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),// So that the scalar doesn't get tidied up between executions.
this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;let t=e.shape,r=[];for(let e=0;e<this.noiseShape.length;++e)r.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return r}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,f.getExactlyOneTensor)(e);if(0<this.rate&&this.rate<1){let e=null!=t.training&&t.training,s=this.getNoiseShape(r),n=o.inTrainPhase(()=>o.dropout(r,this.rate,s,this.seed),()=>r,e);return n}return e})}getConfig(){let e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}/** @nocollapse */m.className="Dropout",(0,n.serialization).registerClass(m);class g extends m{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){let t=e.shape;return[t[0],1,t[2]]}}/** @nocollapse */g.className="SpatialDropout1D",(0,n.serialization).registerClass(g);class x extends l.Layer{constructor(e){if(super(e),// Default activation: Linear (none).
this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){// This logic is copied from Layer's constructor, since we can't
// do exactly what the Python constructor does for Dense().
let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,(0,d.assertPositiveInteger)(this.units,"units"),this.activation=(0,a.getActivation)(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=(0,p.getInitializer)(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=(0,p.getInitializer)(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=(0,i.getConstraint)(e.kernelConstraint),this.biasConstraint=(0,i.getConstraint)(e.biasConstraint),this.kernelRegularizer=(0,c.getRegularizer)(e.kernelRegularizer),this.biasRegularizer=(0,c.getRegularizer)(e.biasRegularizer),this.activityRegularizer=(0,c.getRegularizer)(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){e=(0,f.getExactlyOneShape)(e);let t=e[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){e=(0,f.getExactlyOneShape)(e);let t=e.slice();return t[t.length-1]=this.units,t}call(e,t){return(0,n.tidy)(()=>{let r;this.invokeCallHook(e,t);// Dense layer accepts only a single input.
let s=(0,f.getExactlyOneTensor)(e),n=(0,d.mapActivationToFusedKernel)(this.activation.getClassName());return null!=n?r=o.dot(s,this.kernel.read(),n,this.bias?this.bias.read():null):(r=o.dot(s,this.kernel.read()),null!=this.bias&&(r=o.biasAdd(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){let e={units:this.units,activation:(0,a.serializeActivation)(this.activation),useBias:this.useBias,kernelInitializer:(0,p.serializeInitializer)(this.kernelInitializer),biasInitializer:(0,p.serializeInitializer)(this.biasInitializer),kernelRegularizer:(0,c.serializeRegularizer)(this.kernelRegularizer),biasRegularizer:(0,c.serializeRegularizer)(this.biasRegularizer),activityRegularizer:(0,c.serializeRegularizer)(this.activityRegularizer),kernelConstraint:(0,i.serializeConstraint)(this.kernelConstraint),biasConstraint:(0,i.serializeConstraint)(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */x.className="Dense",(0,n.serialization).registerClass(x);class b extends l.Layer{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){for(let t of(e=(0,f.getExactlyOneShape)(e)).slice(1))if(null==t)throw new u.ValueError(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],(0,h.arrayProd)(e,1)]}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,f.getExactlyOneTensor)(e);if("channelsFirst"===this.dataFormat&&r.rank>1){let e=[0];for(let t=2;t<r.rank;++t)e.push(t);e.push(1),r=(0,n.transpose)(r,e)}return o.batchFlatten(r)})}getConfig(){let e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);let t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */b.className="Flatten",(0,n.serialization).registerClass(b);class y extends l.Layer{constructor(e){super(e),this.supportsMasking=!0,this.activation=(0,a.getActivation)(e.activation)}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,f.getExactlyOneTensor)(e);return this.activation.apply(r)})}getConfig(){let e={activation:(0,a.serializeActivation)(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */y.className="Activation",(0,n.serialization).registerClass(y);class j extends l.Layer{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return(0,n.tidy)(()=>(e=(0,f.getExactlyOneTensor)(e),o.repeat(e,this.n)))}getConfig(){let e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */j.className="RepeatVector",(0,n.serialization).registerClass(j);class _ extends l.Layer{constructor(e){super(e),this.targetShape=e.targetShape;// Make sure that all unknown dimensions are represented as `null`.
for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}/**
     * Finds and replaces a missing dimension in output shape.
     *
     * This is a near direct port of the internal Numpy function
     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
     *
     * @param inputShape: Original shape of array begin reshape.
     * @param outputShape: Target shape of the array, with at most a single
     * `null` or negative number, which indicates an underdetermined dimension
     * that should be derived from `inputShape` and the known dimensions of
     *   `outputShape`.
     * @returns: The output shape with `null` replaced with its computed value.
     * @throws: ValueError: If `inputShape` and `outputShape` do not match.
     */fixUnknownDimension(e,t){let r="Total size of new array must be unchanged.",s=t.slice(),n=1,a=null;for(let e=0;e<s.length;++e){let t=s[e];if(this.isUnknown(t)){if(null===a)a=e;else throw new u.ValueError("Can only specifiy one unknown dimension.")}else n*=t}let o=(0,h.arrayProd)(e);if(null!==a){if(0===n||o%n!=0)throw new u.ValueError(r);s[a]=o/n}else if(o!==n)throw new u.ValueError(r);return s}computeOutputShape(e){let t=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,f.getExactlyOneTensor)(e),s=r.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return(0,n.reshape)(r,a)})}getConfig(){let e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */_.className="Reshape",(0,n.serialization).registerClass(_);class k extends l.Layer{constructor(e){if(super(e),null==e.dims)throw Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);// Check the validity of the permutation indices.
let t=(0,h.range)(1,e.dims.length+1);if(!(0,n.util).arraysEqual(e.dims.slice().sort(),t))throw Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new l.InputSpec({ndim:this.dims.length+1})]}computeOutputShape(e){e=(0,f.getExactlyOneShape)(e);let t=e.slice();return this.dims.forEach((r,s)=>{t[s+1]=e[r]}),t}call(e,t){return(0,n.transpose)((0,f.getExactlyOneTensor)(e),this.dimsIncludingBatch)}getConfig(){let e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */k.className="Permute",(0,n.serialization).registerClass(k);class I extends l.Layer{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e?this.maskValue=null==e.maskValue?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){let r=(0,f.getExactlyOneTensor)(e);return(0,n.any)((0,n.notEqual)(r,this.maskValue),-1)}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,f.getExactlyOneTensor)(e),s=(0,n.any)((0,n.notEqual)(r,this.maskValue),-1,!0),a=(0,n.mul)(r,(0,n.cast)(s,r.dtype));return a})}}/** @nocollapse */I.className="Masking",(0,n.serialization).registerClass(I)},{"@tensorflow/tfjs-core":"U1ela","../activations":"UODIR","../backend/tfjs_backend":"hBUWZ","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/generic_utils":"ia9DW","../utils/math_utils":"4BJyC","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9PNRM":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Embedding Layer.
 *
 * Original source: keras/constraints.py
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Embedding",()=>h);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../constraints"),i=e("../engine/topology"),l=e("../errors"),u=e("../initializers"),p=e("../regularizers"),c=e("../utils/generic_utils"),d=e("../utils/types_utils");class h extends i.Layer{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){// Porting Note: This logic is copied from Layer's constructor, since we
// can't do exactly what the Python constructor does for Embedding().
// Specifically, the super constructor can not be called after the
// mutation of the `config` argument.
let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?// 'config.inputShape' were (None, )
this.batchInputShape=[t,null]:// 'config.inputShape' were (config.inputLength, )
this.batchInputShape=[t].concat(c.toList(e.inputLength))}this.inputDim=e.inputDim,c.assertPositiveInteger(this.inputDim,"inputDim"),this.outputDim=e.outputDim,c.assertPositiveInteger(this.outputDim,"outputDim"),this.embeddingsInitializer=(0,u.getInitializer)(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=(0,p.getRegularizer)(e.embeddingsRegularizer),this.activityRegularizer=(0,p.getRegularizer)(e.activityRegularizer),this.embeddingsConstraint=(0,o.getConstraint)(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}// Override warnOnIncompatibleInputShape because an embedding layer allows
// the input to have varying ranks.
warnOnIncompatibleInputShape(e){}computeMask(e,t){return(0,n.tidy)(()=>this.maskZero?(e=(0,d.getExactlyOneTensor)(e),(0,n.notEqual)(e,(0,n.zerosLike)(e))):null)}computeOutputShape(e){if(e=(0,d.getExactlyOneShape)(e),null==this.inputLength)return[...e,this.outputDim];// inputLength can be an array if input is 3D or higher.
let t=c.toList(this.inputLength);if(t.length!==e.length-1)throw new l.ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let s=0;s<t.length;++s){let n=t[s],a=e[s+1];if(null!=n&&null!=a&&n!==a)throw new l.ValueError(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==n&&(t[r]=a),r++}}return[e[0],...t,this.outputDim]}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);// Embedding layer accepts only a single input.
let r=(0,d.getExactlyOneTensor)(e);"int32"!==r.dtype&&(r=a.cast(r,"int32"));let s=a.gather(this.embeddings.read(),(0,n.reshape)(r,[r.size]));return(0,n.reshape)(s,(0,d.getExactlyOneShape)(this.computeOutputShape(r.shape)))})}getConfig(){let e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:(0,u.serializeInitializer)(this.embeddingsInitializer),embeddingsRegularizer:(0,p.serializeRegularizer)(this.embeddingsRegularizer),activityRegularizer:(0,p.serializeRegularizer)(this.activityRegularizer),embeddingsConstraint:(0,o.serializeConstraint)(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */h.className="Embedding",(0,n.serialization).registerClass(h)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jyZeF:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Merge Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Generic Merge layer for element-wise merge functions.
 *
 * Used to implement `Sum`, `Average`, `Concatenate`, etc.
 */s.export(r,"Merge",()=>d),s.export(r,"Add",()=>h),/**
 * Calculate the element-wise sum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Add` layer, by using no input argument
 *    or a single configuration argument. The resultant `Add` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const addLayer = tf.layers.add();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = addLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.add([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.add([input1, input2]).print();
 * // Gives [[11, 22], [33, 44]].
 *
 */s.export(r,"add",()=>f),s.export(r,"Multiply",()=>m),/**
 * Calculate the element-wise product of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Multiply` layer, by using no input argument
 *    or a single configuration argument. The resultant `Multiply` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const multiplyLayer = tf.layers.multiply();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = multiplyLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.multiply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.multiply([input1, input2]).print();
 * // Gives [[10, 40], [90, 160]].
 *
 */s.export(r,"multiply",()=>g),s.export(r,"Average",()=>x),/**
 * Calculate the element-wise arithmetic mean of inputs, which all have the same
 * shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Average` layer, by using no input argument
 *    or a single configuration argument. The resultant `Average` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const averageLayer = tf.layers.average();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = averageLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.average([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.average([input1, input2]).print();
 * // Gives [[5.5, 11], [16.5, 22]].
 *
 */s.export(r,"average",()=>b),s.export(r,"Maximum",()=>y),/**
 * Calculate the element-wise maximum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Maximum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Maximum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const maximumLayer = tf.layers.maximum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = maximumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.maximum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.maximum([input1, input2]).print();
 * // Gives [[10, 20], [30, 40]].
 *
 */s.export(r,"maximum",()=>j),s.export(r,"Minimum",()=>_),/**
 * Calculate the element-wise minimum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Minimum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Minimum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const minimumLayer = tf.layers.minimum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = minimumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.minimum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.minimum([input1, input2]).print();
 * // Gives [[1, 2], [3, 4]].
 *
 */s.export(r,"minimum",()=>k),s.export(r,"Concatenate",()=>I),/**
 * Concatenate an `Array` of inputs.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Concatenate` layer, by using no input argument
 *    or a single configuration argument. The resultant `Concatenate` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const concatLayer = tf.layers.concatenate();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = concatLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 7], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = tf.layers.concatenate([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);
 * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);
 * tf.layers.concatenate([input1, input2]).print();
 * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].
 *
 */s.export(r,"concatenate",()=>w),s.export(r,"Dot",()=>S);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../engine/topology"),i=e("../errors"),l=e("../losses"),u=e("../utils/generic_utils"),p=e("../utils/math_utils"),c=e("../utils/types_utils");class d extends o.Layer{constructor(e){super(e||{}),this.supportsMasking=!0}/**
     * Logic for merging multiple tensors, to be overridden by subclasses.
     * @param inputs
     */mergeFunction(e){throw new i.NotImplementedError}/**
     * Computes the shape of the result of an elementwise operation.
     *
     * @param shape1: Shape of the first tensor.
     * @param shape2: Shape of the second tensor.
     * @returns Expected output shape when an elementwise operation is carried
     *   out on 2 tensors with shapes `shape1` and `shape2`.
     * @throws ValueError: If `shape1` and `shape2` are not compatible for
     *   element-wise operations.
     */computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;let r=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){let n=e[e.length-t.length+s],a=t[s];if(null==n||null==a||n<0||a<0)r.push(null);else if(1===n)r.push(a);else if(1===a)r.push(n);else{if(n!==a)throw new i.ValueError("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));r.push(n)}}return r}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[(0,c.getExactlyOneShape)(e)]),e.length<2)throw new i.ValueError(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);// Make sure that there is at most one unique batch size among the input
// shapes.
let t=[];for(let r of e)null!=r&&null!==r[0]&&t.push(r[0]);if((t=u.unique(t)).length>1)throw new i.ValueError(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let r=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){let s=null==e[t]?null:e[t].slice(1);r=this.computeElementwiseOpOutputShape(r,s)}// If the inputs have different ranks, we have to reshape them to make them
// broadcastable.
let s=e.map(e=>e.length);-1===e.indexOf(null)&&1===u.unique(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return(0,n.tidy)(()=>{if(!this.reshapeRequired)return this.mergeFunction(e);{let t=[],r=e.map(e=>e.rank);if(-1===r.indexOf(null)){// If ranks of all inputs are available, we simply expand each of them
// at axis=1 until all of them have the same rank.
let s=p.max(r);for(let r of e){let e=r.rank;for(let t=0;t<s-e;++t)r=a.expandDims(r,1);t.push(r)}return this.mergeFunction(t)}{// Transpose all inputs so that batch size is the last dimension.
// [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]
let r=!1;for(let s of e){let e=s.rank;if(null==e){let e=s.shape,a=e[0],o=e.slice(1).concat([a]),i=n.reshape(s,[a].concat(p.arrayProd(e.slice(1))));i=n.transpose(i,[1,0]),i=n.reshape(i,o),t.push(i),r=!0}else if(e>1){let a=p.range(1,e).concat([0]);t.push(n.transpose(s,a)),r=!0}else t.push(s)}let s=this.mergeFunction(t),a=s.rank;if(r){// If inputs have been transposed, we have to transpose the output
// too.
if(null==a){let e=s.shape,t=e.length,r=e[t-1],a=[r].concat(e.slice(0,e.length-1));s=n.reshape(n.transpose(n.reshape(s,[-1,r]),[1,0]),a)}else if(a>1){let e=[a-1].concat(p.range(0,a-1));s=n.transpose(s,e)}}return s}}})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){let s=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let r=[];for(let t of e)null!=t&&null!==t[0]&&r.push(t[0]);return 1===(r=u.unique(r)).length?r.concat(t):[null].concat(t)}computeMask(e,t){return n.tidy(()=>{if(null==t)return null;if(!Array.isArray(t))throw new i.ValueError("`mask` should be an Array");if(!Array.isArray(e))throw new i.ValueError("`inputs` should be an Array");if(t.length!==e.length)throw new i.ValueError(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let r=(t=t.map(e=>null==e?e:n.expandDims(e,0)))[0];for(let e=1;e<t.length-1;++e)r=n.logicalAnd(r,t[e]);return r})}}class h extends d{constructor(e){super(e)}mergeFunction(e){return(0,n.tidy)(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=n.add(t,e[r]);return t})}}function f(e){if(!Array.isArray(e))return new h(e);{let t=new h({});return t.apply(e)}}/** @nocollapse */h.className="Add",(0,n.serialization).registerClass(h);class m extends d{constructor(e){super(e)}mergeFunction(e){return(0,n.tidy)(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=n.mul(t,e[r]);return t})}}function g(e){if(!Array.isArray(e))return new m(e);{let t=new m({});return t.apply(e)}}/** @nocollapse */m.className="Multiply",(0,n.serialization).registerClass(m);class x extends d{constructor(e){super(e)}mergeFunction(e){return(0,n.tidy)(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=n.add(t,e[r]);return n.mul(1/e.length,t)})}}function b(e){if(!Array.isArray(e))return new x(e);{let t=new x({});return t.apply(e)}}/** @nocollapse */x.className="Average",(0,n.serialization).registerClass(x);class y extends d{constructor(e){super(e)}mergeFunction(e){return(0,n.tidy)(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=n.maximum(t,e[r]);return t})}}function j(e){if(!Array.isArray(e))return new y(e);{let t=new y({});return t.apply(e)}}/** @nocollapse */y.className="Maximum",(0,n.serialization).registerClass(y);class _ extends d{constructor(e){super(e)}mergeFunction(e){return(0,n.tidy)(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=n.minimum(t,e[r]);return t})}}function k(e){if(!Array.isArray(e))return new _(e);{let t=new _({});return t.apply(e)}}/** @nocollapse */_.className="Minimum",(0,n.serialization).registerClass(_);class I extends d{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){// Used purely for shape validation.]
if(!(Array.isArray(e)&&Array.isArray(e[0]))||1===e.length)throw new i.ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(let r of e)if(null!=r){t=!1;break}if(t)return;let r=[];for(let t=0;t<e.length;++t){let s=e[t].slice();s.splice(this.axis,1);let a=!1;for(let e of r)if((0,n.util).arraysEqual(e,s)){a=!0;break}a||r.push(s)}if(r.length>1)throw new i.ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,n.tidy)(()=>a.concatenate(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new i.ValueError("A `Concatenate` layer should be called on a list of inputs.");let t=e[0].slice(),r=this.axis<0?t.length+this.axis:this.axis;// Porting Note: the line above is because TypeScript doesn't support
//   negative indices.
for(let s of e.slice(1)){if(null==t[r]||null==s[r]){t[r]=null;break}t[r]+=s[r]}return t}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new i.ValueError("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new i.ValueError("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new i.ValueError(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return n.tidy(()=>{let r=!0;if(t.forEach(e=>{if(null!=e){r=!1;return}}),r)return null;let s=[];for(let r=0;r<e.length;++r)null==t[r]?s.push(n.cast(n.onesLike(e[r]),"bool")):t[r].rank<e[r].rank?s.push(n.expandDims(t[r],-1)):s.push(t[r]);let a=n.concat(s,this.axis);return n.all(a,-1,!1)})}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function w(e){if(!Array.isArray(e))return new I(e);{let t=new I({});return t.apply(e)}}/**
 * Interpretable potentially negative axis index.
 *
 * For example, given axis = -1, and dim = 3, this function will return 2.
 *
 * @param axis The axis index, may be a positive, zero or negative integer.
 * @param dim Total number of dimensions, a positive integer.
 * @returns A non-negative axis index equivalent to the input `axis`.
 */function C(e,t){for(;e<0;)e+=t;return e}/** @nocollapse */I.className="Concatenate",(0,n.serialization).registerClass(I);class S extends d{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){n.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0],r=e[1];if(t.length>3||r.length>3)throw new i.NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");let s=this.interpretAxes(t,r);if(t[s[0]]!==r[s[1]])throw new i.ValueError(`Dimension incompatibility: ${t[s[0]]} !== ${r[s[1]]}`)}mergeFunction(e){let t;if(2!==e.length)throw new i.ValueError(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let r=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,r)=>C(t,e[r].shape.length)):[C(this.axes,r.shape.length),C(this.axes,s.shape.length)],this.normalize&&(r=(0,l.l2Normalize)(r,t[0]),s=(0,l.l2Normalize)(s,t[1])),function(e,t,r){if(e.shape.length>3||t.shape.length>3)throw new i.NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");if(n.util.assert(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),n.util.assert(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof r&&(r=[r,r]),"complex64"===e.dtype||"complex64"===t.dtype)throw new i.NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");let s=e.shape.length,a=t.shape.length;null==r&&(r=[s-1,a-2]);let o=r;return n.tidy(()=>{let r,i;if(s>a){r=s-a;let e=[];for(let t=0;t<r;++t)e.push(1);t=n.reshape(t,t.shape.concat(e))}else if(a>s){r=a-s;let t=[];for(let e=0;e<r;++e)t.push(1);e=n.reshape(e,e.shape.concat(t))}else r=0;if(2===e.shape.length&&2===t.shape.length)i=o[0]===o[1]?n.sum(n.mul(e,t),o[0]):n.sum(n.mul(n.transpose(e,[1,0]),t),o[1]);else{let r=o[0]!==e.shape.length-1,s=o[1]===t.shape.length-1;i=n.matMul(e,t,r,s)}if(r>0){let e;e=s>a?s+a-3:s-1;let t=[];for(let s=e;s<e+r;++s)t.push(s);i=n.squeeze(i,t)}return 1===i.shape.length&&(i=n.expandDims(i,1)),i})}(r,s,t)}interpretAxes(e,t){return Array.isArray(this.axes)?this.axes:[C(this.axes,e.length),C(this.axes,t.length)]}computeOutputShape(e){n.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0].slice(),r=e[1].slice();if(t.length>3||r.length>3)throw new i.NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");let s=this.interpretAxes(t,r);t.splice(s[0],1),r.splice(s[1],1),r.splice(0,1);let a=t.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){let e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */S.className="Dot",(0,n.serialization).registerClass(S)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../engine/topology":"3moPG","../errors":"2onZT","../losses":"679KB","../utils/generic_utils":"ia9DW","../utils/math_utils":"4BJyC","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8Jwpa":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Noise Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"GaussianNoise",()=>l),s.export(r,"GaussianDropout",()=>u),/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 */s.export(r,"AlphaDropout",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../engine/topology"),i=e("../utils/types_utils");class l extends o.Layer{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,i.getExactlyOneTensor)(e),s=a.inTrainPhase(()=>(0,n.add)(a.randomNormal(r.shape,0,this.stddev),r),()=>r,t.training||!1);return s})}}/** @nocollapse */l.className="GaussianNoise",(0,n.serialization).registerClass(l);class u extends o.Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t);let r=(0,i.getExactlyOneTensor)(e);return this.rate>0&&this.rate<1?a.inTrainPhase(()=>{let e=Math.sqrt(this.rate/(1-this.rate));return(0,n.mul)(r,a.randomNormal(r.shape,1,e))},()=>r,t.training||!1):r})}}/** @nocollapse */u.className="GaussianDropout",(0,n.serialization).registerClass(u);class p extends o.Layer{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||(0,i.getExactlyOneTensor)(e).shape}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,n.tidy)(()=>{if(this.rate<1&&this.rate>0){let r=this._getNoiseShape(e);return a.inTrainPhase(()=>{let t=(0,i.getExactlyOneTensor)(e),s=(0,n.greaterEqual)((0,n.randomUniform)(r),this.rate);s=a.cast(s,"float32");// get default dtype.
// Get affine transformation params.
let o=((1-this.rate)*(1+3.09091329228798*this.rate))**-.5,l=-(-1.7580993408473766*o)*this.rate,u=(0,n.add)((0,n.mul)(t,s),(0,n.mul)((0,n.add)(s,-1),-1.7580993408473766));return(0,n.add)((0,n.mul)(u,o),l)},()=>(0,i.getExactlyOneTensor)(e),t.training||!1)}return e})}}/** @nocollapse */p.className="AlphaDropout",(0,n.serialization).registerClass(p)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../engine/topology":"3moPG","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dT7ej:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Normalization layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Applies batch normalization on x given mean, var, beta and gamma.
 *
 * I.e. returns:
 *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`
 *
 * @param x Input tensor.
 * @param mean Mean of batch.
 * @param variance Variance of batch.
 * @param beta Tensor with which to center the input.
 * @param gamma Tensor by which to scale the input.
 * @param epsilon Fuzz factor.
 * @returns The result of the batch normalization.
 */s.export(r,"batchNormalization",()=>h),/**
 * Batch normalization for use in training (not inference).
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */s.export(r,"normalizeBatchInTraining",()=>f),s.export(r,"BatchNormalization",()=>m),s.export(r,"LayerNormalization",()=>g);var n=e("@tensorflow/tfjs-core"),a=e("../constraints"),o=e("../engine/topology"),i=e("../errors"),l=e("../initializers"),u=e("../regularizers"),p=e("../utils/generic_utils"),c=e("../utils/math_utils"),d=e("../utils/types_utils");function h(e,t,r,s,a,o=.001){let l;if(2===e.rank)l=n.batchNorm2d(e,t,r,s,a,o);else if(3===e.rank)l=n.batchNorm3d(e,t,r,s,a,o);else if(4===e.rank)l=n.batchNorm4d(e,t,r,s,a,o);else throw new i.NotImplementedError(`batchNormalization is not implemented for array of rank ${e.rank} yet`);return l}function f(e,t,r,s,a=.001){return(0,n.util).arraysEqual(s.slice().sort(),c.range(0,e.rank-1))?/**
 * Non-broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */function(e,t,r,s,a=.001){return(0,n.tidy)(()=>{let o=n.moments(e,s),i=o.mean,l=o.variance,u=h(e,i,l,r,t,a);return[u,i,l]})}(e,t,r,s,a):/**
 * Broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */function(e,t,r,s,a=.001){return(0,n.tidy)(()=>{let o=n.moments(e,s),i=o.mean,l=o.variance,u=[];for(let t of c.range(0,e.rank))-1!==s.indexOf(t)?u.push(1):u.push(e.shape[t]);let p=(0,n.reshape)(i,u),d=(0,n.reshape)(l,u),f=null==t?null:(0,n.reshape)(t,u),m=null==r?null:(0,n.reshape)(r,u),g=h(e,p,d,m,f,a);return[g,i,l]})}(e,t,r,s,a)}class m extends o.Layer{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=(0,l.getInitializer)(e.betaInitializer||"zeros"),this.gammaInitializer=(0,l.getInitializer)(e.gammaInitializer||"ones"),this.movingMeanInitializer=(0,l.getInitializer)(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=(0,l.getInitializer)(e.movingVarianceInitializer||"ones"),this.betaConstraint=(0,a.getConstraint)(e.betaConstraint),this.gammaConstraint=(0,a.getConstraint)(e.gammaConstraint),this.betaRegularizer=(0,u.getRegularizer)(e.betaRegularizer),this.gammaRegularizer=(0,u.getRegularizer)(e.gammaRegularizer)}build(e){e=(0,d.getExactlyOneShape)(e);let t=this.axis>=0?this.axis:this.axis+e.length,r=e[t];if(null==r)throw new i.ValueError(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new o.InputSpec({ndim:e.length,axes:{[t]:r}})];let s=[r];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return(0,n.tidy)(()=>{let r=null!=t.training&&t.training,s=(0,d.getExactlyOneTensor)(e),a=s.shape,o=a.length,i=c.range(0,o),l=this.axis>=0?this.axis:this.axis+o;i.splice(l,1);let u=p.pyListRepeat(1,o);u[l]=a[l];let m=i.slice();m.sort();let g=!(0,n.util).arraysEqual(m,c.range(0,o).slice(0,o-1));if(!r)return(()=>{if(!g)return h(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon);{let e=(0,n.reshape)(this.movingMean.read(),u),t=(0,n.reshape)(this.movingVariance.read(),u),r=this.center?(0,n.reshape)(this.beta.read(),u):null,a=this.scale?(0,n.reshape)(this.gamma.read(),u):null;return h(s,e,t,r,a,this.epsilon)}})();let[x,b,y]=f(s,this.gamma.read(),this.beta.read(),i,this.epsilon),j=(e,t,r)=>{n.tidy(()=>{let s=e.read(),a=n.mul(n.sub(s,t),1-r);e.write(n.sub(s,a))})};return(()=>{j(this.movingMean,b,this.momentum),j(this.movingVariance,y,this.momentum)})(),x})}getConfig(){let e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:(0,l.serializeInitializer)(this.betaInitializer),gammaInitializer:(0,l.serializeInitializer)(this.gammaInitializer),movingMeanInitializer:(0,l.serializeInitializer)(this.movingMeanInitializer),movingVarianceInitializer:(0,l.serializeInitializer)(this.movingVarianceInitializer),betaRegularizer:(0,u.serializeRegularizer)(this.betaRegularizer),gammaRegularizer:(0,u.serializeRegularizer)(this.gammaRegularizer),betaConstraint:(0,a.serializeConstraint)(this.betaConstraint),gammaConstraint:(0,a.serializeConstraint)(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */m.className="BatchNormalization",(0,n.serialization).registerClass(m);class g extends o.Layer{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=(0,l.getInitializer)(e.betaInitializer||"zeros"),this.gammaInitializer=(0,l.getInitializer)(e.gammaInitializer||"ones"),this.betaRegularizer=(0,u.getRegularizer)(e.betaRegularizer),this.gammaRegularizer=(0,u.getRegularizer)(e.gammaRegularizer),this.supportsMasking=!0}build(e){e=(0,d.getExactlyOneShape)(e);let t=e.length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);// Further validate axes.
for(let e of this.axis)if(e<0||e>=t)throw Error(`Invalid axis: ${e}`);if(this.axis.length!==p.unique(this.axis).length)throw Error(`Found duplicate axes in: ${this.axis}`);let r=this.axis.map(t=>e[t]);this.scale?this.gamma=this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){let r=(0,d.getExactlyOneTensor)(e),s=r.shape,a=s.length;return(0,n.tidy)(()=>{let{mean:e,variance:t}=(0,n.moments)(r,this.axis,!0),o=p.pyListRepeat(1,a);for(let e of this.axis)o[e]=s[e];let i=e=>null!=e&&e.shape.length!==a?n.reshape(e,o):e,l=this.scale?i(this.gamma.read()):null,u=this.center?i(this.beta.read()):null,c=[],d=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(c.push(s[e]),d.push(1)):(c.push(1),d.push(s[e]));return e=n.tile(e,c),t=n.tile(t,c),null!=l&&(l=n.tile(l,d)),null!=u&&(u=n.tile(u,d)),h(r,e,t,u,l,this.epsilon)})}getConfig(){let e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:(0,l.serializeInitializer)(this.betaInitializer),gammaInitializer:(0,l.serializeInitializer)(this.gammaInitializer),betaRegularizer:(0,u.serializeRegularizer)(this.betaRegularizer),gammaRegularizer:(0,u.serializeRegularizer)(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */g.className="LayerNormalization",(0,n.serialization).registerClass(g)},{"@tensorflow/tfjs-core":"U1ela","../constraints":"kQcHo","../engine/topology":"3moPG","../errors":"2onZT","../initializers":"cqMie","../regularizers":"bzJO0","../utils/generic_utils":"ia9DW","../utils/math_utils":"4BJyC","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8Ztqp":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Padding Layers.
 */// Porting Note: In Python Keras, the padding layers are in convolutional.py,
//   but we decided to put them in a separate file (padding.ts) for clarity.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Pads the middle dimension of a 3D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of 2 integers, how many zeros to add at the start and
 *   end of the middle dimension (i.e., dimension 1).
 * @return A padded 3D `tf.Tensor`.
 */s.export(r,"temporalPadding",()=>u),/**
 * Pads the 2nd and 3rd dimensions of a 4D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of two `Array`s, each of which is an `Array` of two
 *   integers. The amount of padding at the beginning and end of the 2nd and 3rd
 *   dimensions, respectively.
 * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.
 * @return Padded 4D `tf.Tensor`.
 */s.export(r,"spatial2dPadding",()=>p),s.export(r,"ZeroPadding2D",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("../backend/common"),o=e("../engine/topology"),i=e("../errors"),l=e("../utils/types_utils");function u(e,t){return(0,n.tidy)(()=>{if(3!==e.rank)throw new i.ValueError(`temporalPadding expects input tensor to be 3-D, but received a ${e.rank}-D tensor.`);if(null==t&&(t=[1,1]),2!==t.length)throw new i.ValueError(`temporalPadding expects input padding pattern to be a length-2 array, but received a length-${t.length} array.`);let r=[[0,0],t,[0,0]];return n.pad(e,r)})}function p(e,t,r){return(0,n.tidy)(()=>{let s;if(4!==e.rank)throw new i.ValueError(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new i.ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r=(0,a.imageDataFormat)()),"channelsLast"!==r&&"channelsFirst"!==r)throw new i.ValueError(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);return s="channelsFirst"===r?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],n.pad(e,s)})}class c extends o.Layer{constructor(e){// TODO(cais): Maybe refactor the following logic surrounding `padding`
//   into a helper method.
if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?(0,a.imageDataFormat)():e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{let t,r;if(e.padding=e.padding,2!==e.padding.length)throw new i.ValueError(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new i.ValueError(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new i.ValueError(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[t,r]}this.inputSpec=[new o.InputSpec({ndim:4})]}computeOutputShape(e){let t,r;return(e=(0,l.getExactlyOneShape)(e),"channelsFirst"===this.dataFormat)?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,r]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,r,e[3]])}call(e,t){return(0,n.tidy)(()=>p((0,l.getExactlyOneTensor)(e),this.padding,this.dataFormat))}getConfig(){let e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}/** @nocollapse */c.className="ZeroPadding2D",(0,n.serialization).registerClass(c)},{"@tensorflow/tfjs-core":"U1ela","../backend/common":"02oHM","../engine/topology":"3moPG","../errors":"2onZT","../utils/types_utils":"kXuwT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1PWG0":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * TensorFlow.js Layers: Pooling Layers.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * 2D pooling.
 * @param x
 * @param poolSize
 * @param stridesdes strides. Defaults to [1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 2D pooling.
 */s.export(r,"pool2d",()=>f),/**
 * 3D pooling.
 * @param x
 * @param poolSize. Default to [1, 1, 1].
 * @param strides strides. Defaults to [1, 1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 3D pooling.
 */s.export(r,"pool3d",()=>m),/**
 * Abstract class for different pooling 1D layers.
 */s.export(r,"Pooling1D",()=>g),s.export(r,"MaxPooling1D",()=>x),s.export(r,"AveragePooling1D",()=>b),/**
 * Abstract class for different pooling 2D layers.
 */s.export(r,"Pooling2D",()=>y),s.export(r,"MaxPooling2D",()=>j),s.export(r,"AveragePooling2D",()=>_),/**
 * Abstract class for different pooling 3D layers.
 */s.export(r,"Pooling3D",()=>k),s.export(r,"MaxPooling3D",()=>I),s.export(r,"AveragePooling3D",()=>w),/**
 * Abstract class for different global pooling 1D layers.
 */s.export(r,"GlobalPooling1D",()=>C),s.export(r,"GlobalAveragePooling1D",()=>S),s.export(r,"GlobalMaxPooling1D",()=>T),/**
 * Abstract class for different global pooling 2D layers.
 */s.export(r,"GlobalPooling2D",()=>N),s.export(r,"GlobalAveragePooling2D",()=>E),s.export(r,"GlobalMaxPooling2D",()=>F);var n=e("@tensorflow/tfjs-core"),a=e("../backend/common"),o=e("../backend/tfjs_backend"),i=e("../common"),l=e("../engine/topology"),u=e("../errors"),p=e("../utils/conv_utils"),c=e("../utils/generic_utils"),d=e("../utils/types_utils"),h=e("./convolutional");function f(e,t,r,s,o,l){return(0,n.tidy)(()=>{let u;(0,i.checkDataFormat)(o),(0,i.checkPoolMode)(l),(0,i.checkPaddingMode)(s),null==r&&(r=[1,1]),null==s&&(s="valid"),null==o&&(o=(0,a.imageDataFormat)()),null==l&&(l="max"),// TODO(cais): Remove the preprocessing step once deeplearn.js supports
// dataFormat as an input argument.
e=(0,h.preprocessConv2DInput)(e,o);let p="same"===s?"same":"valid";return u="max"===l?n.maxPool(e,t,r,p):n.avgPool(e,t,r,p),"channelsFirst"===o&&(u=n.transpose(u,[0,3,1,2])),u})}function m(e,t,r,s,o,l){return(0,n.tidy)(()=>{let u;(0,i.checkDataFormat)(o),(0,i.checkPoolMode)(l),(0,i.checkPaddingMode)(s),null==r&&(r=[1,1,1]),null==s&&(s="valid"),null==o&&(o=(0,a.imageDataFormat)()),null==l&&(l="max"),// x is NDHWC after preprocessing.
e=(0,h.preprocessConv3DInput)(e,o);let p="same"===s?"same":"valid";return u="max"===l?n.maxPool3d(e,t,r,p):n.avgPool3d(e,t,r,p),"channelsFirst"===o&&(u=n.transpose(u,[0,4,1,2,3])),u})}class g extends l.Layer{/**
     *
     * @param args Parameters for the Pooling layer.
     *
     * config.poolSize defaults to 2.
     */constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&1===e.poolSize.length&&"number"==typeof e.poolSize[0])this.poolSize=e.poolSize;else throw new u.ValueError(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if((0,c.assertPositiveInteger)(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else if(Array.isArray(e.strides)&&1===e.strides.length&&"number"==typeof e.strides[0])this.strides=e.strides;else throw new u.ValueError(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);(0,c.assertPositiveInteger)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,(0,i.checkPaddingMode)(this.padding),this.inputSpec=[new l.InputSpec({ndim:3})]}computeOutputShape(e){e=(0,d.getExactlyOneShape)(e);let t=(0,p.convOutputLength)(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return(0,n.tidy)(()=>{this.invokeCallHook(e,t),// Add dummy last dimension.
e=o.expandDims((0,d.getExactlyOneTensor)(e),2);let r=this.poolingFunction((0,d.getExactlyOneTensor)(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");// Remove dummy last dimension.
return n.squeeze(r,[2])})}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class x extends g{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),f(e,t,r,s,n,"max")}}/** @nocollapse */x.className="MaxPooling1D",(0,n.serialization).registerClass(x);class b extends g{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),f(e,t,r,s,n,"avg")}}/** @nocollapse */b.className="AveragePooling1D",(0,n.serialization).registerClass(b);class y extends l.Layer{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new u.ValueError(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];(0,c.assertPositiveInteger)(this.poolSize,"poolSize"),(0,c.assertPositiveInteger)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.checkDataFormat)(this.dataFormat),(0,i.checkPaddingMode)(this.padding),this.inputSpec=[new l.InputSpec({ndim:4})]}computeOutputShape(e){e=(0,d.getExactlyOneShape)(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2];return(t=(0,p.convOutputLength)(t,this.poolSize[0],this.padding,this.strides[0]),r=(0,p.convOutputLength)(r,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,r]:[e[0],t,r,e[3]]}call(e,t){return(0,n.tidy)(()=>(this.invokeCallHook(e,t),this.poolingFunction((0,d.getExactlyOneTensor)(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class j extends y{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),f(e,t,r,s,n,"max")}}/** @nocollapse */j.className="MaxPooling2D",(0,n.serialization).registerClass(j);class _ extends y{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),f(e,t,r,s,n,"avg")}}/** @nocollapse */_.className="AveragePooling2D",(0,n.serialization).registerClass(_);class k extends l.Layer{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new u.ValueError(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];(0,c.assertPositiveInteger)(this.poolSize,"poolSize"),(0,c.assertPositiveInteger)(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.checkDataFormat)(this.dataFormat),(0,i.checkPaddingMode)(this.padding),this.inputSpec=[new l.InputSpec({ndim:5})]}computeOutputShape(e){e=(0,d.getExactlyOneShape)(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return(t=(0,p.convOutputLength)(t,this.poolSize[0],this.padding,this.strides[0]),r=(0,p.convOutputLength)(r,this.poolSize[1],this.padding,this.strides[1]),s=(0,p.convOutputLength)(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,r,s]:[e[0],t,r,s,e[4]]}call(e,t){return(0,n.tidy)(()=>(this.invokeCallHook(e,t),this.poolingFunction((0,d.getExactlyOneTensor)(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class I extends k{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),m(e,t,r,s,n,"max")}}/** @nocollapse */I.className="MaxPooling3D",(0,n.serialization).registerClass(I);class w extends k{constructor(e){super(e)}poolingFunction(e,t,r,s,n){return(0,i.checkDataFormat)(n),(0,i.checkPaddingMode)(s),m(e,t,r,s,n,"avg")}}/** @nocollapse */w.className="AveragePooling3D",(0,n.serialization).registerClass(w);class C extends l.Layer{constructor(e){super(e),this.inputSpec=[new l.InputSpec({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new u.NotImplementedError}}class S extends C{constructor(e){super(e||{})}call(e,t){return(0,n.tidy)(()=>{let t=(0,d.getExactlyOneTensor)(e);return n.mean(t,1)})}}/** @nocollapse */S.className="GlobalAveragePooling1D",(0,n.serialization).registerClass(S);class T extends C{constructor(e){super(e||{})}call(e,t){return(0,n.tidy)(()=>{let t=(0,d.getExactlyOneTensor)(e);return n.max(t,1)})}}/** @nocollapse */T.className="GlobalMaxPooling1D",(0,n.serialization).registerClass(T);class N extends l.Layer{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,(0,i.checkDataFormat)(this.dataFormat),this.inputSpec=[new l.InputSpec({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new u.NotImplementedError}getConfig(){let e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class E extends N{call(e,t){return(0,n.tidy)(()=>{let t=(0,d.getExactlyOneTensor)(e);return"channelsLast"===this.dataFormat?n.mean(t,[1,2]):n.mean(t,[2,3])})}}/** @nocollapse */E.className="GlobalAveragePooling2D",(0,n.serialization).registerClass(E);class F extends N{call(e,t){return(0,n.tidy)(()=>{let t=(0,d.getExactlyOneTensor)(e);return"channelsLast"===this.dataFormat?n.max(t,[1,2]):n.max(t,[2,3])})}}/** @nocollapse */F.className="GlobalMaxPooling2D",(0,n.serialization).registerClass(F)},{"@tensorflow/tfjs-core":"U1ela","../backend/common":"02oHM","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../engine/topology":"3moPG","../errors":"2onZT","../utils/conv_utils":"ccwXo","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","./convolutional":"lwxvP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7icEN":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//**
 * Layers that augment the functionality of a base layer.
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Abstract wrapper base class.
 *
 * Wrappers take another layer and augment it in various ways.
 * Do not use this class as a layer, it is only an abstract base class.
 * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.
 */s.export(r,"Wrapper",()=>f),s.export(r,"TimeDistributed",()=>m),s.export(r,"checkBidirectionalMergeMode",()=>g),s.export(r,"Bidirectional",()=>x);var n=e("@tensorflow/tfjs-core"),a=e("../backend/tfjs_backend"),o=e("../common"),i=e("../engine/topology"),l=e("../errors"),u=e("../keras_format/common"),p=e("../utils/generic_utils"),c=e("../utils/types_utils"),d=e("./recurrent"),h=e("./serialization");class f extends i.Layer{constructor(e){// Porting Note: In PyKeras, `self.layer` is set prior to the calling
//   `super()`. But we can't do that here due to TypeScript's restriction.
//   See: https://github.com/Microsoft/TypeScript/issues/8277
//   As a result, we have to add checks in `get trainable()` and
//   `set trainable()` below in order to prevent using `this.layer` when
//   its value is `undefined`. The super constructor does use the getter
//   and the setter of `this.layer`.
super(e),this.layer=e.layer}build(e){this.built=!0}// TODO(cais): Implement activityRegularizer getter.
get trainable(){return(// Porting Note: the check of `this.layer` here is necessary due to the
//   way the `constructor` of this class is written (see Porting Note
//   above).
null!=this.layer&&this.layer.trainable)}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}// TODO(cais): Implement setter for trainableWeights.
get nonTrainableWeights(){return this.layer.nonTrainableWeights}// TODO(cais): Implement setter for nonTrainableWeights.
get updates(){// tslint:disable-next-line:no-any
return this.layer._updates}// TODO(cais): Implement getUpdatesFor().
get losses(){return this.layer.losses}// TODO(cais): Implement getLossesFor().
getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){let e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}/** @nocollapse */static fromConfig(e,t,r={}){let s=t.layer,n=(0,h.deserialize)(s,r);delete t.layer;let a={layer:n};return Object.assign(a,t),new e(a)}}class m extends f{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=(0,c.getExactlyOneShape)(e)).length<3)throw new l.ValueError(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];let t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){e=(0,c.getExactlyOneShape)(e);let t=[e[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(t),s=e[1];return[r[0],s].concat(r.slice(1))}call(e,t){return(0,n.tidy)(()=>{// TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.
e=(0,c.getExactlyOneTensor)(e);let r=(0,d.rnn)((e,r)=>{// TODO(cais): Add useLearningPhase.
// NOTE(cais): `layer.call` may return a length-1 array of Tensor in
//   some cases (e.g., `layer` is a `Sequential` instance), which is
//   why `getExactlyOneTensor` is used below.
let s=(0,c.getExactlyOneTensor)(this.layer.call(e,t));return[s,[]]},e,[],!1,null,null,!1,!0),s=r[1];// TODO(cais): Add activity regularization.
// TODO(cais): Add useLearningPhase.
return s})}}function g(e){p.checkStringTypeUnionValue(u.VALID_BIDIRECTIONAL_MERGE_MODES,"BidirectionalMergeMode",e)}/** @nocollapse */m.className="TimeDistributed",(0,n.serialization).registerClass(m);class x extends f{constructor(e){super(e);// Note: When creating `this.forwardLayer`, the original Layer object
//   (`config.layer`) ought to be cloned. This is why we call
//   `getConfig()` followed by `deserialize()`. Without this cloning,
//   the layer names saved during serialization will incorrectly contain
//   the 'forward_' prefix. In Python Keras, this is done using
//   `copy.copy` (shallow copy), which does not have a simple equivalent
//   in JavaScript. JavaScript's `Object.assign()` does not copy
//   methods.
let t=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=t,this.forwardLayer=(0,h.deserialize)(r),t.goBackwards=!0!==t.goBackwards;let s={};if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=(0,h.deserialize)(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,g(this.mergeMode),e.weights)throw new l.NotImplementedError("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){// Porting Note: the check of `this.layer` here is necessary due to the
//   way the `constructor` of this class is written (see Porting Note
//   above).
this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){let t=e.length,r=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let t,r,s,n=this.forwardLayer.computeOutputShape(e);return(Array.isArray(n)&&Array.isArray(n[0])||(n=[n]),this.returnState&&(s=n.slice(1)),t=n[0],"concat"===this.mergeMode?(t[t.length-1]*=2,r=[t]):r=null==this.mergeMode?[t,t.slice()]:[t],this.returnState)?null==this.mergeMode?r.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):p.singletonOrArray(r)}apply(e,t){let r=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});let n=(0,d.standardizeArgs)(e,r,s,this.numConstants);if(e=n.inputs,r=n.initialState,s=n.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==s)return super.apply(e,t);let a=[],o=[];if(null!=r){let e=r.length;if(e%2>0)throw new l.ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=r,a.push(...r);let s=r.map(e=>new i.InputSpec({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),o.push(...s)}if(null!=s)throw new l.NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");let u=a[0]instanceof i.SymbolicTensor;for(let e of a)if(e instanceof i.SymbolicTensor!==u)throw new l.ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(!u)return super.apply(e,t);{// Compute the full input and specs, including the states.
let r=[e].concat(a),s=this.inputSpec.concat(o),n=this.inputSpec;this.inputSpec=s;let i=super.apply(r,t);return this.inputSpec=n,i}}call(e,t){return(0,n.tidy)(()=>{let r,s,o,i;let l=t.initialState;if(null==l)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{let n=l.slice(0,l.length/2),a=l.slice(l.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:n})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:a}))}return(// TODO(cais): Properly set learning phase.
(this.returnState&&(Array.isArray(r)&&(o=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=n.reverse(s,1)),"concat"===this.mergeMode?i=a.concatenate([r,s]):"sum"===this.mergeMode?i=n.add(r,s):"ave"===this.mergeMode?i=n.mul(.5,n.add(r,s)):"mul"===this.mergeMode?i=n.mul(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState)?null==this.mergeMode?i.concat(o):[i].concat(o):i)})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){(0,o.nameScope)(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),(0,o.nameScope)(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let r;if(Array.isArray(t)&&(t=t[0]),r=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,!this.returnState)return r;{let e=this.forwardLayer.states,t=e.map(e=>null);return Array.isArray(r)?r.concat(t).concat(t):[r].concat(t).concat(t)}}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}// TODO(cais): Implement constraints().
setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){let e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}/** @nocollapse */static fromConfig(e,t){let r=(0,h.deserialize)(t.layer);// TODO(cais): Add logic for `numConstants` once the property is added.
if(delete t.layer,null!=t.numConstants)throw new l.NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");return t.layer=r,new e(t)}}/** @nocollapse */x.className="Bidirectional",(0,n.serialization).registerClass(x)},{"@tensorflow/tfjs-core":"U1ela","../backend/tfjs_backend":"hBUWZ","../common":"JNHtR","../engine/topology":"3moPG","../errors":"2onZT","../keras_format/common":"d5gz0","../utils/generic_utils":"ia9DW","../utils/types_utils":"kXuwT","./recurrent":"jtjtM","./serialization":"fw7HP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8GZHB":[function(e,t,r){/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Preprocessing Rescaling Layer
 *
 * This rescales images by a scaling and offset factor
 */s.export(r,"Rescaling",()=>l);var n=e("../../engine/topology"),a=e("@tensorflow/tfjs-core"),o=e("../../utils/types_utils"),i=e("../../backend/tfjs_backend");class l extends n.Layer{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){let e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,a.tidy)(()=>("float32"!==(e=(0,o.getExactlyOneTensor)(e)).dtype&&(e=i.cast(e,"float32")),(0,a.add)((0,a.mul)(e,this.scale),this.offset)))}}/** @nocollapse */l.className="Rescaling",(0,a.serialization).registerClass(l)},{"../../engine/topology":"3moPG","@tensorflow/tfjs-core":"U1ela","../../utils/types_utils":"kXuwT","../../backend/tfjs_backend":"hBUWZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],Stmcv:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Binary accuracy metric function.
 *
 * `yTrue` and `yPred` can have 0-1 values. Example:
 * ```js
 * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);
 * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in
 * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,
 * a value >= 0.5 and <= 1.0 is interpreted as 1).
 *
 * Example:
 * ```js
 * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);
 * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"binaryAccuracy",()=>o),/**
 * Binary crossentropy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0], [1], [1], [1]]);
 * const y = tf.tensor2d([[0], [0], [0.5], [1]]);
 * const crossentropy = tf.metrics.binaryCrossentropy(x, y);
 * crossentropy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction, probabilities for the `1` case.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"binaryCrossentropy",()=>i),/**
 * Sparse categorical accuracy metric function.
 *
 * Example:
 * ```js
 *
 * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);
 * const yPred = tf.tensor2d(
 *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);
 * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);
 * crossentropy.print();
 * ```
 *
 * @param yTrue True labels: indices.
 * @param yPred Predicted probabilities or logits.
 * @returns Accuracy tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"sparseCategoricalAccuracy",()=>l),/**
 * Categorical accuracy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);
 * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);
 * const accuracy = tf.metrics.categoricalAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth: one-hot encoding of categories.
 * @param yPred Binary Tensor of prediction: probabilities or logits for the
 *   same categories as in `yTrue`.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"categoricalAccuracy",()=>u),/**
 * Categorical crossentropy between an output tensor and a target tensor.
 *
 * @param target A tensor of the same shape as `output`.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"categoricalCrossentropy",()=>p),/**
 * Computes the precision of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const precision = tf.metrics.precision(x, y);
 * precision.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to contain only 0-1 values.
 * @param yPred The predicted values. Expected to contain only 0-1 values.
 * @return Precision Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"precision",()=>c),/**
 * Computes the recall of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const recall = tf.metrics.recall(x, y);
 * recall.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to contain only 0-1 values.
 * @param yPred The predicted values. Expected to contain only 0-1 values.
 * @return Recall Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"recall",()=>d),/**
 * Loss or metric function: Cosine proximity.
 *
 * Mathematically, cosine proximity is defined as:
 *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,
 * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`
 * represents element-wise multiplication.
 *
 * ```js
 * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);
 * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);
 * const proximity = tf.metrics.cosineProximity(yTrue, yPred);
 * proximity.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Cosine proximity Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"cosineProximity",()=>h),/**
 * Loss or metric function: Mean absolute error.
 *
 * Mathematically, mean absolute error is defined as:
 *   `mean(abs(yPred - yTrue))`,
 * wherein the `mean` is applied over feature dimensions.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);
 * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);
 * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"meanAbsoluteError",()=>f),/**
 * Loss or metric function: Mean absolute percentage error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);
 * const yPred = tf.tensor2d([[0, 1], [11, 24]]);
 * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute percentage error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"meanAbsolutePercentageError",()=>m),s.export(r,"MAPE",()=>g),s.export(r,"mape",()=>x),/**
 * Loss or metric function: Mean squared error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);
 * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);
 * const mse = tf.metrics.meanSquaredError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean squared error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */s.export(r,"meanSquaredError",()=>b),s.export(r,"MSE",()=>y),s.export(r,"mse",()=>j);var n=e("./losses"),a=e("./metrics");function o(e,t){return a.binaryAccuracy(e,t)}function i(e,t){return a.binaryCrossentropy(e,t)}function l(e,t){return a.sparseCategoricalAccuracy(e,t)}function u(e,t){return a.categoricalAccuracy(e,t)}function p(e,t){return a.categoricalCrossentropy(e,t)}function c(e,t){return a.precision(e,t)}function d(e,t){return a.recall(e,t)}function h(e,t){return n.cosineProximity(e,t)}function f(e,t){return n.meanAbsoluteError(e,t)}function m(e,t){return n.meanAbsolutePercentageError(e,t)}function g(e,t){return n.meanAbsolutePercentageError(e,t)}function x(e,t){return n.meanAbsolutePercentageError(e,t)}function b(e,t){return n.meanSquaredError(e,t)}function y(e,t){return n.meanSquaredError(e,t)}function j(e,t){return n.meanSquaredError(e,t)}},{"./losses":"679KB","./metrics":"1LAxN","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lPwrE:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"modelFromJSON",()=>n.modelFromJSON);var n=e("./models")},{"./models":"2MIjb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k1pOa:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Regularizer for L1 and L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x)) + sum(l2 * x^2)
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */s.export(r,"l1l2",()=>a),/**
 * Regularizer for L1 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x))
 * @param args l1 config.
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */s.export(r,"l1",()=>o),/**
 * Regularizer for L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l2 * x^2)
 * @param args l2 config.
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */s.export(r,"l2",()=>i);var n=e("./regularizers");function a(e){return new n.L1L2(e)}function o(e){return n.l1(e)}function i(e){return n.l2(e)}},{"./regularizers":"bzJO0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"394Hi":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 *//* Original source: keras/callbacks.py */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Callback",()=>l),/**
 * A Callback that stops training when a monitored quantity has stopped
 * improving.
 */s.export(r,"EarlyStopping",()=>c),/**
 * Factory function for a Callback that stops training when a monitored
 * quantity has stopped improving.
 *
 * Early stopping is a type of regularization, and protects model against
 * overfitting.
 *
 * The following example based on fake data illustrates how this callback
 * can be used during `tf.LayersModel.fit()`:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense({
 *   units: 3,
 *   activation: 'softmax',
 *   kernelInitializer: 'ones',
 *   inputShape: [2]
 * }));
 * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);
 * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);
 * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);
 * model.compile(
 *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});
 *
 * // Without the EarlyStopping callback, the val_acc value would be:
 * //   0.5, 0.5, 0.5, 0.5, ...
 * // With val_acc being monitored, training should stop after the 2nd epoch.
 * const history = await model.fit(xs, ys, {
 *   epochs: 10,
 *   validationData: [xsVal, ysVal],
 *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})
 * });
 *
 * // Expect to see a length-2 array.
 * console.log(history.history.val_acc);
 * ```
 *
 * @doc {
 *   heading: 'Callbacks',
 *   namespace: 'callbacks'
 * }
 */s.export(r,"earlyStopping",()=>d),s.export(r,"callbacks",()=>h);var n=e("./base_callbacks"),a=e("./engine/training"),o=e("./errors"),i=e("./logs");class l extends n.BaseCallback{constructor(){super(...arguments),/** Instance of `keras.models.Model`. Reference of the model being trained. */this.model=null}setModel(e){if(!(e instanceof a.LayersModel))throw Error("model must be a LayersModel, not some other Container");this.model=e}}function u(e,t){return e<t}function p(e,t){return e>t}class c extends l{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new o.NotImplementedError("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=u:"max"===this.mode?this.monitorFunc=p:-1!==this.monitor.indexOf("acc")?this.monitorFunc=p:this.monitorFunc=u,this.monitorFunc===u&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===u?1/0:-1/0}async onEpochEnd(e,t){await (0,i.resolveScalarsInLogs)(t);let r=this.getMonitorValue(t);null!=r&&(this.monitorFunc(r-this.minDelta,this.best)?(this.best=r,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});let t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}function d(e){return new c(e)}let h={earlyStopping:d}},{"./base_callbacks":"hD10S","./engine/training":"jTWm9","./errors":"2onZT","./logs":"klT3H","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kCH7U:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// All exports from this package should be in base.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./base");s.exportAll(n,r),e("./register_all_kernels")},{"./base":"9OUKb","./register_all_kernels":"ckjRf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9OUKb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// base.ts is the webgl backend without auto kernel registration.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"version_webgl",()=>o.version),s.export(r,"webgl",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./backend_webgl"),o=e("./version"),i=e("./webgl");s.exportAll(i,r),(0,n.device_util).isBrowser()&&(0,n.registerBackend)("webgl",()=>new a.MathBackendWebGL,2/* priority */);let l={forceHalfFloat:i.forceHalfFloat}},{"@tensorflow/tfjs-core":"U1ela","./backend_webgl":"aggcM","./version":"76TBq","./webgl":"9aWnH","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aggcM:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Import webgl flags.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EPSILON_FLOAT32",()=>w),s.export(r,"EPSILON_FLOAT16",()=>C),s.export(r,"getBinaryCache",()=>T),s.export(r,"MathBackendWebGL",()=>E),e("./flags_webgl");var n=e("@tensorflow/tfjs-core"),a=e("./canvas_util"),o=e("./decode_matrix_gpu"),i=e("./decode_matrix_packed_gpu"),l=e("./encode_float_gpu"),u=e("./encode_float_packed_gpu"),p=e("./encode_matrix_gpu"),c=e("./encode_matrix_packed_gpu"),d=e("./gpgpu_context"),h=e("./gpgpu_math"),f=e("./kernel_utils/shared"),m=e("./pack_gpu"),g=e("./reshape_packed_gpu"),x=e("./tex_util"),b=e("./texture_manager"),y=e("./unaryop_gpu"),j=e("./unaryop_packed_gpu"),_=e("./unpack_gpu"),k=e("./webgl_util");let I=n.kernel_impls.whereImpl,w=1e-7,C=1e-4,S={};function T(e){return e in S||(S[e]={}),S[e]}// Empirically determined constant used to determine size threshold for handing
// off execution to the CPU.
let N=(0,n.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class E extends n.KernelBackend{constructor(e){let t;if(super(),// Maps data ids that have a pending read operation, to list of subscribers.
this.pendingRead=new WeakMap,// List of data ids that are scheduled for disposal, but are waiting on a
// pending read operation.
this.pendingDisposal=new WeakSet,// Used to count the number of 'shallow' sliced tensors that point to the
// same data id.
this.dataRefCount=new WeakMap,this.numBytesInGPU=0,// Accumulated time spent (including blocking) in uploading data to webgl.
this.uploadWaitMs=0,// Accumulated time spent (including blocking in downloading data from webgl.
this.downloadWaitMs=0,// record the last manual GL Flush time.
this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,n.env)().getBool("HAS_WEBGL"))throw Error("WebGL is not supported on this device");if(null!=e){if(e instanceof d.GPGPUContext)t=e;else{let r=(0,a.getWebGLContext)((0,n.env)().getNumber("WEBGL_VERSION"),e);t=new d.GPGPUContext(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let e=(0,a.getWebGLContext)((0,n.env)().getNumber("WEBGL_VERSION"));t=new d.GPGPUContext(e),this.binaryCache=T((0,n.env)().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new b.TextureManager(this.gpgpu),this.numMBBeforeWarning=null==(0,n.env)().global.screen?1024:(0,n.env)().global.screen.height*(0,n.env)().global.screen.width*window.devicePixelRatio*600/1024/1024// 1 GB.
,this.texData=new n.DataStorage(this,(0,n.engine)())}nextDataId(){return E.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,r){if(((0,n.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,n.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:r,values:e,usage:x.TextureUsage.UPLOAD,refCount:1}),s}/** Return refCount of a `TensorData`. */refCount(e){if(this.texData.has(e)){let t=this.texData.get(e);return t.refCount}return 0}/** Increase refCount of a `TextureData`. */incRef(e){let t=this.texData.get(e);t.refCount++}/** Decrease refCount of a `TextureData`. */decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,r,s,a){if((0,n.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:s,values:t,usage:x.TextureUsage.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t,r;let s=this.texData.get(e),{values:a,dtype:o,complexTensorInfos:i,slice:l,shape:u,isPacked:p}=s;// The presence of `slice` indicates this tensor is a shallow slice of a
// different tensor, and is using that original tensor's texture. Run
// `clone` in order to copy that texture and read from it.
if(null!=l){let t;t=p?new j.UnaryOpPackedProgram(u,y.CLONE):new y.UnaryOpProgram(u,y.CLONE);let r=this.runWebGLProgram(t,[{dataId:e,shape:u,dtype:o}],o),s=this.readSync(r.dataId);return this.disposeIntermediateTensorInfo(r),s}if(null!=a)return this.convertAndCacheOnCPU(e);if("string"===o)return a;let c=null!=this.activeTimers;if(c&&(t=(0,n.util).now()),"complex64"===o){let e=this.readSync(i.real.dataId),t=this.readSync(i.imag.dataId);r=(0,n.backend_util).mergeRealAndImagArrays(e,t)}else r=this.getValuesFromTexture(e);return c&&(this.downloadWaitMs+=(0,n.util).now()-t),this.convertAndCacheOnCPU(e,r)}async read(e){let t,r;if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}let s=this.texData.get(e),{values:a,shape:o,slice:i,dtype:l,complexTensorInfos:u,isPacked:p}=s;// The presence of `slice` indicates this tensor is a shallow slice of a
// different tensor, and is using that original tensor's texture. Run
// `clone` in order to copy that texture and read from it.
if(null!=i){let t;t=p?new j.UnaryOpPackedProgram(o,y.CLONE):new y.UnaryOpProgram(o,y.CLONE);let r=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:l}],l),s=this.read(r.dataId);return this.disposeIntermediateTensorInfo(r),s}if(null!=a)return this.convertAndCacheOnCPU(e);if((0,n.env)().getBool("DEBUG")&&!(0,n.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,n.env)().getNumber("WEBGL_VERSION"))throw Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let c=null;if("complex64"!==l&&(0,n.env)().get("WEBGL_BUFFER_SUPPORTED")){// Possibly copy the texture into a buffer before inserting a fence.
t=this.decode(e);let r=this.texData.get(t.dataId);c=this.gpgpu.createBufferFromTexture(r.texture.texture,...x.getDenseTexShape(o))}if(this.pendingRead.set(e,[]),"complex64"!==l&&await this.gpgpu.createAndWaitForFence(),"complex64"===l){let e=await Promise.all([this.read(u.real.dataId),this.read(u.imag.dataId)]),t=e[0],s=e[1];r=(0,n.backend_util).mergeRealAndImagArrays(t,s)}else if(null==c)r=this.getValuesFromTexture(e);else{let e=(0,n.util).sizeFromShape(o);r=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=t&&this.disposeIntermediateTensorInfo(t),null!=c){let e=this.gpgpu.gl;k.callAndCheck(e,()=>e.deleteBuffer(c))}let d=this.convertAndCacheOnCPU(e,r),h=this.pendingRead.get(e);return this.pendingRead.delete(e),// Notify all pending reads.
h.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,n.engine)().removeDataId(e,this),this.pendingDeletes--),d}/**
     * Read tensor to a new texture that is densely packed for ease of use.
     * @param dataId The source tensor.
     * @param options
     *     customTexShape: Optional. If set, will use the user defined texture
     *     shape to create the texture.
     */readToGPU(e,t={}){let r=this.texData.get(e),{values:s,shape:a,slice:o,dtype:i,isPacked:l,texture:u}=r;if("complex64"===i)throw Error("Does not support reading texture for complex64 dtype.");// The presence of `slice` indicates this tensor is a shallow slice of a
// different tensor, and is using that original tensor's texture. Run
// `clone` in order to copy that texture and read from it.
if(null!=o){let r;r=l?new j.UnaryOpPackedProgram(a,y.CLONE):new y.UnaryOpProgram(a,y.CLONE);let s=this.runWebGLProgram(r,[{dataId:e,shape:a,dtype:i}],i),n=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),n}if(null==u){if(null!=s)throw Error("Data is not on GPU but on CPU.");throw Error("There is no data on GPU or CPU.")}// Decode the texture so that it is stored densely (using four channels).
let p=this.decode(e,t.customTexShape),c=(0,n.engine)().makeTensorFromTensorInfo(p),d=this.texData.get(p.dataId);return Object.assign({tensorRef:c},d.texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{// Decode the bytes into string.
let r=t.map(e=>(0,n.util).decodeString(e));return(0,n.buffer)(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return(0,n.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let r=e[t];if(!k.canBeRepresented(r)){if((0,n.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(e){let{shape:t,dtype:r,isPacked:s}=this.texData.get(e),a=(0,n.util).sizeFromShape(t);if((0,n.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let r=this.decode(e),s=this.texData.get(r.dataId),n=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...x.getDenseTexShape(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(r),n}let o=(0,n.env)().getBool("WEBGL_PACK")&&!0===s,i=o?k.getShapeAs3D(t):t,p=o?new u.EncodeFloatPackedProgram(i):new l.EncodeFloatProgram(i),c=this.runWebGLProgram(p,[{shape:i,dtype:r,dataId:e}],"float32"),d=this.texData.get(c.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(d.texture.texture,d.texShape[0],d.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),h}timerAvailable(){return(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,r=[],s=!1;null==this.programTimersStack?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,e();// needing to split these up because util.flatten only accepts certain types
let a=(0,n.util).flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),o=(0,n.util).flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null// will be filled by the engine
};return(async()=>{if((0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(a);i.kernelMs=(0,n.util).sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:o[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:(0,n.util).now(),endMs:null}}endTimer(e){return(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.endQuery():e.endMs=(0,n.util).now(),e}async getQueryTime(e){return(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}/**
     * Decrease the RefCount on the dataId and dispose the memory if the dataId
     * has 0 refCount. If there are pending read on the data, the disposal would
     * added to the pending delete queue. Return true if the dataId is removed
     * from backend or the backend does not contain the dataId, false if the
     * dataId is not removed. Memory may or may not be released even when dataId
     * is removed, which also depends on dataRefCount, see `releaseGPU`.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;// No-op if already disposed.
if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:r,texShape:s,usage:n,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,r),this.textureManager.releaseTexture(t,s,n,a)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}/**
     * Returns internal information for the specific data bucket. Used in unit
     * tests.
     */getDataInfo(e){return this.texData.get(e)}/*
    Tests whether all the inputs to an op are small and on the CPU. This heuristic
    determines when it would be faster to execute a kernel on the CPU. WebGL
    kernels opt into running this check and forwarding when appropriate.
    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
    sustainable strategy for optimizing backend execution of ops.
     */shouldExecuteOnCPU(e,t=N){return(0,n.env)().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&(0,n.util).sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){(0,n.backend_util).warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return I(e.shape,t)}packedUnaryOp(e,t,r){let s=new j.UnaryOpPackedProgram(e.shape,t),a=this.compileAndRun(s,[e],r);return(0,n.engine)().makeTensorFromTensorInfo(a)}// TODO(msoulanille) remove this once the backend has been modularized
// a copy is needed here to break a circular dependency.
// Also remove the op from unary_op.
abs(e){// TODO: handle cases when x is complex.
if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=(0,f.simpleAbsImplCPU)(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,n.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,y.ABS,e.dtype);let t=new y.UnaryOpProgram(e.shape,y.ABS),r=this.compileAndRun(t,[e]);return(0,n.engine)().makeTensorFromTensorInfo(r)}makeTensorInfo(e,t,r){let s;if("string"===t&&null!=r&&r.length>0&&(0,n.util).isString(r[0])){let a=r.map(e=>(0,n.util).encodeString(e));s=this.write(a,e,t)}else s=this.write(r,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,r){return(0,n.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,r),this)}unpackTensor(e){let t=new _.UnpackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new m.PackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let r=[k.getBatchDim(e.shape),...k.getRowsCols(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},n=[k.getBatchDim(t),...k.getRowsCols(t)],a=new g.ReshapePackedProgram(n,r),o=[r],i=this.runWebGLProgram(a,[s],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){let r;let s=this.texData.get(e),{isPacked:a,shape:l,dtype:u}=s;if(null!=t){let e=(0,n.util).sizeFromShape(l),r=t[0]*t[1]*4;(0,n.util).assert(e<=r,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let p=k.getShapeAs3D(l);r=a?new i.DecodeMatrixPackedProgram(p):new o.DecodeMatrixProgram(p);let c=[null!=t?t:x.getDenseTexShape(p)],d=this.runWebGLProgram(r,[{shape:p,dtype:u,dataId:e}],u,c,!0,t);return{dtype:u,shape:l,dataId:d.dataId}}runWebGLProgram(e,t,r,s,a=!1,o){let i;let l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===x.PackingScheme.DENSE){let t=null!=o?o:x.getDenseTexShape(e.outputShape);// For a densely packed output, we explicitly set texShape
// so it doesn't get assigned later according to our typical packing
// scheme wherein a single texel can only contain values from adjacent
// rows/cols.
u.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===(0,n.util).sizeFromShape(l.shape))return(// Short-circuit the computation since the result is empty (has 0 in its
// shape).
u.values=(0,n.util).getTypedArrayFromDType(l.dtype,0),l);let p=[],c=t.map(t=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(t.dataId);if(null==r.texture){if(!e.packedInputs&&(0,n.util).sizeFromShape(t.shape)<=(0,n.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))// textures. Do this only when the environment supports 32bit floats
// due to problems when comparing 16bit floats with 32bit floats.
// TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
// possible for packed shaders to sample from uniforms.
return{shape:t.shape,texData:null,isUniform:!0,uniformValues:r.values};e.packedInputs&&(r.isPacked=!0,r.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!r.isPacked!=!!e.packedInputs)t=r.isPacked?this.unpackTensor(t):this.packTensor(t),p.push(t),r=this.texData.get(t.dataId);else if(r.isPacked&&!k.isReshapeFree(r.shape,t.shape)){// This is a special case where a texture exists for a tensor
// but the shapes are incompatible (due to packing constraints) because
// the tensor did not have a chance to go through the packed reshape
// shader. This only happens when we reshape the *same* tensor to form
// *distinct* inputs to an op, e.g. dotting a vector with itself. This
// case will disappear once packed uploading is the default.
let e=t,s=t.shape;t.shape=r.shape,t=this.packedReshape(t,s),p.push(t),r=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:r,isUniform:!1}});this.uploadToGPU(l.dataId);let d={shape:l.shape,texData:u,isUniform:!1},f=h.makeShaderKey(e,c,d),m=this.getAndSaveBinary(f,()=>h.compileProgram(this.gpgpu,e,c,d)),g=null!=this.activeTimers;g&&(i=this.startTimer()),(0,n.env)().get("ENGINE_COMPILE_ONLY")||h.runProgram(this.gpgpu,m,c,d,s),p.forEach(e=>this.disposeIntermediateTensorInfo(e)),g&&(i=this.endTimer(i),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(i)}));let b=(0,n.env)().get("WEBGL_FLUSH_THRESHOLD");// Manually GL flush requested
if(b>0){let e=(0,n.util).now();e-this.lastGlFlushTime>b&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,n.env)().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){let e=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),e}return l}compileAndRun(e,t,r,s,n=!1){r=r||t[0].dtype;let a=this.runWebGLProgram(e,t,r,s,n);return a}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){// Avoid disposing the compiled webgl programs during unit testing because
// it slows down test execution.
if(!(0,n.env)().getBool("IS_TEST")){let e=Object.keys(this.binaryCache);e.forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,n.tidy)(()=>{if(!(0,n.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){// Momentarily switching DEBUG flag to false so we don't throw an
// error trying to upload a small value.
let e=(0,n.env)().getBool("DEBUG");(0,n.env)().set("DEBUG",!1);let t=this.abs((0,n.scalar)(1e-8)).dataSync()[0];if((0,n.env)().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}/** Returns the smallest representable number.  */epsilon(){return 32===this.floatPrecision()?w:C}uploadToGPU(e){let t;let r=this.texData.get(e),{shape:s,dtype:a,values:o,texture:i,usage:l,isPacked:u}=r;if(null!=i)return;let d=null!=this.activeTimers;d&&(t=(0,n.util).now());let h=r.texShape;if(null==h&&(// This texShape may not be the final texture shape. For packed or dense
// textures, the texShape will be changed when textures are created.
h=k.getTextureShapeFromLogicalShape(s,u),r.texShape=h),null!=o){let e;let i=k.getShapeAs3D(s),l=h[1],f=h[0],m=o instanceof Uint8Array||o instanceof Uint8ClampedArray;(u||!m)&&([l,f]=x.getPackedMatrixTextureShapeWidthHeight(h[0],h[1])),e=u?new c.EncodeMatrixPackedProgram(i,m):new p.EncodeMatrixProgram(i,m);// TexShape for float array needs to be the original shape, which byte
// array needs to be packed size. This allow the data upload shape to be
// matched with texture creation logic.
let g=m?[f,l]:h,b=this.makeTensorInfo(g,a),y=this.texData.get(b.dataId);m?y.usage=x.TextureUsage.PIXELS:y.usage=x.TextureUsage.UPLOAD,y.texShape=g,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),l,f,o);let j=[[f,l]],_=this.runWebGLProgram(e,[b],a,j,!0),I=this.texData.get(_.dataId);r.texShape=I.texShape,r.isPacked=I.isPacked,r.usage=I.usage,(0,n.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(_.dataId):(r.texture=I.texture,// Once uploaded, don't store the values on cpu.
r.values=null,this.texData.delete(_.dataId)),this.disposeIntermediateTensorInfo(b),d&&(this.uploadWaitMs+=(0,n.util).now()-t)}else{let e=this.acquireTexture(h,l,a,u);r.texture=e}}convertAndCacheOnCPU(e,t){let r=this.texData.get(e),{dtype:s}=r;return this.releaseGPUData(e),null!=t&&(r.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let r="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<r.length;++t)r[t]=Math.round(e[t]);return r}throw Error(`Unknown dtype ${t}`)}(t,s)),r.values}acquireTexture(e,t,r,s){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*(0,n.util).bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let r=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(r)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await (0,n.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw k.logShaderSourceAndInfoLog(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),Error("Failed to compile fragment shader.");throw Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(let[,e]of Object.entries(this.binaryCache)){let{uniformLocations:t,customUniformLocations:r,infLoc:s,nanLoc:n,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=(0,h.getUniformLocations)(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=r,e.infLoc=s,e.nanLoc=n,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}E.nextDataId=0},{"./flags_webgl":"1k37e","@tensorflow/tfjs-core":"U1ela","./canvas_util":"6QNnT","./decode_matrix_gpu":"2jMuT","./decode_matrix_packed_gpu":"7JAzN","./encode_float_gpu":"7McPy","./encode_float_packed_gpu":"jAcxh","./encode_matrix_gpu":"lKEJa","./encode_matrix_packed_gpu":"AiWSV","./gpgpu_context":"5J0Xq","./gpgpu_math":"iIQOP","./kernel_utils/shared":"glaaY","./pack_gpu":"1gIFx","./reshape_packed_gpu":"llpB2","./tex_util":"cgolR","./texture_manager":"3zNh6","./unaryop_gpu":"lMu15","./unaryop_packed_gpu":"agbDL","./unpack_gpu":"9mq2c","./webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1k37e":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@tensorflow/tfjs-core"),n=e("./webgl_util");let a=(0,s.env)();/**
 * This file contains WebGL-specific flag registrations.
 *//**
 * True if WebGL is supported.
 */a.registerFlag("HAS_WEBGL",()=>a.getNumber("WEBGL_VERSION")>0),/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */a.registerFlag("WEBGL_VERSION",()=>(0,n.isWebGLVersionEnabled)(2)?2:(0,n.isWebGLVersionEnabled)(1)?1:0),/** Whether to check for numerical representation problems. */a.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),a.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===a.get("WEBGL_VERSION")),/** Whether the WebGL backend will sometimes forward ops to the CPU. */a.registerFlag("WEBGL_CPU_FORWARD",()=>!0),/** Whether the WebGL backend will always use f16 textures for rendering. */a.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),/** Whether to turn all packing related flags on. */a.registerFlag("WEBGL_PACK",()=>a.getBool("HAS_WEBGL")),/** Whether we will pack the batchnormalization op. */a.registerFlag("WEBGL_PACK_NORMALIZATION",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack the clip op. */a.registerFlag("WEBGL_PACK_CLIP",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack the depthwise conv op. */a.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack binary ops. */a.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack unary ops. */a.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack array ops. */a.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack image ops. */a.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>a.getBool("WEBGL_PACK")),/** Whether we will pack reduce ops. */a.registerFlag("WEBGL_PACK_REDUCE",()=>a.getBool("WEBGL_PACK")),/** Whether packed WebGL kernels lazily unpack their outputs. */a.registerFlag("WEBGL_LAZILY_UNPACK",()=>a.getBool("WEBGL_PACK")),/** Whether we will use the im2col algorithm to speed up convolutions. */a.registerFlag("WEBGL_CONV_IM2COL",()=>a.getBool("WEBGL_PACK")),/** The maximum texture dimension. */a.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(0,n.getWebGLMaxTextureSize)(a.getNumber("WEBGL_VERSION"))),/** The maximum texture dimension. */a.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(0,n.getMaxTexturesInShader)(a.getNumber("WEBGL_VERSION"))),/**
 * The disjoint_query_timer extension version.
 * 0: disabled, 1: EXT_disjoint_timer_query, 2:
 * EXT_disjoint_timer_query_webgl2.
 * In Firefox with WebGL 2.0,
 * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
 * WebGL 1.0 extension.
 */a.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let e=a.getNumber("WEBGL_VERSION");return 0===e?0:(0,n.getWebGLDisjointQueryTimerVersion)(e)}),/**
 * Whether the timer object from the disjoint_query_timer extension gives
 * timing information that is reliable.
 */a.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>a.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!(0,s.device_util).isMobile()),/**
 * Whether the device is physically capable of rendering to float32 textures.
 */a.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(0,n.isCapableOfRenderingToFloatTexture)(a.getNumber("WEBGL_VERSION"))),/**
 * Whether rendering to float32 textures is enabled. If disabled, renders to
 * float16 textures.
 */a.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!a.getBool("WEBGL_FORCE_F16_TEXTURES")&&a.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),/**
 * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
 * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
 */a.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(0,n.isDownloadFloatTextureEnabled)(a.getNumber("WEBGL_VERSION"))),/** Whether the fence API is available. */a.registerFlag("WEBGL_FENCE_API_ENABLED",()=>(0,n.isWebGLFenceEnabled)(a.getNumber("WEBGL_VERSION"))),/**
 * Tensors with size <= than this will be uploaded as uniforms, not textures.
 */a.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>{// Use uniform uploads only when 32bit floats are supported. In
// 16bit
// environments there are problems with comparing a 16bit texture value
// with a 32bit uniform value.
let e=a.getBool("WEBGL_RENDER_FLOAT32_ENABLED");return e?4:0}),/**
 * If the total number of bytes allocated on the GPU is greater than this
 * number, we will aggressively delete textures upon disposal with
 * gl.deleteMatrixTexture, rather than making them available for reuse.
 *
 * Default value -1 indicates that we will never aggressively delete textures.
 */a.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),/**
 * Trigger a manual GL command flush if the threshold of time has passed since
 * previous Kernel execution. This can be useful for Andorid device where GL
 * command flush are delayed un til the end of javascript task. This value is
 * measured in millisecond. Typically you want to set this value to close to 1.
 *
 * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that
 * we will not enforce manual flush and depend on system default flush schedule.
 */a.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>(0,s.device_util).isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),/**
 * Threshold for input tensor size that determines whether WebGL backend will
 * delegate computation to CPU.
 *
 * Default value is 128.
 */a.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),/** Whether we will use shapes uniforms. */a.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),/**
 * Threshold for last dimension of input tensor that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If input
 * is smaller than threshold then CPU will be used
 *
 * Default value is 100000.
 */a.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),/**
 * Threshold for K that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If k
 * is larger than threshold then CPU will be used
 *
 * Default value is 128.
 */a.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),/** Whether we will use the experimental conv op. */a.registerFlag("WEBGL_EXP_CONV",()=>!1),/**
 * If the device performance is low or if no hardware GPU is available, whether
 * software WebGL will be used.
 */a.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>a.getBool("IS_TEST")),/**
 * For narrow texture (physical height or physical width is 1), if the length of
 * any texture edges exceed the threshold, the texture will be reshaped to be
 * more squarish.
 *
 * This flag is used to help some GPUs that could not provide correct
 * interpolations for long skinny triangles. We found Mali GPU probably has this
 * problem: https://github.com/tensorflow/tfjs/issues/6775.
 */a.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),/**
 * If the flag is set to true, the max size of the narrow texture will be auto
 * computed and it will be considerred as a threshold to reshape the narrow
 * texture to be more squarish.
 *
 * This flag is used to help some GPUs that could not provide correct
 * interpolations for long skinny triangles. We found Mali GPU probably has this
 * problem: https://github.com/tensorflow/tfjs/issues/6775.
 */a.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),/**
 * Whether to use the customized isnan. It's only useful for webgl2 since webgl1
 * doesn't have the builtin isnan.
 */a.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1)},{"@tensorflow/tfjs-core":"U1ela","./webgl_util":"6G64G"}],"6G64G":[function(e,t,r){let s,n;/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"callAndCheck",()=>u),a.export(r,"canBeRepresented",()=>p),a.export(r,"getWebGLErrorMessage",()=>c),a.export(r,"getExtensionOrThrow",()=>d),a.export(r,"createVertexShader",()=>h),a.export(r,"createFragmentShader",()=>f),a.export(r,"logShaderSourceAndInfoLog",()=>g),a.export(r,"createProgram",()=>x),a.export(r,"linkProgram",()=>b),a.export(r,"validateProgram",()=>y),a.export(r,"createStaticVertexBuffer",()=>j),a.export(r,"createStaticIndexBuffer",()=>_),a.export(r,"getNumChannels",()=>k),a.export(r,"createTexture",()=>I),a.export(r,"validateTextureSize",()=>w),a.export(r,"createFramebuffer",()=>C),a.export(r,"bindVertexBufferToProgramAttribute",()=>S),a.export(r,"bindTextureUnit",()=>T),a.export(r,"unbindTextureUnit",()=>N),a.export(r,"getProgramUniformLocationOrThrow",()=>E),a.export(r,"getProgramUniformLocation",()=>F),a.export(r,"bindTextureToProgramUniformSampler",()=>A),a.export(r,"bindCanvasToFramebuffer",()=>R),a.export(r,"bindColorTextureToFramebuffer",()=>D),a.export(r,"unbindColorTextureFromFramebuffer",()=>$),a.export(r,"validateFramebuffer",()=>P),a.export(r,"getFramebufferErrorMessage",()=>z),a.export(r,"getBatchDim",()=>L),a.export(r,"getRowsCols",()=>B),a.export(r,"getShapeAs3D",()=>U),a.export(r,"getTextureShapeFromLogicalShape",()=>V),/**
 * This determines whether reshaping a packed texture requires rearranging
 * the data within the texture, assuming 2x2 packing.
 */a.export(r,"isReshapeFree",()=>G),a.export(r,"getWebGLMaxTextureSize",()=>W),a.export(r,"resetMaxTextureSize",()=>q),a.export(r,"resetMaxTexturesInShader",()=>K),a.export(r,"getMaxTexturesInShader",()=>H),a.export(r,"getWebGLDisjointQueryTimerVersion",()=>X),a.export(r,"hasExtension",()=>Y),a.export(r,"isWebGLVersionEnabled",()=>Z),a.export(r,"isCapableOfRenderingToFloatTexture",()=>J),/**
 * Check if we can download values from a float/half-float texture.
 *
 * Note that for performance reasons we use binding a texture to a framebuffer
 * as a proxy for ability to download float values later using readPixels. The
 * texture params of this texture will not match those in readPixels exactly
 * but if we are unable to bind some kind of float texture to the frameBuffer
 * then we definitely will not be able to read float values from it.
 */a.export(r,"isDownloadFloatTextureEnabled",()=>Q),a.export(r,"isWebGLFenceEnabled",()=>et),a.export(r,"assertNotComplex",()=>er);var o=e("@tensorflow/tfjs-core"),i=e("./canvas_util"),l=e("./tex_util");function u(e,t){let r=t();return(0,o.env)().getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw Error("WebGL Error: "+c(e,t))}(e),r}function p(e){return!!((0,o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||596e-10<Math.abs(e)&&65504>Math.abs(e))}function c(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function d(e,t){return M(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function h(e,t){let r=M(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(u(e,()=>e.shaderSource(r,t)),u(e,()=>e.compileShader(r)),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(r)),Error("Failed to compile vertex shader.");return r}function f(e,t){let r=M(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(u(e,()=>e.shaderSource(r,t)),u(e,()=>e.compileShader(r)),(0,o.env)().get("ENGINE_COMPILE_ONLY"))return r;if(!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw g(t,e.getShaderInfoLog(r)),Error("Failed to compile fragment shader.");return r}let m=/ERROR: [0-9]+:([0-9]+):/g;function g(e,t){let r=m.exec(t);if(null==r){console.log(`Couldn't parse line number in error: ${t}`),console.log(e);return}let s=+r[1],n=e.split("\n"),a=n.length.toString().length+2,i=n.map((e,t)=>(0,o.util).rightPad((t+1).toString(),a)+e),l=0;for(let e=0;e<i.length;e++)l=Math.max(i[e].length,l);let u=i.slice(0,s-1),p=i.slice(s-1,s),c=i.slice(s);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${(0,o.util).rightPad(p[0],l)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function x(e){return M(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}function b(e,t){if(u(e,()=>e.linkProgram(t)),!(0,o.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Failed to link vertex and fragment shaders.")}function y(e,t){if(u(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Shader program validation failed.")}function j(e,t){let r=M(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return u(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),u(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),r}function _(e,t){let r=M(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return u(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r)),u(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),r}function k(){return 2===(0,o.env)().getNumber("WEBGL_VERSION")?1:4}function I(e){return M(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}function w(e,t){let r=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){let r=`[${e}x${t}]`;throw Error("Requested texture size "+r+" is invalid.")}if(e>r||t>r){let s=`[${e}x${t}]`,n=`[${r}x${r}]`;throw Error("Requested texture size "+s+" greater than WebGL maximum on this browser / GPU "+n+".")}}function C(e){return M(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function S(e,t,r,s,n,a,o){let i=e.getAttribLocation(t,r);return -1!==i&&(u(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),u(e,()=>e.vertexAttribPointer(i,n,e.FLOAT,!1,a,o)),u(e,()=>e.enableVertexAttribArray(i)),!0)}function T(e,t,r){O(e,r),u(e,()=>e.activeTexture(e.TEXTURE0+r)),u(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function N(e,t){O(e,t),u(e,()=>e.activeTexture(e.TEXTURE0+t)),u(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function E(e,t,r){return M(e,()=>e.getUniformLocation(t,r),'uniform "'+r+'" not present in program.')}function F(e,t,r){return e.getUniformLocation(t,r)}function A(e,t,r,s){u(e,()=>T(e,t,s)),u(e,()=>e.uniform1i(r,s))}function R(e){u(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),u(e,()=>e.viewport(0,0,e.canvas.width,e.canvas.height)),u(e,()=>e.scissor(0,0,e.canvas.width,e.canvas.height))}function D(e,t,r){u(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,r)),u(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function $(e,t){u(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),u(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function P(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw Error("Error binding framebuffer: "+z(e,t))}function z(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function M(e,t,r){let s=u(e,()=>t());if(null==s)throw Error(r);return s}function O(e,t){let r=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>r){let e=`[gl.TEXTURE0, gl.TEXTURE${r}]`;throw Error(`textureUnit must be in ${e}.`)}}function L(e,t=2){return(0,o.util).sizeFromShape(e.slice(0,e.length-t))}function B(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function U(e){let t=[1,1,1],r=0===e.length||1===e.length&&1===e[0];return r||(t=[L(e),...B(e)]),t}function V(e,t=!1){let r=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=(0,o.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");// If logical shape is 2, we don't squeeze, since we want to match physical.
if(s===1/0&&(0,o.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=r/2),t&&(r*=2,s*=2,1===// This logic ensures we accurately count the number of packed texels needed
// to accommodate the tensor. We can only pack values in the same texel if
// they are from adjacent pairs of rows/cols within the same batch. So if a
// tensor has 3 rows, we pretend it has 4 rows in order to account for the
// fact that the texels containing the third row are half empty.
(e=e.map((t,r)=>r>=e.length-2?(0,o.util).nearestLargerEven(e[r]):e[r])).length&&(e=[2,e[0]])),2!==e.length){let t=(0,o.util).squeezeShape(e);e=t.newShape}let n=(0,o.util).sizeFromShape(e),a=null;e.length<=1&&n<=r?a=[1,n]:2===e.length&&e[0]<=r&&e[1]<=r?a=e:3===e.length&&e[0]*e[1]<=r&&e[2]<=r?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=r&&e[1]*e[2]<=r?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r&&(a=[e[0],e[1]*e[2]*e[3]]);// true if one edge length is 1 (1 or 2, if packed), while another edge
// length exceeds maxSizeForNarrowTex.
let i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i){if(t){// For packed textures size equals the number of channels required to
// accommodate the texture data. However in order to squarify such that
// inner dimensions stay even, we rewrite size to equal the number of
// texels. Then in the return statement we rehydrate the squarified
// dimensions to channel units.
let t=L(e),r=2,s=2;e.length&&([r,s]=B(e)),n=t*(r/2)*(s/2),a=(0,o.util).sizeToSquarishShape(n).map(e=>2*e)}else a=(0,o.util).sizeToSquarishShape(n)}return a}function G(e,t){if(e=e.slice(-2),t=t.slice(-2),(0,o.util).arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let r=e.slice(-1)[0],s=t.slice(-1)[0];if(r===s||r%2==0&&s%2==0&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e[0]%2==0&&t[0]%2==0}function W(e){if(null==s){let t=(0,i.getWebGLContext)(e);s=t.getParameter(t.MAX_TEXTURE_SIZE)}return s}function q(){s=null}function K(){n=null}function H(e){if(null==n){let t=(0,i.getWebGLContext)(e);n=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}// We cap at 16 to avoid spurious runtime "memory exhausted" error.
return Math.min(16,n)}function X(e){if(0===e)return 0;let t=(0,i.getWebGLContext)(e);return Y(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Y(t,"EXT_disjoint_timer_query")?1:0}function Y(e,t){let r=e.getExtension(t);return null!=r}function Z(e){try{let t=(0,i.getWebGLContext)(e);if(null!=t)return!0}catch(e){console.log("Error when getting WebGL context: ",e)}return!1}function J(e){if(0===e)return!1;let t=(0,i.getWebGLContext)(e);if(1===e){if(!Y(t,"OES_texture_float"))return!1}else if(!Y(t,"EXT_color_buffer_float"))return!1;let r=ee(t);return r}function Q(e){if(0===e)return!1;let t=(0,i.getWebGLContext)(e);if(1===e){if(!Y(t,"OES_texture_float")||!Y(t,"WEBGL_color_buffer_float"))return!1}else{if(Y(t,"EXT_color_buffer_float"))return ee(t);let e="EXT_color_buffer_half_float";if(Y(t,e)){let r=t.getExtension(e);return function(e,t){let r=(0,l.getTextureConfig)(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,r.internalFormatHalfFloat,1,1,0,r.textureFormatFloat,r.textureTypeHalfFloat,null);let n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);let a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(n),a}(t,r)}return!1}let r=ee(t);return r}function ee(e){let t=(0,l.getTextureConfig)(e),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);let n=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),n}function et(e){if(2!==e)return!1;let t=(0,i.getWebGLContext)(e),r=null!=t.fenceSync;return r}function er(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&(0,o.util).assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}},{"@tensorflow/tfjs-core":"U1ela","./canvas_util":"6QNnT","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6QNnT":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clearWebGLContext",()=>i),s.export(r,"setWebGLContext",()=>l),s.export(r,"getWebGLContext",()=>function e(t,r){if(!(t in a)||null!=r){let e=function(e,t){if(1!==e&&2!==e)throw Error("Cannot get WebGL rendering context, WebGL is disabled.");let r=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw Error("Cannot create a canvas in this context")}(e):t;return(r.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete a[e]},!1),(0,n.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(o.failIfMajorPerformanceCaveat=!1),1===e)?r.getContext("webgl",o)||r.getContext("experimental-webgl",o):r.getContext("webgl2",o)}(t,r);if(null===e)return console.log("Could not get context for WebGL version",t),null;a[t]=e}let s=a[t];return null==s||s.isContextLost()?(delete a[t],e(t)):(s.disable(s.DEPTH_TEST),s.disable(s.STENCIL_TEST),s.disable(s.BLEND),s.disable(s.DITHER),s.disable(s.POLYGON_OFFSET_FILL),s.disable(s.SAMPLE_COVERAGE),s.enable(s.SCISSOR_TEST),s.enable(s.CULL_FACE),s.cullFace(s.BACK),a[t])});var n=e("@tensorflow/tfjs-core");let a={},o={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function i(e){delete a[e]}function l(e,t){a[e]=t}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cgolR:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s,n,a,o,i,l,u=e("@parcel/transformer-js/src/esmodule-helpers.js");u.defineInteropFlag(r),u.export(r,"PackingScheme",()=>o),u.export(r,"TextureUsage",()=>i),u.export(r,"PhysicalTextureType",()=>l),u.export(r,"getUnpackedMatrixTextureShapeWidthHeight",()=>c),u.export(r,"getUnpackedArraySizeFromMatrixSize",()=>d),u.export(r,"getColorMatrixTextureShapeWidthHeight",()=>h),/**
 * Get shape for densely packed RGBA texture.
 */u.export(r,"getDenseTexShape",()=>f),u.export(r,"getMatrixSizeFromUnpackedArraySize",()=>m),u.export(r,"decodeMatrixFromUnpackedColorRGBAArray",()=>g),u.export(r,"getPackedMatrixTextureShapeWidthHeight",()=>x),u.export(r,"getPackedRGBAArraySizeFromMatrixShape",()=>b),u.export(r,"getTextureConfig",()=>y);var p=e("@tensorflow/tfjs-core");function c(e,t){return[t,e]}function d(e,t){return e*t}function h(e,t){return[4*t,e]}function f(e){let t=(0,p.util).sizeFromShape(e),r=Math.ceil(t/4);return(0,p.util).sizeToSquarishShape(r)}function m(e,t){if(e%t!=0)throw Error(`unpackedSize (${e}) must be a multiple of ${t}`);return e/t}function g(e,t,r){let s=e.length*r/4;if(t.length<s)throw Error(`matrix length (${t.length}) must be >= ${s}`);let n=0;for(let s=0;s<e.length;s+=4)for(let a=0;a<r;a++)t[n++]=e[s+a]}function x(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function b(e,t){let[r,s]=x(e,t);return r*s*4}function y(e,t){let r,s,n,a,o,i,l,u,c,d;return 2===(0,p.env)().getNumber("WEBGL_VERSION")?(r=e.R32F,s=e.R16F,n=e.RGBA16F,a=e.RGBA32F,o=e.RED,l=4,u=1,c=e.HALF_FLOAT,d=e.FLOAT,i=e.RGBA8):(r=e.RGBA,s=e.RGBA,n=e.RGBA,a=e.RGBA,o=e.RGBA,l=4,u=4,c=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,i=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:n,internalFormatPackedFloat:a,textureFormatFloat:o,downloadTextureFormat:i,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:d}}/**
     * All values in a single texel are densely packed without any constraints.
     *
     * This is how the shader encodes a tensor with shape = [2, 3, 4]
     * (indices are [batch, row, col]).
     *
     * 000|001   010|011   020|021
     * -------   -------   -------
     * 002|003   012|013   022|023
     *
     * 100|101   110|111   120|121
     * -------   -------   -------
     * 102|103   112|113   122|123
     *
     */(s=o||(o={}))[s.DENSE=0]="DENSE",/**
     * Single texels contain only values from the same batch, and from adjacent
     * rows and columns.
     *
     * This is how the shader encodes a tensor with shape = [2, 3, 5]
     * (indices are [batch, row, col]).
     *
     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
     * -------   -------   -------   -------   -------   -------
     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
     *
     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
     * -------   -------   -------   -------   -------   -------
     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
     *
     */s[s.SHARED_BATCH=1]="SHARED_BATCH",(n=i||(i={}))[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",(a=l||(l={}))[a.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",a[a.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",a[a.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",a[a.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",a[a.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2jMuT":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DecodeMatrixProgram",()=>l);var n=e("./glsl_version"),a=e("./gpgpu_math"),o=e("./shader_compiler_util"),i=e("./tex_util");class l{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=i.PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=(0,n.getGlslDifferences)();this.outputShape=e,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?o.getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):o.getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}},{"./glsl_version":"5WNNi","./gpgpu_math":"iIQOP","./shader_compiler_util":"68qos","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5WNNi":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"getGlslDifferences",()=>a);var n=e("@tensorflow/tfjs-core");function a(){let e,t,r,s,a,o,i,l,u,p;return 2===(0,n.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",r="out",s="in",a="texture",o="outputColor",i="out vec4 outputColor;",// Use custom isnan definition to work across differences between
// implementations on various platforms. While this should happen in ANGLE
// we still see differences between android and windows (on chrome) when
// using isnan directly. Since WebGL2 supports uint type and
// floatBitsToUinT built-in function, we could implment isnan following
// IEEE 754 rules.
// NaN defination in IEEE 754-1985 is :
//   - sign = either 0 or 1.
//   - biased exponent = all 1 bits.
//   - fraction = anything except all 0 bits (since all 0 bits represents
//   infinity).
// https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
l=(0,n.env)().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",// In webgl 2 we do not need to specify a custom isinf so there is no
// need for a special INFINITY constant.
u="",p=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(e="",t="attribute",r="varying",s="varying",a="texture2D",o="gl_FragColor",i="",// WebGL1 has no built in isnan so we define one here.
l=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,u=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,p=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:e,attribute:t,varyingVs:r,varyingFs:s,texture2D:a,output:o,defineOutput:i,defineSpecialNaN:l,defineSpecialInf:u,defineRound:p}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iIQOP:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"compileProgram",()=>i),s.export(r,"getUniformLocations",()=>l),s.export(r,"runProgram",()=>p),s.export(r,"makeShaderKey",()=>c),s.export(r,"useShapeUniforms",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("./shader_compiler"),o=e("./webgl_util");function i(e,t,r,s){let i=r.map((e,r)=>{let s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[r],shapeInfo:s}}),u=i.map(e=>e.shapeInfo),p={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},c=a.makeShader(i,p,t),d=(0,o.createFragmentShader)(e.gl,c),h=e.createProgram(d);return(0,n.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:d,source:c,webGLProgram:h,inShapeInfos:u,outShapeInfo:p,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:d,source:c,webGLProgram:h,inShapeInfos:u,outShapeInfo:p},l(e,t,h))}function l(e,t,r){let s,a,o;let i={},l={},u={},p=[],c=null,d=null;// Add special uniforms (NAN, INFINITY)
d=e.getUniformLocation(r,"NAN",!1),1===(0,n.env)().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(r,"INFINITY",!1));for(let s=0;s<t.variableNames.length;s++){let n=t.variableNames[s];i[n]=e.getUniformLocation(r,n,!1),i[`offset${n}`]=e.getUniformLocation(r,`offset${n}`,!1),t.enableShapeUniforms&&(l[`${n}Shape`]=e.getUniformLocation(r,`${n}Shape`,!1),u[`${n}TexShape`]=e.getUniformLocation(r,`${n}TexShape`,!1))}return t.enableShapeUniforms&&(s=e.getUniformLocation(r,"outShape",!1),o=e.getUniformLocation(r,"outShapeStrides",!1),a=e.getUniformLocation(r,"outTexShape",!1)),t.customUniforms&&t.customUniforms.forEach((t,s)=>{p[s]=e.getUniformLocation(r,t.name,!1)}),{uniformLocations:i,customUniformLocations:p,infLoc:c,nanLoc:d,inShapesLocations:l,inTexShapesLocations:u,outShapeLocation:s,outShapeStridesLocation:o,outTexShapeLocation:a}}function u(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,r)=>{let s=e.logicalShape,a=t[r],o=a.shape;if(!(0,n.util).arraysEqual(s,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${o} must match`);// The input is uploaded as uniform.
if(e.isUniform&&a.isUniform)return;let i=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!(0,n.util).arraysEqual(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function p(e,t,r,s,o){t.program.enableShapeUniforms||(u(t.inShapeInfos,r),u([t.outShapeInfo],[s]));let i=s.texData.texture,l=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,l[0],l[1]):e.setOutputMatrixTexture(i.texture,l[0],l[1]),e.setProgram(t.webGLProgram),1===(0,n.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),// Set user-defined inputs
r.forEach((r,s)=>{let o=t.program.variableNames[s],i=t.uniformLocations[o],l=t.uniformLocations[`offset${o}`],u=t.inShapesLocations[`${o}Shape`],p=t.inTexShapesLocations[`${o}TexShape`];if(u){let{uniformShape:s}=a.getUniformInfoFromShape(t.program.packedInputs,r.shape,r.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(u,new Int32Array(s));break;case 2:e.gl.uniform2iv(u,new Int32Array(s));break;case 3:e.gl.uniform3iv(u,new Int32Array(s));break;case 4:e.gl.uniform4iv(u,new Int32Array(s))}}if(p&&e.gl.uniform2i(p,r.texData.texShape[0],r.texData.texShape[1]),null!=i){if(r.isUniform){// Upload the values of the tensor as uniform.
if(2>(0,n.util).sizeFromShape(r.shape))e.gl.uniform1f(i,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}return}null!=r.texData.slice&&null!=l&&e.gl.uniform1i(l,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,i,s)}});let p=t.outShapeLocation;if(p)switch(s.shape.length){case 1:e.gl.uniform1iv(p,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(p,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(p,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(p,new Int32Array(s.shape))}if(t.outShapeStridesLocation){let r=(0,n.util).computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(r));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(r));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(r))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&o&&t.program.customUniforms.forEach((r,s)=>{let n=t.customUniformLocations[s],a=o[s];if("float"===r.type)e.gl.uniform1fv(n,a);else if("vec2"===r.type)e.gl.uniform2fv(n,a);else if("vec3"===r.type)e.gl.uniform3fv(n,a);else if("vec4"===r.type)e.gl.uniform4fv(n,a);else if("int"===r.type)e.gl.uniform1iv(n,a);else if("ivec2"===r.type)e.gl.uniform2iv(n,a);else if("ivec3"===r.type)e.gl.uniform3iv(n,a);else if("ivec4"===r.type)e.gl.uniform4iv(n,a);else throw Error(`uniform type ${r.type} is not supported yet.`)}),e.executeProgram()}function c(e,t,r){let s="";t.concat(r).forEach(t=>{let o=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;// TODO: Remove the condition of !x.isUniform.
if(e.enableShapeUniforms&&!t.isUniform){let i=t.texData.texShape,{useSqueezeShape:l,uniformShape:u,keptDims:p}=a.getUniformInfoFromShape(e.packedInputs,t.shape,i),c="",d="",h="";if(1===u.length&&e.packedInputs){let e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){let e=(0,n.util).computeStrides(u);h=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else d=`${u[0]>1}_${u[1]>1}`;let f=t.shape.length,m=2===u.length&&(0,n.util).arraysEqual(t.shape,i),g=1===(0,n.util).sizeFromShape(t.shape),x=(0,n.backend_util).getBroadcastDims(t.shape,r.shape),b=!e.packedInputs&&f===r.shape.length&&(0,n.util).arraysEqual(i,r.texData.texShape),y=e.packedInputs||u.length>2?"":`${i[0]>1}_${i[1]>1}`;// These key components are needed due to shader_compiler is embedding
// them in the shader.
// |xRank| is used to determine the coords length. See
// get[Packed]SamplerAtOutputCoords.
// |isInOutTexShapeEqual| is used to determine whether going to an
// optimization path in getSamplerAtOutputCoords.
// |useSqueezeShape| is extracted from squeezeInputInfo of
// getSampler[2|3|4]D/getPackedSampler3D.
// |isScalar| is extracted from isInputScalar/isOutputScalar in
// getPackedSamplerAtOutputCoords.
// |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.
// |isLogicalShapTexShapeEqual| is used in
// getOutput[Packed]2DCoords/get[Packed]Sampler2D.
// |rank1| is used in getOutputPacked1DCoords.
// |rank2| is used in getOutput2DCoords.
// |rank34| is used in getSampler3D/getSampler4D.
// |isTexShapeGreaterThanOne| are used in
// getSampler[Scalar|1D|2D]/getOutput1DCoords.
s+=`${f}_${b}_${l?p:""}_${u.length}_${g}_${x}_${m}_${c}_${d}_${h}_${y}_${o}`}else{let e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${o}`}});let o=e.userCode;return(// Fast string concat. See https://jsperf.com/string-concatenation/14.
e.constructor.name+("_"+s+"_"+o)+`${(0,n.env)().getNumber("WEBGL_VERSION")}`)}function d(e){// TODO: Remove the limitaion of rank <= 4.
return(0,n.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}},{"@tensorflow/tfjs-core":"U1ela","./shader_compiler":"61Vau","./webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"61Vau":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well
// mapped if any shader source code is changed in this file.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"makeShader",()=>l),s.export(r,"getCoordsDataType",()=>g),s.export(r,"getUniformInfoFromShape",()=>x),/** Returns a new input info (a copy) that has a squeezed logical shape. */s.export(r,"squeezeInputInfo",()=>b);var n=e("@tensorflow/tfjs-core"),a=e("./glsl_version"),o=e("./shader_compiler_util");let{getBroadcastDims:i}=n.backend_util;function l(e,t,r){let s,l;let j=[];if(e.forEach(e=>{let t=(0,n.util).sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?j.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(j.push(`uniform sampler2D ${e.name};`),j.push(`uniform int offset${e.name};`)),r.enableShapeUniforms){let{uniformShape:t}=x(r.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:j.push(`uniform int ${e.name}Shape;`);break;case 2:j.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:j.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:j.push(`uniform ivec4 ${e.name}Shape;`)}j.push(`uniform ivec2 ${e.name}TexShape;`)}}),r.enableShapeUniforms){switch(t.logicalShape.length){case 1:j.push("uniform int outShape;");break;case 2:j.push("uniform ivec2 outShape;"),j.push("uniform int outShapeStrides;");break;case 3:j.push("uniform ivec3 outShape;"),j.push("uniform ivec2 outShapeStrides;");break;case 4:j.push("uniform ivec4 outShape;"),j.push("uniform ivec3 outShapeStrides;")}j.push("uniform ivec2 outTexShape;")}r.customUniforms&&r.customUniforms.forEach(e=>{j.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});let _=j.join("\n"),k=e.map(e=>(function(e,t,r=!1,s){let o="";r?o+=function e(t,r){let s=t.shapeInfo.logicalShape;switch(s.length){case 0:return function(e){let t=e.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),s=(0,a.getGlslDifferences)();return`
    vec4 ${r}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `}(t);case 1:return function(e,t){let r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),n=e.shapeInfo.texShape,o=(0,a.getGlslDifferences)();if(t)return`
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${r}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${o.texture2D}(${r}, uv);
    }
  `}(t,r);case 2:return function(e,t){let r=e.shapeInfo.logicalShape,s=e.name,o="get"+s.charAt(0).toUpperCase()+s.slice(1),i=e.shapeInfo.texShape,l=i[0],u=i[1],p=(0,a.getGlslDifferences)();if(null!=i&&(0,n.util).arraysEqual(r,i))return t?`
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${p.texture2D}(${s}, uv);
      }
    `:`
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${l}.0);

        return ${p.texture2D}(${s}, uv);
      }
    `;if(t)return`
    vec4 ${o}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${p.texture2D}(${s}, uv);
    }
  `;let c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],d=Math.ceil(r[1]/2);return`
    vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${d}, ${c[0]}, ${c[1]}, row, col);
      return ${p.texture2D}(${s}, uv);
    }
  `}(t,r);case 3:return function(t,r){let s=t.shapeInfo.logicalShape,n=t.name,o="get"+n.charAt(0).toUpperCase()+n.slice(1),i=t.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===s[0]){let n=s.slice(1),a=b(t,n);return`
        ${e(a,r)}
        vec4 ${o}(int b, int row, int col) {
          return ${o}(${y(["b","row","col"],[1,2])});
        }
      `}let u=(0,a.getGlslDifferences)();if(r)return`
    vec4 ${o}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${u.texture2D}(${n}, uv);
    }
  `;let p=l[0],c=l[1],d=Math.ceil(s[2]/2),h=d*Math.ceil(s[1]/2);return`
    vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${c}, ${h}, ${d}, b, row, col);
      return ${u.texture2D}(${n}, uv);
    }
  `}(t,r);default:return function(e,t){let r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),n=(0,a.getGlslDifferences)();if(t)return`
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${r}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${r}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${r}, uv);
    }
  `;let o=e.shapeInfo.logicalShape,i=o.length,l=e.shapeInfo.texShape,u=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)],p=u[0],c=u[1],d=Math.ceil(o[i-1]/2),h=d*Math.ceil(o[i-2]/2),f="int b, int row, int col",m=`b * ${h} + (row / 2) * ${d} + (col / 2)`;for(let e=2;e<i-1;e++)f=`int b${e}, `+f,h*=o[i-e-1],m=`b${e} * ${h} + `+m;return`
    vec4 ${s}(${f}) {
      int index = ${m};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${p});
      return ${n.texture2D}(${r}, uv);
    }
  `}(t,r)}}(e,s):o+=function e(t,r=!1){let s=t.shapeInfo.logicalShape;switch(s.length){case 0:return function(e,t){let r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${r};}`;let[n,a]=e.shapeInfo.texShape;if(1===n&&1===a)return`
      float ${s}() {
        return sampleTexture(${r}, halfCR);
      }
    `;let o=f(r);if(t)return`
    float ${s}() {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], ${o});
      return sampleTexture(${r}, uv);
    }
  `;let[i,l]=e.shapeInfo.texShape;return`
    float ${s}() {
      vec2 uv = uvFromFlat(${i}, ${l}, ${o});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 1:return function(e,t){let r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`
      float ${s}(int index) {
        ${m(e)}
      }
    `;let n=e.shapeInfo.texShape,a=n[0],o=n[1];if(1===o&&1===a)return`
      float ${s}(int index) {
        return sampleTexture(${r}, halfCR);
      }
    `;let i=f(r);return 1===o?t?`
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${r}TexShape[0]));
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);
        return sampleTexture(${r}, uv);
      }
    `:1===a?t?`
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${r}TexShape[1]), 0.5);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);
        return sampleTexture(${r}, uv);
      }
    `:t?`
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${i});
      return sampleTexture(${r}, uv);
    }
  `:`
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 2:return function(t,r){let s=t.shapeInfo.logicalShape,a=t.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape;if(null!=i&&(0,n.util).arraysEqual(s,i)){if(r)return`
      float ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;let e=i[0],t=i[1];return`
    float ${o}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);
      return sampleTexture(${a}, uv);
    }
  `}let{newShape:l,keptDims:u}=(0,n.util).squeezeShape(s);if(l.length<s.length){let s=b(t,l);return`
      ${e(s,r)}
      float ${o}(int row, int col) {
        return ${o}(${y(["row","col"],u)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${o}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${s[1]}, 1)));
        ${m(t)}
      }
    `;let p=i[0],c=i[1],d=f(a);return 1===c?// index is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${s[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${p}.0);
      return sampleTexture(${a}, uv);
    }
  `:1===p?// index is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${s[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `:r?`
      float ${o}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `:`
  float ${o}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${s[1]} + col + ${d};
    vec2 uv = uvFromFlat(${p}, ${c}, index);
    return sampleTexture(${a}, uv);
  }
`}(t,r);case 3:return function(t,r){let s=t.shapeInfo.logicalShape,a=t.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),i=s[1]*s[2],l=s[2],{newShape:u,keptDims:p}=(0,n.util).squeezeShape(s);if(u.length<s.length){let s=b(t,u);return`
        ${e(s,r)}
        float ${o}(int row, int col, int depth) {
          return ${o}(${y(["row","col","depth"],p)});
        }
      `}if(t.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${i}, ${l}, 1)));
        ${m(t)}
      }
    `;let c=t.shapeInfo.texShape,d=c[0],h=c[1],g=t.shapeInfo.flatOffset;if(h===i&&null==g)return(// texC is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
        float ${o}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${l}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${h}.0, ${d}.0);
          return sampleTexture(${a}, uv);
        }
      `);if(h===l&&null==g)return(// texR is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${o}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${s[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);
      return sampleTexture(${a}, uv);
    }
  `);let x=f(a);return r?`
    float ${o}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${x};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `:`
      float ${o}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${i} + col * ${l} + depth + ${x};
        vec2 uv = uvFromFlat(${d}, ${h}, index);
        return sampleTexture(${a}, uv);
      }
  `}(t,r);case 4:return function(t,r){let s=t.shapeInfo.logicalShape,a=t.name,o="get"+a.charAt(0).toUpperCase()+a.slice(1),i=s[3],l=s[2]*i,u=s[1]*l,{newShape:p,keptDims:c}=(0,n.util).squeezeShape(s);if(p.length<s.length){let s=b(t,p);return`
      ${e(s,r)}
      float ${o}(int row, int col, int depth, int depth2) {
        return ${o}(${y(["row","col","depth","depth2"],c)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${u}, ${l}, ${i}, 1)));
        ${m(t)}
      }
    `;let d=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,g=h[0],x=h[1],j=`int stride2 = ${a}Shape[3];`,_=`int stride1 = ${a}Shape[2] * stride2;`,k=`int stride0 = ${a}Shape[1] * stride1;`;if(x===u&&null==d)return(// texC is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col, int depth, int depth2) {
        ${j}
        ${_}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${l}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${x}.0, ${g}.0);
        return sampleTexture(${a}, uv);
      }
    `);if(x===i&&null==d)return(// texR is used directly as physical (no risk of float16 overflow).
    r?`
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s[1]*s[2]}, ${s[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${x}.0, ${g}.0);
        return sampleTexture(${a}, uv);
      }
    `);let I=f(a);return r?`
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${j}
      ${_}
      ${k}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${I});
      return sampleTexture(${a}, uv);
    }
  `:`
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${l} +
          depth * ${i} + depth2;
      vec2 uv = uvFromFlat(${g}, ${x}, index + ${I});
      return sampleTexture(${a}, uv);
    }
  `}(t,r);case 5:return function(t){let r=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),o=r[4],i=r[3]*o,l=r[2]*i,u=r[1]*l,{newShape:p,keptDims:c}=(0,n.util).squeezeShape(r);if(p.length<r.length){let r=b(t,p);return`
      ${e(r)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${y(["row","col","depth","depth2","depth3"],c)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${l}, ${i}, ${o})) +
          depth3;
        ${m(t)}
      }
    `;let d=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,g=h[0],x=h[1];if(x===u&&null==d)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${l}, ${i}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${x}.0, ${g}.0);
        return sampleTexture(${s}, uv);
      }
    `;if(x===o&&null==d)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]},
               ${r[2]*r[3]}, ${r[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${x}.0, ${g}.0);
        return sampleTexture(${s}, uv);
      }
    `;let j=f(s);return`
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${l} + depth * ${i} +
          depth2 * ${o} + depth3 + ${j};
      vec2 uv = uvFromFlat(${g}, ${x}, index);
      return sampleTexture(${s}, uv);
    }
  `}(t);case 6:return function(t){let r=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),{newShape:o,keptDims:i}=(0,n.util).squeezeShape(r);if(o.length<r.length){let r=b(t,o);return`
      ${e(r)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${y(["row","col","depth","depth2","depth3","depth4"],i)});
      }
    `}let l=r[5],u=r[4]*l,p=r[3]*u,c=r[2]*p,d=r[1]*c;if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${d}, ${c}, ${p}, ${u})) +
          dot(
            vec2(depth3, depth4),
            vec2(${l}, 1)));
        ${m(t)}
      }
    `;let h=t.shapeInfo.flatOffset,g=t.shapeInfo.texShape,x=g[0],j=g[1];if(j===d&&null==h)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${p}, ${u}, ${l})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${j}.0, ${x}.0);
        return sampleTexture(${s}, uv);
      }
    `;if(j===l&&null==h)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]*r[4]},
               ${r[2]*r[3]*r[4]},
               ${r[3]*r[4]},
               ${r[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${j}.0, ${x}.0);
        return sampleTexture(${s}, uv);
      }
    `;let _=f(s);return`
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${d} + col * ${c} + depth * ${p} +
          depth2 * ${u} + depth3 * ${l} + depth4 + ${_};
      vec2 uv = uvFromFlat(${x}, ${j}, index);
      return sampleTexture(${s}, uv);
    }
  `}(t);default:throw Error(`${s.length}-D input sampling is not yet supported`)}}(e,s);let l=e.shapeInfo.logicalShape,u=t.logicalShape;return l.length<=u.length&&(r?o+=function(e,t){let r;let s=e.name,a=s.charAt(0).toUpperCase()+s.slice(1),o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length,u=i(e.shapeInfo.logicalShape,t.logicalShape),p=g(l),c=l-o,d=["x","y","z","w","u","v"];r=0===o?"":l<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${d[e+c]} = 0;`).join("\n");let h="";h=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+c]}`).join(", ");let f="return outputValue;",m=(0,n.util).sizeFromShape(e.shapeInfo.logicalShape),x=1===m,b=(0,n.util).sizeFromShape(t.logicalShape),y=1===b;if(1!==o||x||y){if(x&&!y)f=1===l?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(u.length){let e=o-2,t=o-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${"get"+a+"AtOutCoords"}() {
      ${p} coords = getOutputCoords();
      ${r}
      vec4 outputValue = get${a}(${h});
      ${f}
    }
  `}(e,t):o+=function(e,t){let r;let s=e.name,a=s.charAt(0).toUpperCase()+s.slice(1),o="get"+a+"AtOutCoords",l=t.texShape,u=e.shapeInfo.texShape,p=e.shapeInfo.logicalShape.length,c=t.logicalShape.length;if(!e.shapeInfo.isUniform&&p===c&&null==e.shapeInfo.flatOffset&&(0,n.util).arraysEqual(u,l))return`
      float ${o}() {
        return sampleTexture(${s}, resultUV);
      }
    `;let d=g(c),h=i(e.shapeInfo.logicalShape,t.logicalShape),f=c-p,m=["x","y","z","w","u","v"];return r=0===p?"":c<2&&h.length>=1?"coords = 0;":h.map(e=>`coords.${m[e+f]} = 0;`).join("\n"),`
    float ${o}() {
      ${d} coords = getOutputCoords();
      ${r}
      return get${a}(${c<2&&p>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${m[t+f]}`).join(", ")});
    }
  `}(e,t)),o})(e,t,r.packedInputs,r.enableShapeUniforms)).join("\n"),I=t.texShape,w=(0,a.getGlslDifferences)(),C=`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${w.texture2D}(textureSampler, uv).r;
    }
  `,S=function(e){let t=`${e.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e.varyingFs} vec2 resultUV;
    ${e.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${e.defineSpecialNaN}
    ${e.defineSpecialInf}
    ${e.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${u}
    ${p}
    ${c}
  `;return t}(w);t.isPacked?(s=function(e,t,r){switch(e.length){case 0:return h();case 1:return function(e,t,r){let s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?r?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    `:1===s[1]?r?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    `:r?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `}(0,t,r);case 2:return function(e,t,r){let s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if((0,n.util).arraysEqual(e,t))return r?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;// texels needed to accommodate a logical row
let a=Math.ceil(e[1]/2);return(/**
     * getOutputCoords
     *
     * resTexRC: The rows and columns of the texels. If you move over one
     * texel to the right in the packed texture, you are moving over one column
     * (not two).
     *
     * index: The texel index
     */r?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec2(r, c);
    }
  `)}(e,t,r);case 3:return function(e,t,r){if(r)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(e[2]/2),a=n*Math.ceil(e[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}(e,t,r);default:return function(e,t,r){if(r)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(e[e.length-1]/2),a=n*Math.ceil(e[e.length-2]/2),o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`
      int b${t} = index / ${o};
      index -= b${t} * ${o};
    `+i,l=`b${t}, `+l;return`
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${i}

      int b = index / ${a};
      index -= b * ${a};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${e.length}(${l});
    }
  `}(e,t,r)}}(t.logicalShape,I,r.enableShapeUniforms),l=`
    void setOutput(vec4 val) {
      ${w.output} = val;
    }
  `):(s=function(e,t,r){switch(e.length){case 0:return h();case 1:return 1===t[0]?r?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:1===t[1]?r?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:r?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;case 2:return(0,n.util).arraysEqual(e,t)?r?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:1===e[1]?r?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:1===e[0]?r?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:r?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${e[1]};
      int c = index - r * ${e[1]};
      return ivec2(r, c);
    }
  `;case 3:return function(e,t,r){if(r){let t=o.getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e);return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${t}
    return ivec3(r, c, d);
  }
`}let s=o.getLogicalCoordinatesFromFlatIndex(["r","c","d"],e);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `}(e,t,r);case 4:return function(e,t,r){if(r){let t=o.getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d","d2"],e);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${t}
      return ivec4(r, c, d, d2);
    }
  `}let s=o.getLogicalCoordinatesFromFlatIndex(["r","c","d","d2"],e);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `}(e,t,r);case 5:return function(e,t){let r=o.getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3"],e);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${r}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}(e,t);case 6:return function(e,t){let r=o.getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3","d4"],e);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${r}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}(e,t);default:throw Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,I,r.enableShapeUniforms),l=`
    void setOutput(float val) {
      ${w.output} = vec4(val, 0, 0, 0);
    }
  `),r.packedInputs&&(S+=d);let T=[S,C,l,_,s,k,r.userCode].join("\n");return T}let u=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,p=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,c=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,d=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function h(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function f(e){return`offset${e}`}function m(e){let t=e.name,r=(0,n.util).sizeFromShape(e.shapeInfo.logicalShape);return r<2?`return ${t};`:`
    for (int i = 0; i < ${r}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function g(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function x(e,t,r){let{newShape:s,keptDims:a}=(0,n.util).squeezeShape(t),o=t.length,i=e&&3===o&&1===t[0],l=i?t.slice(1):s,u=!e&&o>1&&!(0,n.util).arraysEqual(t,r)&&s.length<o||i,p=u?l:t;return{useSqueezeShape:u,uniformShape:p,keptDims:a}}function b(e,t){// Deep copy.
let r=JSON.parse(JSON.stringify(e));return r.shapeInfo.logicalShape=t,r}function y(e,t){return t.map(t=>e[t]).join(", ")}},{"@tensorflow/tfjs-core":"U1ela","./glsl_version":"5WNNi","./shader_compiler_util":"68qos","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"68qos":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Produces GLSL code that derives logical coordinates from a flat
 * index. The code performs integer division with each stride and decrements
 * the index until the index equals the final dimension coordinate.
 */s.export(r,"getLogicalCoordinatesFromFlatIndex",()=>a),s.export(r,"getOutputLogicalCoordinatesFromFlatIndexByUniform",()=>o),s.export(r,"getLogicalCoordinatesFromFlatIndexByUniform",()=>i),/**
 * Produces GLSL code that computes the dot product of the input x and y
 * vectors. Handles splitting inputs into increments of vec4s when necessary.
 */s.export(r,"dotify",()=>u),/**
 * Produces GLSL that computes the flat index from 3D coordinates.
 */s.export(r,"getFlatIndexFrom3D",()=>p),s.export(r,"getFlatIndexFrom3DOutput",()=>c),s.export(r,"ENCODE_FLOAT_SNIPPET",()=>d);var n=e("@tensorflow/tfjs-core");function a(e,t,r="index"){let s=(0,n.util).computeStrides(t);return s.map((t,n)=>{let a=`int ${e[n]} = ${r} / ${t}`,o=n===s.length-1?`int ${e[n+1]} = ${r} - ${e[n]} * ${t}`:`index -= ${e[n]} * ${t}`;return`${a}; ${o};`}).join("")}function o(e,t,r="index"){let s=(0,n.util).computeStrides(t);return s.map((t,n)=>{let a=`int ${e[n]} = ${r} / outShapeStrides[${n}]`,o=n===s.length-1?`int ${e[n+1]} = ${r} - ${e[n]} * outShapeStrides[${n}]`:`index -= ${e[n]} * outShapeStrides[${n}]`;return`${a}; ${o};`}).join("")}function i(e,t,r="index"){let s=e.map((e,t)=>t),n=// Produces GLSL code that computes strides.
function(e,t){let r=e.length,s=e.map(e=>`${t}[${e}]`),n=Array(r-1);n[r-2]=s[r-1];for(let e=r-3;e>=0;--e)n[e]=`(${n[e+1]} * ${s[e+1]})`;return n}(s,t);return n.map((t,s)=>{let a=`int ${e[s]} = ${r} / ${n[s]}`,o=s===n.length-1?`int ${e[s+1]} = ${r} - ${e[s]} * ${n[s]}`:`index -= ${e[s]} * ${n[s]}`;return`${a}; ${o};`}).join("")}function l(e){return 1===e.length?`${e[0]}`:`vec${e.length}(${e.join(",")})`}function u(e,t){if(e.length!==t.length)throw Error(`Vectors to be dotted must be of the same length -got ${e.length} and ${t.length}`);let r=[],s=Math.floor(e.length/4),n=e.length%4;for(let n=0;n<s;n++){let s=e.slice(4*n,4*n+4),a=t.slice(4*n,4*n+4);r.push(`${l(s)}, ${l(a)}`)}if(0!==n){let n=e.slice(4*s),a=t.slice(4*s);1===n.length&&(n=n.map(e=>`float(${e})`),a=a.map(e=>`float(${e})`)),r.push(`${l(n)}, ${l(a)}`)}return r.map((e,t)=>`dot(${e})`).join("+")}function p(e){let t=(0,n.util).computeStrides(e).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function c(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}let d=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7JAzN":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DecodeMatrixPackedProgram",()=>l);var n=e("./glsl_version"),a=e("./gpgpu_math"),o=e("./shader_compiler_util"),i=e("./tex_util");class l{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=i.PackingScheme.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=(0,n.getGlslDifferences)();this.outputShape=e,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?o.getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):o.getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}},{"./glsl_version":"5WNNi","./gpgpu_math":"iIQOP","./shader_compiler_util":"68qos","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7McPy":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EncodeFloatProgram",()=>i);var n=e("./glsl_version"),a=e("./shader_compiler_util"),o=e("./tex_util");class i{constructor(e){this.variableNames=["A"],this.outTexUsage=o.TextureUsage.DOWNLOAD;let t=(0,n.getGlslDifferences)();this.outputShape=e,this.userCode=`
      ${a.ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}},{"./glsl_version":"5WNNi","./shader_compiler_util":"68qos","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jAcxh:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EncodeFloatPackedProgram",()=>i);var n=e("./glsl_version"),a=e("./shader_compiler_util"),o=e("./tex_util");class i{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=o.TextureUsage.DOWNLOAD;let t=(0,n.getGlslDifferences)();this.outputShape=e,this.userCode=`
      ${a.ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}},{"./glsl_version":"5WNNi","./shader_compiler_util":"68qos","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lKEJa:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EncodeMatrixProgram",()=>i);var n=e("./glsl_version"),a=e("./gpgpu_math"),o=e("./shader_compiler_util");class i{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let r=(0,n.getGlslDifferences)();this.outputShape=e,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?o.getFlatIndexFrom3DOutput():o.getFlatIndexFrom3D(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${r.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${r.output} = vec4(${s}, 0., 0., 0.);
      }
    `}}},{"./glsl_version":"5WNNi","./gpgpu_math":"iIQOP","./shader_compiler_util":"68qos","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],AiWSV:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/*
This is how the shader encodes a tensor with shape = [2, 3, 5]
(indices are [batch, row, col]).

000|001   002|003   004|xxx   020|021   022|023   024|xxx
-------   -------   -------   -------   -------   -------
010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

100|101   102|103   104|xxx   120|121   122|123   124|xxx
-------   -------   -------   -------   -------   -------
110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

Single texels contain only values from the same batch, and from adjacent rows
and columns.
 */s.export(r,"EncodeMatrixPackedProgram",()=>i);var n=e("./glsl_version"),a=e("./gpgpu_math"),o=e("./shader_compiler_util");class i{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let r=(0,n.getGlslDifferences)();this.outputShape=e,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length);let s="",i="result";t&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){let a=2*t+n;s+=`
          localCoords = coords;
          if(localCoords[2] + ${n} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${n};
          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${t};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${r.texture2D}(A, uv);

            if (offset == 0) {
              result[${a}] = values[0];
            } else if (offset == 1) {
              result[${a}] = values[1];
            } else if (offset == 2) {
              result[${a}] = values[2];
            } else {
              result[${a}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?o.getFlatIndexFrom3DOutput():o.getFlatIndexFrom3D(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${s}

          ${r.output} = ${i};
        }
    `}}},{"./glsl_version":"5WNNi","./gpgpu_math":"iIQOP","./shader_compiler_util":"68qos","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5J0Xq":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"GPGPUContext",()=>u),/**
 * Finds the index of the last true element using linear search.
 * Note: We can't do binary search because Chrome expects us to explicitly
 * test all fences before download:
 * https://github.com/tensorflow/tfjs/issues/1145
 */s.export(r,"linearSearchLastTrue",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./canvas_util"),o=e("./gpgpu_util"),i=e("./tex_util"),l=e("./webgl_util");class u{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let t=(0,n.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,(0,a.setWebGLContext)(t,e)):this.gl=(0,a.getWebGLContext)(t);// WebGL 2.0 enables texture floats without an extension.
let r="WEBGL_color_buffer_float",s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,n.env)().getNumber("WEBGL_VERSION")){let e="OES_texture_half_float";if(this.textureFloatExtension=l.getExtensionOrThrow(this.gl,"OES_texture_float"),l.hasExtension(this.gl,e))this.textureHalfFloatExtension=l.getExtensionOrThrow(this.gl,e);else if((0,n.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),l.hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=l.getExtensionOrThrow(this.gl,s);else if((0,n.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",l.hasExtension(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else if(l.hasExtension(this.gl,s))this.colorBufferHalfFloatExtension=this.gl.getExtension(s);else throw Error("GL context does not support color renderable floats");this.vertexBuffer=o.createVertexBuffer(this.gl),this.indexBuffer=o.createIndexBuffer(this.gl),this.framebuffer=l.createFramebuffer(this.gl),this.textureConfig=i.getTextureConfig(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,n.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;l.callAndCheck(e,()=>e.finish()),l.callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),l.callAndCheck(e,()=>e.deleteFramebuffer(this.framebuffer)),l.callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),l.callAndCheck(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),l.callAndCheck(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),o.createFloat32MatrixTexture(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),o.createFloat16MatrixTexture(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),o.createUnsignedBytesMatrixTexture(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),o.uploadPixelDataToTexture(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,r,s){this.throwIfDisposed(),o.uploadDenseMatrixToTexture(this.gl,e,t,r,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),o.createFloat16PackedMatrixTexture(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),o.createPackedMatrixTexture(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(l.unbindColorTextureFromFramebuffer(this.gl,this.framebuffer),this.outputTexture=null),l.callAndCheck(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,r){return this.downloadMatrixDriver(e,()=>o.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl,t,r,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,r,s,n,a){return o.downloadPackedMatrixFromBuffer(this.gl,e,t,r,s,n,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return o.downloadFloat32MatrixFromBuffer(this.gl,e,t)}createBufferFromTexture(e,t,r){this.bindTextureToFrameBuffer(e);let s=o.createBufferFromOutputTexture(this.gl,t,r,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,r;if((0,n.env)().getBool("WEBGL_FENCE_API_ENABLED")){let s=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{let t=e.clientWaitSync(s,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},t=s}else(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(t,(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):// WebGL 1.0 when there is no disjoint query timer. In this case, because
// the fence passes immediately, we'll immediately ask for a download of
// the texture, which will cause the UI thread to hang.
r=()=>!0;return{query:t,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,r){return this.downloadMatrixDriver(e,()=>o.downloadMatrixFromPackedOutputTexture(this.gl,t,r))}createProgram(e){this.throwIfDisposed();let t=this.gl;null==this.vertexShader&&(this.vertexShader=o.createVertexShader(t));let r=l.createProgram(t);return l.callAndCheck(t,()=>t.attachShader(r,this.vertexShader)),l.callAndCheck(t,()=>t.attachShader(r,e)),l.linkProgram(t,r),this.debug&&l.validateProgram(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=o.bindVertexProgramAttributeStreams(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&l.callAndCheck(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&l.validateProgram(this.gl,this.program),l.callAndCheck(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,r=!0){return(this.throwIfDisposed(),r)?l.getProgramUniformLocationOrThrow(this.gl,e,t):l.getProgramUniformLocation(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),l.callAndCheck(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,r){this.throwIfDisposed(),this.throwIfNoProgram(),l.bindTextureToProgramUniformSampler(this.gl,e,t,r)}setOutputMatrixTexture(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}setOutputPackedMatrixTexture(e,t,r){this.throwIfDisposed();let[s,n]=i.getPackedMatrixTextureShapeWidthHeight(t,r);this.setOutputMatrixTextureDriver(e,s,n)}setOutputMatrixWriteRegion(e,t,r,s){this.setOutputMatrixWriteRegionDriver(r,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,r,s){throw Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&l.validateProgram(this.gl,this.program),l.validateFramebuffer(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&this.debugValidate(),l.callAndCheck(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),l.callAndCheck(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=l.getExtensionOrThrow(this.gl,2===(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),r=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,r),r}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();e.endQuery(t.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await (0,n.util).repeatedTry(()=>this.disposed||// while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(e,(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,(0,n.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl,r=t.getQueryParameter(e,t.QUERY_RESULT);// Return milliseconds.
return r/1e6}{let t=this.getQueryTimerExtensionWebGL1(),r=t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT);// Return milliseconds.
return r/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,r=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),s&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),r=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){// Find the last query that has finished.
let e=p(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){let r;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||("setTimeoutCustom"in(0,n.env)().platform&&(r=(0,n.env)().platform.setTimeoutCustom.bind((0,n.env)().platform)),(0,n.util).repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,r))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),l.bindColorTextureToFramebuffer(this.gl,e,this.framebuffer),this.debug&&l.validateFramebuffer(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(l.bindColorTextureToFramebuffer(this.gl,this.outputTexture,this.framebuffer),this.debug&&l.validateFramebuffer(this.gl)):l.unbindColorTextureFromFramebuffer(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let r=t();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(e,t,r){this.throwIfDisposed();let s=this.gl;l.bindColorTextureToFramebuffer(s,e,this.framebuffer),this.debug&&l.validateFramebuffer(s),this.outputTexture=e,l.callAndCheck(s,()=>s.viewport(0,0,t,r)),l.callAndCheck(s,()=>s.scissor(0,0,t,r))}setOutputMatrixWriteRegionDriver(e,t,r,s){this.throwIfDisposed(),l.callAndCheck(this.gl,()=>this.gl.scissor(e,t,r,s))}throwIfDisposed(){if(this.disposed)throw Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw Error("No GPU program is currently set.")}}function p(e){let t=0;for(;t<e.length;++t){let r=e[t]();if(!r)break}return t-1}},{"@tensorflow/tfjs-core":"U1ela","./canvas_util":"6QNnT","./gpgpu_util":"7rnO5","./tex_util":"cgolR","./webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7rnO5":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"createVertexShader",()=>l),s.export(r,"createVertexBuffer",()=>u),s.export(r,"createIndexBuffer",()=>p),s.export(r,"getInternalFormatForFloat32MatrixTexture",()=>d),s.export(r,"createFloat32MatrixTexture",()=>h),s.export(r,"getInternalFormatForFloat16MatrixTexture",()=>f),s.export(r,"createFloat16MatrixTexture",()=>m),s.export(r,"getInternalFormatForUnsignedBytesMatrixTexture",()=>g),s.export(r,"createUnsignedBytesMatrixTexture",()=>x),s.export(r,"getInternalFormatForPackedMatrixTexture",()=>b),s.export(r,"createPackedMatrixTexture",()=>y),s.export(r,"getInternalFormatForFloat16PackedMatrixTexture",()=>j),s.export(r,"createFloat16PackedMatrixTexture",()=>_),s.export(r,"bindVertexProgramAttributeStreams",()=>k),s.export(r,"uploadDenseMatrixToTexture",()=>I),s.export(r,"uploadPixelDataToTexture",()=>w),s.export(r,"createBufferFromOutputTexture",()=>C),s.export(r,"downloadFloat32MatrixFromBuffer",()=>S),s.export(r,"downloadByteEncodedFloatMatrixFromOutputTexture",()=>T),s.export(r,"downloadPackedMatrixFromBuffer",()=>N),s.export(r,"downloadMatrixFromPackedOutputTexture",()=>E);var n=e("@tensorflow/tfjs-core"),a=e("./glsl_version"),o=e("./tex_util"),i=e("./webgl_util");function l(e){let t=(0,a.getGlslDifferences)(),r=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return i.createVertexShader(e,r)}function u(e){// [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return i.createStaticVertexBuffer(e,t)}function p(e){// OpenGL (and WebGL) have "CCW == front" winding
let t=new Uint16Array([0,1,2,2,1,3]);return i.createStaticIndexBuffer(e,t)}function c(e,t,r,s,a,o){i.validateTextureSize(t,r);let l=i.createTexture(e),u=e.TEXTURE_2D;return i.callAndCheck(e,()=>e.bindTexture(u,l)),i.callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),i.callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),i.callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)),i.callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===(0,n.env)().getNumber("WEBGL_VERSION")?i.callAndCheck(e,()=>e.texImage2D(u,0,s,t,r,0,a,o,null)):i.callAndCheck(e,()=>e.texStorage2D(u,1,s,t,r)),i.callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:l,texShape:[r,t]}}function d(e){return e.internalFormatFloat}function h(e,t,r,s){let[n,a]=o.getUnpackedMatrixTextureShapeWidthHeight(t,r);return c(e,n,a,d(s),s.textureFormatFloat,e.FLOAT)}function f(e){return e.internalFormatHalfFloat}function m(e,t,r,s){let[n,a]=o.getUnpackedMatrixTextureShapeWidthHeight(t,r);return c(e,n,a,f(s),s.textureFormatFloat,s.textureTypeHalfFloat)}function g(e){return e.downloadTextureFormat}function x(e,t,r,s){let[n,a]=o.getUnpackedMatrixTextureShapeWidthHeight(t,r);return c(e,n,a,g(s),e.RGBA,e.UNSIGNED_BYTE)}function b(e){return e.internalFormatPackedFloat}function y(e,t,r,s){let[n,a]=o.getPackedMatrixTextureShapeWidthHeight(t,r);return c(e,n,a,b(s),e.RGBA,e.FLOAT)}function j(e){return e.internalFormatPackedHalfFloat}function _(e,t,r,s){let[n,a]=o.getPackedMatrixTextureShapeWidthHeight(t,r);return c(e,n,a,j(s),e.RGBA,s.textureTypeHalfFloat)}function k(e,t,r){i.callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r));let s=i.bindVertexBufferToProgramAttribute(e,t,"clipSpacePos",r,3,20,0);return s&&i.bindVertexBufferToProgramAttribute(e,t,"uv",r,2,20,12)}function I(e,t,r,s,a,o){let l,u,p;i.callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,t)),a instanceof Uint8Array?(l=new Uint8Array(r*s*4),u=e.UNSIGNED_BYTE,p=e.RGBA):(l=new Float32Array(r*s*4),u=e.FLOAT,p=o.internalFormatPackedFloat),l.set(a),2===(0,n.env)().getNumber("WEBGL_VERSION")?i.callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,r,s,e.RGBA,u,l)):i.callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,p,r,s,0,e.RGBA,u,l)),i.callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function w(e,t,r){i.callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,t)),r.data instanceof Uint8Array?2===(0,n.env)().getNumber("WEBGL_VERSION")?i.callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,r.width,r.height,e.RGBA,e.UNSIGNED_BYTE,r.data)):i.callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r.width,r.height,0,e.RGBA,e.UNSIGNED_BYTE,r.data)):2===(0,n.env)().getNumber("WEBGL_VERSION")?i.callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,r)):i.callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r)),i.callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function C(e,t,r,s){// Create and bind the buffer.
let n=e.createBuffer();i.callAndCheck(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,n));let a=16*t*r;return i.callAndCheck(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),// Enqueue a command on the GPU command queue to copy of texture into the
// buffer.
i.callAndCheck(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,0)),i.callAndCheck(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),n}function S(e,t,r){let s=new Float32Array(r);return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,s),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),s}function T(e,t,r,s){let[n,a]=o.getUnpackedMatrixTextureShapeWidthHeight(t,r),l=new Uint8Array(o.getUnpackedArraySizeFromMatrixSize(t*r,4));// By wrapping the buffer in a Float32Array, we use native browser IEEE 754
// decoding of the 4 bytes that back each 32 bit float.
return i.callAndCheck(e,()=>e.readPixels(0,0,n,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,l)),new Float32Array(l.buffer)}function N(e,t,r,s,n,a,i,l){let u=new Float32Array(o.getPackedRGBAArraySizeFromMatrixShape(a,i));return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,u),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),u}function E(e,t,r){let s=new Float32Array(t*r*4);return i.callAndCheck(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,s)),s}},{"@tensorflow/tfjs-core":"U1ela","./glsl_version":"5WNNi","./tex_util":"cgolR","./webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],glaaY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addImplCPU",()=>a),s.export(r,"bincountImplCPU",()=>o),s.export(r,"bincountReduceImplCPU",()=>i),s.export(r,"castImplCPU",()=>l),s.export(r,"ceilImplCPU",()=>u),s.export(r,"concatImplCPU",()=>p),s.export(r,"equalImplCPU",()=>c),s.export(r,"expImplCPU",()=>d),s.export(r,"expm1ImplCPU",()=>h),s.export(r,"floorImplCPU",()=>f),s.export(r,"gatherNdImplCPU",()=>m),s.export(r,"gatherV2ImplCPU",()=>g),s.export(r,"greaterEqualImplCPU",()=>b),s.export(r,"greaterImplCPU",()=>x),s.export(r,"lessEqualImplCPU",()=>j),s.export(r,"lessImplCPU",()=>y),s.export(r,"linSpaceImplCPU",()=>_),s.export(r,"logImplCPU",()=>k),s.export(r,"maxImplCPU",()=>I),s.export(r,"maximumImplCPU",()=>w),s.export(r,"minimumImplCPU",()=>C),s.export(r,"multiplyImplCPU",()=>S),s.export(r,"negImplCPU",()=>T),s.export(r,"notEqualImplCPU",()=>N),s.export(r,"prodImplCPU",()=>E),s.export(r,"raggedGatherImplCPU",()=>F),s.export(r,"raggedTensorToTensorImplCPU",()=>A),s.export(r,"scatterImplCPU",()=>$),s.export(r,"sigmoidImplCPU",()=>P),s.export(r,"simpleAbsImplCPU",()=>z),s.export(r,"sliceImplCPU",()=>M),s.export(r,"sparseFillEmptyRowsImplCPU",()=>O),s.export(r,"sparseReshapeImplCPU",()=>L),s.export(r,"sparseSegmentReductionImplCPU",()=>B),s.export(r,"sqrtImplCPU",()=>U),s.export(r,"stridedSliceImplCPU",()=>V),s.export(r,"stringNGramsImplCPU",()=>G),s.export(r,"stringSplitImplCPU",()=>W),s.export(r,"stringToHashBucketFastImplCPU",()=>q),s.export(r,"subImplCPU",()=>K),s.export(r,"rangeImplCPU",()=>R),s.export(r,"rsqrtImplCPU",()=>D),s.export(r,"tileImplCPU",()=>H),s.export(r,"topKImplCPU",()=>X),s.export(r,"transposeImplCPU",()=>Y),s.export(r,"uniqueImplCPU",()=>Z);var n=e("@tensorflow/tfjs-backend-cpu/dist/shared");let{addImpl:a,bincountImpl:o,bincountReduceImpl:i,castImpl:l,ceilImpl:u,concatImpl:p,equalImpl:c,expImpl:d,expm1Impl:h,floorImpl:f,gatherNdImpl:m,gatherV2Impl:g,greaterImpl:x,greaterEqualImpl:b,lessImpl:y,lessEqualImpl:j,linSpaceImpl:_,logImpl:k,maxImpl:I,maximumImpl:w,minimumImpl:C,multiplyImpl:S,negImpl:T,notEqualImpl:N,prodImpl:E,raggedGatherImpl:F,raggedTensorToTensorImpl:A,rangeImpl:R,rsqrtImpl:D,scatterImpl:$,sigmoidImpl:P,simpleAbsImpl:z,sliceImpl:M,sparseFillEmptyRowsImpl:O,sparseReshapeImpl:L,sparseSegmentReductionImpl:B,sqrtImpl:U,stridedSliceImpl:V,stringNGramsImpl:G,stringSplitImpl:W,stringToHashBucketFastImpl:q,subImpl:K,tileImpl:H,topKImpl:X,transposeImpl:Y,uniqueImpl:Z}=n},{"@tensorflow/tfjs-backend-cpu/dist/shared":"4O5jX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4O5jX":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// Shared functionality among backends.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"simpleAbsImpl",()=>n.simpleAbsImpl),s.export(r,"addImpl",()=>a.addImpl),s.export(r,"bincountImpl",()=>o.bincountImpl),s.export(r,"bincountReduceImpl",()=>o.bincountReduceImpl),s.export(r,"castImpl",()=>i.castImpl),s.export(r,"ceilImpl",()=>l.ceilImpl),s.export(r,"concatImpl",()=>u.concatImpl),s.export(r,"equalImpl",()=>p.equalImpl),s.export(r,"expImpl",()=>c.expImpl),s.export(r,"expm1Impl",()=>d.expm1Impl),s.export(r,"floorImpl",()=>h.floorImpl),s.export(r,"gatherNdImpl",()=>f.gatherNdImpl),s.export(r,"gatherV2Impl",()=>m.gatherV2Impl),s.export(r,"greaterImpl",()=>g.greaterImpl),s.export(r,"greaterEqualImpl",()=>x.greaterEqualImpl),s.export(r,"lessImpl",()=>b.lessImpl),s.export(r,"lessEqualImpl",()=>y.lessEqualImpl),s.export(r,"linSpaceImpl",()=>j.linSpaceImpl),s.export(r,"logImpl",()=>_.logImpl),s.export(r,"maxImpl",()=>k.maxImpl),s.export(r,"maximumImpl",()=>I.maximumImpl),s.export(r,"minimumImpl",()=>w.minimumImpl),s.export(r,"multiplyImpl",()=>C.multiplyImpl),s.export(r,"negImpl",()=>S.negImpl),s.export(r,"notEqualImpl",()=>T.notEqualImpl),s.export(r,"prodImpl",()=>N.prodImpl),s.export(r,"raggedGatherImpl",()=>E.raggedGatherImpl),s.export(r,"raggedTensorToTensorImpl",()=>F.raggedTensorToTensorImpl),s.export(r,"rangeImpl",()=>A.rangeImpl),s.export(r,"rsqrtImpl",()=>R.rsqrtImpl),s.export(r,"scatterImpl",()=>D.scatterImpl),s.export(r,"sigmoidImpl",()=>$.sigmoidImpl),s.export(r,"sliceImpl",()=>P.sliceImpl),s.export(r,"sparseFillEmptyRowsImpl",()=>z.sparseFillEmptyRowsImpl),s.export(r,"sparseReshapeImpl",()=>M.sparseReshapeImpl),s.export(r,"sparseSegmentReductionImpl",()=>O.sparseSegmentReductionImpl),s.export(r,"sqrtImpl",()=>L.sqrtImpl),s.export(r,"squaredDifferenceImpl",()=>B.squaredDifferenceImpl),s.export(r,"stridedSliceImpl",()=>U.stridedSliceImpl),s.export(r,"stringNGramsImpl",()=>V.stringNGramsImpl),s.export(r,"stringSplitImpl",()=>G.stringSplitImpl),s.export(r,"stringToHashBucketFastImpl",()=>W.stringToHashBucketFastImpl),s.export(r,"subImpl",()=>q.subImpl),s.export(r,"tileImpl",()=>K.tileImpl),s.export(r,"topKImpl",()=>H.topKImpl),s.export(r,"transposeImpl",()=>X.transposeImpl),s.export(r,"uniqueImpl",()=>Y.uniqueImpl);var n=e("./kernels/Abs"),a=e("./kernels/Add"),o=e("./kernels/Bincount_impl"),i=e("./kernels/Cast"),l=e("./kernels/Ceil"),u=e("./kernels/Concat_impl"),p=e("./kernels/Equal"),c=e("./kernels/Exp"),d=e("./kernels/Expm1"),h=e("./kernels/Floor"),f=e("./kernels/GatherNd_Impl"),m=e("./kernels/GatherV2_impl"),g=e("./kernels/Greater"),x=e("./kernels/GreaterEqual"),b=e("./kernels/Less"),y=e("./kernels/LessEqual"),j=e("./kernels/LinSpace_impl"),_=e("./kernels/Log"),k=e("./kernels/Max_impl"),I=e("./kernels/Maximum"),w=e("./kernels/Minimum"),C=e("./kernels/Multiply"),S=e("./kernels/Neg"),T=e("./kernels/NotEqual"),N=e("./kernels/Prod"),E=e("./kernels/RaggedGather_impl"),F=e("./kernels/RaggedTensorToTensor_impl"),A=e("./kernels/Range_impl"),R=e("./kernels/Rsqrt"),D=e("./kernels/Scatter_impl"),$=e("./kernels/Sigmoid"),P=e("./kernels/Slice"),z=e("./kernels/SparseFillEmptyRows_impl"),M=e("./kernels/SparseReshape_impl"),O=e("./kernels/SparseSegmentReduction_impl"),L=e("./kernels/Sqrt"),B=e("./kernels/SquaredDifference"),U=e("./kernels/StridedSlice_impl"),V=e("./kernels/StringNGrams_impl"),G=e("./kernels/StringSplit_impl"),W=e("./kernels/StringToHashBucketFast_impl"),q=e("./kernels/Sub"),K=e("./kernels/Tile_impl"),H=e("./kernels/TopK_impl"),X=e("./kernels/Transpose_impl"),Y=e("./kernels/Unique_impl")},{"./kernels/Abs":"11wVJ","./kernels/Add":"k4i1P","./kernels/Bincount_impl":"3vCwX","./kernels/Cast":"5cInC","./kernels/Ceil":"23xgl","./kernels/Concat_impl":"k1LJv","./kernels/Equal":"3i0zH","./kernels/Exp":"cXb51","./kernels/Expm1":"40ang","./kernels/Floor":"g4iP1","./kernels/GatherNd_Impl":"hksb1","./kernels/GatherV2_impl":"bLQoC","./kernels/Greater":"52G8z","./kernels/GreaterEqual":"2GAg7","./kernels/Less":"hCPxj","./kernels/LessEqual":"c2ACz","./kernels/LinSpace_impl":"gD6ks","./kernels/Log":"lc7KK","./kernels/Max_impl":"bz6kW","./kernels/Maximum":"7WLur","./kernels/Minimum":"20aDa","./kernels/Multiply":"c4iXH","./kernels/Neg":"5Uru6","./kernels/NotEqual":"deYPj","./kernels/Prod":"exxHc","./kernels/RaggedGather_impl":"hO4Vw","./kernels/RaggedTensorToTensor_impl":"11hDB","./kernels/Range_impl":"5kb3C","./kernels/Rsqrt":"aifQq","./kernels/Scatter_impl":"cdVA2","./kernels/Sigmoid":"7dSeC","./kernels/Slice":"54KMc","./kernels/SparseFillEmptyRows_impl":"gjRSZ","./kernels/SparseReshape_impl":"7idqz","./kernels/SparseSegmentReduction_impl":"apbuT","./kernels/Sqrt":"gYyg0","./kernels/SquaredDifference":"3kOvy","./kernels/StridedSlice_impl":"cUQt7","./kernels/StringNGrams_impl":"2G8NP","./kernels/StringSplit_impl":"7o38c","./kernels/StringToHashBucketFast_impl":"e57Im","./kernels/Sub":"1t4R5","./kernels/Tile_impl":"iJ8AS","./kernels/TopK_impl":"cPIa5","./kernels/Transpose_impl":"biCwU","./kernels/Unique_impl":"ehtBe","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"11wVJ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"simpleAbsImpl",()=>o),s.export(r,"abs",()=>i),s.export(r,"absConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let t=new Float32Array(e.length);for(let r=0;r<e.length;++r)t[r]=Math.abs(e[r]);return t}let i=e=>{let{x:t}=e.inputs,r=e.backend;(0,a.assertNotComplex)(t,"abs");let s=new Float32Array((0,n.util).sizeFromShape(t.shape)),i=r.data.get(t.dataId).values;return s=o(i),r.makeOutput(s,t.shape,t.dtype)},l={kernelName:n.Abs,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fliQI:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"assertNotComplex",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&(0,n.util).assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k4i1P:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addImpl",()=>i),s.export(r,"addComplexImpl",()=>l),s.export(r,"add",()=>u),s.export(r,"addConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e+t),l=(0,o.createComplexBinaryKernelImpl)((e,t,r,s)=>({real:e+r,imag:t+s})),u=(0,o.binaryKernelFunc)(n.Add,i,l),p={kernelName:n.Add,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6Mf5d":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Template that creates implementation for binary ops. Supports broadcast.
 */s.export(r,"createSimpleBinaryKernelImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e){return(t,r,s,a,o)=>{let i=(0,n.backend_util).assertAndGetBroadcastShape(t,r),l=i.length,u=(0,n.util).computeStrides(i),p=(0,n.util).sizeFromShape(i),c=(0,n.util).getTypedArrayFromDType(o,p),d=t.length,h=r.length,f=(0,n.util).computeStrides(t),m=(0,n.util).computeStrides(r),g=(0,n.backend_util).getBroadcastDims(t,i),x=(0,n.backend_util).getBroadcastDims(r,i);if(g.length+x.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<c.length;++t){let r=(0,n.util).indexToLoc(t,l,u),o=r.slice(-d);g.forEach(e=>o[e]=0);let i=(0,n.util).locToIndex(o,d,f),p=r.slice(-h);x.forEach(e=>p[e]=0);let b=(0,n.util).locToIndex(p,h,m);c[t]=e(s[i],a[b])}return[c,i]}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cp3P7:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param name Kernel name.
 * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.
 * @param binaryKernelComplexImpl Optional. If exists, represents a
 *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype
 *     is `complex64`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */s.export(r,"binaryKernelFunc",()=>l),/**
 * Template that creates the complex type implementation for binary ops.
 * Supports broadcast.
 */s.export(r,"createComplexBinaryKernelImpl",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../kernels/Cast"),i=e("../kernels/Complex");function l(e,t,r,s){return null==r?({inputs:r,backend:o})=>{let{a:i,b:l}=r;(0,a.assertNotComplex)([i,l],e);let u=o.data.get(i.dataId).values,p=o.data.get(l.dataId).values,c="string"===i.dtype?(0,n.backend_util).fromUint8ToStringArray(u):u,d="string"===i.dtype?(0,n.backend_util).fromUint8ToStringArray(p):p,h=s||i.dtype,[f,m]=t(i.shape,l.shape,c,d,h);return o.makeTensorInfo(m,h,f)}:({inputs:e,backend:n})=>{let{a,b:l}=e;if("complex64"===a.dtype||"complex64"===l.dtype){let e=(0,o.cast)({inputs:{x:a},backend:n,attrs:{dtype:"complex64"}}),t=n.data.get(e.dataId),s=t.complexTensorInfos.real,u=t.complexTensorInfos.imag,p=n.data.get(s.dataId).values,c=n.data.get(u.dataId).values,d=(0,o.cast)({inputs:{x:l},backend:n,attrs:{dtype:"complex64"}}),h=n.data.get(d.dataId),f=h.complexTensorInfos.real,m=h.complexTensorInfos.imag,g=n.data.get(f.dataId).values,x=n.data.get(m.dataId).values,[b,y,j]=r(a.shape,l.shape,p,c,g,x),_=n.makeTensorInfo(j,"float32",b),k=n.makeTensorInfo(j,"float32",y),I=(0,i.complex)({inputs:{real:_,imag:k},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(_),n.disposeIntermediateTensorInfo(k),I}{let e=n.data.get(a.dataId).values,r=n.data.get(l.dataId).values,o=s||a.dtype,[i,u]=t(a.shape,l.shape,e,r,o);return n.makeTensorInfo(u,o,i)}}}function u(e){return(t,r,s,a,o,i)=>{let l=(0,n.backend_util).assertAndGetBroadcastShape(t,r),u=(0,n.util).sizeFromShape(l),p=l.length,c=(0,n.util).computeStrides(l),d=(0,n.util).getTypedArrayFromDType("float32",u),h=(0,n.util).getTypedArrayFromDType("float32",u),f=(0,n.backend_util).getBroadcastDims(t,l),m=(0,n.backend_util).getBroadcastDims(r,l),g=(0,n.backend_util).mergeRealAndImagArrays(s,a),x=(0,n.backend_util).mergeRealAndImagArrays(o,i),b=t.length,y=(0,n.util).computeStrides(t),j=r.length,_=(0,n.util).computeStrides(r);if(f.length+m.length===0)for(let t=0;t<d.length;t++){let r=t%g.length,s=t%x.length,n=e(g[2*r],g[2*r+1],x[2*s],x[2*s+1]);d[t]=n.real,h[t]=n.imag}else for(let t=0;t<d.length;t++){let r=(0,n.util).indexToLoc(t,p,c),s=r.slice(-b);f.forEach(e=>s[e]=0);let a=(0,n.util).locToIndex(s,b,y),o=r.slice(-j);m.forEach(e=>o[e]=0);let i=(0,n.util).locToIndex(o,j,_),l=e(g[2*a],g[2*a+1],x[2*i],x[2*i+1]);d[t]=l.real,h[t]=l.imag}return[d,h,l]}}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../kernels/Cast":"5cInC","../kernels/Complex":"1mXNt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5cInC":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"castImpl",()=>p),s.export(r,"cast",()=>c),s.export(r,"castConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/zeros_impl"),i=e("./Complex"),l=e("./Identity"),u=e("./Real");function p(e,t,r,s){if("int32"===s){let r=Int32Array.from(e);return[t,"int32",r]}if("bool"===s){// This is essentially the result of notEqual(x, 0). We avoid using
// kernel notEqual to avoid circular dependency, i.e. binary_utils ->
// cast -> notEqual -> binary_utils.
let s=(0,n.util).toTypedArray([0],r),[o,i]=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e!==t?1:0)(t,[],e,s,"bool");return[i,"bool",o]}throw Error(`Error in Cast: failed to cast ${r} to ${s}`)}function c(e){let{inputs:t,backend:r,attrs:s}=e,{x:a}=t,{dtype:d}=s;// Casting to complex64.
if("complex64"===d){if("complex64"===a.dtype)return(0,l.identity)({inputs:{x:a},backend:r});let e=(0,o.zeros)(r,a.shape,a.dtype),t=c({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=(0,i.complex)({inputs:{real:t,imag:e},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),s}// Casting from complex64
if("complex64"===a.dtype){let e=(0,u.real)({inputs:{input:a},backend:r}),t=c({inputs:{x:e},backend:r,attrs:{dtype:d}});return r.disposeIntermediateTensorInfo(e),t}if(!(0,n.util).hasEncodingLoss(a.dtype,d)){// We don't change the underlying data, since we cast to higher
// precision.
let e=(0,l.identity)({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:d}}let h=r.data.get(a.dataId).values,[f,m,g]=p(h,a.shape,a.dtype,d);return r.makeTensorInfo(f,m,g)}let d={kernelName:n.Cast,backendName:"cpu",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/zeros_impl":"5dKX9","./Complex":"1mXNt","./Identity":"5buXK","./Real":"jEtTR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5dKX9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Generates a tensorInfo with all zeros value.
 * @param backend cpu backend.
 * @param shape Shape for the zeros tensor.
 * @param dtype Optional. If set, the result has this dtype.
 */s.export(r,"zeros",()=>function e(t,r,s="float32"){if("complex64"===s){let s=e(t,r,"float32"),n=e(t,r,"float32");return(0,a.complex)({inputs:{real:s,imag:n},backend:t})}let o=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(r),s);return t.makeTensorInfo(r,s,o)});var n=e("@tensorflow/tfjs-core"),a=e("../kernels/Complex")},{"@tensorflow/tfjs-core":"U1ela","../kernels/Complex":"1mXNt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1mXNt":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"complex",()=>a),s.export(r,"complexConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{real:s,imag:n}=t,a=r.data.get(s.dataId).values,o=r.data.get(n.dataId).values,i=r.makeTensorInfo(s.shape,"complex64"),l=r.data.get(i.dataId);return(// The complex tensor owns the underlying real and imag tensorInfos, only the
// complex tensor tracks refCount, when complexData is disposed the
// underlying tensorData will be disposed.
l.complexTensorInfos={real:r.makeTensorInfo(s.shape,"float32",a),imag:r.makeTensorInfo(n.shape,"float32",o)},i)}let o={kernelName:n.Complex,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5buXK":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"identity",()=>a),s.export(r,"identityConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{x:s}=t;return r.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}let o={kernelName:n.Identity,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jEtTR:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"real",()=>a),s.export(r,"realConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{input:s}=t,n=r.data.get(s.dataId).complexTensorInfos.real,a=r.data.get(n.dataId).values;// When complex tensor is disposed, its underlying parts will be disposed too.
// Make new tensor out of the real value of the complex. This makes sure the
// value is still accessible even if complex tensor is disposed.
return r.makeTensorInfo(n.shape,n.dtype,a)}let o={kernelName:n.Real,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3vCwX":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"bincountImpl",()=>a),s.export(r,"bincountReduceImpl",()=>o);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a){let o=(0,n.util).sizeFromShape(s),i=(0,n.util).makeZerosTypedArray(a,r);for(let r=0;r<e.length;r++){let s=e[r];if(s<0)throw Error("Input x must be non-negative!");s>=a||(o>0?i[s]+=t[r]:i[s]+=1)}return i}function o(e,t,r,s=!1){let a=e.shape[0],o=e.shape[1],i=(0,n.buffer)([a,r],t.dtype);for(let n=0;n<a;n++)for(let a=0;a<o;a++){let o=e.get(n,a);if(o<0)throw Error("Input x must be non-negative!");o>=r||(s?i.set(1,n,o):t.size>0?i.set(i.get(n,o)+t.get(n,a),n,o):i.set(i.get(n,o)+1,n,o))}return i}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"23xgl":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ceilImpl",()=>i),s.export(r,"ceil",()=>l),s.export(r,"ceilConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.ceil(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Ceil,i),u={kernelName:n.Ceil,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5LfNp":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Template that creates implementation for unary op.
 */s.export(r,"createSimpleUnaryImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e){return(t,r,s)=>{let a=(0,n.util).getTypedArrayFromDType(r,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],s);return a}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gxuSt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param name Kernel name.
 * @param op A `SimpleUnaryOperation` for the kernel.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */s.export(r,"unaryKernelFunc",()=>o),/**
 * Template that creates a `KernelFunc` for unary ops from the given
 * `SimpleUnaryImpl`..
 * @param name Kernel name.
 * @param unaryImpl A `SimpleUnaryImpl` that implements the op.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */s.export(r,"unaryKernelFuncFromImpl",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e,t,r){return({inputs:s,attrs:o,backend:i})=>{let{x:l}=s;if((0,a.assertNotComplex)(l,e),"string"===l.dtype||"string"===r)throw Error("unaryKernelFunc does not support string input/output");let u=i.data.get(l.dataId).values,p=(0,n.util).sizeFromShape(l.shape),c=r||l.dtype,d=(0,n.util).getArrayFromDType(c,p);for(let e=0;e<p;++e)d[e]=t(u[e],o);return i.makeTensorInfo(l.shape,c,d)}}function i(e,t,r){return({inputs:s,attrs:n,backend:o})=>{let{x:i}=s;if((0,a.assertNotComplex)(i,e),"string"===i.dtype||"string"===r)throw Error("unaryKernelFunc does not support string input/output");let l=o.data.get(i.dataId).values,u=r||i.dtype,p=t(l,u,n);return o.makeTensorInfo(i.shape,u,p)}}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k1LJv:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concatImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s){let a=(0,n.util).getArrayFromDType(r,(0,n.util).sizeFromShape(t));if(s&&"string"!==r){// Use built-in TypedArray.set() method for speed.
let t=0;e.forEach(e=>{let r=(0,n.util).sizeFromShape(e.shape);a.set(e.vals,t),t+=r})}else{let s=0;e.forEach(e=>{let o="string"===r?(0,n.backend_util).fromUint8ToStringArray(e.vals):e.vals,i=0;for(let r=0;r<e.shape[0];++r){let n=r*t[1]+s;for(let t=0;t<e.shape[1];++t)a[n+t]=o[i++]}s+=e.shape[1]})}return a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3i0zH":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"equalImpl",()=>i),s.export(r,"equal",()=>l),s.export(r,"equalConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e===t?1:0),l=(0,o.binaryKernelFunc)(n.Equal,i,null,"bool"),u={kernelName:n.Equal,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cXb51:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expImpl",()=>i),s.export(r,"exp",()=>l),s.export(r,"expConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.exp(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Exp,i,"float32"),u={kernelName:n.Exp,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"40ang":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expm1Impl",()=>i),s.export(r,"expm1",()=>l),s.export(r,"expm1Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.expm1(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Expm1,i),u={kernelName:n.Expm1,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g4iP1:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorImpl",()=>i),s.export(r,"floor",()=>l),s.export(r,"floorConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.floor(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Floor,i),u={kernelName:n.Floor,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hksb1:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherNdImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o,i,l,u){let p=(0,n.buffer)([s,o],r);for(let r=0;r<s;r++){let s=[],n=0;for(let t=0;t<a;t++){let o=e[r*a+t];n+=o*i[t],s.push(o)}if(n<0||n>=u/o)throw Error(`Invalid indices: ${s} does not index into ${l}`);for(let e=0;e<o;e++)p.values[r*o+e]=t.get(...t.indexToLoc(n*o+e))}return p}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bLQoC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherV2Impl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r){let s=(0,n.buffer)(r,e.dtype);for(let r=0;r<s.size;++r){let n=s.indexToLoc(r),a=n.slice(),o=a[0],i=a[2],l=t.locToIndex([o,i]);a[2]=t.values[l];let u=e.locToIndex(a);0<=u&&u<e.values.length&&(s.values[r]=e.values[u]);// Else, index is out of bounds, so leave the default zero val in outBuf.
}return s}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"52G8z":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greaterImpl",()=>i),s.export(r,"greater",()=>l),s.export(r,"greaterConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e>t?1:0),l=(0,o.binaryKernelFunc)(n.Greater,i,null,"bool"),u={kernelName:n.Greater,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2GAg7":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greaterEqualImpl",()=>i),s.export(r,"greaterEqual",()=>l),s.export(r,"greaterEqualConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e>=t?1:0),l=(0,o.binaryKernelFunc)(n.GreaterEqual,i,null,"bool"),u={kernelName:n.GreaterEqual,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hCPxj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lessImpl",()=>i),s.export(r,"less",()=>l),s.export(r,"lessConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e<t?1:0),l=(0,o.binaryKernelFunc)(n.Less,i,null,"bool"),u={kernelName:n.Less,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c2ACz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lessEqualImpl",()=>i),s.export(r,"lessEqual",()=>l),s.export(r,"lessEqualConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e<=t?1:0),l=(0,o.binaryKernelFunc)(n.LessEqual,i,null,"bool"),u={kernelName:n.LessEqual,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gD6ks:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"linSpaceImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r){let s=(t-e)/(r-1),a=(0,n.util).makeZerosTypedArray(r,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lc7KK:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logImpl",()=>i),s.export(r,"log",()=>l),s.export(r,"logConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.log(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Log,i),u={kernelName:n.Log,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bz6kW:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s){let a=(0,n.util).getTypedArrayFromDType(s,(0,n.util).sizeFromShape(r));for(let r=0;r<a.length;++r){let s=r*t,n=e[s];for(let r=0;r<t;++r){let t=e[s+r];(Number.isNaN(t)||t>n)&&(n=t)}a[r]=n}return a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7WLur":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maximumImpl",()=>i),s.export(r,"maximum",()=>l),s.export(r,"maximumConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>Math.max(e,t)),l=(0,o.binaryKernelFunc)(n.Maximum,i),u={kernelName:n.Maximum,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"20aDa":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"minimumImpl",()=>i),s.export(r,"minimum",()=>l),s.export(r,"minimumConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>Math.min(e,t)),l=(0,o.binaryKernelFunc)(n.Minimum,i),u={kernelName:n.Minimum,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c4iXH:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multiplyImpl",()=>i),s.export(r,"multiplyComplexImpl",()=>l),s.export(r,"multiply",()=>u),s.export(r,"multiplyConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e*t),l=(0,o.createComplexBinaryKernelImpl)((e,t,r,s)=>({real:e*r-t*s,imag:e*s+t*r})),u=(0,o.binaryKernelFunc)(n.Multiply,i,l),p={kernelName:n.Multiply,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5Uru6":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"negImpl",()=>i),s.export(r,"neg",()=>l),s.export(r,"negConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Multiply");function i(e,t,r){let s=(0,n.util).createScalarValue(-1,r);return(0,o.multiplyImpl)([],t,s,e,r)}function l(e){let{inputs:t,backend:r}=e,{x:s}=t;(0,a.assertNotComplex)(s,"neg");let n=r.data.get(s.dataId).values,[o,l]=i(n,s.shape,s.dtype);return r.makeTensorInfo(l,s.dtype,o)}let u={kernelName:n.Neg,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Multiply":"c4iXH","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],deYPj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"notEqualImpl",()=>i),s.export(r,"notEqual",()=>l),s.export(r,"notEqualConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e!==t?1:0),l=(0,o.binaryKernelFunc)(n.NotEqual,i,null,"bool"),u={kernelName:n.NotEqual,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],exxHc:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prodImpl",()=>i),s.export(r,"prod",()=>l),s.export(r,"prodConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose");function i(e,t,r,s){let[a,o]=(0,n.backend_util).computeOutAndReduceShapes(e,s),i=(0,n.upcastType)(t,"int32"),l=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(a),i),u=(0,n.util).sizeFromShape(o);for(let e=0;e<l.length;++e){let t=e*u,s=1;for(let e=0;e<u;++e)s*=r[t+e];l[e]=s}return{outVals:l,outShape:a,outDtype:i}}function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{axis:u,keepDims:p}=s;(0,a.assertNotComplex)(l,"prod");let c=l.shape.length,d=(0,n.util).parseAxisParam(u,l.shape),h=(0,n.backend_util).getAxesPermutation(d,c),f=d,m=l,g=[];null!=h&&(g.push(m=(0,o.transpose)({inputs:{x:l},backend:r,attrs:{perm:h}})),f=(0,n.backend_util).getInnerMostAxes(f.length,c));let x=r.data.get(m.dataId).values,{outVals:b,outShape:y,outDtype:j}=i(m.shape,m.dtype,x,f),_=y;return p&&(_=(0,n.backend_util).expandShapeToKeepDim(y,d)),g.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(_,j,b)}let u={kernelName:n.Prod,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jPCZf:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transpose",()=>i),s.export(r,"transposeConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose_impl");function i(e){let{inputs:t,attrs:r,backend:s}=e,{x:n}=t,{perm:i}=r;(0,a.assertNotComplex)(n,"transpose");let l=n.shape.length,u=Array(l);for(let e=0;e<u.length;e++)u[e]=n.shape[i[e]];let p=s.data.get(n.dataId).values,c=(0,o.transposeImpl)(p,n.shape,n.dtype,i,u),d=s.write(c,u,n.dtype);return{dataId:d,shape:u,dtype:n.dtype}}let l={kernelName:n.Transpose,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose_impl":"biCwU","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],biCwU:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transposeImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a){let o=t.length,i=(0,n.util).sizeFromShape(t),l=(0,n.util).computeStrides(t),u=(0,n.util).computeStrides(a),p=(0,n.util).getTypedArrayFromDType(r,(0,n.util).sizeFromShape(a));for(let t=0;t<i;++t){let r=(0,n.util).indexToLoc(t,o,l),a=Array(r.length);for(let e=0;e<a.length;e++)a[e]=r[s[e]];let i=(0,n.util).locToIndex(a,o,u);p[i]=e[t]}return p}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hO4Vw:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedGatherImpl",()=>o);var n=e("@tensorflow/tfjs-core");function a(e,t){let r=e.slice(0,t);for(;r.length<t;)r.push(1);for(let s=t;s<e.length;s++)r[t-1]*=e[s];return r}function o(e,t,r,s,o,i,l,u){if(0===e.length)throw Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw Error("Split tensors must not be scalars");let p=t[0][0]-1;if(!function(e,t,r){e.forEach((e,s)=>{if(e<0||e>=r){let a=(0,n.util).indexToLoc(s,t.length,(0,n.util).computeStrides(t)).join(",");throw Error(`indices[${a}] = ${e} is not in [0, ${r})`)}})}(i,l,p),0===s.length)throw Error("params.rank must be nonzero");let c=s[0],{outSplits:d,valueSlices:h,numValues:f}=// Construct the `splits` output tensors, encoded using a nested vector.
// Also find the slices of values that need to be copied, and store them
// in `valueSlices`.  The total number of values that will be copied (which
// we need for allocating the output values tensor) is stored in `numValues`.
function(e,t,r,s){let n=[],a=0,o=t.length-1+r.length,i=Array(o).fill(null).map(()=>[0]);!function(e,t){// Validate
for(let r=0;r<e.length;++r){let s=e[r],n=r===e.length-1?t:e[r+1].length;if(0===s.length)throw Error("Ragged splits may not be empty");if(s[0]<0)throw Error("Ragged splits must be non-negative");if(s[s.length-1]>n)throw Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw Error("Ragged splits must be sorted in ascending order")}}(r,s);// Add `splits` that come from all but the last dimension of the dense
// Tensor `indices`.  In particular, for each dimension D, we add a
// splits tensor whose values are:
//   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]
// E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:
//   [0, 3, 6]                    # length=2+1, stride=3
//   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4
let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];let r=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*r)}// Add `splits` that come from `paramsNestedSplits`.  Starting with the
// outermost ragged dimension (i.e., the first `splits` tensor), we work
// our way in, finding the range of values that should be copied.  As we
// go, we update the output `splits` for each dimension with the appropriate
// values.  In particular, the *lengths* of the slices from `param_splits`
// should be copied to generate corresponding slice lengths in the output
// splits.  E.g., if we are copying a ragged row with length 4, then we
// should add a new split point to outSplits that is 4 greater than the
// previous split point in outSplits.
for(let s=0;s<e.length;++s){let o=e[s],l=e[s]+1;// Copy splits.
for(let e=0;e<r.length;++e){let s=r[e],n=e+t.length-1;if(n>=0){let e=i[n],t=e[e.length-1]-s[o];for(let e=o;e<l;++e)i[n].push(s[e+1]+t)}o=s[o],l=s[l]}l!==o&&(n.push([o,l]),a+=l-o)}return{outSplits:i,valueSlices:n,numValues:a}}(i,l,e,c),m=function(e){let t=[];for(let r=0;r<e.length;++r){let s=e[r].length,a=(0,n.util).getArrayFromDType("int32",s);t.push(a),e[r].forEach((e,t)=>a[t]=e)}return t}(d),g=function(e,t,r,s,o){let i=t.slice();i[0]=o;let l=(0,n.util).getArrayFromDType(r,(0,n.util).sizeFromShape(i)),u=e.length,p=0===u?0:u/t[0];return!// For each slice in `(start, limit)` in `valueSlices`, append
// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates
// the number of scalars contained in each value paramsDenseValues[i].
function(e,t,r,s,n,o){let i=a(t,2)[1],l=a(o,2)[1],u=0;for(let t of r)for(let r=t[0];r<t[1];++r){for(let t=0;t<s;++t)n[u*l+t]=e[r*i+t];++u}}(e,t,s,p,l,i),[l,i]}(r,s,o,h,f);return[m,g[0],g[1]]}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"11hDB":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedTensorToTensorImpl",()=>u);var n=e("@tensorflow/tfjs-core"),a=n.backend_util.RowPartitionType;// Based on
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc
class o{constructor(e,t,r,s,a,o,i,l,u,p){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=s,this.valuesDType=a,this.defaultValue=o,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=(0,n.backend_util).getRowPartitionTypesHelper(p),this.raggedRank=(0,n.backend_util).getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===a.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}// Returns the relationship between dimension and dimension + 1.
getRowPartitionTensor(e){return this.rowPartitionTypes[0]===a.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case a.VALUE_ROWIDS:return o.getMaxWidthValueRowID(t);case a.ROW_SPLITS:return o.getMaxWidthRowSplit(t);default:throw Error(`Cannot handle partition type ${a[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let r=0;for(let s=0;s<t-1;++s){let t=e[s+1]-e[s];t>r&&(r=t)}return r}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let r=0,s=e[0],n=0;for(let a=1;a<t;++a){let t=e[a];t!==s&&(s=t,n=Math.max(a-r,n),r=a)}return Math.max(t-r,n)}tensorShapeFromTensor(e,t,r=!0){if(0===t.length){if(-1===e[0])return[];throw Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}// MakePartialShape/MakeShapeHelper.
return l(e,r)}calculateOutputSize(e){let t=this.valuesShape,r=this.defaultValueShape;(0,n.backend_util).validateDefaultValueShape(r,t);let s=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=(0,n.backend_util).combineRaggedTensorToTensorShapes(this.raggedRank,s,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}/**
     * The outputIndex represents the index in the output tensor
     * where the first element of a particular dimension would be written.
     * If it is -1, it indicates that the index is out of scope.
     * Example, given firstDimension = 10, firstDimensionOutput = 6,
     * and outputIndexMultiplier = 100:
     * result = [0 100 200 300 400 500 -1 -1 -1 -1]
     * If firstDimensionOutput = 11 instead, then:
     * result = [0 100 200 300 400 500 600 700 800 900]
     */calculateFirstParentOutputIndex(e,t,r){let s=Math.min(e,r),a=[],o=0;for(let e=0;e<s;++e,o+=t)a.push(o);for(let t=s;t<e;++t)a.push(-1);return(0,n.util).assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,r,s){let n=e.length,a=[];for(let o=0;o<n-1;++o){let n=e[o+1]-e[o],i=Math.min(s,n),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)a.push(l),l+=r;for(let e=0;e<n-i;++e)a.push(-1)}if(n>0&&a.length!==e[n-1])throw Error("Invalid row split size.");return a}// Calculate the output index of the first element of a list.
// The parentOutputIndex is the same computation for the previous list.
// -1 indicates an element or list that is out of range.
// The outputIndexMultiplier is the number of output indices one moves
// forward for each column.
// E.g., given:
// valueRowIds:[0 1 2 2 2 3 5 5 6]
// parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
// outputIndexMultiplier: 10
// outputSize: 2
// You get:
// result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
// result[0] = parentOutputIndex[valueRowIds[0]]
// result[1] = parentOutputIndex[valueRowIds[1]]
// result[2] = parentOutputIndex[valueRowIds[2]]
// result[3] = parentOutputIndex[valueRowIds[2] + 10]
// result[4] = -1 because it is the third element the size is 2.
// result[5] = parentOutputIndex[valueRowIds[3]]
// result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
// result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
// result[8] = parentOutputIndex[valueRowIds[7]]
calculateOutputIndexValueRowID(e,t,r,s){let n=e.length,a=[];if(0===n)return[];let o=0,i=e[0];if(i>=t.length)throw Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];a.push(l);for(let u=1;u<n;++u){let n=e[u];if(n===i)l>=0&&(++o<s?l+=r:l=-1);else{if(o=0,i=n,n>=t.length)throw Error(`Got nextValueRowId=${n} which is not less than ${t.length}`);l=t[n]}a.push(l)}if(a.length!==e.length)throw Error("Invalid row ids.");return a}calculateOutputIndex(e,t,r,s){let n=this.getRowPartitionTensor(e),o=this.getRowPartitionTypeByDimension(e);switch(o){case a.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(n,t,r,s);case a.ROW_SPLITS:if(n.length-1>t.length)throw Error(`Row partition size is greater than output size: ${n.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(n,t,r,s);default:throw Error(`Unsupported partition type: ${a[o]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case a.FIRST_DIM_SIZE:return e[0];case a.VALUE_ROWIDS:throw Error("Cannot handle VALUE_ROWIDS in first dimension.");case a.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw Error(`Cannot handle type ${a[t]}`)}}compute(){let e=this.rowPartitionValues[0];if(e.length<=0)throw Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),r=this.calculateOutputSize(t),s=Array(this.raggedRank+1);s[s.length-1]=1;for(let e=s.length-2;e>=0;--e)s[e]=s[e+1]*r[e+1];// Full size of the tensor.
let a=l(r,!1),o=(0,n.util).getArrayFromDType(this.valuesDType,(0,n.util).sizeFromShape(a)),i=s[0]*r[0];if(i>0){let e=this.calculateFirstParentOutputIndex(t,s[0],r[0]);for(let t=1;t<=this.raggedRank;++t){let n=this.calculateOutputIndex(t-1,e,s[t],r[t]);e=n}this.setOutput(this.raggedRank,e,o,a)}return[a,o]}setOutput(e,t,r,s){if(0===r.length)return;let a=this.values,o=s.slice();o=o.slice(e+1);let l=(0,n.util).sizeFromShape(o),u=t.length,p=this.defaultValue;if(p.length!==l&&1!==p.length){let e=this.defaultValueShape;(0,n.tidy)(()=>{let t=(0,n.reshape)(p,e),r=(0,n.broadcastTo)(t,o);p=r.dataSync()})}// Loop through the outputIndex array, finding contiguous regions that
// should be copied.  Once we find the end of a contiguous region, copy it
// and add any necessary padding (with defaultValue).
let c=0,d=0,h=0;// Start of contiguous region (in values)
for(let e=0;e<=u;++e){// dstI is the destination where the value at srcI should be copied.
let s=e<u?t[e]:-1;// If we're still in a contiguous region, then update dstEnd go to the
// next srcI.
if(s===h){++h;continue}// We found the end of contiguous region.  This can be because we found
// a gap (dstI > dstEnd), or a source value that shouldn't be copied
// because it's out-of-bounds (dstI == -1), or the end of the tensor
// (dstI === -1).
if(d<h){// Copy the contiguous region.
let e=a.subarray(c*l),t=r.subarray(d*l),s=(h-d)*l;i(t,e,s)}// Add any necessary padding (w/ defaultValue).
if(e>=u){// We reached the end of values: pad to the end of output.
let e=r.length;s=Math.floor(e/l)}if(s>h){if(1===this.defaultValue.length)r.subarray(h*l,s*l).fill(this.defaultValue[0]),h=s;else for(;s>h;){let e=r.slice(h*l);i(e,p,l),++h}}s<0?(// srcI should be skipped -- leave it out of the contiguous region.
c=e+1,d=h):(// srcI should be copied -- include it in the contiguous region.
c=e,h=(d=h)+1)}}}function i(e,t,r){for(let s=0;s<r;s++)e[s]=t[s]}function l(e,t){let r=[];for(let s of e){if(s<0){if(!t)throw Error(`Dimension ${s} must be >= 0`);if(s<-1)throw Error(`Dimension ${s} must be >= -1`);s=-1}r.push(s)}return r}function u(e,t,r,s,n,a,i,l,u,p){return new o(e,t,r,s,n,a,i,l,u,p).compute()}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5kb3C":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rangeImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s){let a=e===t,o=e<t&&r<0,i=t<e&&r>1;if(a||o||i)return(0,n.util).makeZerosTypedArray(0,s);let l=Math.abs(Math.ceil((t-e)/r)),u=(0,n.util).makeZerosTypedArray(l,s);t<e&&1===r&&// (or was set to 1)
(r=-1),u[0]=e;for(let e=1;e<u.length;e++)u[e]=u[e-1]+r;return u}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aifQq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rsqrtImpl",()=>i),s.export(r,"rsqrt",()=>l),s.export(r,"rsqrtConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>1/Math.sqrt(e)),l=(0,o.unaryKernelFuncFromImpl)(n.Rsqrt,i),u={kernelName:n.Rsqrt,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cdVA2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"scatterImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o,i,l,u,p){let c=[s/a,a],d=e.values,h=t.values;if(0===s)return(0,n.buffer)(r,t.dtype);let f=(0,n.buffer)(c,t.dtype);"string"==typeof u?f.values.fill(u):"number"==typeof u?f.values.fill(u):"boolean"==typeof u&&f.values.fill(+u);for(let e=0;e<o;e++){let n=[],o=0;for(let t=0;t<i;t++){let r=d[e*i+t];n.push(r),o+=r*l[t]}if(o<0||o>=s/a)throw Error(`Invalid indices: ${n} does not index into ${r}`);for(let r=0;r<a;r++)p?f.values[o*a+r]+=h[e*a+r]:f.values[o*a+r]=0===t.rank?h[0]:h[e*a+r]}return f}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7dSeC":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sigmoidImpl",()=>i),s.export(r,"sigmoid",()=>l),s.export(r,"sigmoidConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>1/(1+Math.exp(-e))),l=(0,o.unaryKernelFunc)(n.Sigmoid,e=>1/(1+Math.exp(-e))),u={kernelName:n.Sigmoid,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"54KMc":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sliceImpl",()=>o),s.export(r,"slice",()=>i),s.export(r,"sliceConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e,t,r,s,a){let o=(0,n.slice_util).isSliceContinous(s,t,r),i=(0,n.util).sizeFromShape(r),l=(0,n.util).computeStrides(s);if(o){let r=(0,n.slice_util).computeFlatOffset(t,l);return"string"===a?e.slice(r,r+i):e.subarray(r,r+i)}let u="string"===a?(0,n.backend_util).fromUint8ToStringArray(e):e,p=(0,n.buffer)(s,a,u),c=(0,n.buffer)(r,a);for(let e=0;e<c.size;++e){let r=c.indexToLoc(e),s=r.map((e,r)=>e+t[r]);c.set(p.get(...s),...r)}return"string"===a?(0,n.backend_util).fromStringArrayToUint8(c.values):c.values}function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{begin:l,size:u}=s;(0,a.assertNotComplex)(i,"slice");let[p,c]=(0,n.slice_util).parseSliceParams(i,l,u);(0,n.slice_util).assertParamsValid(i,p,c);let d=r.data.get(i.dataId).values,h=o(d,p,c,i.shape,i.dtype);return r.makeTensorInfo(c,i.dtype,h)}let l={kernelName:n.Slice,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gjRSZ:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseFillEmptyRowsImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o,i){let l=t[0],u=o[0],p=Array(u),c=Array(l),d=t[1];if(0===u){if(0!==l)throw Error((0,n.backend_util).getSparseFillEmptyRowsIndicesDenseShapeMismatch(l));let e=(0,n.util).getArrayFromDType(r,0),t=(0,n.util).getArrayFromDType(a,0);return[e,[0,d],t,p,c]}let h=!0,f=0,m=Array(u).fill(0);for(let t=0;t<l;++t){// indices is a 2d tensor with shape of [N, rank]
let r=e[t*d];if(r<0)throw Error((0,n.backend_util).getSparseFillEmptyRowsNegativeIndexErrorMessage(t,r));if(r>=u)throw Error((0,n.backend_util).getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,r,u));++m[r],h=h&&r>=f,f=r}let g=!0;for(let e=0;e<u;++e){// csrOffset here describes the number of elements in this dense row
let t=0===m[e];p[e]=t,g=g&&!t,// In filled version, each row has at least one element.
m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&h){for(let e=0;e<l;++e)c[e]=e;return[e,[l,d],s,p,c]}{let t=m[u-1],o=(0,n.util).getArrayFromDType(r,t*d),h=(0,n.util).getArrayFromDType(a,t),f=Array(u).fill(0);// Fill in values for rows that are not missing
for(let t=0;t<l;++t){// indices is a 2d tensor with shape of [N, rank]
let r=e[t*d],n=f[r],a=(0===r?0:m[r-1])+n;f[r]++;for(let r=0;r<d;++r)o[a*d+r]=e[t*d+r];h[a]=s[t],// We'll need this reverse index map to backprop correctly.
c[t]=a}// Fill in values for rows that are missing
for(let e=0;e<u;++e){let t=f[e];if(0===t){let t=0===e?0:m[e-1];// Remaining index values were set to zero already.
// Just need to set the row index in the right location.
// outputIndices is a 2d tensor with shape of [N, rank]
o[t*d+0]=e;for(let e=1;e<d;++e)o[t*d+e]=0;h[t]=i}}return[o,[t,d],h,p,c]}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7idqz":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseReshapeImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a){let o=(0,n.util).sizeFromShape(s),i=t[0],l=a.length,u=[],p=1,c=-1;for(let e=0;e<l;++e){let t=a[e];if(-1===t){if(-1!==c)throw Error((0,n.backend_util).getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,u.push(1)}else{if(t<0)throw Error((0,n.backend_util).getSparseReshapeNegativeOutputDimErrorMessage(e,t));p*=t,u.push(t)}}if(-1!==c){if(p<=0)throw Error((0,n.backend_util).getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(o/p);if(p*e!==o)throw Error((0,n.backend_util).getSparseReshapeInputOutputMultipleErrorMessage(s,u));u[c]=e}let d=(0,n.util).sizeFromShape(u);if(d!==o)throw Error((0,n.backend_util).getSparseReshapeInputOutputMismatchErrorMessage(s,u));let h=s.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}let m=[];if(l>0){m[l-1]=1;for(let e=l-2;e>=0;--e)m[e]=m[e+1]*u[e+1]}let g=(0,n.util).getArrayFromDType(r,i*l);for(let t=0;t<i;++t){let r=0;for(let s=0;s<h;++s)r+=e[t*h+s]*f[s];for(let e=0;e<l;++e)// newIndices is a 2d tensor with shape of [nnz, outputRank]
g[t*l+e]=Math.trunc(r/m[e]),r%=m[e]}return[g,[i,l],u]}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],apbuT:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentReductionImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o=!1,i=0){let l=s.length,u=[t[0],e.length/t[0]],p=u[1],c=l>0?a[l-1]+1:0;if(c<0)throw Error((0,n.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let d=t.slice();d[0]=c;let h=d.reduce((e,t)=>e*t,1),f=(0,n.util).getArrayFromDType(r,h);// Note that we do not initialize the output buffer with a default value, so
// we need to explicitly set missing indices to the default value.
if(0===l)return c>0&&f.fill(i),[f,d];if(c<=0)throw Error((0,n.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,x=0,b=a[0];for(;;){// We initialize nextIndex to 0 to avoid may be uninitialized warning
let t=0;if(g<l){if(b===(t=a[g])){++g;continue}// We have a new segment here.  Verify that the segment ids are growing.
if(b>=t)throw Error((0,n.backend_util).getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=c)throw Error((0,n.backend_util).getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,c));b>x&&f.fill(i,x*p,b*p);for(let t=m;t<g;++t){let r=s[t];if(r<0||r>=u[0])throw Error((0,n.backend_util).getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],u[0]));for(let t=0;t<p;t++)f[b*p+t]+=e[r*p+t]}if(o)for(let e=0;e<p;e++)f[b*p+e]/=g-m;if(m=g,++g,x=b+1,b=t,g>l)break}return x<c&&f.fill(i,x*p,c*p),[f,d]}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gYyg0:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sqrtImpl",()=>i),s.export(r,"sqrt",()=>l),s.export(r,"sqrtConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_impl"),o=e("../utils/unary_utils");let i=(0,a.createSimpleUnaryImpl)(e=>Math.sqrt(e)),l=(0,o.unaryKernelFunc)(n.Sqrt,e=>Math.sqrt(e)),u={kernelName:n.Sqrt,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_impl":"5LfNp","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3kOvy":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squaredDifferenceImpl",()=>i),s.export(r,"squaredDifference",()=>l),s.export(r,"squaredDifferenceConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>{let r=e-t;return r*r}),l=(0,o.binaryKernelFunc)(n.SquaredDifference,i),u={kernelName:n.SquaredDifference,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cUQt7:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stridedSliceImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s){let a=(0,n.buffer)(e,t.dtype);for(let e=0;e<a.size;e++){let n=a.indexToLoc(e),o=Array(n.length);for(let e=0;e<o.length;e++)o[e]=n[e]*r[e]+s[e];a.set(t.get(...o),...n)}return a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2G8NP":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringNGramsImpl",()=>o);var n=e("@tensorflow/tfjs-core");/**
 * The StringNGramsOp class creates ngrams from ragged string data.
 * The constructor contains all attributes related to the operation such as
 * padding widths and strings, and the compute function can be used to
 * compute the ngrams for different ragged tensor inputs.
 */class a{constructor(e,t,r,s,a,o){this.separator=(0,n.util).encodeString(e),this.nGramWidths=t,this.leftPad=(0,n.util).encodeString(r),this.rightPad=(0,n.util).encodeString(s),this.padWidth=a,this.preserveShort=o}getPadWidth(e){// Ngrams can be padded with either a fixed pad width or a dynamic pad
// width depending on the 'padWidth' arg, but in no case should the padding
// ever be wider than 'nGramWidth' - 1.
return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let r=this.getPadWidth(t);return Math.max(0,e+2*r-t+1)}createNGrams(e,t,r,s,n,a){for(let o=0;o<n;++o){let i;let l=this.getPadWidth(a),u=Math.max(0,l-o),p=Math.max(0,l-(n-(o+1))),c=a-(u+p),d=t+(u>0?0:o-l);// Size of the left padding.
i=0+u*this.leftPad.length;// Size of the tokens.
for(let t=0;t<c;++t)i+=e[d+t].length;// Size of the right padding.
i+=p*this.rightPad.length;// Size of the separators.
let h=u+p+c-1;i+=h*this.separator.length,// Build the nGram.
r[s+o]=new Uint8Array(i);let f=r[s+o],m=0,g=e=>e.forEach(e=>f[m++]=e);for(let e=0;e<u;++e)g(this.leftPad),g(this.separator);// Only output first numTokens - 1 pairs of data and separator
for(let t=0;t<c-1;++t)g(e[d+t]),g(this.separator);// Handle case when there are no tokens or no right padding as these
// can result in consecutive separators.
if(c>0){// If we have tokens, then output last and then pair each separator
// with the right padding that follows, to ensure nGram ends either with
// the token or with the right pad.
g(e[d+c-1]);for(let e=0;e<p;++e)g(this.separator),g(this.rightPad)}else{// If we don't have tokens, then the last item inserted into the nGram
// has been the separator from the left padding loop above. Hence,
// output right pad and separator and make sure to finish with a
// padding, not a separator.
for(let e=0;e<p-1;++e)g(this.rightPad),g(this.separator);g(this.rightPad)}}}// Data and splits together form the definition of the ragged tensor,
// where data is 1 dimensional and contains the values of the tensor
// and splits denotes the indices at which each row starts.
compute(e,t){// Validate that the splits are valid indices into data, only if there are
// splits specified.
let r=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw Error(`First split value must be 0, got ${e}`);for(let n=1;n<s;++n){let s=t[n]>=e;if(!(s=s&&t[n]<=r))throw Error(`Invalid split value ${t[n]}, must be in [${e}, ${r}]`);e=t[n]}if(e!==r)throw Error(`Last split value must be data size. Expected ${r}, got ${e}`)}let a=s-1,o=(0,n.util).getArrayFromDType("int32",s);// If there is no data or size, return an empty ragged tensor.
if(0===r||0===s){let e=Array(r);for(let e=0;e<=a;++e)o[e]=0;return[e,o]}o[0]=0;for(let e=1;e<=a;++e){let r=t[e]-t[e-1],s=0;this.nGramWidths.forEach(e=>{s+=this.getNumNGrams(r,e)}),this.preserveShort&&r>0&&0===s&&(s=1),o[e]=o[e-1]+s}let i=Array(o[a]);for(let r=0;r<a;++r){let s=t[r],n=o[r];// If we're preserving short sequences, check to see if no sequence was
// generated by comparing the current output start idx to the original
// one (nGramSplitsdata). If no ngrams were generated, then they will
// be equal (since we increment outputStartIdx by numNGrams every
// time we create a set of ngrams.)
if(this.nGramWidths.forEach(a=>{let o=t[r+1]-t[r],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,n,l,a),n+=l}),this.preserveShort&&n===o[r]){let a=t[r+1]-t[r];// One legitimate reason to not have any ngrams when this.preserveShort
// is true is if the sequence itself is empty. In that case, move on.
if(0===a)continue;// We don't have to worry about dynamic padding sizes here: if padding
// was dynamic, every sequence would have had sufficient padding to
// generate at least one nGram.
let o=a+2*this.padWidth;this.createNGrams(e,s,i,n,1,o)}}return[i,o]}}function o(e,t,r,s,n,o,i,l){return new a(r,s,n,o,i,l).compute(e,t)}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7o38c":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringSplitImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r){let s=e.length,a=[],o=0,i=0,l=Array(s);for(let n=0;n<s;++n){let s=a.length;!function(e,t,r,s){if(!e.length)return;// When the delimiter is empty, the input is split into individual characters.
if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}// When there is one delimiter, the input is split only at that delimiter.
if(1===t.length){let n=t[0],a=e.indexOf(n);for(;-1!==a;){let t=e.subarray(0,a);r&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(n)}r&&0===e.length||s.push(e);return}// When there are multiple delimiters, the input is split at every instance
// one of the delimiters appears.
let n=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){let t=e.subarray(n,a);r&&0===t.length||s.push(t),n=a+1}}(e[n],t,r,a);let u=a.length-s;l[n]=u,o+=u,i=Math.max(i,u)}let u=(0,n.util).getArrayFromDType("int32",2*o),p=Array(o),c=[s,i],d=0;for(let e=0;e<s;++e)for(let t=0;t<l[e];++t)// indices is a 2d tensor with shape of [outputSize, 2]
u[2*d]=e,u[2*d+1]=t,p[d]=a[d],++d;return[u,p,c]}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e57Im:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringToHashBucketFastImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t){let r=(0,n.util).getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)r[s]=(0,n.util).fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return r}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1t4R5":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"subImpl",()=>i),s.export(r,"subComplexImpl",()=>l),s.export(r,"sub",()=>u),s.export(r,"subConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e-t),l=(0,o.createComplexBinaryKernelImpl)((e,t,r,s)=>({real:e-r,imag:t-s})),u=(0,o.binaryKernelFunc)(n.Sub,i,l),p={kernelName:n.Sub,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iJ8AS:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */s.export(r,"tileImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t){let r=Array(e.rank);for(let s=0;s<r.length;s++)r[s]=e.shape[s]*t[s];let s=(0,n.buffer)(r,e.dtype);for(let t=0;t<s.values.length;++t){let r=s.indexToLoc(t),n=Array(e.rank);for(let t=0;t<n.length;t++)n[t]=r[t]%e.shape[t];let a=e.locToIndex(n);s.values[t]=e.values[a]}return s}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cPIa5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//** An implementation of the TopK kernel shared between webgl and cpu. */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"topKImpl",()=>o);var n=e("@tensorflow/tfjs-core");let a=(e,t)=>{let r=t.value-e.value;return 0===r?e.index-t.index:r};function o(e,t,r,s,o){// Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
let i=t[t.length-1],[l,u]=[e.length/i,i],p=(0,n.util).getTypedArrayFromDType(r,l*s),c=(0,n.util).getTypedArrayFromDType("int32",l*s);for(let t=0;t<l;t++){let r=t*u,i=e.subarray(r,r+u),l=Array(i.length);i.forEach((e,t)=>l[t]={value:e,index:t}),s<l.length&&(/**
 * Partitions array where all elements smaller than the (k+1) smallest element
 * are found to the left of it, and all larger to the right of it.
 * Based on the Floyd-Rivest Algorithm, ref:
 * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm
 * @param array: Array to partition
 * @param left: Left index for the interval
 * @param right: Right index for the interval
 * @param k: Desired index value, where array[k] is the (k+1)th smallest element
 *           when left = 0
 */function e(t,r,s=0,o=t.length-1){for(;o>s;){// Use select recursively to sample a smaller set of size s
// the arbitrary constants 600 and 0.5 are used in the original
// version to minimize execution time.
if(o-s>600){let n=o-s+1,a=r-s+1,i=Math.log(n),l=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*l*(n-l)/n)*Math.sign(a-n/2),p=Math.max(s,Math.floor(r-a*l/n+u)),c=Math.min(o,Math.floor(r+(n-a)*l/n+u));e(t,r,p,c)}// partition the elements between left and right around t
let i=t[r],l=s,u=o;for((0,n.util).swap(t,s,r),a(t[o],i)>0&&(0,n.util).swap(t,s,o);l<u;){for((0,n.util).swap(t,l,u),l++,u--;0>a(t[l],i);)l+=1;for(;a(t[u],i)>0;)u-=1}0===a(t[s],i)?(0,n.util).swap(t,s,u):(u+=1,(0,n.util).swap(t,u,o)),u<=r&&(s=u+1),r<=u&&(o=u-1)}}(l,s),l=l.slice(0,s)),o&&l.sort(a);let d=t*s,h=p.subarray(d,d+s),f=c.subarray(d,d+s);for(let e=0;e<s;e++)h[e]=l[e].value,f[e]=l[e].index}// Reshape back to the original input shape, except that the last
// dimension is k.
let d=t.slice();return d[d.length-1]=s,[(0,n.buffer)(d,r,p),(0,n.buffer)(d,"int32",c)]}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ehtBe:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"uniqueImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s){// Normalize and validate axis.
let a=(0,n.util).parseAxisParam(t,r)[0],o=[1,r[0],1];for(let e=0;e<a;e++)o[0]*=r[e];o[1]=r[a];for(let e=a+1;e<r.length;e++)o[2]*=r[e];// A map from unique elements (their string representations) to their values
// in "indices" (below).
let i={},l=new Int32Array(r[a]),u=new n.TensorBuffer(o,s,e),p=[],c=1===o[0]&&1===o[2];for(let t=0;t<r[a];t++){// Extract values along the axis.
let r;if(c)r=e[t].toString();else{let e=[];for(let r=0;r<o[0];r++)for(let s=0;s<o[2];s++)e.push(u.get(r,t,s));r=e.join(",")}// Dedup and update various indices.
if(void 0!==i[r])l[t]=i[r];else{let e=Object.keys(i).length;i[r]=e,l[t]=e,p.push(t)}}// Now we know where each of the unique elements are located along the axis
// (uniqueIndices). Extract them from input buffer and store them in the
// output buffer.
let d=o.slice();d[1]=Object.keys(i).length;let h=new n.TensorBuffer(d,s);p.forEach((e,t)=>{for(let r=0;r<o[0];r++)for(let s=0;s<o[2];s++)h.set(u.get(r,e,s),r,t,s)});// The output shape can be calculated from the input shape with the size of
// the given axis replaced by the number of unique elements along that axis.
let f=r.slice();return f[a]=d[1],{outputValues:h.values,outputShape:f,indices:l}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1gIFx":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PackProgram",()=>i);var n=e("./gpgpu_math"),a=e("./packing_util"),o=e("./shader_compiler");class i{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,// Only input / output 3D tensors.
this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length),0===this.rank)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=(0,a.getChannels)("rc",this.rank),t=(0,o.getCoordsDataType)(this.rank),r=this.getOutOfBoundsCondition(e),s=this.getSetup(e),n=this.getOutput(e);this.userCode=`
        void main() {
          ${t} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${n}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let n=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)n=`${e[e.length-1-t]},`+n;t.push(n)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let r=this.rank-2;r<this.rank;r++)t+=`${e[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),r=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${r};
      bool rEdge = rp1 >= ${s};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);if(1===this.rank){let e=this.enableShapeUniforms?"outShape":this.outputShape[0];return`getA(rc), (rc + 1 >= ${e} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}},{"./gpgpu_math":"iIQOP","./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fZzcp:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");function n(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function a(e,t){return 1===t?[e]:n(e,t)}function o(e,t){if(1===e)return"rc";let r="";for(let s=0;s<e;s++)r+=t[s],s<e-1&&(r+=",");return r}s.defineInteropFlag(r),s.export(r,"getVecChannels",()=>n),s.export(r,"getChannels",()=>a),s.export(r,"getSourceCoords",()=>o)},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],llpB2:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ReshapePackedProgram",()=>o);var n=e("./gpgpu_math"),a=e("./shader_compiler_util");class o{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length);let r="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),r+=`
        ${t}
        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${e}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${e>0?"}":""}
      `}this.userCode=`
      ${function(e,t){let r=t?a.getLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],"inputShape"):a.getLogicalCoordinatesFromFlatIndex(["r","c","d"],e);return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${r}
      return ivec3(r, c, d);
    }
  `}(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?a.getFlatIndexFrom3DOutput():a.getFlatIndexFrom3D(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${r}

        setOutput(result);
      }
    `}}},{"./gpgpu_math":"iIQOP","./shader_compiler_util":"68qos","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3zNh6":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TextureManager",()=>i),s.export(r,"computeBytes",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_util"),o=e("./tex_util");class i{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,// are available for reuse.
this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,r){let s;let n=u(t,r),a=p(e,n,r);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);let i=l(e,n,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}return n===o.PhysicalTextureType.PACKED_2X2_FLOAT32?s=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):n===o.PhysicalTextureType.PACKED_2X2_FLOAT16?s=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):n===o.PhysicalTextureType.UNPACKED_FLOAT32?s=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):n===o.PhysicalTextureType.UNPACKED_FLOAT16?s=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):n===o.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE&&(s=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(s),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),s}releaseTexture(e,t,r,s){if(null==this.freeTextures)return;let a=u(r,s),o=p(t,a,s);o in this.freeTextures||(this.freeTextures[o]=[]);let i=l(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),c=(0,n.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==c&&this._numBytesAllocated>c?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let d=this.usedTextures[o],h=d.indexOf(e);if(h<0)throw Error("Cannot release a texture that was never provided by this texture manager");d.splice(h,1),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function l(e,t,r,s,n){let i;// It is not possible to infer packed status from the texture type because
// depending on the textureConfig, different  texture types may resolve to the
// same internal format (e.g. in WebGL1, the internal format for
// UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
// explicitly.
let l=function(e,t){switch(e){case o.PhysicalTextureType.PACKED_2X2_FLOAT32:return(0,a.getInternalFormatForPackedMatrixTexture)(t);case o.PhysicalTextureType.PACKED_2X2_FLOAT16:return(0,a.getInternalFormatForFloat16PackedMatrixTexture)(t);case o.PhysicalTextureType.UNPACKED_FLOAT32:return(0,a.getInternalFormatForFloat32MatrixTexture)(t);case o.PhysicalTextureType.UNPACKED_FLOAT16:return(0,a.getInternalFormatForFloat16MatrixTexture)(t);case o.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:return(0,a.getInternalFormatForUnsignedBytesMatrixTexture)(t);default:throw Error(`Unknown physical texture type ${e}`)}}(t,s);if(n){let[t,r]=(0,o.getPackedMatrixTextureShapeWidthHeight)(e[0],e[1]);i=t*r}else{let[t,r]=(0,o.getUnpackedMatrixTextureShapeWidthHeight)(e[0],e[1]);i=t*r}let u=function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F||t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw Error(`Unknown internal format ${t}`)}(r,l);return i*u}function u(e,t){if(e===o.TextureUsage.UPLOAD)return o.PhysicalTextureType.PACKED_2X2_FLOAT32;if(e===o.TextureUsage.RENDER||null==e)return(0,n.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?o.PhysicalTextureType.PACKED_2X2_FLOAT32:o.PhysicalTextureType.UNPACKED_FLOAT32:t?o.PhysicalTextureType.PACKED_2X2_FLOAT16:o.PhysicalTextureType.UNPACKED_FLOAT16;if(e===o.TextureUsage.DOWNLOAD||e===o.TextureUsage.PIXELS)return o.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;throw Error(`Unknown logical texture type ${e}`)}function p(e,t,r){return`${e[0]}_${e[1]}_${t}_${r}`}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_util":"7rnO5","./tex_util":"cgolR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lMu15:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"UnaryOpProgram",()=>a),s.export(r,"CHECK_NAN_SNIPPET",()=>o),s.export(r,"LINEAR",()=>i),s.export(r,"ABS",()=>l),s.export(r,"STEP",()=>u),s.export(r,"ELU",()=>p),s.export(r,"RELU",()=>c),s.export(r,"RELU6",()=>d),s.export(r,"CLONE",()=>h),s.export(r,"SIGMOID",()=>f);var n=e("./gpgpu_math");class a{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}let o="if (isnan(x)) return x;",i="return x;",l="return abs(x);";function u(e=0){return o+`
    return x > 0.0 ? 1.0 : float(${e});
  `}let p="return (x >= 0.0) ? x : (exp(x) - 1.0);",c=o+`
  return (x < 0.0) ? 0.0 : x;
`,d=o+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,h="return x;",f="return 1.0 / (1.0 + exp(-1.0 * x));"},{"./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],agbDL:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LINEAR",()=>a),s.export(r,"ELU",()=>o),s.export(r,"RELU",()=>i),s.export(r,"RELU6",()=>l),s.export(r,"SIGMOID",()=>u),s.export(r,"UnaryOpPackedProgram",()=>p);var n=e("./gpgpu_math");let a="return x;",o=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,i=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,l=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,u="return 1.0 / (1.0 + exp(-1.0 * x));";class p{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}},{"./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9mq2c":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"UnpackProgram",()=>i);var n=e("./gpgpu_math"),a=e("./packing_util"),o=e("./shader_compiler");class i{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length);let t=e.length,r=(0,a.getChannels)("rc",t),s=(0,o.getCoordsDataType)(t),i=(0,a.getSourceCoords)(t,r),l=r.slice(-2),u=t<=1?"rc":`vec2(${l.join(",")})`;this.userCode=`
      void main() {
        ${s} rc = getOutputCoords();
        vec4 packedInput = getA(${i});

        setOutput(getChannel(packedInput, ${u}));
      }
    `}}},{"./gpgpu_math":"iIQOP","./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"76TBq":[function(e,t,r){/** @license See the LICENSE file. */// This code is auto-generated, do not modify this file!
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"version",()=>n);let n="3.21.0"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9aWnH":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MathBackendWebGL",()=>i.MathBackendWebGL),s.export(r,"setWebGLContext",()=>l.setWebGLContext),s.export(r,"GPGPUContext",()=>u.GPGPUContext),// WebGL specific utils.
s.export(r,"gpgpu_util",()=>a),s.export(r,"webgl_util",()=>o),/**
 * Enforce use of half precision textures if available on the platform.
 *
 * @doc {heading: 'Environment', namespace: 'webgl'}
 */s.export(r,"forceHalfFloat",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_util"),o=e("./webgl_util"),i=e("./backend_webgl"),l=e("./canvas_util"),u=e("./gpgpu_context");function p(){(0,n.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_util":"7rnO5","./webgl_util":"6G64G","./backend_webgl":"aggcM","./canvas_util":"6QNnT","./gpgpu_context":"5J0Xq","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ckjRf:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@tensorflow/tfjs-core"),n=e("./kernels/_FusedMatMul"),a=e("./kernels/Abs"),o=e("./kernels/Acos"),i=e("./kernels/Acosh"),l=e("./kernels/Add"),u=e("./kernels/AddN"),p=e("./kernels/All"),c=e("./kernels/Any"),d=e("./kernels/ArgMax"),h=e("./kernels/ArgMin"),f=e("./kernels/Asin"),m=e("./kernels/Asinh"),g=e("./kernels/Atan"),x=e("./kernels/Atan2"),b=e("./kernels/Atanh"),y=e("./kernels/AvgPool"),j=e("./kernels/AvgPool3D"),_=e("./kernels/AvgPool3DGrad"),k=e("./kernels/AvgPoolGrad"),I=e("./kernels/BatchMatMul"),w=e("./kernels/BatchNorm"),C=e("./kernels/BatchToSpaceND"),S=e("./kernels/Bincount"),T=e("./kernels/BroadcastArgs"),N=e("./kernels/Cast"),E=e("./kernels/Ceil"),F=e("./kernels/ClipByValue"),A=e("./kernels/Complex"),R=e("./kernels/ComplexAbs"),D=e("./kernels/Concat"),$=e("./kernels/Conv2D"),P=e("./kernels/Conv2DBackpropFilter"),z=e("./kernels/Conv2DBackpropInput"),M=e("./kernels/Conv3D"),O=e("./kernels/Conv3DBackpropFilterV2"),L=e("./kernels/Conv3DBackpropInputV2"),B=e("./kernels/Cos"),U=e("./kernels/Cosh"),V=e("./kernels/CropAndResize"),G=e("./kernels/Cumprod"),W=e("./kernels/Cumsum"),q=e("./kernels/DenseBincount"),K=e("./kernels/DepthToSpace"),H=e("./kernels/DepthwiseConv2dNative"),X=e("./kernels/DepthwiseConv2dNativeBackpropFilter"),Y=e("./kernels/DepthwiseConv2dNativeBackpropInput"),Z=e("./kernels/Diag"),J=e("./kernels/Dilation2D"),Q=e("./kernels/Einsum"),ee=e("./kernels/Elu"),et=e("./kernels/EluGrad"),er=e("./kernels/Equal"),es=e("./kernels/Erf"),en=e("./kernels/Exp"),ea=e("./kernels/ExpandDims"),eo=e("./kernels/Expm1"),ei=e("./kernels/FFT"),el=e("./kernels/Fill"),eu=e("./kernels/FlipLeftRight"),ep=e("./kernels/Floor"),ec=e("./kernels/FloorDiv"),ed=e("./kernels/FromPixels"),eh=e("./kernels/FusedConv2D"),ef=e("./kernels/FusedDepthwiseConv2D"),em=e("./kernels/GatherNd"),eg=e("./kernels/GatherV2"),ex=e("./kernels/Greater"),ev=e("./kernels/GreaterEqual"),eb=e("./kernels/Identity"),ey=e("./kernels/IFFT"),ej=e("./kernels/Imag"),e_=e("./kernels/IsFinite"),ek=e("./kernels/IsInf"),eI=e("./kernels/IsNaN"),ew=e("./kernels/LeakyRelu"),eC=e("./kernels/Less"),eS=e("./kernels/LessEqual"),eT=e("./kernels/LinSpace"),eN=e("./kernels/Log"),eE=e("./kernels/Log1p"),eF=e("./kernels/LogicalAnd"),eA=e("./kernels/LogicalNot"),eR=e("./kernels/LogicalOr"),eD=e("./kernels/LRN"),e$=e("./kernels/LRNGrad"),eP=e("./kernels/Max"),ez=e("./kernels/Maximum"),eM=e("./kernels/MaxPool"),eO=e("./kernels/MaxPool3D"),eL=e("./kernels/MaxPool3DGrad"),eB=e("./kernels/MaxPoolGrad"),eU=e("./kernels/MaxPoolWithArgmax"),eV=e("./kernels/Mean"),eG=e("./kernels/Min"),eW=e("./kernels/Minimum"),eq=e("./kernels/MirrorPad"),eK=e("./kernels/Mod"),eH=e("./kernels/Multinomial"),eX=e("./kernels/Multiply"),eY=e("./kernels/Neg"),eZ=e("./kernels/NonMaxSuppressionV3"),eJ=e("./kernels/NonMaxSuppressionV4"),eQ=e("./kernels/NonMaxSuppressionV5"),e0=e("./kernels/NotEqual"),e1=e("./kernels/OneHot"),e2=e("./kernels/OnesLike"),e3=e("./kernels/Pack"),e4=e("./kernels/PadV2"),e5=e("./kernels/Pow"),e6=e("./kernels/Prelu"),e9=e("./kernels/Prod"),e8=e("./kernels/RaggedGather"),e7=e("./kernels/RaggedTensorToTensor"),te=e("./kernels/Range"),tt=e("./kernels/Real"),tr=e("./kernels/RealDiv"),ts=e("./kernels/Reciprocal"),tn=e("./kernels/Relu"),ta=e("./kernels/Relu6"),to=e("./kernels/Reshape"),ti=e("./kernels/ResizeBilinear"),tl=e("./kernels/ResizeBilinearGrad"),tu=e("./kernels/ResizeNearestNeighbor"),tp=e("./kernels/ResizeNearestNeighborGrad"),tc=e("./kernels/Reverse"),td=e("./kernels/RotateWithOffset"),th=e("./kernels/Round"),tf=e("./kernels/Rsqrt"),tm=e("./kernels/ScatterNd"),tg=e("./kernels/SearchSorted"),tx=e("./kernels/Select"),tv=e("./kernels/Selu"),tb=e("./kernels/Sigmoid"),ty=e("./kernels/Sign"),tj=e("./kernels/Sin"),t_=e("./kernels/Sinh"),tk=e("./kernels/Slice"),tI=e("./kernels/Softmax"),tw=e("./kernels/Softplus"),tC=e("./kernels/SpaceToBatchND"),tS=e("./kernels/SparseFillEmptyRows"),tT=e("./kernels/SparseReshape"),tN=e("./kernels/SparseSegmentMean"),tE=e("./kernels/SparseSegmentSum"),tF=e("./kernels/SparseToDense"),tA=e("./kernels/SplitV"),tR=e("./kernels/Sqrt"),tD=e("./kernels/Square"),t$=e("./kernels/SquaredDifference"),tP=e("./kernels/Step"),tz=e("./kernels/StridedSlice"),tM=e("./kernels/StringNGrams"),tO=e("./kernels/StringSplit"),tL=e("./kernels/StringToHashBucketFast"),tB=e("./kernels/Sub"),tU=e("./kernels/Sum"),tV=e("./kernels/Tan"),tG=e("./kernels/Tanh"),tW=e("./kernels/Tile"),tq=e("./kernels/TopK"),tK=e("./kernels/Transform"),tH=e("./kernels/Transpose"),tX=e("./kernels/Unique"),tY=e("./kernels/Unpack"),tZ=e("./kernels/UnsortedSegmentSum"),tJ=e("./kernels/ZerosLike");// List all kernel configs here
let tQ=[n._fusedMatMulConfig,a.absConfig,o.acosConfig,i.acoshConfig,l.addConfig,u.addNConfig,p.allConfig,c.anyConfig,d.argMaxConfig,h.argMinConfig,f.asinConfig,m.asinhConfig,g.atanConfig,x.atan2Config,b.atanhConfig,y.avgPoolConfig,j.avgPool3DConfig,_.avgPool3DGradConfig,k.avgPoolGradConfig,I.batchMatMulConfig,w.batchNormConfig,C.batchToSpaceNDConfig,S.bincountConfig,T.broadcastArgsConfig,N.castConfig,E.ceilConfig,F.clipByValueConfig,A.complexConfig,R.complexAbsConfig,D.concatConfig,$.conv2DConfig,P.conv2DBackpropFilterConfig,z.conv2DBackpropInputConfig,M.conv3DConfig,O.conv3DBackpropFilterV2Config,L.conv3DBackpropInputConfig,B.cosConfig,U.coshConfig,V.cropAndResizeConfig,G.cumprodConfig,W.cumsumConfig,q.denseBincountConfig,K.depthToSpaceConfig,H.depthwiseConv2dNativeConfig,X.depthwiseConv2dNativeBackpropFilterConfig,Y.depthwiseConv2dNativeBackpropInputConfig,Z.diagConfig,J.dilation2DConfig,Q.einsumConfig,ee.eluConfig,et.eluGradConfig,er.equalConfig,es.erfConfig,en.expConfig,ea.expandDimsConfig,eo.expm1Config,ei.fftConfig,el.fillConfig,eu.flipLeftRightConfig,ep.floorConfig,ec.floorDivConfig,ed.fromPixelsConfig,eh.fusedConv2DConfig,ef.fusedDepthwiseConv2DConfig,em.gatherNdConfig,eg.gatherV2Config,ex.greaterConfig,ev.greaterEqualConfig,eb.identityConfig,ey.ifftConfig,ej.imagConfig,e_.isFiniteConfig,ek.isInfConfig,eI.isNaNConfig,ew.leakyReluConfig,eC.lessConfig,eS.lessEqualConfig,eT.linSpaceConfig,eN.logConfig,eE.log1pConfig,eF.logicalAndConfig,eA.logicalNotConfig,eR.logicalOrConfig,eD.LRNConfig,e$.LRNGradConfig,eP.maxConfig,ez.maximumConfig,eM.maxPoolConfig,eO.maxPool3DConfig,eL.maxPool3DGradConfig,eB.maxPoolGradConfig,eU.maxPoolWithArgmaxConfig,eV.meanConfig,eG.minConfig,eW.minimumConfig,eq.mirrorPadConfig,eK.modConfig,eH.multinomialConfig,eX.multiplyConfig,eY.negConfig,eZ.nonMaxSuppressionV3Config,eJ.nonMaxSuppressionV4Config,eQ.nonMaxSuppressionV5Config,e0.notEqualConfig,e1.oneHotConfig,e2.onesLikeConfig,e3.packConfig,e4.padV2Config,e5.powConfig,e6.preluConfig,e9.prodConfig,e8.raggedGatherConfig,e7.raggedTensorToTensorConfig,te.rangeConfig,tt.realConfig,tr.realDivConfig,ts.reciprocalConfig,tn.reluConfig,ta.relu6Config,to.reshapeConfig,ti.resizeBilinearConfig,tl.resizeBilinearGradConfig,tu.resizeNearestNeighborConfig,tp.resizeNearestNeighborGradConfig,tc.reverseConfig,td.rotateWithOffsetConfig,th.roundConfig,tf.rsqrtConfig,tm.scatterNdConfig,tg.searchSortedConfig,tx.selectConfig,tv.seluConfig,tb.sigmoidConfig,ty.signConfig,tj.sinConfig,t_.sinhConfig,tk.sliceConfig,tI.softmaxConfig,tw.softplusConfig,tC.spaceToBatchNDConfig,tS.sparseFillEmptyRowsConfig,tT.sparseReshapeConfig,tN.sparseSegmentMeanConfig,tE.sparseSegmentSumConfig,tF.sparseToDenseConfig,tA.splitVConfig,tR.sqrtConfig,tD.squareConfig,t$.squaredDifferenceConfig,tP.stepConfig,tz.stridedSliceConfig,tM.stringNGramsConfig,tO.stringSplitConfig,tL.stringToHashBucketFastConfig,tB.subConfig,tU.sumConfig,tV.tanConfig,tG.tanhConfig,tW.tileConfig,tq.topKConfig,tK.transformConfig,tH.transposeConfig,tX.uniqueConfig,tY.unpackConfig,tZ.unsortedSegmentSumConfig,tJ.zerosLikeConfig];for(let e of tQ)(0,s.registerKernel)(e)},{"@tensorflow/tfjs-core":"U1ela","./kernels/_FusedMatMul":"bG1E7","./kernels/Abs":"7KHbG","./kernels/Acos":"7FrDT","./kernels/Acosh":"5VZo0","./kernels/Add":"jM0lW","./kernels/AddN":"9yZGT","./kernels/All":"kAnze","./kernels/Any":"3YuS9","./kernels/ArgMax":"9N0o8","./kernels/ArgMin":"ehQ0O","./kernels/Asin":"js6mC","./kernels/Asinh":"9CJsI","./kernels/Atan":"6ZLM9","./kernels/Atan2":"dNF9r","./kernels/Atanh":"5E8y1","./kernels/AvgPool":"800gt","./kernels/AvgPool3D":"fOmIO","./kernels/AvgPool3DGrad":"aHLYa","./kernels/AvgPoolGrad":"hrtml","./kernels/BatchMatMul":"i4cwR","./kernels/BatchNorm":"hCUDa","./kernels/BatchToSpaceND":"6jjYm","./kernels/Bincount":"8PQoj","./kernels/BroadcastArgs":"lSLEz","./kernels/Cast":"j4JSq","./kernels/Ceil":"9Boqu","./kernels/ClipByValue":"jHvdn","./kernels/Complex":"l0nV1","./kernels/ComplexAbs":"81ly2","./kernels/Concat":"5fuGG","./kernels/Conv2D":"dqE9Y","./kernels/Conv2DBackpropFilter":"9p8OH","./kernels/Conv2DBackpropInput":"kTvRs","./kernels/Conv3D":"4m7NQ","./kernels/Conv3DBackpropFilterV2":"iOySy","./kernels/Conv3DBackpropInputV2":"eYe9I","./kernels/Cos":"h04wF","./kernels/Cosh":"jLAlN","./kernels/CropAndResize":"hpBlq","./kernels/Cumprod":"hfjzN","./kernels/Cumsum":"6kAi5","./kernels/DenseBincount":"ekhKI","./kernels/DepthToSpace":"eKV3R","./kernels/DepthwiseConv2dNative":"814gX","./kernels/DepthwiseConv2dNativeBackpropFilter":"j0M3i","./kernels/DepthwiseConv2dNativeBackpropInput":"52QMU","./kernels/Diag":"9NX24","./kernels/Dilation2D":"9HYJz","./kernels/Einsum":"k76yR","./kernels/Elu":"fm3jy","./kernels/EluGrad":"5XzFD","./kernels/Equal":"cYLB2","./kernels/Erf":"8DpV7","./kernels/Exp":"jadst","./kernels/ExpandDims":"3AoBI","./kernels/Expm1":"51xTV","./kernels/FFT":"6wq3j","./kernels/Fill":"fPbul","./kernels/FlipLeftRight":"iYjfy","./kernels/Floor":"53zkB","./kernels/FloorDiv":"gmp88","./kernels/FromPixels":"7xm1k","./kernels/FusedConv2D":"41tvn","./kernels/FusedDepthwiseConv2D":"ca82W","./kernels/GatherNd":"15vt8","./kernels/GatherV2":"1lci1","./kernels/Greater":"cjINS","./kernels/GreaterEqual":"c6oTS","./kernels/Identity":"dsrAl","./kernels/IFFT":"kn8VE","./kernels/Imag":"cVwra","./kernels/IsFinite":"c35A3","./kernels/IsInf":"8MmWM","./kernels/IsNaN":"kJ6ZE","./kernels/LeakyRelu":"74J3d","./kernels/Less":"cmUMh","./kernels/LessEqual":"47Iod","./kernels/LinSpace":"h4hry","./kernels/Log":"cwIl0","./kernels/Log1p":"fSpPm","./kernels/LogicalAnd":"hy7vF","./kernels/LogicalNot":"lW5y6","./kernels/LogicalOr":"2BLUC","./kernels/LRN":"hlX2E","./kernels/LRNGrad":"lJa9J","./kernels/Max":"ezUpT","./kernels/Maximum":"3B3An","./kernels/MaxPool":"acQsV","./kernels/MaxPool3D":"aDYlt","./kernels/MaxPool3DGrad":"4Z5zN","./kernels/MaxPoolGrad":"l6x5z","./kernels/MaxPoolWithArgmax":"gbq8g","./kernels/Mean":"6SpBI","./kernels/Min":"1cqvT","./kernels/Minimum":"aIknV","./kernels/MirrorPad":"9N89o","./kernels/Mod":"etCcX","./kernels/Multinomial":"1E9ez","./kernels/Multiply":"egesk","./kernels/Neg":"lAoAm","./kernels/NonMaxSuppressionV3":"4dcTP","./kernels/NonMaxSuppressionV4":"gBVOt","./kernels/NonMaxSuppressionV5":"j5ZDn","./kernels/NotEqual":"1aToH","./kernels/OneHot":"7HpjZ","./kernels/OnesLike":"iA5jN","./kernels/Pack":"jJbGG","./kernels/PadV2":"bDEE0","./kernels/Pow":"6duVv","./kernels/Prelu":"6nBa1","./kernels/Prod":"beAUT","./kernels/RaggedGather":"9Jh9i","./kernels/RaggedTensorToTensor":"c9qJR","./kernels/Range":"jxAcj","./kernels/Real":"cSand","./kernels/RealDiv":"gGH4T","./kernels/Reciprocal":"hjbJY","./kernels/Relu":"8SpD1","./kernels/Relu6":"Zi6kJ","./kernels/Reshape":"lrhL2","./kernels/ResizeBilinear":"jEBvM","./kernels/ResizeBilinearGrad":"5wAhL","./kernels/ResizeNearestNeighbor":"eoqZV","./kernels/ResizeNearestNeighborGrad":"3E7I3","./kernels/Reverse":"j5TOq","./kernels/RotateWithOffset":"hu4VY","./kernels/Round":"jaVZn","./kernels/Rsqrt":"1D428","./kernels/ScatterNd":"fBvjC","./kernels/SearchSorted":"jir9I","./kernels/Select":"7fkt8","./kernels/Selu":"9j0OL","./kernels/Sigmoid":"9FQr4","./kernels/Sign":"6b4Up","./kernels/Sin":"gXNH5","./kernels/Sinh":"b4oiZ","./kernels/Slice":"8MBiK","./kernels/Softmax":"3bBz5","./kernels/Softplus":"hlUU8","./kernels/SpaceToBatchND":"3G4rC","./kernels/SparseFillEmptyRows":"4IKdc","./kernels/SparseReshape":"e0BU2","./kernels/SparseSegmentMean":"22ZyK","./kernels/SparseSegmentSum":"7eV18","./kernels/SparseToDense":"kZ1T4","./kernels/SplitV":"atoYY","./kernels/Sqrt":"hXlAk","./kernels/Square":"4npa1","./kernels/SquaredDifference":"asQVd","./kernels/Step":"f9BLH","./kernels/StridedSlice":"5ISKs","./kernels/StringNGrams":"gisWF","./kernels/StringSplit":"32obQ","./kernels/StringToHashBucketFast":"doQoe","./kernels/Sub":"jyI5a","./kernels/Sum":"fgK31","./kernels/Tan":"l2fLE","./kernels/Tanh":"jw6A6","./kernels/Tile":"7Gmax","./kernels/TopK":"cs0uZ","./kernels/Transform":"7T7yB","./kernels/Transpose":"3ABKY","./kernels/Unique":"zcl2W","./kernels/Unpack":"45pFE","./kernels/UnsortedSegmentSum":"4NxiV","./kernels/ZerosLike":"gQxB6"}],bG1E7:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"_fusedMatMul",()=>o),s.export(r,"_fusedMatMulConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./BatchMatMul_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{a:n,b:o,bias:i,preluActivationWeights:l}=t,{transposeA:u,transposeB:p,activation:c,leakyreluAlpha:d}=s;return(0,a.batchMatMulImpl)({a:n,b:o,transposeA:u,transposeB:p,backend:r,bias:i,preluActivationWeights:l,leakyreluAlpha:d,activation:c})}let i={kernelName:n._FusedMatMul,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./BatchMatMul_impl":"aXqxm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aXqxm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MATMUL_SHARED_DIM_THRESHOLD",()=>c),s.export(r,"batchMatMulImpl",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../mulmat_packed_gpu"),i=e("./Multiply"),l=e("./Reshape"),u=e("./Sum"),p=e("./Transpose");let c=1e3;function d({a:e,b:t,transposeA:r,transposeB:s,backend:d,bias:h=null,preluActivationWeights:f=null,leakyreluAlpha:m=0,activation:g=null}){let x;let b=e.shape.length,y=t.shape.length,j=r?e.shape[b-2]:e.shape[b-1],_=s?t.shape[y-1]:t.shape[y-2],k=r?e.shape[b-1]:e.shape[b-2],I=s?t.shape[y-2]:t.shape[y-1],w=e.shape.slice(0,-2),C=t.shape.slice(0,-2),S=(0,n.util).sizeFromShape(w),T=(0,n.util).sizeFromShape(C),N=(0,n.broadcast_util).assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)),E=N.concat([k,I]);(0,n.util).assert(j===_,()=>`Error in matMul: inner shapes (${j}) and (${_}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${r} and transposeB=${s} must match.`);let F=r?[S,j,k]:[S,k,j],A=s?[T,I,_]:[T,_,I],R=(0,l.reshape)({inputs:{x:e},backend:d,attrs:{shape:F}}),D=(0,l.reshape)({inputs:{x:t},backend:d,attrs:{shape:A}}),$=[R,D],P=Math.max(S,T),z=r?R.shape[1]:R.shape[2],M=null!=h,O=null!=f,L="leakyrelu"===g,B=null!=g?(0,a.mapActivationToShaderProgram)(g,!0):null,U=M||O||L||null!=B;// Since the matrices are vectors, it is faster to call mul().sum()
// because sum() is O(sqrt(N)) due to divide-and-conquer.
if((1===k||1===I)&&z>c&&!1===U){let e=R,t=D;r&&(e=(0,p.transpose)({inputs:{x:R},backend:d,attrs:{perm:[0,2,1]}}),$.push(e)),s&&(t=(0,p.transpose)({inputs:{x:D},backend:d,attrs:{perm:[0,2,1]}}),$.push(t));let n=1!==I,a=1===I,o=e;n&&(o=(0,l.reshape)({inputs:{x:e},backend:d,attrs:{shape:[P,z,1]}}),$.push(o));let c=1===I?2:1,h=t;a&&(h=(0,l.reshape)({inputs:{x:t},backend:d,attrs:{shape:[P,1,z]}}),$.push(h));let f=(0,i.multiply)({inputs:{a:o,b:h},backend:d});x=(0,u.sum)({inputs:{x:f},backend:d,attrs:{axis:c,keepDims:!0}}),$.push(f)}else{let a=(0,n.upcastType)(e.dtype,t.dtype),i=new o.MatMulPackedProgram(F,A,[P,k,I],r,s,M,B,O,L),l=[R,D];if(null!=h&&l.push(h),O&&l.push(f),L){let e=d.makeTensorInfo([],"float32",(0,n.util).createScalarValue(m,"float32"));l.push(e),$.push(e)}x=d.runWebGLProgram(i,l,a)}let V=(0,l.reshape)({inputs:{x:x},backend:d,attrs:{shape:E}});for(let e of($.push(x),$))d.disposeIntermediateTensorInfo(e);return V}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../mulmat_packed_gpu":"hl1sJ","./Multiply":"egesk","./Reshape":"lrhL2","./Sum":"fgK31","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],a0KZF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"CHECK_NAN_SNIPPET_UNARY",()=>d),/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param opSnippet Op snippet to create `UnaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */s.export(r,"unaryKernelFunc",()=>h),/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param opSnippet Op snippet to create `BinaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.
 * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true
 *     when creating BinaryOpPackedProgram.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */s.export(r,"binaryKernelFunc",()=>f),s.export(r,"mapActivationToShaderProgram",()=>m);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu"),i=e("../kernels/Complex"),l=e("../kernels/LeakyRelu"),u=e("../kernels/Prelu"),p=e("../unaryop_gpu"),c=e("../unaryop_packed_gpu");let d="if (isnan(x)) return x;";function h({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:r,dtype:s}){return({inputs:a,backend:o})=>{let i;let{x:l}=a,u=s||l.dtype;if(o.shouldExecuteOnCPU([l])&&null!=r){let e=o.texData.get(l.dataId),t=r(e.values,u);return o.makeTensorInfo(l.shape,u,t)}let d=(0,n.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t;return i=d?new c.UnaryOpPackedProgram(l.shape,t):new p.UnaryOpProgram(l.shape,e),o.runWebGLProgram(i,[l],u)}}function f({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:r=!1,supportsComplex:s=!1,cpuKernelImpl:l,dtype:u}){return({inputs:p,backend:c})=>{let d;let{a:h,b:f}=p;if(s&&"complex64"===h.dtype){let t=c.texData.get(h.dataId),r=c.texData.get(f.dataId),[s,o]=[[t.complexTensorInfos.real,r.complexTensorInfos.real],[t.complexTensorInfos.imag,r.complexTensorInfos.imag]].map(t=>{let[r,s]=t,o={dataId:r.dataId,dtype:r.dtype,shape:h.shape},i={dataId:s.dataId,dtype:s.dtype,shape:f.shape},l=new a.BinaryOpProgram(e,h.shape,f.shape);return c.runWebGLProgram(l,[o,i],(0,n.upcastType)(r.dtype,s.dtype))}),l=(0,i.complex)({inputs:{real:s,imag:o},backend:c});// TODO(annxingyuan): Implement CPU forwarding for complex inputs.
return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(o),l}let m=u||(0,n.upcastType)(h.dtype,f.dtype);if(("string"===h.dtype||"string"===f.dtype||c.shouldExecuteOnCPU([h,f]))&&null!=l){let e=c.texData.get(h.dataId).values,t=c.texData.get(f.dataId).values,r="string"===h.dtype?(0,n.backend_util).fromUint8ToStringArray(e):e,s="string"===h.dtype?(0,n.backend_util).fromUint8ToStringArray(t):t,[a,o]=l(h.shape,f.shape,r,s,m),i=c.makeTensorInfo(o,m),u=c.texData.get(i.dataId);return u.values=a,i}let g=(0,n.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t;return d=g?new o.BinaryOpPackedProgram(t,h.shape,f.shape,r):new a.BinaryOpProgram(e,h.shape,f.shape),c.runWebGLProgram(d,[h,f],m)}}function m(e,t=!1){if("linear"===e)return t?c.LINEAR:p.LINEAR;if("relu"===e)return t?c.RELU:p.RELU;if("elu"===e)return t?c.ELU:p.ELU;if("relu6"===e)return t?c.RELU6:p.RELU6;if("prelu"===e)return t?u.PRELU_PACKED:u.PRELU;if("leakyrelu"===e)return t?l.LEAKYRELU_PACKED:l.LEAKYRELU;if("sigmoid"===e)return t?c.SIGMOID:p.SIGMOID;throw Error(`Activation ${e} has not been implemented for the WebGL backend.`)}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","../kernels/Complex":"l0nV1","../kernels/LeakyRelu":"74J3d","../kernels/Prelu":"6nBa1","../unaryop_gpu":"lMu15","../unaryop_packed_gpu":"agbDL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lNFkU:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"CHECK_NAN_SNIPPET",()=>o),s.export(r,"SQUARED_DIFFERENCE",()=>i),s.export(r,"BinaryOpProgram",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_math");let o=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`,i="return (a - b) * (a - b);";class l{constructor(e,t,r){this.variableNames=["A","B"],this.outputShape=(0,n.backend_util).assertAndGetBroadcastShape(t,r),this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i1qp0:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"CHECK_NAN_SNIPPET_PACKED",()=>l),s.export(r,"ELU_DER",()=>u),s.export(r,"NOT_EQUAL",()=>p),s.export(r,"BinaryOpPackedProgram",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_math"),o=e("./packing_util"),i=e("./shader_compiler");let l=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`,u=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,p=`
  return vec4(notEqual(a, b));
`;class c{constructor(e,t,r,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=(0,n.backend_util).assertAndGetBroadcastShape(t,r);let l=this.outputShape.length;this.enableShapeUniforms=(0,a.useShapeUniforms)(l);let u="";if(s){if(0===l||1===(0,n.util).sizeFromShape(this.outputShape))u=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else{let e=(0,i.getCoordsDataType)(l);if(u=`
          ${e} coords = getOutputCoords();
        `,1===l)this.enableShapeUniforms?u+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:u+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let e=(0,o.getChannels)("coords",l);this.enableShapeUniforms?u+=`
            bool nextRowOutOfBounds =
              (${e[l-2]} + 1) >= outShape[${l} - 2];
            bool nextColOutOfBounds =
              (${e[l-1]} + 1) >= outShape[${l} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:u+=`
            bool nextRowOutOfBounds =
              (${e[l-2]} + 1) >= ${this.outputShape[l-2]};
            bool nextColOutOfBounds =
              (${e[l-1]} + 1) >= ${this.outputShape[l-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}}}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${u}

        setOutput(result);
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_math":"iIQOP","./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l0nV1:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * In WebGL data is stored in GPU textures which can't be efficiently copied, so
 * complex tensors share data with their real and imaginary components. Complex
 * tensors' reference to the components is tracked by refCount on the individual
 * component. The refCounts are increased by the identity call.
 *
 * When a complex tensor is disposed, it will reduce the refCount on the
 * components by calling disposeData on each.
 */s.export(r,"complex",()=>o),s.export(r,"complexConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Identity");function o(e){let{inputs:t,backend:r}=e,{real:s,imag:n}=t,o=r.makeTensorInfo(s.shape,"complex64"),i=r.texData.get(o.dataId),l=(0,a.identity)({inputs:{x:s},backend:r}),u=(0,a.identity)({inputs:{x:n},backend:r});return i.complexTensorInfos={real:l,imag:u},o}let i={kernelName:n.Complex,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dsrAl:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"identity",()=>a),s.export(r,"identityConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{x:s}=t;return r.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}let o={kernelName:n.Identity,backendName:"webgl",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"74J3d":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LEAKYRELU",()=>i),s.export(r,"LEAKYRELU_PACKED",()=>l),s.export(r,"leakyRelu",()=>u),s.export(r,"leakyReluConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu");let i="return (a < 0.) ? b * a : a;",l=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function u(e){let{inputs:t,backend:r,attrs:s}=e,{x:u}=t,{alpha:p}=s,c=r.makeTensorInfo([],"float32",(0,n.util).createScalarValue(p,"float32")),d=(0,n.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new o.BinaryOpPackedProgram(l,u.shape,c.shape):new a.BinaryOpProgram(i,u.shape,c.shape),h=r.runWebGLProgram(d,[u,c],"float32");return r.disposeIntermediateTensorInfo(c),h}let p={kernelName:n.LeakyRelu,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6nBa1":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PRELU",()=>i),s.export(r,"PRELU_PACKED",()=>l),s.export(r,"prelu",()=>u),s.export(r,"preluConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu");let i="return (a < 0.) ? b * a : a;",l=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function u(e){let{inputs:t,backend:r}=e,{x:s,alpha:u}=t,p=(0,n.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new o.BinaryOpPackedProgram(l,s.shape,u.shape):new a.BinaryOpProgram(i,s.shape,u.shape);return r.runWebGLProgram(p,[s,u],"float32")}let p={kernelName:n.Prelu,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hl1sJ:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MatMulPackedProgram",()=>a);var n=e("./gpgpu_math");class a{constructor(e,t,r,s=!1,a=!1,o=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length);let p=s?e[1]:e[2],c=Math.ceil(p/2),d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],f="",m="";i&&(f=l?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`:u?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`:`vec4 activation(vec4 x) {
          ${i}
        }`,m="result = activation(result);"),o&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let g="rc.x",x="rc.x";e[0]<t[0]?g=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${f}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${c}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${c}; i++) {
          int batchA = ${g};
          int batchB = ${x};
          vec4 a = getMatrixA(batchA, ${s?"i * 2, rc.y":"rc.y, i * 2"});
          vec4 b = getMatrixB(batchB, ${a?"rc.z, i * 2":"i * 2, rc.z"});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${d[0]} * ${h[0]});
          result += (${d[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${o?"result += getBiasAtOutCoords();":""}

        ${m}

        setOutput(result);
      }
    `}}},{"./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],egesk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multiply",()=>c),s.export(r,"multiplyConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_complex_gpu"),o=e("../binaryop_gpu"),i=e("../binaryop_packed_gpu"),l=e("../kernel_utils/shared"),u=e("./Complex");let p="return a * b;";function c(e){let t;let{inputs:r,backend:s}=e,{a:c,b:d}=r,h=(0,n.backend_util).upcastType(c.dtype,d.dtype);if("complex64"===c.dtype){let e=s.texData.get(c.dataId),t=s.texData.get(d.dataId),r=new a.BinaryOpComplexProgram(a.COMPLEX_MULTIPLY.REAL,c.shape,d.shape),n=new a.BinaryOpComplexProgram(a.COMPLEX_MULTIPLY.IMAG,c.shape,d.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:c.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:c.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:d.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:d.shape}],i=s.runWebGLProgram(r,o,"float32"),l=s.runWebGLProgram(n,o,"float32"),p=(0,u.complex)({inputs:{real:i,imag:l},backend:s});// TODO(annxingyuan): CPU forwarding for complex inputs.
return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),p}if(s.shouldExecuteOnCPU([c,d])){let e=s.texData.get(c.dataId),t=s.texData.get(d.dataId),[r,n]=(0,l.multiplyImplCPU)(c.shape,d.shape,e.values,t.values,h),a=s.makeTensorInfo(n,h),o=s.texData.get(a.dataId);return o.values=r,a}return t=(0,n.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new i.BinaryOpPackedProgram(p,c.shape,d.shape):new o.BinaryOpProgram(p,c.shape,d.shape),s.runWebGLProgram(t,[c,d],h)}let d={kernelName:n.Multiply,backendName:"webgl",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_complex_gpu":"5k4Nz","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","../kernel_utils/shared":"glaaY","./Complex":"l0nV1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5k4Nz":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"COMPLEX_MULTIPLY",()=>a),s.export(r,"BinaryOpComplexProgram",()=>o);var n=e("@tensorflow/tfjs-core");let a={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class o{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=(0,n.backend_util).assertAndGetBroadcastShape(t,r),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lrhL2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reshape",()=>i),s.export(r,"reshapeConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reshape"),o=e("../webgl_util");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{shape:l}=s,u=(0,n.util).sizeFromShape(i.shape),p=(0,n.util).inferFromImplicitShape(l,u),c=(0,n.util).sizeFromShape(p);(0,n.util).assert(u===c,()=>`The new shape (${p}) has ${c} elements and the old shape (${i.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`);let d=r.texData.get(i.dataId);return!d.isPacked||(0,o.isReshapeFree)(i.shape,p)||null!==d.texture&&(0,o.isReshapeFree)(d.shape,p)?(r.incRef(i.dataId),{dataId:i.dataId,shape:p,dtype:i.dtype}):(0,a.packedReshape)(i,p,r)}let l={kernelName:n.Reshape,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reshape":"1xGfY","../webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1xGfY":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"packedReshape",()=>o);var n=e("../reshape_packed_gpu"),a=e("../webgl_util");function o(e,t,r){let s=[(0,a.getBatchDim)(e.shape),...(0,a.getRowsCols)(e.shape)],o={dtype:e.dtype,shape:s,dataId:e.dataId},i=[(0,a.getBatchDim)(t),...(0,a.getRowsCols)(t)],l=new n.ReshapePackedProgram(i,s),u=[s],p=r.runWebGLProgram(l,[o],e.dtype,u,!0);return{dataId:p.dataId,shape:t,dtype:p.dtype}}},{"../reshape_packed_gpu":"llpB2","../webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fgK31:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sum",()=>o),s.export(r,"sumConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Sum_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{axis:o,keepDims:i}=s;return(0,a.sumImpl)(n,o,i,r)}let i={kernelName:n.Sum,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Sum_impl":"6BuO5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6BuO5":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sumImpl",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("./Reshape"),i=e("./Transpose_impl");function l(e,t,r,s){let l=e.shape.length,u=(0,n.util).parseAxisParam(t,e.shape),p=u,c=(0,n.backend_util).getAxesPermutation(p,l),d=null!=c,h=e;d&&(h=(0,i.transposeImpl)(e,c,s),p=(0,n.backend_util).getInnerMostAxes(p.length,l)),(0,n.backend_util).assertAxesAreInnerMostDims("sum",p,l);let[f,m]=(0,n.backend_util).computeOutAndReduceShapes(h.shape,p),g=f;r&&(g=(0,n.backend_util).expandShapeToKeepDim(f,u));let x=(0,n.util).sizeFromShape(m),b=(0,n.util).sizeFromShape(e.shape),y=b/x,j=(0,o.reshape)({inputs:{x:h},attrs:{shape:[y,x]},backend:s}),_=(0,n.sumOutType)(e.dtype),k=(0,a.reduce)(j,_,"sum",s),I=(0,o.reshape)({inputs:{x:k},attrs:{shape:g},backend:s});return s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(k),d&&s.disposeIntermediateTensorInfo(h),I}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","./Reshape":"lrhL2","./Transpose_impl":"iJsNm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],idhFR:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reduce",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../mean_gpu"),o=e("../reduce_gpu");function i(e,t,r,s){let i=// Returns an array of configuration objects that describe each stage of the
// reduction.
function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let r=t.length?t[t.length-1].outSize:e[1],s=(0,n.backend_util).computeOptimalWindowSize(r);t.push({inSize:r,windowSize:s,outSize:Math.ceil(r/s)})}return t}(e.shape),l=e;for(let n=0;n<i.length;n++){let u,p;let{inSize:c,windowSize:d,outSize:h}=i[n];u="mean"===r?0===n?new a.MeanProgram({windowSize:d,inSize:c,batchSize:e.shape[0],outSize:h},c):new a.MeanProgram({windowSize:d,inSize:c,batchSize:e.shape[0],outSize:h}):new o.ReduceProgram({windowSize:d,inSize:c,batchSize:e.shape[0],outSize:h},r),p=l,l=s.runWebGLProgram(u,[l],t),p.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(p)}return l}},{"@tensorflow/tfjs-core":"U1ela","../mean_gpu":"dYsb7","../reduce_gpu":"2BU0k","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dYsb7:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MeanProgram",()=>a);var n=e("@tensorflow/tfjs-core");class a{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:s,inSize:a,outSize:o}=e;this.outputShape=[s,o];let i=4*Math.floor(r/4),l=r%4,u="sumValue += dot(values, ones);";if(null!=t){let e=1/t;u=`sumValue += dot(values * ${(0,n.util).isInt(e)?e.toPrecision(2):e}, ones);`}let p="";a%r>0&&(p=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${1===l}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2BU0k":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ReduceProgram",()=>n);class n{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:s,inSize:n,outSize:a}=e;this.outputShape=[s,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
o="1.0 / 1e-20",i="min"):"max"===t&&(// WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(r/4),p=r%4,c=`
      if (${"sum"===t}) {
        sumValue += dot(values, ones);
      } else if (${"prod"===t}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${i}(values, minMaxValue);
        if (${"min"===t} || ${"max"===t}) {
          minMaxValue = ${i}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";"all"===t?(o="1.0",c=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):"any"===t&&(o="0.0",c=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let h="";n%r>0&&(h=`
        if (inIdx < 0 || inIdx >= ${n}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${o};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        vec4 minMaxValue = vec4(${o});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${u};
        if (${1===p}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${c}
        } else if (${2===p}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${c}
        } else if (${3===p}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${c}
        }
        setOutput(${l});
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iJsNm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transposeImpl",()=>l),s.export(r,"transposeImplCPU",()=>a.transposeImplCPU);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../transpose_gpu"),i=e("../transpose_packed_gpu");function l(e,t,r){let s=(0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new i.TransposePackedProgram(e.shape,t):new o.TransposeProgram(e.shape,t);return r.runWebGLProgram(s,[e],e.dtype)}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../transpose_gpu":"fMliO","../transpose_packed_gpu":"9MxS8","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fMliO:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TransposeProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[t[s]];this.outputShape=r,this.rank=r.length;let s=(0,n.getCoordsDataType)(this.rank),a=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=Array(t);for(let t=0;t<e.length;t++)s[e[t]]=r[t];return s.join()}(t);this.userCode=`
    void main() {
      ${s} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9MxS8":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TransposePackedProgram",()=>o);var n=e("./packing_util"),a=e("./shader_compiler");class o{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let r=Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[t[s]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let s=(0,a.getCoordsDataType)(this.rank),o=(0,n.getVecChannels)("rc",this.rank),i=Array(this.rank);for(let e=0;e<t.length;e++)i[t[e]]=o[e];let l=`vec2(${i.slice(-2).join()})`,u=`++${o[this.rank-1]} < ${r[this.rank-1]}`,p=`getChannel(getA(${i.join()}), ${l})`;this.userCode=`
    void main() {
      ${s} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${p};
      if(${u}) {
        result[1] = ${p};
      }
      --${o[this.rank-1]};
      if(++${o[this.rank-2]} < ${r[this.rank-2]}) {
        result[2] = ${p};
        if(${u}) {
          result[3] = ${p};
        }
      }
      setOutput(result);
    }
    `}}},{"./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3ABKY":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transpose",()=>o),s.export(r,"transposeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Transpose_impl");function o(e){let t;let{inputs:r,backend:s,attrs:n}=e,{x:o}=r,{perm:i}=n,l=o.shape.length,u=Array(l);for(let e=0;e<u.length;e++)u[e]=o.shape[i[e]];if(s.shouldExecuteOnCPU([o])){let e=s.texData.get(o.dataId),r=e.values,n=(0,a.transposeImplCPU)(r,o.shape,o.dtype,i,u);t=s.makeTensorInfo(u,o.dtype);let l=s.texData.get(t.dataId);l.values=n}else t=(0,a.transposeImpl)(o,i,s);return t}let i={kernelName:n.Transpose,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Transpose_impl":"iJsNm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7KHbG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"abs",()=>u),s.export(r,"absConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../unaryop_gpu"),i=e("../unaryop_packed_gpu");let l="return abs(x);";function u(e){let t;let{inputs:r,backend:s}=e,{x:u}=r;// TODO: handle cases when x is complex. Once the cpu implementation
// can handle complex values, refactor to use unaryKernelFunc.
if(s.shouldExecuteOnCPU([u])&&"complex64"!==u.dtype){let e=s.texData.get(u.dataId),t=(0,a.simpleAbsImplCPU)(e.values);return s.makeTensorInfo(u.shape,u.dtype,t)}return t=(0,n.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new i.UnaryOpPackedProgram(u.shape,l):new o.UnaryOpProgram(u.shape,l),s.runWebGLProgram(t,[u],u.dtype)}let p={kernelName:n.Abs,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../unaryop_gpu":"lMu15","../unaryop_packed_gpu":"agbDL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7FrDT":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acos",()=>l),s.export(r,"acosConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Acos,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5VZo0":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acosh",()=>l),s.export(r,"acoshConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Acosh,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jM0lW:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addKernelFunc",()=>l),s.export(r,"addConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return a + b;",l=(0,a.binaryKernelFunc)({opSnippet:i,packedOpSnippet:i,supportsComplex:!0,cpuKernelImpl:o.addImplCPU}),u={kernelName:n.Add,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9yZGT":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addN",()=>l),s.export(r,"addNConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../addn_gpu"),o=e("../addn_packed_gpu"),i=e("./Identity");function l(e){let{inputs:t,backend:r}=e;if(1===t.length)return(0,i.identity)({inputs:{x:t[0]},backend:r});// Limit the number of uploaded textures for optimization.
if(t.length>(0,n.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let e=Math.floor(t.length/2),s=l({inputs:t.slice(0,e),backend:r}),n=l({inputs:t.slice(e),backend:r});return l({inputs:[s,n],backend:r})}let s=t.map(e=>e.dtype).reduce((e,t)=>(0,n.upcastType)(e,t)),u=t.map(e=>e.shape),p=(0,n.env)().getBool("WEBGL_PACK"),c=p?new o.AddNPackedProgram(t[0].shape,u):new a.AddNProgram(t[0].shape,u);return r.runWebGLProgram(c,t,s)}let u={kernelName:n.AddN,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../addn_gpu":"c5ryZ","../addn_packed_gpu":"fu0Ot","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c5ryZ:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AddNProgram",()=>n);class n{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];// Get target elements from every input tensor.
this.variableNames.forEach(e=>{r.push(`float v${e} = get${e}AtOutCoords();`)});// Calculate the sum of all elements.
let s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        float result = ${s};
        setOutput(result);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fu0Ot:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AddNPackedProgram",()=>n);class n{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];// Get target elements from every input tensor.
this.variableNames.forEach(e=>{r.push(`vec4 v${e} = get${e}AtOutCoords();`)});// Calculate the sum of all elements.
let s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        vec4 result = ${s};
        setOutput(result);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kAnze:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"all",()=>l),s.export(r,"allConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("./Reshape"),i=e("./Transpose");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r,{axis:p,keepDims:c}=l,d=u.shape.length,h=(0,n.util).parseAxisParam(p,u.shape),f=h,m=(0,n.backend_util).getAxesPermutation(f,d),g=u;null!=m&&(g=(0,i.transpose)({inputs:{x:u},backend:s,attrs:{perm:m}}),f=(0,n.backend_util).getInnerMostAxes(f.length,d)),(0,n.backend_util).assertAxesAreInnerMostDims("all",f,d);let[x,b]=(0,n.backend_util).computeOutAndReduceShapes(g.shape,f),y=(0,n.util).sizeFromShape(b),j=(0,o.reshape)({inputs:{x:g},backend:s,attrs:{shape:[-1,y]}}),_=(0,a.reduce)(j,j.dtype,"all",s);if(c){let e=(0,n.backend_util).expandShapeToKeepDim(x,h);t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:e}})}else t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:x}});return s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(_),null!=m&&s.disposeIntermediateTensorInfo(g),t}let u={kernelName:n.All,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","./Reshape":"lrhL2","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3YuS9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"any",()=>l),s.export(r,"anyConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("./Reshape"),i=e("./Transpose");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r,{axis:p,keepDims:c}=l,d=u.shape.length,h=(0,n.util).parseAxisParam(p,u.shape),f=h,m=(0,n.backend_util).getAxesPermutation(f,d),g=u;null!=m&&(g=(0,i.transpose)({inputs:{x:u},backend:s,attrs:{perm:m}}),f=(0,n.backend_util).getInnerMostAxes(f.length,d)),(0,n.backend_util).assertAxesAreInnerMostDims("any",f,d);let[x,b]=(0,n.backend_util).computeOutAndReduceShapes(g.shape,f),y=(0,n.util).sizeFromShape(b),j=(0,o.reshape)({inputs:{x:g},backend:s,attrs:{shape:[-1,y]}}),_=(0,a.reduce)(j,j.dtype,"any",s);if(c){let e=(0,n.backend_util).expandShapeToKeepDim(x,h);t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:e}})}else t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:x}});return s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(_),null!=m&&s.disposeIntermediateTensorInfo(g),t}let u={kernelName:n.Any,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","./Reshape":"lrhL2","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9N0o8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMax",()=>i),s.export(r,"argMaxConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/arg_min_max"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l}=s,u=(0,n.util).parseAxisParam(l,i.shape),p=(0,n.backend_util).getAxesPermutation(u,i.shape.length),c=i,d=[];null!=p&&(d.push(c=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:p}})),u=(0,n.backend_util).getInnerMostAxes(u.length,c.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("argMax",[u[0]],c.shape.length);let h=(0,a.argMinMaxReduce)(r,c,u[0],"max");return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),h}let l={kernelName:n.ArgMax,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/arg_min_max":"hfuKw","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hfuKw:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMinMaxReduce",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../argminmax_gpu"),o=e("../argminmax_packed_gpu"),i=e("../kernels/Reshape");function l(e,t,r,s){let l=[r];if((0,n.backend_util).assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),l,t.shape.length),!(0,n.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let r=[],o=e.texData.get(t.dataId),u=null!==o&&o.isPacked,p=t;u&&r.push(p=e.unpackTensor(t));let[c,d]=(0,n.backend_util).computeOutAndReduceShapes(p.shape,l),h=(0,n.util).sizeFromShape(d),f=(0,i.reshape)({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}});r.push(f);let m=function e(t,r,s,o=null){let i=r.shape[0],l=r.shape[1];null!=o&&(i=o.shape[0],l=o.shape[1]);let u=(0,n.backend_util).computeOptimalWindowSize(l),p={windowSize:u,inSize:l,batchSize:i,outSize:Math.ceil(l/u)},c=new a.ArgMinMaxProgram(p,s,null==o),d=[r];null!=o&&d.push(o);let h=t.runWebGLProgram(c,d,"int32");// No need to run another GPGPU program.
if(1===h.shape[1])return h;let f=e(t,r,s,h);return t.disposeIntermediateTensorInfo(h),f}(e,f,s);r.push(m);let g=(0,i.reshape)({inputs:{x:m},backend:e,attrs:{shape:c}});return r.forEach(t=>e.disposeIntermediateTensorInfo(t)),g}return function e(t,r,s,a=null){let i=null!=a?a.shape:r.shape,l=i[i.length-1],u=(0,n.backend_util).computeOptimalWindowSize(l),p=new o.ArgMinMaxPackedProgram(i,u,s,null==a),c=null==a?[r]:[r,a],d=t.runWebGLProgram(p,c,"int32");if(d.shape.length===r.shape.length){let n=e(t,r,s,d);return t.disposeIntermediateTensorInfo(d),n}return d}(e,t,s)}},{"@tensorflow/tfjs-core":"U1ela","../argminmax_gpu":"htdZu","../argminmax_packed_gpu":"936Ur","../kernels/Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],htdZu:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ArgMinMaxProgram",()=>n);class n{constructor(e,t,r){this.variableNames=["A"];let{windowSize:s,batchSize:n,outSize:a}=e;r||this.variableNames.push("bestIndicesA"),this.outputShape=[n,a],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${s}; i++) {
          int inIdx = ${r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};
          float candidate = getA(batch, inIdx);
          if (candidate ${"max"===t?">":"<"} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"936Ur":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ArgMinMaxPackedProgram",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./packing_util"),o=e("./shader_compiler");class i{constructor(e,t,r,s){let i,l;this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,(0,n.util).assert(e.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);let u=e[e.length-1],p=Math.ceil(u/t);this.outputShape=e.slice(0,-1),p>1&&this.outputShape.push(p),s||this.variableNames.push("bestIndicesA");let c=this.outputShape,d=c.length,h=(0,o.getCoordsDataType)(d),f=(0,a.getChannels)("coords",d);if(1===p){l=d+1;let e=(0,o.getCoordsDataType)(l);i=`
        ${e} sourceLocR = ${e}(${f.join()}, 0);
        ++${f[d-1]};
        ${e} sourceLocG = ${e}(${f.join()}, 0);
        ++${f[d-2]};
        ${e} sourceLocA = ${e}(${f.join()}, 0);
        --${f[d-1]};
        ${e} sourceLocB = ${e}(${f.join()}, 0);
        --${f[d-2]};`}else l=d,i=`
        ${h} sourceLocR = coords;
        ++${f[d-1]};
        ${h} sourceLocG = coords;
        ++${f[d-2]};
        ${h} sourceLocA = coords;
        --${f[d-1]};
        ${h} sourceLocB = coords;
        --${f[d-2]};`;let m=["x","y","z","w","u","v"].slice(0,l),g="."+m[l-1],x=m.map(e=>"int "+e),b=(0,a.getChannels)("sourceLocR",l-1).concat("inIdx.r"),y=(0,a.getChannels)("sourceLocG",l-1).concat("inIdx.g"),j=(0,a.getChannels)("sourceLocB",l-1).concat("inIdx.b"),_=(0,a.getChannels)("sourceLocA",l-1).concat("inIdx.a"),k=s?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${j.join()}),
                             getBestIndicesAChannel(${_.join()})));`,I=`vec4(
            getAChannel(${b.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${j.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${_.join()}) : 0.)`,w=s?"":`
      float getBestIndicesAChannel(${x.join()}) {
        return getChannel(getBestIndicesA(${m.join()}),
                                          vec2(${m.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${x.join()}) {
        return getChannel(getA(${m.join()}),
                               vec2(${m.slice(-2).join()}));
      }
      ${w}
      void main() {
        ${h} coords = getOutputCoords();
        bool hasNextCol = ${f[d-1]} < ${c[d-1]-1};
        bool hasNextRow = ${f[d-2]} < ${c[d-2]-1};
        ${i}
        ivec4 srcIdx = ivec4(sourceLocR${g}, sourceLocG${g},
          sourceLocB${g}, sourceLocA${g}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${I};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${I};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${"max"===r?"greaterThan":"lessThan"}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ehQ0O:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMin",()=>i),s.export(r,"argMinConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/arg_min_max"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l}=s,u=(0,n.util).parseAxisParam(l,i.shape),p=(0,n.backend_util).getAxesPermutation(u,i.shape.length),c=i,d=[];null!=p&&(d.push(c=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:p}})),u=(0,n.backend_util).getInnerMostAxes(u.length,c.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("argMin",[u[0]],c.shape.length);let h=(0,a.argMinMaxReduce)(r,c,u[0],"min");return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),h}let l={kernelName:n.ArgMin,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/arg_min_max":"hfuKw","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],js6mC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asin",()=>l),s.export(r,"asinConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Asin,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9CJsI":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asinh",()=>l),s.export(r,"asinhConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+"return log(x + sqrt(x * x + 1.0));",l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Asinh,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6ZLM9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan",()=>l),s.export(r,"atanConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  return atan(x);
`,l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Atan,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dNF9r:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan2",()=>p),s.export(r,"atan2Config",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu"),i=e("../kernel_utils/kernel_funcs_utils");let l=a.CHECK_NAN_SNIPPET+`
  return atan(a, b);
`,u=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+o.CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,p=(0,i.binaryKernelFunc)({opSnippet:l,packedOpSnippet:u}),c={kernelName:n.Atan2,backendName:"webgl",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5E8y1":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atanh",()=>l),s.export(r,"atanhConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,l=(0,a.unaryKernelFunc)({opSnippet:i}),u={kernelName:n.Atanh,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"800gt":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool",()=>l),s.export(r,"avgPoolConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../pool_gpu"),o=e("../webgl_util"),i=e("./Identity");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t;(0,o.assertNotComplex)(l,"avgPool");let{filterSize:u,strides:p,pad:c,dimRoundingMode:d}=s;(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(p,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${p} and dilations '1'`);let h=(0,n.backend_util).computePool2DInfo(l.shape,u,p,1,c,d);if(1===h.filterWidth&&1===h.filterHeight&&(0,n.util).arraysEqual(h.inShape,h.outShape))return(0,i.identity)({inputs:{x:l},backend:r});let f=new a.Pool2DProgram(h,"avg",!1);return r.runWebGLProgram(f,[l],"float32")}let u={kernelName:n.AvgPool,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../pool_gpu":"8MudT","../webgl_util":"6G64G","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8MudT":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Pool2DProgram",()=>n),s.export(r,"Pool3DProgram",()=>a);class n{constructor(e,t,r,s=!1,n=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,p=e.effectiveFilterHeight,c=e.effectiveFilterWidth,d=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,x="0.0";if(f||(x="-1.0 / 1e-20"),r){this.userCode=`
        const ivec2 strides = ivec2(${o}, ${i});
        const ivec2 pads = ivec2(${d}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${c};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value >= currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${s?n?m:g:`wR * ${c} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");let y=4*Math.floor(a/4),j=a%4,_=`
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${o}, ${i});
      const ivec2 pads = ivec2(${d}, ${h});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${y}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${_}
          }

          int xC = xCCorner + ${y};
          if (${1===j}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${_}
          } else if (${2===j}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${_}
          } else if (${3===j}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${_}
          }
        }
        setOutput(${b});
      }
    `}}class a{constructor(e,t,r,s=!1,n=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,p=e.dilationHeight,c=e.dilationWidth,d=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;let b="avg"===t,y="0.0";if(b||(y="-1.0 / 1e-20"),r){this.userCode=`
        const ivec3 strides =
            ivec3(${o}, ${i}, ${l});
        const ivec3 pads = ivec3(${m}, ${g}, ${x});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${c}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value >= currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${s?n?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let j=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(j="avgValue / count");let _=4*Math.floor(a/4),k=a%4,I=`
      if (${b}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${o}, ${i}, ${l});
      const ivec3 pads = ivec3(${m}, ${g}, ${x});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${_}; wC += 4) {
              int xC = xCCorner + wC * ${c};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${c}, ch),
                getValue(batch, xD, xR, xC + 2 * ${c}, ch),
                getValue(batch, xD, xR, xC + 3 * ${c}, ch)
              );

              ${I}
            }

            int xC = xCCorner + ${_};
            if (${1===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${2===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${c}, ch),
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${3===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${c}, ch),
                getValue(batch, xD, xR, xC + 2 * ${c}, ch),
                initializationValue
              );

              ${I}
            }
          }
          setOutput(${j});
        }
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fOmIO:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3D",()=>o),s.export(r,"avgPool3DConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../pool_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{filterSize:i,strides:l,pad:u,dimRoundingMode:p,dataFormat:c}=s,d=(0,n.backend_util).computePool3DInfo(o.shape,i,l,[1,1,1],u,p,c),h=new a.Pool3DProgram(d,"avg",!1);return r.runWebGLProgram(h,[o],"float32")}let i={kernelName:n.AvgPool3D,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../pool_gpu":"8MudT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aHLYa:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3DGrad",()=>o),s.export(r,"avgPool3DGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../avg_pool_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,input:i}=t,{filterSize:l,strides:u,pad:p,dimRoundingMode:c}=s,d=(0,n.backend_util).computePool3DInfo(i.shape,l,u,[1,1,1],p,c),h=new a.AvgPool3DBackpropProgram(d);return r.runWebGLProgram(h,[o],i.dtype)}let i={kernelName:n.AvgPool3DGrad,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../avg_pool_backprop_gpu":"3XUmN","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3XUmN":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"AvgPool2DBackpropProgram",()=>n),s.export(r,"AvgPool3DBackpropProgram",()=>a);class n{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,n=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,p=l-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${u}, ${p});
      const float avgMultiplier = float(${1/(t*r)});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${i};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${o}) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class a{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,n=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,p=e.effectiveFilterDepth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,h=p-1-e.padInfo.front,f=c-1-e.padInfo.top,m=d-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${h}, ${f}, ${m});
      const float avgMultiplier = float(${1/(t*r*s)});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${i}) {
          float dyD = float(dyDCorner + wD) / ${n}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hrtml:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPoolGrad",()=>i),s.export(r,"avgPoolGradConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../avg_pool_backprop_gpu"),o=e("../webgl_util");function i(e){let{inputs:t,backend:r,attrs:s}=e,{dy:i,input:l}=t;(0,o.assertNotComplex)([i,l],"avgPoolGrad");let{filterSize:u,strides:p,pad:c}=s,d=(0,n.backend_util).computePool2DInfo(l.shape,u,p,1/* dilations */,c),h=new a.AvgPool2DBackpropProgram(d);return r.runWebGLProgram(h,[i],l.dtype)}let l={kernelName:n.AvgPoolGrad,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../avg_pool_backprop_gpu":"3XUmN","../webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i4cwR:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchMatMul",()=>o),s.export(r,"batchMatMulConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./BatchMatMul_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{a:n,b:o}=t,{transposeA:i,transposeB:l}=s;return(0,a.batchMatMulImpl)({a:n,b:o,transposeA:i,transposeB:l,backend:r})}let i={kernelName:n.BatchMatMul,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./BatchMatMul_impl":"aXqxm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hCUDa:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm",()=>i),s.export(r,"batchNormConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../batchnorm_gpu"),o=e("../batchnorm_packed_gpu");let i=({inputs:e,backend:t,attrs:r})=>{let{x:s,mean:i,variance:l,offset:u,scale:p}=e;(0,n.util).assert(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),(0,n.util).assert(null==u||i.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),(0,n.util).assert(null==p||i.shape.length===p.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:c}=r;null==c&&(c=.001);let d=[s,i,l],h=null;null!=u&&(h=u.shape,d.push(u));let f=null;null!=p&&(f=p.shape,d.push(p));let m=(0,n.env)().getBool("WEBGL_PACK_NORMALIZATION")?new o.BatchNormPackedProgram(s.shape,i.shape,l.shape,h,f,c):new a.BatchNormProgram(s.shape,i.shape,l.shape,h,f,c),g=t.runWebGLProgram(m,d,d[0].dtype);return g},l={kernelName:n.FusedBatchNorm,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../batchnorm_gpu":"jzXoo","../batchnorm_packed_gpu":"kFQuP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jzXoo:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"BatchNormProgram",()=>a);var n=e("@tensorflow/tfjs-core");class a{constructor(e,t,r,s,a,o){this.outputShape=[],this.variableNames=["x","mean","variance"],(0,n.backend_util).assertAndGetBroadcastShape(e,t),(0,n.backend_util).assertAndGetBroadcastShape(e,r);let i="0.0";null!=s&&((0,n.backend_util).assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=a&&((0,n.backend_util).assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${o}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kFQuP:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"BatchNormPackedProgram",()=>a);var n=e("@tensorflow/tfjs-core");class a{constructor(e,t,r,s,a,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],(0,n.backend_util).assertAndGetBroadcastShape(e,t),(0,n.backend_util).assertAndGetBroadcastShape(e,r);let i="vec4(0.0)";null!=s&&((0,n.backend_util).assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=a&&((0,n.backend_util).assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${o}));

        setOutput((x - mean) * inv + offset);
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6jjYm":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchToSpaceND",()=>l),s.export(r,"batchToSpaceNDConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("./Reshape"),o=e("./Slice"),i=e("./Transpose");let l=e=>{let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{blockShape:u,crops:p}=s;(0,n.util).assert(l.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let c=u.reduce((e,t)=>e*t),d=(0,n.backend_util).getReshaped(l.shape,u,c),h=(0,n.backend_util).getPermuted(d.length,u.length),f=(0,n.backend_util).getReshapedPermuted(l.shape,u,c),m=(0,n.backend_util).getSliceBeginCoords(p,u.length),g=(0,n.backend_util).getSliceSize(f,p,u.length),x=[],b=(0,a.reshape)({inputs:{x:l},backend:r,attrs:{shape:d}}),y=(0,i.transpose)({inputs:{x:b},backend:r,attrs:{perm:h}}),j=(0,a.reshape)({inputs:{x:y},backend:r,attrs:{shape:f}}),_=(0,o.slice)({inputs:{x:j},backend:r,attrs:{begin:m,size:g}});return x.push(b),x.push(y),x.push(j),x.forEach(e=>r.disposeIntermediateTensorInfo(e)),_},u={kernelName:n.BatchToSpaceND,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","./Reshape":"lrhL2","./Slice":"8MBiK","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8MBiK":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"slice",()=>l),s.export(r,"sliceConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../slice_gpu"),i=e("../slice_packed_gpu");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{begin:u,size:p}=s,[c,d]=(0,n.slice_util).parseSliceParams(l,u,p);if((0,n.slice_util).assertParamsValid(l,c,d),0===(0,n.util).sizeFromShape(d))return r.makeTensorInfo(d,l.dtype,[]);// Run on cpu if dtype is string. For string, the backend represents it
// as Uint8Array[], where each Uint8Array is a character. Given that the
// computation is only on the outer array, uploading the whole data onto
// gpu is wasteful. Also, currently webgl doesn't have a design to
// upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
// just run the kernel on cpu if dtype is string.
if(r.shouldExecuteOnCPU([l])||"string"===l.dtype){let e=r.texData.get(l.dataId),t=(0,a.sliceImplCPU)(e.values,c,d,l.shape,l.dtype);return r.makeTensorInfo(d,l.dtype,t)}let{isPacked:h}=r.texData.get(l.dataId),f=(0,n.slice_util).isSliceContinous(l.shape,c,d);if(h||!f){let e=(0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new i.SlicePackedProgram(d):new o.SliceProgram(d),t=[c];return r.runWebGLProgram(e,[l],l.dtype,t)}return r.uploadToGPU(l.dataId),function(e,t,r,s){let a=s.texData.get(e.dataId),o=s.makeTensorInfo(r,e.dtype),i=s.texData.get(o.dataId);// Copy texture data from the original tensor.
Object.assign(i,a),i.refCount=1,i.shape=r,i.dtype=e.dtype;let l=(0,n.slice_util).computeFlatOffset(t,(0,n.util).computeStrides(e.shape));a.slice&&// the offset.
(l+=a.slice.flatOffset),i.slice={flatOffset:l,// Point to the original dataId, which is used to do ref counting.
origDataId:a.slice&&a.slice.origDataId||e.dataId};// Increase the ref count for that data bucket.
let u=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,u+1),o}(l,c,d,r)}let u={kernelName:n.Slice,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../slice_gpu":"inDXt","../slice_packed_gpu":"lfGg7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],inDXt:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SliceProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e){let t;this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let r=(0,n.getCoordsDataType)(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let s=function(e){if(1===e)return"sourceLoc";if(e<=6)return o.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank),a=e.map((e,t)=>`sourceLoc.${o[t]} = start[${t}] + coords.${o[t]};`);t=`
        ${r} sourceLoc;
        ${r} coords = getOutputCoords();
        ${a.join("\n")}
      `,this.userCode=`
      void main() {
        ${t}
        setOutput(getSource(${s}));
      }
    `}}let o=["x","y","z","w","u","v"]},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lfGg7:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SlicePackedProgram",()=>o);var n=e("./packing_util"),a=e("./shader_compiler");class o{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=(0,a.getCoordsDataType)(this.rank),r=(0,n.getChannels)("coords",this.rank),s=(0,n.getChannels)("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,i=`getChannel(getSource(${s.join()}), ${o})`,l=`
      result.x = ${i};
      if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
        ++${s[this.rank-1]};
        result.y = ${i};
        --${s[this.rank-1]};
      }
    `,u=1===this.rank?"":`
      --${r[this.rank-1]};
      if (++${r[this.rank-2]} < ${e[this.rank-2]}) {
        ++${s[this.rank-2]};
        result.z = ${i};
        if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
          ++${s[this.rank-1]};
          result.w = ${i};
        }
      }
    `,p=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${r[t]} + start[${t}];`).join("\n");this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${p}
        vec4 result = vec4(0.);
        ${l}
        ${u}
        setOutput(result);
      }
    `}}},{"./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8PQoj":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"bincount",()=>o),s.export(r,"bincountConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,weights:o}=t,{size:i}=s,l=r.readSync(n.dataId),u=r.readSync(o.dataId),p=(0,a.bincountImplCPU)(l,u,o.dtype,o.shape,i);return r.makeTensorInfo([i],o.dtype,p)}let i={kernelName:n.Bincount,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lSLEz:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"broadcastArgs",()=>a),s.export(r,"broadcastArgsConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{s0:s,s1:a}=t,o=r.readSync(s.dataId),i=r.readSync(a.dataId),l=(0,n.backend_util).assertAndGetBroadcastShape(Array.from(o),Array.from(i));return r.makeTensorInfo([l.length],"int32",Int32Array.from(l))}let o={kernelName:n.BroadcastArgs,backendName:"webgl",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j4JSq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cast",()=>c),s.export(r,"castConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("./Complex"),i=e("./Identity"),l=e("./NotEqual"),u=e("./Real"),p=e("../kernel_utils/int");function c(e){let{inputs:t,backend:r,attrs:s}=e,{x:d}=t,{dtype:h}=s;// Casting to complex64.
if("complex64"===h){if("complex64"===d.dtype)return(0,i.identity)({inputs:{x:d},backend:r});// TODO(annxingyuan): Import kernel function once zeros is modularized.
let e=n.zeros(d.shape),t=c({inputs:{x:d},backend:r,attrs:{dtype:"float32"}}),s=(0,o.complex)({inputs:{real:t,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(t),s}// Casting from complex64
if("complex64"===d.dtype){let e=(0,u.real)({inputs:{input:d},backend:r}),t=c({inputs:{x:e},backend:r,attrs:{dtype:h}});return r.disposeIntermediateTensorInfo(e),t}if(!(0,n.util).hasEncodingLoss(d.dtype,h)){// We don't change the underlying data, since we cast to higher
// precision.
let e=(0,i.identity)({inputs:{x:d},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:h}}if(r.shouldExecuteOnCPU([d])){let e=r.texData.get(d.dataId).values,[t,s,n]=(0,a.castImplCPU)(e,d.shape,d.dtype,h);return r.makeTensorInfo(t,s,n)}if("int32"===h)return(0,p.int)(d,r);if("bool"===h){let e=r.makeTensorInfo([],"bool",(0,n.util).getTypedArrayFromDType("bool",1)),t=(0,l.notEqual)({inputs:{a:d,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw Error(`Error in Cast: failed to cast ${d.dtype} to ${h}`)}let d={kernelName:n.Cast,backendName:"webgl",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","./Complex":"l0nV1","./Identity":"dsrAl","./NotEqual":"1aToH","./Real":"cSand","../kernel_utils/int":"i4Pqm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1aToH":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"notEqual",()=>i),s.export(r,"notEqualConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=(0,a.binaryKernelFunc)({opSnippet:"return float(a != b);",cpuKernelImpl:o.notEqualImplCPU,dtype:"bool"}),l={kernelName:n.NotEqual,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cSand:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"real",()=>o),s.export(r,"realConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Identity");function o(e){let{inputs:t,backend:r}=e,{input:s}=t,n=r.texData.get(s.dataId);return(0,a.identity)({inputs:{x:n.complexTensorInfos.real},backend:r})}let i={kernelName:n.Real,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i4Pqm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"int",()=>a);var n=e("../unaryop_gpu");function a(e,t){let r=new n.UnaryOpProgram(e.shape,"return float(int(x));"),s=t.runWebGLProgram(r,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}},{"../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9Boqu":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ceil",()=>l),s.export(r,"ceilConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return ceil(x);",l=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:i,cpuKernelImpl:o.ceilImplCPU}),u={kernelName:n.Ceil,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jHvdn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clipByValue",()=>i),s.export(r,"clipByValueConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../clip_gpu"),o=e("../clip_packed_gpu");function i(e){let t;let{inputs:r,backend:s,attrs:i}=e,{x:l}=r,{clipValueMin:u,clipValueMax:p}=i;t=(0,n.env)().getBool("WEBGL_PACK_CLIP")?new o.ClipPackedProgram(l.shape):new a.ClipProgram(l.shape);let c=[[u],[p]];return s.runWebGLProgram(t,[l],l.dtype,c)}let l={kernelName:n.ClipByValue,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../clip_gpu":"3aDXO","../clip_packed_gpu":"hGr0m","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3aDXO":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ClipProgram",()=>n);class n{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hGr0m:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ClipPackedProgram",()=>n);class n{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"81ly2":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"complexAbs",()=>i),s.export(r,"complexAbsConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../complex_abs_gpu");// Returns a TensorInfo with the complex shape and the dataId of the
// underlying part. We need to do this because a reshaped complex tensor is
// not reflected in its parts.
function o(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}function i(e){let{inputs:t,backend:r}=e,{x:s}=t,n=r.texData.get(s.dataId),i=new a.ComplexAbsProgram(s.shape),l=[o(s,n.complexTensorInfos.real),o(s,n.complexTensorInfos.imag)];return r.runWebGLProgram(i,l,l[0].dtype)}let l={kernelName:n.ComplexAbs,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../complex_abs_gpu":"hzoWq","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hzoWq:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ComplexAbsProgram",()=>n);class n{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5fuGG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat",()=>i),s.export(r,"concatConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./Concat_impl"),o=e("./Identity");function i(e){let{inputs:t,backend:r,attrs:s}=e,{axis:i}=s,l=(0,n.util).parseAxisParam(i,t[0].shape)[0],u=t.map(e=>e.shape);(0,n.backend_util).assertParamsConsistent(u,l);let p=(0,n.backend_util).computeOutShape(t.map(e=>e.shape),l);if(0===(0,n.util).sizeFromShape(p))return r.makeTensorInfo(p,t[0].dtype,[]);// Keep only non-empty tensors (ignore tensors with 0 in their shape).
let c=t.filter(e=>(0,n.util).sizeFromShape(e.shape)>0);return 1===c.length?(0,o.identity)({inputs:{x:c[0]},backend:r}):(0,a.concatImpl)(c,l,r)}let l={kernelName:n.Concat,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","./Concat_impl":"beFeb","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],beFeb:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concatImpl",()=>function e(t,r,s){let d=t[0].dtype;if("complex64"===d){let n=t.map(e=>(0,p.real)({inputs:{input:e},backend:s})),a=t.map(e=>(0,u.imag)({inputs:{input:e},backend:s})),o=e(n,r,s),i=e(a,r,s),c=(0,l.complex)({inputs:{real:o,imag:i},backend:s});return n.forEach(e=>s.disposeIntermediateTensorInfo(e)),a.forEach(e=>s.disposeIntermediateTensorInfo(e)),s.disposeIntermediateTensorInfo(o),s.disposeIntermediateTensorInfo(i),c}let h=s.shouldExecuteOnCPU(t);if("string"===d&&(h=!0),h){// Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.
    let e=t.map(e=>{let t=(0,n.util).sizeFromShape(e.shape.slice(r));return(0,c.reshape)({inputs:{x:e},backend:s,attrs:{shape:[-1,t]}})}),a=e.map(e=>({vals:s.readSync(e.dataId),shape:e.shape})),o=(0,n.backend_util).computeOutShape(e.map(e=>e.shape),1/* axis */),l=1===e[0].shape[0],u=(0,i.concatImplCPU)(a,o,d,l),p=(0,n.backend_util).computeOutShape(t.map(e=>e.shape),r),h=s.makeTensorInfo(p,d,u);return e.forEach(e=>s.disposeIntermediateTensorInfo(e)),h}let f=(0,n.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(t.length>f){let n=[];for(let a=0;a<t.length;a+=f){let o=t.slice(a,a+f);n.push(e(o,r,s))}let a=e(n,r,s);for(let e of n)s.disposeIntermediateTensorInfo(e);return a}if((0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){let e=new o.ConcatPackedProgram(t.map(e=>e.shape),r);return s.runWebGLProgram(e,t,d)}let{tensors2D:m,outShape:g}=function(e,t,r){// Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.
    let s=(0,n.backend_util).computeOutShape(e.map(e=>e.shape),t),a=e.map(e=>(0,c.reshape)({inputs:{x:e},attrs:{shape:[-1,(0,n.util).sizeFromShape(e.shape.slice(t))]},backend:r}));return{tensors2D:a,outShape:s}}(t,r,s),x=new a.ConcatProgram(m.map(e=>e.shape)),b=s.runWebGLProgram(x,m,d);m.forEach(e=>s.disposeIntermediateTensorInfo(e));let y=(0,c.reshape)({inputs:{x:b},attrs:{shape:g},backend:s});return s.disposeIntermediateTensorInfo(b),y});var n=e("@tensorflow/tfjs-core"),a=e("../concat_gpu"),o=e("../concat_packed_gpu"),i=e("../kernel_utils/shared"),l=e("./Complex"),u=e("./Imag"),p=e("./Real"),c=e("./Reshape")},{"@tensorflow/tfjs-core":"U1ela","../concat_gpu":"f1wmK","../concat_packed_gpu":"cO3d4","../kernel_utils/shared":"glaaY","./Complex":"l0nV1","./Imag":"cVwra","./Real":"cSand","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],f1wmK:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ConcatProgram",()=>a);var n=e("@tensorflow/tfjs-core");class a{// Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
constructor(e){this.outputShape=[],this.outputShape=(0,n.backend_util).computeOutShape(e,1/* axis */),this.variableNames=e.map((e,t)=>`T${t}`);let t=Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];let r=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let s=t[e-1];r.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}let s=t.length,a=t[t.length-1];r.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${r.join("\n        ")}
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cO3d4:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ConcatPackedProgram",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./packing_util"),o=e("./shader_compiler");class i{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=(0,n.backend_util).computeOutShape(e,t);let r=this.outputShape,s=r.length,i=(0,o.getCoordsDataType)(s),u=(0,a.getChannels)("coords",s),p=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>`T${t}`);let c=Array(e.length-1);c[0]=e[0][t];for(let r=1;r<c.length;r++)c[r]=c[r-1]+e[r][t];let d=p[t],h=p.slice(-2),f=p.join(),m=`if (${d} < ${c[0]}) {
        return getChannel(
            getT0(${f}), vec2(${h.join()}));
        }`;for(let e=1;e<c.length;e++){let t=c[e-1];// Note: the >= comparison below may seem unnecessary given the check
// above but is needed to workaround branch execution issues on some
// devices. It makes all the conditions exclusive without relying on
// execution order.
m+=`
        if (${d} < ${c[e]}  && ${d} >= ${c[e-1]}) {
          return getChannel(
            getT${e}(${l(p,d,t)}),
            vec2(${l(h,d,t)}));
        }`}let g=c.length,x=c[c.length-1];m+=`
        return getChannel(
          getT${g}(${l(p,d,x)}),
          vec2(${l(h,d,x)}));`,this.userCode=`
      float getValue(${p.map(e=>"int "+e)}) {
        ${m}
      }

      void main() {
        ${i} coords = getOutputCoords();
        vec4 result = vec4(getValue(${u}), 0., 0., 0.);

        ${u[s-1]} = ${u[s-1]} + 1;
        if (${u[s-1]} < ${r[s-1]}) {
          result.g = getValue(${u});
        }

        ${u[s-2]} = ${u[s-2]} + 1;
        if (${u[s-2]} < ${r[s-2]}) {
          result.a = getValue(${u});
        }

        ${u[s-1]} = ${u[s-1]} - 1;
        if (${u[s-2]} < ${r[s-2]} &&
            ${u[s-1]} < ${r[s-1]}) {
          result.b = getValue(${u});
        }
        setOutput(result);
      }
    `}}/**
 * Return an expression for coordinates into a vector where a given channel
 * will be offset by [shift].
 *
 * @param channels the channels to consider
 * @param channel the channel we want shifted
 * @param shift  the amount to subtract from the channel.
 *
 * @returns a string of the form 'x, y-[shift], z' where any one channel can
 * have the shift applied.
 */function l(e,t,r){let s=e.indexOf(t),n=e.map((e,t)=>t===s?`${e} - ${r}`:e);return n.join()}},{"@tensorflow/tfjs-core":"U1ela","./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cVwra:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"imag",()=>o),s.export(r,"imagConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Identity");function o(e){let{inputs:t,backend:r}=e,{input:s}=t,n=r.texData.get(s.dataId);return(0,a.identity)({inputs:{x:n.complexTensorInfos.imag},backend:r})}let i={kernelName:n.Imag,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dqE9Y:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2d",()=>u),s.export(r,"conv2DConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../conv_gpu"),o=e("../conv_packed_gpu"),i=e("./Conv2D_impl"),l=e("./Reshape");function u(e){let t;let{inputs:r,backend:s,attrs:u}=e,{x:p,filter:c}=r,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:g}=u,x=(0,n.backend_util).convertConv2DDataFormat(f),b=(0,n.backend_util).computeConv2DInfo(p.shape,c.shape,d,m,h,g,!1,x);if(1===b.filterHeight&&1===b.filterWidth&&1===b.dilationHeight&&1===b.dilationWidth&&1===b.strideHeight&&1===b.strideWidth&&("SAME"===b.padInfo.type||"VALID"===b.padInfo.type))t=(0,i.conv2dByMatMul)({x:p,filter:c,convInfo:b,backend:s});else if(b.strideWidth<=2&&"channelsLast"===x&&(0,n.env)().getBool("WEBGL_EXP_CONV")){let e=new o.Conv2DPackedProgram(b),r=[[b.padInfo.top,b.padInfo.left],[b.strideHeight,b.strideWidth],[b.dilationHeight,b.dilationWidth],[b.inHeight,b.inWidth]];t=s.runWebGLProgram(e,[p,c],"float32",r)}else if((0,n.env)().getBool("WEBGL_CONV_IM2COL"))t=(0,i.conv2dWithIm2Row)({x:p,filter:c,convInfo:b,backend:s});else{let e=new a.Conv2DProgram(b);t=s.runWebGLProgram(e,[p,c],"float32")}let y=(0,l.reshape)({inputs:{x:t},backend:s,attrs:{shape:b.outShape}});return s.disposeIntermediateTensorInfo(t),y}let p={kernelName:n.Conv2D,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../conv_gpu":"ldBDT","../conv_packed_gpu":"3LBaY","./Conv2D_impl":"bqmHF","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ldBDT:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Conv2DProgram",()=>n),s.export(r,"Conv3DProgram",()=>a);class n{constructor(e,t=!1,r=null,s=!1,n=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,p=e.dilationWidth,c=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g="",x="";r&&(g=s?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:n?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,x="result = activation(result);"),t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),n&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${g}

      const ivec2 strides = ivec2(${i}, ${l});
      const ivec2 pads = ivec2(${a}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${m?3:1}];

        ivec2 xRCCorner =
            ivec2(coords[${m?1:2}], coords[${m?2:3}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${c}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${1===f}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${2===f}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${3===f}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${x}
        setOutput(result);
      }
    `}}class a{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,r=e.padInfo.top,s=e.padInfo.left,n=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,p=e.filterDepth,c=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${n}, ${a}, ${o});
      const ivec3 pads = ivec3(${t}, ${r}, ${s});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${i};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${c}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${1===f}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${2===f}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${3===f}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3LBaY":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Conv2DPackedProgram",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_math");class o{constructor(e,t=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length);let i=e.padInfo.left,l=e.strideWidth,u=e.dilationWidth,p=e.filterHeight,c=e.filterWidth,d=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<c;e++)d+=`
           vec4 xTexelC${2*e};
           int xTexelC${2*e}Ready;
           vec4 xTexelC${2*e+1};
           int xTexelC${2*e+1}Ready;
           vec4 xC${e};`;/**
         * This vectorized implementation works by gathering the values needed for
         * each output channel's dot product into vec4's and then multiplying them
         * all together (this happens in the final double for-loop below). Most of
         * the main loop consists of constructing these vec4's with the minimum
         * number of texture2D calls, which means making use of all four returned
         * values from a texture2D call at once.
         */d+=`
     for (int r = 0; r < ${p}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let e=0;e<c;e++)d+=`
           xTexelC${2*e} = vec4(0.0);
           xTexelC${2*e}Ready = 0;
           xTexelC${2*e+1} = vec4(0.0);
           xTexelC${2*e+1}Ready = 0;
           xC${e} = vec4(0.0);`;d+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let t=0;t<(c+1)/2;t++){let r=2*t;if(d+=`
           xC = xCCorner + ${r*u};
           `,1===l){if(r<c&&(i%2==1?(// TODO: Ensure vec4 previous does not result in redundant sample,
// and avoid setting xTexelRC's that exceed the boundary in the
// first place rather than resetting them to vec4(0)).
// To compute xCOffset:
// - If padding is odd, we must add 1 to ensure we ask for an
// even-numbered row.
// - We subtract 2 to access the previous texel.
d+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }
               `,1===u&&r>0?d+=`
                 xC${r} = vec4(xTexelC${r-2}.zw, xTexelC${r}.xy);
                 `:d+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${r} = vec4(previous.zw, xTexelC${r}.xy);
                   } else {
                     xC${r} = vec4(0.0, 0.0, xTexelC${r}.xy);
                   }
                   `):d+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xC${r} = xTexelC${r};
                 `,r+1<c)){// If dilation is even, the second entry should match the first
// (either both are composed or both are single samples). But if
// dilation is odd, then the second entry should be the opposite
// of the first (if the first is composed, the second is a single
// sample, and vice versa.)
let e=i%2==0?(0,n.util).nearestLargerEven(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(d+=`
                   xCOffset = xC + imod(pads[1], 2) + ${e};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                     xTexelC${r+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${r+1}.zw = vec2(0.0);
                     }
                     xTexelC${r+1}Ready = 1;
                   }
                   `,u>1?d+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${r+1} = vec4(previous.zw, xTexelC${r+1}.xy);
                     } else {
                      xC${r+1} = vec4(0.0, 0.0, xTexelC${r+1}.xy);
                     }
                     `:d+=`
                     xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.xy);
                     `):1===e?d+=`
                     xC${r+1} = xTexelC${r};
                     `:d+=`
                     xCOffset = xC + ${e};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                       xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${r+1}.zw = vec2(0.0);
                       }
                       xTexelC${r+1}Ready = 1;
                     }

                     xC${r+1} = xTexelC${r+1};
                     `}}else r<c&&(i%2==1?(d+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.0);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
               `,r+1<c&&(d+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${r+1} = vec4(xTexelC${r+1}.xy, final.xy);
                 `)):(d+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(
                   xTexelC${r}.xy, xTexelC${r+1}.xy);
               `,r+1<c&&(d+=`
                   xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
                 `)));r<c&&(d+=`
             wTexel = getW(r, ${r}, d1, d2);
             dotProd += xC${r}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${r}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,r+1<c&&(d+=`
               wTexel = getW(r, ${r+1}, d1, d2);
               dotProd += xC${r+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${r+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}d+=`
     }
   
     }
   
     }
   `;let h="",f="";r&&(h=s?`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${r}
         }`:o?`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${r}
         }`:`vec4 activation(vec4 x) {
           ${r}
         }`,f="result = activation(result);"),t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${h}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${t?"result += getBiasAtOutCoords();":""}
         ${f}
         setOutput(result);
       }
     `}}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bqmHF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// For 1x1 kernels that iterate through every point in the input, convolution
// can be expressed as matrix multiplication (without need for memory
// remapping).
s.export(r,"conv2dByMatMul",()=>h),// Implements the im2row algorithm as outlined in "High Performance
// Convolutional Neural Networks for Document Processing" (Suvisoft, 2006)
s.export(r,"conv2dWithIm2Row",()=>f);var n=e("@tensorflow/tfjs-core"),a=e("../im2col_packed_gpu"),o=e("../kernel_utils/kernel_funcs_utils"),i=e("../mulmat_packed_gpu"),l=e("../webgl_util"),u=e("./BatchMatMul_impl"),p=e("./Identity"),c=e("./Reshape");// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one
// dimension to compute batchMatMul, so bias and activation weights are also
// supposed to fuse the two dimensions into one.
//
// This function computes the target shape for fusing height and width
// dimensions. Returning null means the shape is already compatible.
//
// Even though the bias is not supposed to be a 3-D or a 4-D (including
// batch) tensor and PReLU activiation weights is not supposed to be a 4-D
// tensor, we still need to support them, because we haven't disabled
// them for NHWC format.
// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196
function d(e,t){let r=e.length;return r>=3?t?[...e.slice(0,-3),e[r-3]*e[r-2],e[r-1]]:[...e.slice(0,-3),e[r-3],e[r-2]*e[r-1]]:!t&&1===r&&e[0]>1?[e[0],1]:null}function h({x:e,filter:t,convInfo:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:h=null}){let f;// Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
// result from 2D to 4D.
let m=e.shape,g=s.texData.get(e.dataId),x=r.inChannels,b=m[0]*m[1]*m[2],y=r.outChannels,j="channelsLast"===r.dataFormat,_=[];if(null!=o){let e=d(o.shape,j);null!=e&&(o=(0,c.reshape)({inputs:{x:o},backend:s,attrs:{shape:e}}),_.push(o))}if(null!=a){let e=d(a.shape,j);null!=e&&(a=(0,c.reshape)({inputs:{x:a},backend:s,attrs:{shape:e}}),_.push(a))}// TODO: Once reduction ops are packed, batchMatMul will always be packed
// and we can remove this condition.
let k=(1===b||1===y)&&x>u.MATMUL_SHARED_DIM_THRESHOLD,I=!k&&g.isPacked&&j&&null!=g.texture&&m[2]%2!=0&&(0,n.util).arraysEqual(g.shape.slice(-3),m.slice(-3));if(I){// We avoid expensive packed 2x2 reshape by padding col count to next,
// even number. When col is odd, the result of packed batchMatMul is
// the same (has the same texture layout and and values in the texture) as
// it is for next even col. We make the odd-cols tensor to look like
// even-cols tensor before the operation and, after the batchMatMul,
// fix the even-cols result to have odd number of cols.
let d=m[0]*m[1]*(m[2]+1),x={dataId:e.dataId,shape:[1,d,r.inChannels],dtype:e.dtype},b=g.shape;g.shape=g.shape.slice(),g.shape[g.shape.length-2]++,(0,n.util).assert(l.isReshapeFree(g.shape,x.shape),()=>`packed reshape ${g.shape} to ${x.shape} isn't free`);let y=(0,c.reshape)({inputs:{x:t},backend:s,attrs:{shape:[1,r.inChannels,r.outChannels]}});_.push(y);let j=(0,u.batchMatMulImpl)({a:x,b:y,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:h,preluActivationWeights:o,leakyreluAlpha:i}),k=s.texData.get(j.dataId);(0,n.util).assert(k.isPacked,()=>"batchMatMul result is expected to be packed"),// Restore the input shape to original.
g.shape=b,// Set the output shape - there is no need for expensive reshape as data
// layout is already correct.
k.shape=r.outShape,(f=(0,p.identity)({inputs:{x:j},backend:s})).shape=r.outShape,_.push(j)}else{let n=r.outHeight*r.outWidth,l=(0,c.reshape)({inputs:{x:e},backend:s,attrs:{shape:j?[r.batchSize,n,r.inChannels]:[r.batchSize,r.inChannels,n]}}),p=(0,c.reshape)({inputs:{x:t},backend:s,attrs:{shape:[1,r.inChannels,r.outChannels]}}),d=(0,u.batchMatMulImpl)({a:j?l:p,b:j?p:l,transposeA:!j,transposeB:!1,backend:s,bias:a,activation:h,preluActivationWeights:o,leakyreluAlpha:i});f=(0,c.reshape)({inputs:{x:d},backend:s,attrs:{shape:r.outShape}}),_.push(l),_.push(p),_.push(d)}for(let e of _)s.disposeIntermediateTensorInfo(e);return f}function f({x:e,filter:t,convInfo:r,backend:s,bias:l=null,preluActivationWeights:u=null,leakyreluAlpha:p=0,activation:h=null}){// Rearranges conv2d input so each block to be convolved over forms the
// column of a new matrix with shape [filterWidth * filterHeight *
// inChannels, outHeight * outWidth]. The filter is also rearranged so each
// output channel forms a row of a new matrix with shape [outChannels,
// filterWidth * filterHeight * inChannels]. The convolution is then
// computed by multiplying these matrices and reshaping the result.
let{filterWidth:f,filterHeight:m,inChannels:g,outWidth:x,outHeight:b,dataFormat:y}=r,j="channelsLast"===y,_=f*m*g,k=b*x,I=[r.batchSize,_,k],w=[];if(null!=u){let e=d(u.shape,j);null!=e&&(u=(0,c.reshape)({inputs:{x:u},backend:s,attrs:{shape:e}}),w.push(u))}if(null!=l){let e=d(l.shape,j);null!=e&&(l=(0,c.reshape)({inputs:{x:l},backend:s,attrs:{shape:e}}),w.push(l))}let C=(0,c.reshape)({inputs:{x:t},backend:s,attrs:{shape:[1,_,(0,n.util).sizeFromShape(t.shape)/_]}});w.push(C);let S=new a.Im2ColPackedProgram(I,r),T=[e.shape,[r.padInfo.top,r.padInfo.left],[r.strideHeight,r.strideWidth],[r.dilationHeight,r.dilationWidth],[r.inChannels],[r.filterWidth*r.inChannels],[r.outWidth]],N=s.runWebGLProgram(S,[e],"float32",T),E=(0,c.reshape)({inputs:{x:N},backend:s,attrs:{shape:I}});w.push(N),w.push(E);let F=null!=l,A=null!=u,R="leakyrelu"===h,D=h?(0,o.mapActivationToShaderProgram)(h,!0):null,$=new i.MatMulPackedProgram(j?E.shape:C.shape,j?C.shape:E.shape,j?[r.batchSize,k,r.outChannels]:[r.batchSize,r.outChannels,k],!0,!1,F,D,A,R),P=j?[E,C]:[C,E];if(l&&P.push(l),A&&P.push(u),R){let e=s.makeTensorInfo([],"float32",(0,n.util).createScalarValue(p,"float32"));P.push(e),w.push(e)}let z=s.runWebGLProgram($,P,"float32"),M=(0,c.reshape)({inputs:{x:z},backend:s,attrs:{shape:r.outShape}});for(let e of(w.push(z),w))s.disposeIntermediateTensorInfo(e);return M}},{"@tensorflow/tfjs-core":"U1ela","../im2col_packed_gpu":"IlIUT","../kernel_utils/kernel_funcs_utils":"a0KZF","../mulmat_packed_gpu":"hl1sJ","../webgl_util":"6G64G","./BatchMatMul_impl":"aXqxm","./Identity":"dsrAl","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],IlIUT:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Im2ColPackedProgram",()=>o);var n=e("./glsl_version"),a=e("./gpgpu_math");class o{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length);let{dataFormat:r}=t,s=(0,n.getGlslDifferences)(),o="channelsLast"===r,i=o?1:2,l=o?2:3,u=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,p="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)p+=`
          blockIndex = rc.z + ${t};
          pos = rc.y + ${e};

          ${u}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${l}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${p}

        ${s.output} = result;
      }
    `}}},{"./glsl_version":"5WNNi","./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9p8OH":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropFilter",()=>o),s.export(r,"conv2DBackpropFilterConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,pad:u,dataFormat:p,dimRoundingMode:c,filterShape:d}=s,h=(0,n.backend_util).convertConv2DDataFormat(p),f=(0,n.backend_util).computeConv2DInfo(o.shape,d,l,1/* dilations */,u,c,!1,h),m=new a.Conv2DDerFilterProgram(f);return r.runWebGLProgram(m,[o,i],"float32")}let i={kernelName:n.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu":"aK6KE","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aK6KE:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Conv2DDerFilterProgram",()=>n),s.export(r,"Conv2DDerInputProgram",()=>a),s.export(r,"Conv3DDerFilterProgram",()=>o),s.export(r,"Conv3DDerInputProgram",()=>i);class n{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,n=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${n};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${a}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class a{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,n=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${o}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${a?3:1}];

        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class o{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,n=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${n};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${r} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${s} - ${o};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class i{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,s=e.filterWidth,n=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=r-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${i}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${n}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${r}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${r} - 1 - wR;

            for (int wC = 0; wC < ${s}; wC++) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${s} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kTvRs:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropInput",()=>o),s.export(r,"conv2DBackpropInputConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{inputShape:l,strides:u,pad:p,dataFormat:c,dimRoundingMode:d}=s,h=(0,n.backend_util).convertConv2DDataFormat(c),f=(0,n.backend_util).computeConv2DInfo(l,i.shape,u,1/* dilations */,p,d,!1,h),m=new a.Conv2DDerInputProgram(f);return r.runWebGLProgram(m,[o,i],"float32")}let i={kernelName:n.Conv2DBackpropInput,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu":"aK6KE","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4m7NQ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3D",()=>o),s.export(r,"conv3DConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,filter:i}=t,{strides:l,pad:u,dilations:p}=s,c=(0,n.backend_util).computeConv3DInfo(o.shape,i.shape,l,p,u),d=new a.Conv3DProgram(c);return r.runWebGLProgram(d,[o,i],"float32")}let i={kernelName:n.Conv3D,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_gpu":"ldBDT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iOySy:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropFilterV2",()=>o),s.export(r,"conv3DBackpropFilterV2Config",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,pad:u,filterShape:p}=s,c=(0,n.backend_util).computeConv3DInfo(o.shape,p,l,1/* dilations */,u),d=new a.Conv3DDerFilterProgram(c);return r.runWebGLProgram(d,[o,i],"float32")}let i={kernelName:n.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu":"aK6KE","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eYe9I:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropInput",()=>o),s.export(r,"conv3DBackpropInputConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{pad:l,strides:u,inputShape:p}=s,c=(0,n.backend_util).computeConv3DInfo(p,i.shape,u,1/* dilations */,l),d=new a.Conv3DDerInputProgram(c);return r.runWebGLProgram(d,[o,i],"float32")}let i={kernelName:n.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu":"aK6KE","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h04wF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cos",()=>i),s.export(r,"cosConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=a.CHECK_NAN_SNIPPET_UNARY+`
  return cos(x);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Cos,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jLAlN:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cosh",()=>i),s.export(r,"coshConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Cosh,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hpBlq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cropAndResize",()=>o),s.export(r,"cropAndResizeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../crop_and_resize_gpu");let o=e=>{let{inputs:t,backend:r,attrs:s}=e,{image:n,boxes:o,boxInd:i}=t,{cropSize:l,method:u,extrapolationValue:p}=s,c=new a.CropAndResizeProgram(n.shape,o.shape,l,u,p);return r.runWebGLProgram(c,[n,o,i],"float32")},i={kernelName:n.CropAndResize,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../crop_and_resize_gpu":"6PS3n","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6PS3n":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"CropAndResizeProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[a,o,i,l]=e,[u]=t,[p,c]=r;this.outputShape=[u,p,c,l];let[d,h]=[`${o-1}.0`,`${i-1}.0`],[f,m,g]=p>1?[`${(o-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[x,b,y]=c>1?[`${(i-1)/(c-1)}`,"(x2-x1) * width_ratio",`x1*${h} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${h}`];// Reference implementation
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc
this.userCode=`
      const float height_ratio = float(${f});
      const float width_ratio = float(${x});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${m};
        float width_scale = ${b};

        float in_y = ${g};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${n}));
          return;
        }
        float in_x = ${y};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${n}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${"bilinear"===s?1:0} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hfjzN:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumprod",()=>i),s.export(r,"cumprodConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cum_gpu"),o=e("./Cum_impl");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{axis:i,exclusive:l,reverse:u}=s;return(0,o.cumImpl)(a.CumOpType.Prod,n,r,i,l,u)}let l={kernelName:n.Cumprod,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cum_gpu":"hXjmy","./Cum_impl":"fuWih","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hXjmy:[function(e,t,r){var s,n,a=e("@parcel/transformer-js/src/esmodule-helpers.js");a.defineInteropFlag(r),a.export(r,"CumOpType",()=>n),a.export(r,"CumProgram",()=>i);var o=e("./shader_compiler");(s=n||(n={})).Prod="*",s.Sum="+";class i{constructor(e,t,r,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let a=this.outputShape.length,i=this.op===n.Prod?"1.0":"0.0",p=r?i:`getX(${l(a,"coords",this.op)})`,c=this.outputShape[this.outputShape.length-1],d="",h="";r?(d=s?`end != ${c-1}`:"end != 0",h=s?"end + 1":"end - 1"):(d=s?`end + pow2 < ${c}`:"end >= pow2",h=s?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${(0,o.getCoordsDataType)(a)} coords = getOutputCoords();
        int end = ${u(a,"coords",this.op)};
        float val = ${p};
        int pow2 = int(pow(2.0, index));
        if (${d}) {
          int idx = ${h};
          ${u(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${l(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function l(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function u(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fuWih:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumImpl",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cum_gpu"),o=e("./Identity"),i=e("./Transpose");function l(e,t,r,s,l,u){let p=t.shape.length,c=(0,n.backend_util).getAxesPermutation([s],p),d=t;null!=c&&(d=(0,i.transpose)({inputs:{x:t},backend:r,attrs:{perm:c}}));let h=(0,n.backend_util).getInnerMostAxes(1,p)[0];if(h!==p-1)throw Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);let f=d.shape[h],m=(0,o.identity)({inputs:{x:d},backend:r});// Use cum parallel algorithm, inspired by:
// https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
// Note: although the algorithm is called sum, it works for any associtative
// operator with an identity.
for(let t=0;t<=Math.ceil(Math.log2(f))-1;t++){let s=new a.CumProgram(e,d.shape,!1,u),n=[[t]],o=m;m=r.runWebGLProgram(s,[m],m.dtype,n),r.disposeIntermediateTensorInfo(o)}// For exclusive cum, shift the end result in the direction of product or sum
// and add 1 for product or 0 for sum to the front index.
if(l){let t=new a.CumProgram(e,d.shape,l,u),s=m;m=r.runWebGLProgram(t,[m],m.dtype),r.disposeIntermediateTensorInfo(s)}if(null!=c){let e=(0,n.backend_util).getUndoAxesPermutation(c),t=(0,i.transpose)({inputs:{x:m},backend:r,attrs:{perm:e}});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(d),t}return m}},{"@tensorflow/tfjs-core":"U1ela","../cum_gpu":"hXjmy","./Identity":"dsrAl","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6kAi5":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumsum",()=>i),s.export(r,"cumsumConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cum_gpu"),o=e("./Cum_impl");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{axis:i,exclusive:l,reverse:u}=s;return(0,o.cumImpl)(a.CumOpType.Sum,n,r,i,l,u)}let l={kernelName:n.Cumsum,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cum_gpu":"hXjmy","./Cum_impl":"fuWih","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ekhKI:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"denseBincount",()=>o),s.export(r,"denseBincountConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,weights:o}=t,{size:i,binaryOutput:l}=s;if(1===n.shape.length){let e=r.readSync(n.dataId),t=r.readSync(o.dataId),s=(0,a.bincountImplCPU)(e,t,o.dtype,o.shape,i);return r.makeTensorInfo([i],o.dtype,s)}if(2===n.shape.length){let e=r.bufferSync(n),t=r.bufferSync(o),s=(0,a.bincountReduceImplCPU)(e,t,i,l);return r.makeTensorInfo(s.shape,o.dtype,s.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}let i={kernelName:n.DenseBincount,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eKV3R:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthToSpace",()=>o),s.export(r,"depthToSpaceConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../depth_to_space_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{blockSize:o,dataFormat:i}=s,l=n.shape[0],u="NHWC"===i?n.shape[1]:n.shape[2],p="NHWC"===i?n.shape[2]:n.shape[3],c="NHWC"===i?n.shape[3]:n.shape[1],d=u*o,h=p*o,f=c/(o*o),m="NHWC"===i?[l,d,h,f]:[l,f,d,h],g=new a.DepthToSpaceProgram(m,o,i);return r.runWebGLProgram(g,[n],n.dtype)}let i={kernelName:n.DepthToSpace,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../depth_to_space_gpu":"6S2PF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6S2PF":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DepthToSpaceProgram",()=>n);class n{constructor(e,t,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=r,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"814gX":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNative",()=>i),s.export(r,"depthwiseConv2dNativeConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../conv_gpu_depthwise"),o=e("../conv_packed_gpu_depthwise");function i(e){let t;let{inputs:r,backend:s,attrs:i}=e,{x:l,filter:u}=r,{strides:p,pad:c,dilations:d,dimRoundingMode:h}=i,f=d;null==f&&(f=[1,1]),(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(p,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${f}'`);let m=(0,n.backend_util).computeConv2DInfo(l.shape,u.shape,p,f,c,h,!0);t=(0,n.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1?new o.DepthwiseConvPacked2DProgram(m):new a.DepthwiseConv2DProgram(m);let g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];return s.runWebGLProgram(t,[l,u],"float32",g)}let l={kernelName:n.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../conv_gpu_depthwise":"4xbll","../conv_packed_gpu_depthwise":"hTUXD","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4xbll":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DepthwiseConv2DProgram",()=>a);var n=e("./gpgpu_math");class a{constructor(e,t=!1,r=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,n.useShapeUniforms)(this.outputShape.length);let o=e.filterHeight,i=e.filterWidth,l=e.outChannels/e.inChannels,u="",p="";r&&(u=s?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,p="result = activation(result);"),t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${o}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${p}
        setOutput(result);
      }
    `}}},{"./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hTUXD:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DepthwiseConvPacked2DProgram",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("./gpgpu_math");class o{constructor(e,t=!1,r=null,s=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=(0,a.useShapeUniforms)(this.outputShape.length);let i=e.outChannels/e.inChannels,l=e.padInfo.left,u=e.strideWidth,p=e.dilationWidth,c=e.filterHeight,d=e.filterWidth,h=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<d;e++)h+=`
          vec4 xTexelC${2*e};
          int xTexelC${2*e}Ready;
          vec4 xTexelC${2*e+1};
          int xTexelC${2*e+1}Ready;
          vec4 xC${e};`;/**
         * This vectorized implementation works by gathering the values needed for
         * each output channel's dot product into vec4's and then multiplying them
         * all together (this happens in the final double for-loop below). Most of
         * the main loop consists of constructing these vec4's with the minimum
         * number of texture2D calls, which means making use of all four returned
         * values from a texture2D call at once.
         */h+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let e=0;e<d;e++)h+=`
          xTexelC${2*e} = vec4(0.0);
          xTexelC${2*e}Ready = 0;
          xTexelC${2*e+1} = vec4(0.0);
          xTexelC${2*e+1}Ready = 0;
          xC${e} = vec4(0.0);`;h+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let e=0;e<(d+1)/2;e++){let t=2*e;if(h+=`
          xC = xCCorner + ${t*p};
          `,1===u){if(t<d&&(l%2==1?(// TODO: Ensure vec4 previous does not result in redundant sample,
// and avoid setting xTexelRC's that exceed the boundary in the
// first place rather than resetting them to vec4(0)).
// To compute xCOffset:
// - If padding is odd, we must add 1 to ensure we ask for an
// even-numbered row.
// - We subtract 2 to access the previous texel.
h+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }
              `,1===p&&t>0?h+=`
                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);
                `:h+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);
                  } else {
                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);
                  }
                  `):h+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xC${t} = xTexelC${t};
                `,t+1<d)){// If dilation is even, the second entry should match the first
// (either both are composed or both are single samples). But if
// dilation is odd, then the second entry should be the opposite
// of the first (if the first is composed, the second is a single
// sample, and vice versa.)
let e=l%2==0?(0,n.util).nearestLargerEven(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(h+=`
                  xCOffset = xC + imod(pads[1], 2) + ${e};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${t+1}.zw = vec2(0.0);
                    }
                    xTexelC${t+1}Ready = 1;
                  }
                  `,p>1?h+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);
                    } else {
                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);
                    }
                    `:h+=`
                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);
                    `):1===e?h+=`
                    xC${t+1} = xTexelC${t};
                    `:h+=`
                    xCOffset = xC + ${e};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${t+1}.zw = vec2(0.0);
                      }
                      xTexelC${t+1}Ready = 1;
                    }

                    xC${t+1} = xTexelC${t+1};
                    `}}else t<d&&(l%2==1?(h+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.0);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
              `,t+1<d&&(h+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);
                `)):(h+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(
                  xTexelC${t}.xy, xTexelC${t+1}.xy);
              `,t+1<d&&(h+=`
                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
                `)));t<d&&(h+=`
            wTexel = getW(r, ${t}, d1, q);
            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);
          `,t+1<d&&(h+=`
              wTexel = getW(r, ${t+1}, d1, q);
              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);
            `))}h+=`
    }
  
      }
    `;let f="",m="";r&&(f=s?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:o?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`vec4 activation(vec4 x) {
          ${r}
        }`,m="result = activation(result);"),t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${h}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${t?"result += getBiasAtOutCoords();":""}
        ${m}
        setOutput(result);
      }
    `}}},{"@tensorflow/tfjs-core":"U1ela","./gpgpu_math":"iIQOP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j0M3i:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropFilter",()=>o),s.export(r,"depthwiseConv2dNativeBackpropFilterConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu_depthwise");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,dilations:u,pad:p,dimRoundingMode:c,filterShape:d}=s,h=(0,n.backend_util).computeConv2DInfo(o.shape,d,l,u,p,c,!0),f=new a.DepthwiseConv2DDerFilterProgram(h);return r.runWebGLProgram(f,[o,i],"float32")}let i={kernelName:n.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu_depthwise":"iUPwx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iUPwx:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DepthwiseConv2DDerFilterProgram",()=>n),s.export(r,"DepthwiseConv2DDerInputProgram",()=>a);class n{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,s=e.padInfo.top,n=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${s};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${n};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class a{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,s=e.strideHeight,n=e.strideWidth,a=t-1-e.padInfo.top,o=r-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${s}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${i}; dm++) {
              int d2 = d1 * ${i} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"52QMU":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropInput",()=>o),s.export(r,"depthwiseConv2dNativeBackpropInputConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../conv_backprop_gpu_depthwise");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{strides:l,dilations:u,pad:p,dimRoundingMode:c,inputShape:d}=s,h=(0,n.backend_util).computeConv2DInfo(d,i.shape,l,u,p,c,!0),f=new a.DepthwiseConv2DDerInputProgram(h);return r.runWebGLProgram(f,[o,i],"float32")}let i={kernelName:n.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../conv_backprop_gpu_depthwise":"iUPwx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9NX24":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"diag",()=>i),s.export(r,"diagConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../diag_gpu"),o=e("./Reshape");function i(e){let{inputs:t,backend:r}=e,{x:s}=t,i=[...s.shape,...s.shape],l=(0,n.util).sizeFromShape(s.shape),u=(0,o.reshape)({inputs:{x:s},backend:r,attrs:{shape:[l]}}),p=new a.DiagProgram(l),c=r.runWebGLProgram(p,[u],u.dtype),d=(0,o.reshape)({inputs:{x:c},backend:r,attrs:{shape:i}});return r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(c),d}let l={kernelName:n.Diag,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../diag_gpu":"9WSVi","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9WSVi":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"DiagProgram",()=>n);class n{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9HYJz":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2D",()=>i),s.export(r,"dilation2DConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../dilation_gpu"),o=e("./Reshape");function i(e){let t;let{inputs:r,backend:s,attrs:i}=e,{x:l,filter:u}=r,{strides:p,pad:c,dilations:d}=i,h=(0,n.backend_util).computeDilation2DInfo(l.shape,u.shape,p,c,"NHWC"/* dataFormat */,d),f=new a.Dilation2DProgram(h);t=s.runWebGLProgram(f,[l,u],"float32");let m=(0,o.reshape)({inputs:{x:t},backend:s,attrs:{shape:h.outShape}});return s.disposeIntermediateTensorInfo(t),m}let l={kernelName:n.Dilation2D,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../dilation_gpu":"1WVay","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1WVay":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"Dilation2DProgram",()=>n);class n{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:r,padInfo:s,strideHeight:n,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:p,left:c}=s;this.userCode=`
      const ivec2 strides = ivec2(${n}, ${a});
      const ivec2 pads = ivec2(${p}, ${c});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${o}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${i}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${r}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k76yR:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"einsum",()=>u),s.export(r,"einsumConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./Multiply"),o=e("./Reshape"),i=e("./Sum"),l=e("./Transpose");function u(e){let{inputs:t,backend:r,attrs:s}=e,{equation:u}=s,{allDims:p,summedDims:c,idDims:d}=(0,n.backend_util).decodeEinsumEquation(u,t.length);(0,n.backend_util).checkEinsumDimSizes(p.length,d,t);let{path:h,steps:f}=(0,n.backend_util).getEinsumComputePath(c,d),m=f.length,g=null,x=p.length,b=[];for(let e=0;e<m;++e){for(let s of f[e]){let e;let{permutationIndices:i,expandDims:u}=(0,n.backend_util).getEinsumPermutation(x,d[s]);(0,n.backend_util).isIdentityPermutation(i)?e=t[s]:(e=(0,l.transpose)({inputs:{x:t[s]},backend:r,attrs:{perm:i}}),b.push(e));let p=e.shape.slice();for(let e=0;e<u.length;++e)p.splice(u[e],0,1);(0,n.util).arraysEqual(e.shape,p)||(e=(0,o.reshape)({inputs:{x:e},backend:r,attrs:{shape:p}}),b.push(e)),null===g?g=e:(// tslint:disable-next-line: no-unnecessary-type-assertion
g=(0,a.multiply)({inputs:{a:e,b:g},backend:r}),b.push(g))}e<m-1&&(h[e]>=0&&(g=(0,i.sum)({inputs:{x:g},backend:r,attrs:{axis:h[e]-(p.length-x),keepDims:!1}}),b.push(g)),x--)}// Clean up intermediate tensors.
for(let e of b)e!==g&&r.disposeIntermediateTensorInfo(e);return g}let p={kernelName:n.Einsum,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","./Multiply":"egesk","./Reshape":"lrhL2","./Sum":"fgK31","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fm3jy:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"eluConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,i=(0,a.unaryKernelFunc)({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:o}),l={kernelName:n.Elu,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5XzFD":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"eluGrad",()=>l),s.export(r,"eluGradConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu");let i=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,l=e=>{let{inputs:t,backend:r}=e,{dy:s,y:l}=t,u=(0,n.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new o.BinaryOpPackedProgram(i,s.shape,l.shape):new a.BinaryOpProgram("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,l.shape);return r.runWebGLProgram(u,[s,l],s.dtype)},u={kernelName:n.EluGrad,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cYLB2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"equal",()=>l),s.export(r,"equalConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=`
  return vec4(equal(a, b));
`,l=(0,a.binaryKernelFunc)({opSnippet:"return float(a == b);",packedOpSnippet:i,dtype:"bool",cpuKernelImpl:o.equalImplCPU}),u={kernelName:n.Equal,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8DpV7":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"erf",()=>i),s.export(r,"erfConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${n.backend_util.ERF_P};
  float a1 = ${n.backend_util.ERF_A1};
  float a2 = ${n.backend_util.ERF_A2};
  float a3 = ${n.backend_util.ERF_A3};
  float a4 = ${n.backend_util.ERF_A4};
  float a5 = ${n.backend_util.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Erf,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jadst:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"EXP",()=>i),s.export(r,"exp",()=>u),s.export(r,"expConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=a.CHECK_NAN_SNIPPET_UNARY+`
  return exp(x);
`,l=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,u=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:l,cpuKernelImpl:o.expImplCPU,dtype:"float32"}),p={kernelName:n.Exp,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3AoBI":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expandDims",()=>o),s.export(r,"expandDimsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Reshape");function o(e){let{inputs:t,attrs:r,backend:s}=e,{dim:o}=r,{input:i}=t,l=i.shape.length,u=i.shape.slice(),p=o;return o<0&&(// Negative value is counted from the tail of rank.
(0,n.util).assert(-(l+1)<=o,()=>`Axis must be in the interval [${-(l+1)}, ${l}]`),p=l+o+1),u.splice(p,0,1),(0,a.reshape)({inputs:{x:i},backend:s,attrs:{shape:u}})}let i={kernelName:n.ExpandDims,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"51xTV":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expm1",()=>l),s.export(r,"expm1Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return exp(x) - 1.0;",l=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:i,cpuKernelImpl:o.expm1ImplCPU}),u={kernelName:n.Expm1,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6wq3j":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fft",()=>o),s.export(r,"fftConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./FFT_impl");function o(e){let{inputs:t,backend:r}=e,{input:s}=t;return(0,a.fftImpl)(s,!1,r)}let i={kernelName:n.FFT,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./FFT_impl":"gjYaQ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gjYaQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fftImpl",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../fft_gpu"),o=e("./Complex"),i=e("./Reshape");function l(e,t,r){let s=r.texData.get(e.dataId),l=(0,n.util).sizeFromShape(e.shape),u=e.shape[e.shape.length-1],p=l/u,c=(0,i.reshape)({inputs:{x:e},backend:r,attrs:{shape:[p,u]}}),d=c.shape,h=new a.FFTProgram("real",d,t),f=new a.FFTProgram("imag",d,t),m=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:d},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:d}],g=r.runWebGLProgram(h,m,"float32"),x=r.runWebGLProgram(f,m,"float32"),b=(0,o.complex)({inputs:{real:g,imag:x},backend:r});r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(x);let y=(0,i.reshape)({inputs:{x:b},backend:r,attrs:{shape:e.shape}});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(b),y}},{"@tensorflow/tfjs-core":"U1ela","../fft_gpu":"5chap","./Complex":"l0nV1","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5chap":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"FFTProgram",()=>n);class n{constructor(e,t,r){let s;this.variableNames=["real","imag"];let n=t[1];this.outputShape=t;let a=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=r?`${n}.0`:"1.0";if("real"===e)s="return real * expR - imag * expI;";else if("imag"===e)s="return real * expI + imag * expR;";else throw Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${a};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${s}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${o};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fPbul:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fill",()=>o),s.export(r,"fillConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../fill_gpu");function o(e){let{backend:t,attrs:r}=e,{shape:s,value:o}=r,{dtype:i}=r;if("string"===(i=i||(0,n.util).inferDtype(o))){// String type should be handled in CPU memory.
let e=(0,n.util).getArrayFromDType(i,(0,n.util).sizeFromShape(s));return e.fill(o),t.makeTensorInfo(s,i,e)}{let e=new a.FillProgram(s,o),r=[[o]];return t.runWebGLProgram(e,[],i,r)}}let i={kernelName:n.Fill,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../fill_gpu":"11jlr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"11jlr":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"FillProgram",()=>n);class n{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iYjfy:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"flipLeftRightConfig",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("../flip_left_right_gpu");let o={kernelName:n.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:r}=e,s=new a.FlipLeftRightProgram(r.shape),n=t.runWebGLProgram(s,[r],r.dtype);return n}}},{"@tensorflow/tfjs-core":"U1ela","../flip_left_right_gpu":"4HA78","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4HA78":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"FlipLeftRightProgram",()=>n);class n{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"53zkB":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floor",()=>l),s.export(r,"floorConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return floor(x);",l=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:i,cpuKernelImpl:o.floorImplCPU}),u={kernelName:n.Floor,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gmp88:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorDiv",()=>l),s.export(r,"floorDivConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");// We use native integer division to deal with floating point imprecision. Since
// we implement floor division and glsl implements truncated division, we
// correct for this by subtracting 1 from result when the result is negative and
// there is a remainder.
let o=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,i=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,l=(0,a.binaryKernelFunc)({opSnippet:o,packedOpSnippet:i,dtype:"int32"}),u={kernelName:n.FloorDiv,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7xm1k":[function(e,t,r){let s;/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var n=e("@parcel/transformer-js/src/esmodule-helpers.js");n.defineInteropFlag(r),n.export(r,"fromPixelsConfig",()=>u);var a=e("@tensorflow/tfjs-core"),o=e("../tex_util"),i=e("./FromPixels_utils/from_pixels_gpu"),l=e("./FromPixels_utils/from_pixels_packed_gpu");let u={kernelName:a.FromPixels,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{pixels:u}=t,{numChannels:c}=n,d="undefined"!=typeof HTMLVideoElement&&u instanceof HTMLVideoElement,h="undefined"!=typeof HTMLImageElement&&u instanceof HTMLImageElement,[f,m]=d?[u.videoWidth,u.videoHeight]:[u.width,u.height],g=[m,f],x=[m,f,c];if(h||d){let e=(0,a.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==s||e!==p)&&(p=e,s=document.createElement("canvas").getContext("2d",{willReadFrequently:p})),s.canvas.width=f,s.canvas.height=m,s.drawImage(u,0,0,f,m),u=s.canvas}let b=r.makeTensorInfo(g,"int32");// This is a byte texture with pixels.
r.texData.get(b.dataId).usage=o.TextureUsage.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(b.dataId),u);let y=(0,a.env)().getBool("WEBGL_PACK")?new l.FromPixelsPackedProgram(x):new i.FromPixelsProgram(x),j=r.runWebGLProgram(y,[b],"int32");return r.disposeData(b.dataId),j}},p=(0,a.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU")},{"@tensorflow/tfjs-core":"U1ela","../tex_util":"cgolR","./FromPixels_utils/from_pixels_gpu":"b40R2","./FromPixels_utils/from_pixels_packed_gpu":"2vYcw","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],b40R2:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"FromPixelsProgram",()=>a);var n=e("../../glsl_version");class a{constructor(e){this.variableNames=["A"];let t=(0,n.getGlslDifferences)(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${r}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}},{"../../glsl_version":"5WNNi","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2vYcw":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"FromPixelsPackedProgram",()=>a);var n=e("../../glsl_version");class a{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=(0,n.getGlslDifferences)(),[r,s]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${s}.0, ${r}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}},{"../../glsl_version":"5WNNi","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"41tvn":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fusedConv2d",()=>p),s.export(r,"fusedConv2DConfig",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("../conv_gpu"),o=e("../conv_packed_gpu"),i=e("../kernel_utils/kernel_funcs_utils"),l=e("./Conv2D_impl"),u=e("./Reshape");function p(e){let t;let{inputs:r,backend:s,attrs:p}=e,{x:c,filter:d,bias:h,preluActivationWeights:f}=r,{strides:m,pad:g,dataFormat:x,dilations:b,dimRoundingMode:y,activation:j,leakyreluAlpha:_}=p,k=(0,n.backend_util).convertConv2DDataFormat(x),I=(0,n.backend_util).computeConv2DInfo(c.shape,d.shape,m,b,g,y,!1,k),w=[],C=null!=h,S=null!=f,T="leakyrelu"===j,N=()=>{let e=[c,d],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=(0,u.reshape)({inputs:{x:e},backend:s,attrs:{shape:[e.shape[0],1,1]}});return w.push(t),t}return e};if(C&&e.push(t(h,x)),S&&e.push(t(f,x)),T){let t=s.makeTensorInfo([],"float32",(0,n.util).createScalarValue(_,"float32"));e.push(t),w.push(t)}return e};if(1===I.filterHeight&&1===I.filterWidth&&1===I.dilationHeight&&1===I.dilationWidth&&1===I.strideHeight&&1===I.strideWidth&&("SAME"===I.padInfo.type||"VALID"===I.padInfo.type))t=(0,l.conv2dByMatMul)({x:c,filter:d,convInfo:I,backend:s,bias:h,activation:j,preluActivationWeights:f,leakyreluAlpha:_});else if(I.strideWidth<=2&&"channelsLast"===k&&(0,n.env)().getBool("WEBGL_EXP_CONV")){let e=j?(0,i.mapActivationToShaderProgram)(j,!0):null,r=new o.Conv2DPackedProgram(I,C,e,S,T),n=[[I.padInfo.top,I.padInfo.left],[I.strideHeight,I.strideWidth],[I.dilationHeight,I.dilationWidth],[I.inHeight,I.inWidth]],a=N();t=s.runWebGLProgram(r,a,"float32",n)}else if((0,n.env)().getBool("WEBGL_CONV_IM2COL"))t=(0,l.conv2dWithIm2Row)({x:c,filter:d,convInfo:I,backend:s,bias:h,activation:j,preluActivationWeights:f,leakyreluAlpha:_});else{let e=j?(0,i.mapActivationToShaderProgram)(j,!1):null,r=new a.Conv2DProgram(I,C,e,S,T),n=N();t=s.runWebGLProgram(r,n,"float32")}let E=(0,u.reshape)({inputs:{x:t},backend:s,attrs:{shape:I.outShape}});return w.push(t),w.forEach(e=>s.disposeIntermediateTensorInfo(e)),E}let c={kernelName:n.FusedConv2D,backendName:"webgl",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","../conv_gpu":"ldBDT","../conv_packed_gpu":"3LBaY","../kernel_utils/kernel_funcs_utils":"a0KZF","./Conv2D_impl":"bqmHF","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ca82W:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fusedDepthwiseConv2D",()=>l),s.export(r,"fusedDepthwiseConv2DConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../conv_gpu_depthwise"),o=e("../conv_packed_gpu_depthwise"),i=e("../kernel_utils/kernel_funcs_utils");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u,filter:p,bias:c,preluActivationWeights:d}=r,{strides:h,pad:f,dilations:m,dimRoundingMode:g,activation:x,leakyreluAlpha:b}=l,y=[],j=m;null==j&&(j=[1,1]),(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(h,j),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${h} and dilations '${j}'`);let _=(0,n.backend_util).computeConv2DInfo(u.shape,p.shape,h,j,f,g,!0),k=(0,n.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&_.strideWidth<=2&&_.outChannels/_.inChannels==1,I=x?(0,i.mapActivationToShaderProgram)(x,k):null,w=[u,p],C=null!=c,S=null!=d,T="leakyrelu"===x;if(C&&w.push(c),S&&w.push(d),T){let e=s.makeTensorInfo([],"float32",(0,n.util).createScalarValue(b,"float32"));w.push(e),y.push(e)}t=k?new o.DepthwiseConvPacked2DProgram(_,C,I,S,T):new a.DepthwiseConv2DProgram(_,C,I,S,T);let N=[[_.padInfo.top,_.padInfo.left],[_.strideHeight,_.strideWidth],[_.dilationHeight,_.dilationWidth],[_.inHeight,_.inWidth]],E=s.runWebGLProgram(t,w,"float32",N);return y.forEach(e=>s.disposeIntermediateTensorInfo(e)),E}let u={kernelName:n.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../conv_gpu_depthwise":"4xbll","../conv_packed_gpu_depthwise":"hTUXD","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"15vt8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherNd",()=>l),s.export(r,"gatherNdConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../gather_nd_gpu"),o=e("../kernel_utils/shared"),i=e("./Reshape");function l(e){let{inputs:t,backend:r}=e,{params:s,indices:l}=t,u=l.shape,p=u[u.length-1],c=(0,n.util).sizeFromShape(s.shape),[d,h,f,m]=(0,n.backend_util).prepareAndValidate(s,l),g=(0,i.reshape)({inputs:{x:l},backend:r,attrs:{shape:[h,p]}}),x=(0,i.reshape)({inputs:{x:s},backend:r,attrs:{shape:[(0,n.util).sizeFromShape(s.shape)/f,f]}});if(r.shouldExecuteOnCPU([s,l])||"string"===s.dtype){let e=r.readSync(l.dataId),t=r.bufferSync(s),n=(0,o.gatherNdImplCPU)(e,t,s.dtype,h,p,f,m,s.shape,c);return r.makeTensorInfo(d,s.dtype,n.values)}let b=new a.GatherNDProgram(p,m,[h,f],s.shape),y=r.runWebGLProgram(b,[x,g],x.dtype),j=(0,i.reshape)({inputs:{x:y},backend:r,attrs:{shape:d}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(y),j}let u={kernelName:n.GatherNd,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../gather_nd_gpu":"8hOXB","../kernel_utils/shared":"glaaY","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8hOXB":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"GatherNDProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=r;let a=(0,n.getCoordsDataType)(r.length),o=`
    int index;`;for(let e=0;e<this.sliceDim;e++)o+=`
          index = round(getIndices(coords[0], ${e}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};
          flattenIndex += index * ${this.strides[e]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${o}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1lci1":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherV2",()=>l),s.export(r,"gatherV2Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../gather_gpu"),o=e("../kernel_utils/shared"),i=e("./Reshape");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l,indices:u}=t,{axis:p,batchDims:c}=s,d=(0,n.util).parseAxisParam(p,l.shape)[0];if((0,n.env)().get("DEBUG")){// In debug mode, throw error when any index is out of bound.
// Otherwise, just fill out of bounds with zeroes.
let e=r.readSync(u.dataId),t=l.shape[d];for(let r=0;r<e.length;++r){let s=e[r];(0,n.util).assert(s<=t-1&&s>=0,()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`)}}let h=(0,n.backend_util).segment_util.collectGatherOpShapeInfo(l,u,d,c),f=(0,n.util).sizeFromShape(u.shape),m=[],g=(0,i.reshape)({inputs:{x:l},backend:r,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),x=(0,i.reshape)({inputs:{x:u},backend:r,attrs:{shape:[h.batchSize,f/h.batchSize]}});m.push(g),m.push(x);let b=[h.batchSize,h.outerSize,f/h.batchSize,h.sliceSize];if(r.shouldExecuteOnCPU([l,u])||"string"===l.dtype){let e=r.bufferSync(x),t=r.bufferSync(g),s=(0,o.gatherV2ImplCPU)(t,e,b);return m.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(h.outputShape,s.dtype,s.values)}let y=new a.GatherProgram(g.shape,b),j=r.runWebGLProgram(y,[g,x],g.dtype);m.push(j);let _=(0,i.reshape)({inputs:{x:j},backend:r,attrs:{shape:h.outputShape}});return m.forEach(e=>r.disposeIntermediateTensorInfo(e)),_}let u={kernelName:n.GatherV2,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../gather_gpu":"d8Fgd","../kernel_utils/shared":"glaaY","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d8Fgd:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"GatherProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let r=(0,n.getCoordsDataType)(this.rank),s=// The input and output are always flattened into rank 4 tensors.
function(e,t){let r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${r[t]}`);return s.join()}(e,0);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${s}));
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cjINS:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greater",()=>l),s.export(r,"greaterConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=`
  return vec4(greaterThan(a, b));
`,l=(0,a.binaryKernelFunc)({opSnippet:"return float(a > b);",packedOpSnippet:i,cpuKernelImpl:o.greaterImplCPU,dtype:"bool"}),u={kernelName:n.Greater,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c6oTS:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"greaterEqual",()=>l),s.export(r,"greaterEqualConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=`
  return vec4(greaterThanEqual(a, b));
`,l=(0,a.binaryKernelFunc)({opSnippet:"return float(a >= b);",packedOpSnippet:i,dtype:"bool",cpuKernelImpl:o.greaterEqualImplCPU}),u={kernelName:n.GreaterEqual,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kn8VE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ifft",()=>o),s.export(r,"ifftConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./FFT_impl");function o(e){let{inputs:t,backend:r}=e,{input:s}=t;return(0,a.fftImpl)(s,!0,r)}let i={kernelName:n.IFFT,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./FFT_impl":"gjYaQ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c35A3:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isFinite",()=>o),s.export(r,"isFiniteConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),i={kernelName:n.IsFinite,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8MmWM":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isInf",()=>o),s.export(r,"isInfConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return float(isinf(x));",dtype:"bool"}),i={kernelName:n.IsInf,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kJ6ZE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isNaN",()=>o),s.export(r,"isNaNConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return float(isnan(x));",dtype:"bool"}),i={kernelName:n.IsNan,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cmUMh:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"less",()=>l),s.export(r,"lessConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=`
  return vec4(lessThan(a, b));
`,l=(0,a.binaryKernelFunc)({opSnippet:"return float(a < b);",packedOpSnippet:i,cpuKernelImpl:o.lessImplCPU,dtype:"bool"}),u={kernelName:n.Less,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"47Iod":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LESS_EQUAL",()=>i),s.export(r,"LESS_EQUAL_PACKED",()=>l),s.export(r,"lessEqual",()=>u),s.export(r,"lessEqualConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return float(a <= b);",l=`
  return vec4(lessThanEqual(a, b));
`,u=(0,a.binaryKernelFunc)({opSnippet:i,packedOpSnippet:l,cpuKernelImpl:o.lessEqualImplCPU,dtype:"bool"}),p={kernelName:n.LessEqual,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h4hry:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"linSpace",()=>o),s.export(r,"linSpaceConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{backend:t,attrs:r}=e,{start:s,stop:n,num:o}=r,i=(0,a.linSpaceImplCPU)(s,n,o);return t.makeTensorInfo([i.length],"float32",i)}let i={kernelName:n.LinSpace,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cwIl0:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log",()=>u),s.export(r,"logConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");// Windows chrome return 0 if the input is negative value. We will specifically
// return NaN if the input is 0 to solve compatiblity issue.
let i=a.CHECK_NAN_SNIPPET_UNARY+`
  return x < 0.0 ? 0./0. : log(x);
`,l=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,u=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:l,cpuKernelImpl:o.logImplCPU}),p={kernelName:n.Log,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fSpPm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log1p",()=>i),s.export(r,"log1pConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=a.CHECK_NAN_SNIPPET_UNARY+`
  return log(1.0 + x);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Log1p,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hy7vF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalAnd",()=>i),s.export(r,"logicalAndConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,i=(0,a.binaryKernelFunc)({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:o,dtype:"bool"}),l={kernelName:n.LogicalAnd,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lW5y6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalNot",()=>o),s.export(r,"logicalNotConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return float(!(x >= 1.0));"}),i={kernelName:n.LogicalNot,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2BLUC":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalOr",()=>i),s.export(r,"logicalOrConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,i=(0,a.binaryKernelFunc)({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:o,dtype:"bool"}),l={kernelName:n.LogicalOr,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hlX2E:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lrn",()=>i),s.export(r,"LRNConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../lrn_gpu"),o=e("../lrn_packed_gpu");let i=e=>{let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{depthRadius:l,bias:u,alpha:p,beta:c}=s,d=(0,n.env)().getBool("WEBGL_PACK_NORMALIZATION")?new o.LRNPackedProgram(i.shape,l,u,p,c):new a.LRNProgram(i.shape,l,u,p,c);return r.runWebGLProgram(d,[i],i.dtype)},l={kernelName:n.LRN,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../lrn_gpu":"98LUY","../lrn_packed_gpu":"gAw7O","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"98LUY":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LRNProgram",()=>n);class n{constructor(e,t,r,s,n){let a;this.variableNames=["x"],this.outputShape=[];let o=e[3]-1;this.outputShape=e;let i=`float(${r}) + float(${s}) * sum`;a=.5===n?`inversesqrt(${i})`:1===n?`1.0/(${i})`:`exp(log(${i}) * float(-${n}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${t}; j <= ${t}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${o}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${a};
        setOutput(val);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gAw7O:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LRNPackedProgram",()=>n);class n{constructor(e,t,r,s,n){let a;this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let o=e[3]-1;this.outputShape=e;let i=`float(${r}) + float(${s}) * sum`;a=.5===n?`inversesqrt(${i})`:1===n?`1.0/(${i})`:`exp(log(${i}) * float(-${n}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${t};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${t}; j <= ${t}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${a};
        setOutput(result);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lJa9J:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lrnGrad",()=>o),s.export(r,"LRNGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../lrn_grad_gpu");let o=e=>{let{inputs:t,backend:r,attrs:s}=e,{x:n,y:o,dy:i}=t,{depthRadius:l,bias:u,alpha:p,beta:c}=s,d=new a.LRNGradProgram(n.shape,l,u,p,c);return r.runWebGLProgram(d,[n,o,i],n.dtype)},i={kernelName:n.LRNGrad,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../lrn_grad_gpu":"dCyBO","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dCyBO:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"LRNGradProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=r,this.alpha=s,this.beta=n,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${s}) * norm + float(${r});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${s})
                * float(${n})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${n});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ezUpT:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"max",()=>l),s.export(r,"maxConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("./Max_impl"),i=e("./Transpose_impl");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r,{reductionIndices:p,keepDims:c}=l,d=u.shape.length,h=(0,n.util).parseAxisParam(p,u.shape),f=h,m=(0,n.backend_util).getAxesPermutation(f,d),g=null!=m,x=s.shouldExecuteOnCPU([u]),b=u;if(g){if(x){let e=s.texData.get(b.dataId),t=e.values,r=Array(d);for(let e=0;e<r.length;e++)r[e]=u.shape[m[e]];let n=(0,i.transposeImplCPU)(t,u.shape,u.dtype,m,r);b=s.makeTensorInfo(r,u.dtype);let a=s.texData.get(b.dataId);a.values=n}else b=(0,i.transposeImpl)(u,m,s);f=(0,n.backend_util).getInnerMostAxes(f.length,d)}(0,n.backend_util).assertAxesAreInnerMostDims("max",f,d);let[y,j]=(0,n.backend_util).computeOutAndReduceShapes(b.shape,f),_=y;if(c&&(_=(0,n.backend_util).expandShapeToKeepDim(y,h)),x){let e=s.texData.get(b.dataId),r=e.values,o=(0,a.maxImplCPU)(r,(0,n.util).sizeFromShape(j),_,u.dtype);t=s.makeTensorInfo(_,u.dtype);let i=s.texData.get(t.dataId);i.values=o}else t=(0,o.maxImpl)(b,j,_,s);return g&&s.disposeIntermediateTensorInfo(b),t}let u={kernelName:n.Max,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","./Max_impl":"ebgXh","./Transpose_impl":"iJsNm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ebgXh:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxImpl",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("../kernels/Reshape");function i(e,t,r,s){let i=(0,n.util).sizeFromShape(t),l=(0,n.util).sizeFromShape(e.shape),u=l/i,p=(0,o.reshape)({inputs:{x:e},attrs:{shape:[u,i]},backend:s}),c=(0,a.reduce)(p,e.dtype,"max",s),d=(0,o.reshape)({inputs:{x:c},attrs:{shape:r},backend:s});return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(c),d}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","../kernels/Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3B3An":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maximum",()=>c),s.export(r,"maximumConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu"),i=e("../kernel_utils/kernel_funcs_utils"),l=e("../kernel_utils/shared");let u=a.CHECK_NAN_SNIPPET+`
  return max(a, b);
`,p=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+o.CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,c=(0,i.binaryKernelFunc)({opSnippet:u,packedOpSnippet:p,cpuKernelImpl:l.maximumImplCPU}),d={kernelName:n.Maximum,backendName:"webgl",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],acQsV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool",()=>l),s.export(r,"maxPoolConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../pool_gpu"),o=e("../webgl_util"),i=e("./Identity");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t;(0,o.assertNotComplex)(l,"maxPool");let{filterSize:u,strides:p,pad:c,dimRoundingMode:d}=s;(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(p,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${p} and dilations '1'`);let h=(0,n.backend_util).computePool2DInfo(l.shape,u,p,1,c,d);if(1===h.filterWidth&&1===h.filterHeight&&(0,n.util).arraysEqual(h.inShape,h.outShape))return(0,i.identity)({inputs:{x:l},backend:r});let f=new a.Pool2DProgram(h,"max",!1);return r.runWebGLProgram(f,[l],l.dtype)}let u={kernelName:n.MaxPool,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../pool_gpu":"8MudT","../webgl_util":"6G64G","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aDYlt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3d",()=>o),s.export(r,"maxPool3DConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../pool_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{filterSize:i,strides:l,pad:u,dataFormat:p,dimRoundingMode:c}=s,d=(0,n.backend_util).computePool3DInfo(o.shape,i,l,[1,1,1],u,c,p),h=new a.Pool3DProgram(d,"max",!1);return r.runWebGLProgram(h,[o],o.dtype)}let i={kernelName:n.MaxPool3D,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../pool_gpu":"8MudT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4Z5zN":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3DGrad",()=>i),s.export(r,"maxPool3DGradConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../max_pool_backprop_gpu"),o=e("../pool_gpu");function i(e){let{inputs:t,backend:r,attrs:s}=e,{dy:i,input:l}=t,{filterSize:u,strides:p,pad:c,dimRoundingMode:d}=s,h=(0,n.backend_util).computePool3DInfo(l.shape,u,p,[1,1,1],c,d),f=new o.Pool3DProgram(h,"max",!0),m=r.runWebGLProgram(f,[l],l.dtype),g=new a.MaxPool3DBackpropProgram(h),x=r.runWebGLProgram(g,[i,m],l.dtype);return r.disposeIntermediateTensorInfo(m),x}let l={kernelName:n.MaxPool3DGrad,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../max_pool_backprop_gpu":"2QqAV","../pool_gpu":"8MudT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2QqAV":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MaxPool2DBackpropProgram",()=>n),s.export(r,"MaxPool3DBackpropProgram",()=>a);class n{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,r=e.strideWidth,s=e.dilationHeight,n=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=n-1-e.padInfo.top,i=a-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${o}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${n};
          wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${n*a-1} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class a{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,r=e.strideHeight,s=e.strideWidth,n=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,p=i-1-e.padInfo.front,c=l-1-e.padInfo.top,d=u-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${c}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${i};
           wD += ${n}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${r}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${o}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${i*l*u-1} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l6x5z:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolGrad",()=>l),s.export(r,"maxPoolGradConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../max_pool_backprop_gpu"),o=e("../pool_gpu"),i=e("../webgl_util");function l(e){let{inputs:t,backend:r,attrs:s}=e,{dy:l,input:u,output:p}=t;(0,i.assertNotComplex)([u,p],"maxPoolGrad");let{filterSize:c,strides:d,pad:h,dimRoundingMode:f}=s,m=(0,n.backend_util).computePool2DInfo(u.shape,c,d,1/* dilations */,h,f),g=new o.Pool2DProgram(m,"max",!0),x=r.runWebGLProgram(g,[u],u.dtype),b=new a.MaxPool2DBackpropProgram(m),y=r.runWebGLProgram(b,[l,x],u.dtype);return r.disposeIntermediateTensorInfo(x),y}let u={kernelName:n.MaxPoolGrad,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../max_pool_backprop_gpu":"2QqAV","../pool_gpu":"8MudT","../webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gbq8g:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolWithArgmaxConfig",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("./MaxPoolWithArgmax_impl");let o={kernelName:n.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:s}=e,{filterSize:o,strides:i,pad:l,includeBatchInIndex:u}=t;(0,n.util).assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);let p=[1,1];(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(i,p),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);let c=(0,n.backend_util).computePool2DInfo(s.shape,o,i,p,l),[d,h]=(0,a.maxPoolWithArgmaxImpl)(s,u,c,r);return[d,h]}}},{"@tensorflow/tfjs-core":"U1ela","./MaxPoolWithArgmax_impl":"kdG8n","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kdG8n:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolWithArgmaxImpl",()=>a);var n=e("../pool_gpu");function a(e,t,r,s){let a=new n.Pool2DProgram(r,"max",!1),o=s.runWebGLProgram(a,[e],"float32");a=new n.Pool2DProgram(r,"max",!0,!0,t);let i=s.runWebGLProgram(a,[e],"float32");return[o,i]}},{"../pool_gpu":"8MudT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6SpBI":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"meanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Mean_impl"),o=e("./Transpose_impl");let i={kernelName:n.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:s}=e,{keepDims:i,axis:l}=t,u=s.shape.length,p=(0,n.util).parseAxisParam(l,s.shape),c=p,d=(0,n.backend_util).getAxesPermutation(c,u),h=null!=d,f=r.shouldExecuteOnCPU([s]),m=[],g=s;if(h){if(f){let e=r.texData.get(g.dataId),t=e.values,n=Array(u);for(let e=0;e<n.length;e++)n[e]=s.shape[d[e]];let a=(0,o.transposeImplCPU)(t,s.shape,s.dtype,d,n);g=r.makeTensorInfo(n,s.dtype);let i=r.texData.get(g.dataId);i.values=a}else g=(0,o.transposeImpl)(s,d,r);m.push(g),c=(0,n.backend_util).getInnerMostAxes(c.length,u)}(0,n.backend_util).assertAxesAreInnerMostDims("sum",c,u);let[x,b]=(0,n.backend_util).computeOutAndReduceShapes(g.shape,c),y=x;i&&(y=(0,n.backend_util).expandShapeToKeepDim(x,p));let j=(0,a.meanImpl)(g,b,y,r);for(let e of m)r.disposeIntermediateTensorInfo(e);return j}}},{"@tensorflow/tfjs-core":"U1ela","./Mean_impl":"5RFUG","./Transpose_impl":"iJsNm","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5RFUG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"meanImpl",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("../kernels/Reshape");function i(e,t,r,s){let i=(0,n.util).sizeFromShape(t),l=(0,n.util).sizeFromShape(e.shape),u=l/i,p=(0,o.reshape)({inputs:{x:e},attrs:{shape:[u,i]},backend:s}),c=(0,a.reduce)(p,"float32","mean",s),d=(0,o.reshape)({inputs:{x:c},attrs:{shape:r},backend:s});return s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(c),d}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","../kernels/Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1cqvT":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"min",()=>l),s.export(r,"minConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("./Reshape"),i=e("./Transpose");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r,{axis:p,keepDims:c}=l,d=u.shape.length,h=(0,n.util).parseAxisParam(p,u.shape),f=h,m=(0,n.backend_util).getAxesPermutation(f,d),g=u;null!=m&&(g=(0,i.transpose)({inputs:{x:u},backend:s,attrs:{perm:m}}),f=(0,n.backend_util).getInnerMostAxes(f.length,u.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("min",f,d);let[x,b]=(0,n.backend_util).computeOutAndReduceShapes(g.shape,f),y=(0,n.util).sizeFromShape(b),j=(0,o.reshape)({inputs:{x:g},backend:s,attrs:{shape:[-1,y]}}),_=(0,a.reduce)(j,j.dtype,"min",s);if(c){let e=(0,n.backend_util).expandShapeToKeepDim(x,h);t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:e}})}else t=(0,o.reshape)({inputs:{x:_},backend:s,attrs:{shape:x}});return s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(_),null!=m&&s.disposeIntermediateTensorInfo(g),t}let u={kernelName:n.Min,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","./Reshape":"lrhL2","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aIknV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"minimum",()=>c),s.export(r,"minimumConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_gpu"),o=e("../binaryop_packed_gpu"),i=e("../kernel_utils/kernel_funcs_utils"),l=e("../kernel_utils/shared");let u=a.CHECK_NAN_SNIPPET+`
  return min(a, b);
`,p=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+o.CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,c=(0,i.binaryKernelFunc)({opSnippet:u,packedOpSnippet:p,cpuKernelImpl:l.minimumImplCPU}),d={kernelName:n.Minimum,backendName:"webgl",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_gpu":"lNFkU","../binaryop_packed_gpu":"i1qp0","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9N89o":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mirrorPadKernelFunc",()=>i),s.export(r,"mirrorPadConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../mirror_pad_gpu"),o=e("../mirror_pad_packed_gpu");let i=({inputs:e,backend:t,attrs:r})=>{let{x:s}=e,{paddings:i,mode:l}=r,u=(0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new o.MirrorPadPackedProgram(s.shape,i,l):new a.MirrorPadProgram(s.shape,i,l),p=t.runWebGLProgram(u,[s],s.dtype);return p},l={kernelName:n.MirrorPad,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../mirror_pad_gpu":"lh9PN","../mirror_pad_packed_gpu":"kZix6","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lh9PN:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MirrorPadProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r){this.variableNames=["x"],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let s=e.length,a=(0,n.getCoordsDataType)(s),o=t.map(e=>e[0]).join(","),i=t.map((t,r)=>t[0]+e[r]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),u="reflect"===r?0:1;if(1===s){this.userCode=`
        int start = ${o};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${s}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kZix6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Example shader code for
 * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`
 * ```
 *    const int start = int(2);
 *    const int end = int(5);
 *
 *    void main() {
 *       int outputLoc = getOutputCoords();
 *       vec4 result = vec4(0.);
 *
 *       int rc = outputLoc;
 *
 *       int source = rc;
 *       if (source < start) {
 *         source = start * 2 - source - 0;
 *       } else if (source >= end) {
 *         source = (end - 1) * 2 - source + 0;
 *       }
 *       source -= start;
 *
 *       result[0] = getChannel(getX(source), source);
 *       rc += 1;
 *       if(rc < 6) {
 *          int source = rc;
 *          if (source < start) {
 *            source = start * 2 - source - 0;
 *          } else if (source >= end) {
 *            source = (end - 1) * 2 - source + 0;
 *          }
 *          source -= start;
 *
 *         result[1] = getChannel(getX(source), source);
 *       }
 *
 *       setOutput(result);
 *     }
 * ```
 */s.export(r,"MirrorPadPackedProgram",()=>o);var n=e("./packing_util"),a=e("./shader_compiler");class o{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let s=e.length,o=(0,a.getCoordsDataType)(s),i=t.map(e=>e[0]).join(","),l=t.map((t,r)=>t[0]+e[r]).join(","),u=(0,n.getChannels)("rc",s),p=(0,n.getChannels)("source",s),c=`${u[s-1]} < ${this.outputShape[s-1]}`,d=1===s?"source":`vec2(${p.slice(-2).join()})`,h="reflect"===r?0:1,f="";if(1===s){let e=`
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${h};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${h};
        }
        source -= start;
      `;f=`
        ${o} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${p.join()}), ${d});
        ${u[s-1]} += 1;
        if(${c}) {
          ${e}
          result[1] = getChannel(getX(${p.join()}), ${d});
        }
      `}else{let e=`
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${h}) +
                gte * ((end - 1) * 2 - source + ${h});
        source -= start;
      `;f=`
        ${o} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${p.join()}), ${d});
        ${u[s-1]} += 1;
        if(${c}) {
          ${e}
          result[1] = getChannel(getX(${p.join()}), ${d});
        }
        rc = outputLoc;
        ${u[s-2]} += 1;
        if(${u[s-2]} < ${this.outputShape[s-2]}) {
          ${e}
          result[2] = getChannel(getX(${p.join()}), ${d});
          ${u[s-1]} += 1;
          if(${c}) {
            ${e}
            result[3] = getChannel(getX(${p.join()}), ${d});
          }
        }
      `}this.userCode=`
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${l});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}}},{"./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],etCcX:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mod",()=>u),s.export(r,"modConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_packed_gpu"),o=e("../kernel_utils/kernel_funcs_utils");let i=`if (b == 0.0) return NAN;
  return mod(a, b);`,l=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+a.CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,u=(0,o.binaryKernelFunc)({opSnippet:i,packedOpSnippet:l}),p={kernelName:n.Mod,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_packed_gpu":"i1qp0","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1E9ez":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multinomial",()=>i),s.export(r,"multinomialConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../multinomial_gpu"),o=e("./Softmax");function i(e){let{inputs:t,backend:r,attrs:s}=e,{logits:n}=t,{numSamples:i,seed:l,normalized:u}=s,p=u?n:(0,o.softmax)({inputs:{logits:n},backend:r,attrs:{dim:n.shape.length-1}}),c=p.shape[0],d=p.shape[1],h=new a.MultinomialProgram(c,d,i),f=r.runWebGLProgram(h,[p],"int32",[[l]]);return u||r.disposeIntermediateTensorInfo(p),f}let l={kernelName:n.Multinomial,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../multinomial_gpu":"82fs0","./Softmax":"3bBz5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"82fs0":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MultinomialProgram",()=>n);class n{constructor(e,t,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,r],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3bBz5":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softmax",()=>c),s.export(r,"softmaxConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("./Exp"),o=e("./Max"),i=e("./RealDiv"),l=e("./Reshape"),u=e("./Sub"),p=e("./Sum");function c(e){let{inputs:t,backend:r,attrs:s}=e,{logits:c}=t,{dim:d}=s,h=(0,n.util).parseAxisParam([d],c.shape),f=(0,o.max)({inputs:{x:c},backend:r,attrs:{reductionIndices:h,keepDims:!1}}),m=(0,n.backend_util).expandShapeToKeepDim(f.shape,h),g=(0,l.reshape)({inputs:{x:f},backend:r,attrs:{shape:m}}),x=(0,u.sub)({inputs:{a:c,b:g},backend:r}),b=(0,a.exp)({inputs:{x:x},backend:r}),y=(0,p.sum)({inputs:{x:b},backend:r,attrs:{axis:h,keepDims:!1}}),j=(0,l.reshape)({inputs:{x:y},backend:r,attrs:{shape:m}}),_=(0,i.realDiv)({inputs:{a:b,b:j},backend:r});return r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(j),_}let d={kernelName:n.Softmax,backendName:"webgl",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","./Exp":"jadst","./Max":"ezUpT","./RealDiv":"gGH4T","./Reshape":"lrhL2","./Sub":"jyI5a","./Sum":"fgK31","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gGH4T:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"realDiv",()=>l),s.export(r,"realDivConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");// Without the equality check div produces 0.9999 for a = b, which when
// floored can cause errors.
let o=`
if (a == b) {
  return 1.0;
};
return a / b;`,i=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,l=(0,a.binaryKernelFunc)({opSnippet:o,packedOpSnippet:i,checkOutOfBounds:!0}),u={kernelName:n.RealDiv,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jyI5a:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sub",()=>l),s.export(r,"subConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return a - b;",l=(0,a.binaryKernelFunc)({opSnippet:i,packedOpSnippet:i,supportsComplex:!0,cpuKernelImpl:o.subImplCPU}),u={kernelName:n.Sub,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lAoAm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// This doesn't use unaryKernelFunc because negImplCPU is not of type
// SimpleUnaryKernelImplCPU.
s.export(r,"neg",()=>p),s.export(r,"negConfig",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../unaryop_gpu"),i=e("../unaryop_packed_gpu");let l=o.CHECK_NAN_SNIPPET+`
  return -x;
`,u=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function p(e){let t;let{inputs:r,backend:s}=e,{x:p}=r;if(s.shouldExecuteOnCPU([p])){let e=s.texData.get(p.dataId),[t,r]=(0,a.negImplCPU)(e.values,p.shape,p.dtype);return s.makeTensorInfo(r,p.dtype,t)}return t=(0,n.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new i.UnaryOpPackedProgram(p.shape,u):new o.UnaryOpProgram(p.shape,l),s.runWebGLProgram(t,[p],p.dtype)}let c={kernelName:n.Neg,backendName:"webgl",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../unaryop_gpu":"lMu15","../unaryop_packed_gpu":"agbDL","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4dcTP":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV3",()=>o),s.export(r,"nonMaxSuppressionV3Config",()=>i);var n=e("@tensorflow/tfjs-core");let a=n.kernel_impls.nonMaxSuppressionV3Impl;function o(e){(0,n.backend_util).warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:s}=e,{boxes:o,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p}=s,c=r.readSync(o.dataId),d=r.readSync(i.dataId),{selectedIndices:h}=a(c,d,l,u,p);return r.makeTensorInfo([h.length],"int32",new Int32Array(h))}let i={kernelName:n.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gBVOt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV4",()=>o),s.export(r,"nonMaxSuppressionV4Config",()=>i);var n=e("@tensorflow/tfjs-core");let a=n.kernel_impls.nonMaxSuppressionV4Impl;function o(e){(0,n.backend_util).warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:s}=e,{boxes:o,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p,padToMaxOutputSize:c}=s,d=r.readSync(o.dataId),h=r.readSync(i.dataId),{selectedIndices:f,validOutputs:m}=a(d,h,l,u,p,c);return[r.makeTensorInfo([f.length],"int32",new Int32Array(f)),r.makeTensorInfo([],"int32",new Int32Array([m]))]}let i={kernelName:n.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j5ZDn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV5",()=>o),s.export(r,"nonMaxSuppressionV5Config",()=>i);var n=e("@tensorflow/tfjs-core");let a=n.kernel_impls.nonMaxSuppressionV5Impl;function o(e){(0,n.backend_util).warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:s}=e,{boxes:o,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p,softNmsSigma:c}=s,d=r.readSync(o.dataId),h=r.readSync(i.dataId),{selectedIndices:f,selectedScores:m}=a(d,h,l,u,p,c);return[r.makeTensorInfo([f.length],"int32",new Int32Array(f)),r.makeTensorInfo([m.length],"float32",new Float32Array(m))]}let i={kernelName:n.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7HpjZ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"oneHot",()=>i),s.export(r,"oneHotConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../onehot_gpu"),o=e("./Reshape");let i=e=>{let{inputs:t,backend:r,attrs:s}=e,{indices:i}=t,{dtype:l,depth:u,onValue:p,offValue:c}=s,d=(0,n.util).sizeFromShape(i.shape),h=new a.OneHotProgram(d,u,p,c),f=(0,o.reshape)({inputs:{x:i},backend:r,attrs:{shape:[d]}}),m=r.runWebGLProgram(h,[f],l);r.disposeIntermediateTensorInfo(f);let g=[...i.shape,u],x=(0,o.reshape)({inputs:{x:m},backend:r,attrs:{shape:g}});return r.disposeIntermediateTensorInfo(m),x},l={kernelName:n.OneHot,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../onehot_gpu":"3hM5u","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3hM5u":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"OneHotProgram",()=>n);class n{constructor(e,t,r,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${s}), float(${r}),
                      float(index == coords.y)));
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iA5jN:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"onesLike",()=>p),s.export(r,"onesLikeConfig",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("./Complex"),o=e("./Fill"),i=e("./Imag"),l=e("./Real"),u=e("./ZerosLike");function p(e){let{inputs:t,backend:r}=e,{x:s}=t;if("string"===s.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==s.dtype)//   https://github.com/tensorflow/tfjs/issues/1293
return(0,o.fill)({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r});{let e=(0,l.real)({inputs:{input:s},backend:r}),t=p({inputs:{x:e},backend:r}),n=(0,i.imag)({inputs:{input:s},backend:r}),o=(0,u.zerosLike)({inputs:{x:n},backend:r}),c=(0,a.complex)({inputs:{real:t,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(o),c}}let c={kernelName:n.OnesLike,backendName:"webgl",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","./Complex":"l0nV1","./Fill":"fPbul","./Imag":"cVwra","./Real":"cSand","./ZerosLike":"gQxB6","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gQxB6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"zerosLike",()=>u),s.export(r,"zerosLikeConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./Complex"),o=e("./Fill"),i=e("./Imag"),l=e("./Real");function u(e){let{inputs:t,backend:r}=e,{x:s}=t;if("complex64"!==s.dtype)return(0,o.fill)({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:r});{let e=(0,l.real)({inputs:{input:s},backend:r}),t=u({inputs:{x:e},backend:r}),n=(0,i.imag)({inputs:{input:s},backend:r}),o=u({inputs:{x:n},backend:r}),p=(0,a.complex)({inputs:{real:t,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(o),p}}let p={kernelName:n.ZerosLike,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","./Complex":"l0nV1","./Fill":"fPbul","./Imag":"cVwra","./Real":"cSand","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jJbGG:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pack",()=>i),s.export(r,"packConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./Concat"),o=e("./ExpandDims");function i(e){let{inputs:t,backend:r,attrs:s}=e,{axis:i}=s;if(1===t.length)return(0,o.expandDims)({inputs:{input:t[0]},backend:r,attrs:{dim:i}});let l=t[0].shape,u=t[0].dtype;t.forEach(e=>{(0,n.util).assertShapesMatch(l,e.shape,"All tensors passed to stack must have matching shapes"),(0,n.util).assert(u===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let p=[],c=t.map(e=>{let t=(0,o.expandDims)({inputs:{input:e},backend:r,attrs:{dim:i}});return p.push(t),t}),d=(0,a.concat)({inputs:c,backend:r,attrs:{axis:i}});return p.forEach(e=>r.disposeIntermediateTensorInfo(e)),d}let l={kernelName:n.Pack,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","./Concat":"5fuGG","./ExpandDims":"3AoBI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bDEE0:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"padV2",()=>l),s.export(r,"padV2Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../pad_gpu"),o=e("../pad_packed_gpu"),i=e("./Fill");let l=e=>{let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{paddings:u,constantValue:p}=s;if(0===(0,n.util).sizeFromShape(l.shape)){// Short-circuit the computation, since x doesn't have value, only
// the shape is used to compute output shape to pad.
let e=u.map((e,t)=>e[0]+l.shape[t]+e[1]);return(0,i.fill)({backend:r,attrs:{shape:e,value:p,dtype:l.dtype}})}let c=(0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new o.PadPackedProgram(l.shape,u,p):new a.PadProgram(l.shape,u,p),d=[[p]];return r.runWebGLProgram(c,[l],l.dtype,d)},u={kernelName:n.PadV2,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../pad_gpu":"aC5We","../pad_packed_gpu":"fO1Wa","./Fill":"fPbul","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aC5We:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PadProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let s=e.length,a=(0,n.getCoordsDataType)(s),o=t.map(e=>e[0]).join(","),i=t.map((t,r)=>t[0]+e[r]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);if(1===s){this.userCode=`
        int start = ${o};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${o});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fO1Wa:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"PadPackedProgram",()=>o);var n=e("./packing_util"),a=e("./shader_compiler");class o{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let s=e.length,o=(0,a.getCoordsDataType)(s),i=t.map(e=>e[0]).join(","),l=t.map((t,r)=>t[0]+e[r]).join(","),u=(0,n.getChannels)("rc",s),p=(0,n.getChannels)("source",s),c=`${u[s-1]} < ${this.outputShape[s-1]}`,d=1===s?"source":`vec2(${p.slice(-2).join()})`,h=[`${o} rc = outputLoc;`,`${u[s-1]} += 1;
       if(${c}) {
      `,1===s?"":`}
       rc = outputLoc;
       ${u[s-2]} += 1;
       if(${u[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${u[s-1]} += 1;
         if(${c}) {`],f=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",m="";for(let e=0,t=1===s?2:4;e<t;e++)m+=`
        ${h[e]}
        if (${f}) {
          result[${e}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${e}] = getChannel(getX(${p.join()}), ${d});
        }
      `;m+=1===s?"} ":"}}",this.userCode=`
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${l});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${m}
        setOutput(result);
      }
    `}}},{"./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6duVv":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pow",()=>u),s.export(r,"powConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../binaryop_packed_gpu"),o=e("../kernel_utils/kernel_funcs_utils");let i=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,l=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+a.CHECK_NAN_SNIPPET_PACKED+`
  return result;
`,u=(0,o.binaryKernelFunc)({opSnippet:i,packedOpSnippet:l}),p={kernelName:n.Pow,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../binaryop_packed_gpu":"i1qp0","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],beAUT:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prod",()=>u),s.export(r,"prodConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/reduce"),o=e("../kernel_utils/shared"),i=e("./Reshape"),l=e("./Transpose");function u(e){let t;let{inputs:r,backend:s,attrs:u}=e,{x:p}=r,{axis:c,keepDims:d}=u,h=p.shape.length,f=[],m=(0,n.util).parseAxisParam(c,p.shape),g=m,x=(0,n.backend_util).getAxesPermutation(g,h),b=p;if(null!=x&&(b=(0,l.transpose)({inputs:{x:p},backend:s,attrs:{perm:x}}),g=(0,n.backend_util).getInnerMostAxes(g.length,h),f.push(b)),(0,n.backend_util).assertAxesAreInnerMostDims("prod",g,h),s.shouldExecuteOnCPU([b])){let e=s.texData.get(b.dataId).values,{outVals:r,outShape:n,outDtype:a}=(0,o.prodImplCPU)(b.shape,b.dtype,e,g);t=s.makeTensorInfo(n,a,r)}else{let[e,r]=(0,n.backend_util).computeOutAndReduceShapes(b.shape,g),o=(0,n.util).sizeFromShape(r),l=(0,i.reshape)({inputs:{x:b},backend:s,attrs:{shape:[-1,o]}}),u=(0,n.sumOutType)(p.dtype),c=(0,a.reduce)(l,u,"prod",s);t=(0,i.reshape)({inputs:{x:c},backend:s,attrs:{shape:e}}),f.push(l),f.push(c)}if(d){f.push(t);let e=(0,n.backend_util).expandShapeToKeepDim(t.shape,m);t=(0,i.reshape)({inputs:{x:t},backend:s,attrs:{shape:e}})}return f.forEach(e=>s.disposeIntermediateTensorInfo(e)),t}let p={kernelName:n.Prod,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/reduce":"idhFR","../kernel_utils/shared":"glaaY","./Reshape":"lrhL2","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9Jh9i":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedGather",()=>o),s.export(r,"raggedGatherConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{paramsNestedSplits:n,paramsDenseValues:o,indices:i}=t,{outputRaggedRank:l}=s,u=n.map(e=>r.readSync(e.dataId)),p=n.map(e=>e.shape),c=r.readSync(o.dataId),d=r.readSync(i.dataId),[h,f,m]=(0,a.raggedGatherImplCPU)(u,p,c,o.shape,o.dtype,d,i.shape,l),g=h.map(e=>r.makeTensorInfo([e.length],"int32",e)),x=r.makeTensorInfo(m,o.dtype,f);return g.concat([x])}let i={kernelName:n.RaggedGather,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c9qJR:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedTensorToTensor",()=>o),s.export(r,"raggedTensorToTensorConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{shape:n,values:o,defaultValue:i,rowPartitionTensors:l}=t,{rowPartitionTypes:u}=s,p=r.readSync(n.dataId),c=r.readSync(o.dataId),d=r.readSync(i.dataId),h=l.map(e=>r.readSync(e.dataId)),f=l.map(e=>e.shape),[m,g]=(0,a.raggedTensorToTensorImplCPU)(p,n.shape,c,o.shape,o.dtype,d,i.shape,h,f,u);return r.makeTensorInfo(m,o.dtype,g)}let i={kernelName:n.RaggedTensorToTensor,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jxAcj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"range",()=>o),s.export(r,"rangeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");let o=e=>{let{backend:t,attrs:r}=e,{start:s,stop:n,step:o,dtype:i}=r,l=(0,a.rangeImplCPU)(s,n,o,i);return t.makeTensorInfo([l.length],i,l)},i={kernelName:n.Range,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hjbJY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reciprocal",()=>o),s.export(r,"reciprocalConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return 1.0 / x;"}),i={kernelName:n.Reciprocal,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8SpD1":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu",()=>u),s.export(r,"reluConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  return (x < 0.0) ? 0.0 : x;
`,l=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,u=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:l}),p={kernelName:n.Relu,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],Zi6kJ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu6",()=>u),s.export(r,"relu6Config",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../unaryop_gpu");let i=o.CHECK_NAN_SNIPPET+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,l=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,u=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:l}),p={kernelName:n.Relu6,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jEBvM:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinear",()=>i),s.export(r,"resizeBilinearConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../resize_bilinear_gpu"),o=e("../resize_bilinear_packed_gpu");function i(e){let{inputs:t,backend:r,attrs:s}=e,{images:i}=t,{alignCorners:l,halfPixelCenters:u,size:p}=s,[c,d]=p,h=(0,n.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new o.ResizeBilinearPackedProgram(i.shape,c,d,l,u):new a.ResizeBilinearProgram(i.shape,c,d,l,u);return r.runWebGLProgram(h,[i],"float32")}let l={kernelName:n.ResizeBilinear,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../resize_bilinear_gpu":"6lmM4","../resize_bilinear_packed_gpu":"fPBz2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6lmM4":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeBilinearProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["A"],this.outputShape=[];let[a,o,i,l]=e;this.outputShape=[a,t,r,l];let u=[s&&t>1?o-1:o,s&&r>1?i-1:i],p=[s&&t>1?t-1:t,s&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/p[0]},
          ${u[1]/p[1]});
      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${n?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fPBz2:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeBilinearPackedProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,o,i,l]=e;this.outputShape=[a,t,r,l];let u=[s&&t>1?o-1:o,s&&r>1?i-1:i],p=[s&&t>1?t-1:t,s&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/p[0]},
          ${u[1]/p[1]},
          ${u[1]/p[1]});
      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,
                                     ${i}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${n?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5wAhL":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinearGrad",()=>o),s.export(r,"resizeBilinearGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../resize_bilinear_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:n,dy:o}=t,{alignCorners:i}=s,l=new a.ResizeBilinearBackpropProgram(o.shape,n.shape,i);return r.runWebGLProgram(l,[o],o.dtype)}let i={kernelName:n.ResizeBilinearGrad,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../resize_bilinear_backprop_gpu":"49zgS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"49zgS":[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeBilinearBackpropProgram",()=>n);class n{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,s,n]=t,[,a,o]=e,i=[r&&a>1?s-1:s,r&&o>1?n-1:n],l=[r&&a>1?a-1:a,r&&o>1?o-1:o],u=i[0]/l[0],p=i[1]/l[1],c=1/u,d=1/p,h=2*Math.ceil(c)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${c});
        const float invWidthScale = float(${d});

        const int winHeight = int(${h});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${o}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${n-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eoqZV:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighbor",()=>i),s.export(r,"resizeNearestNeighborConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../resize_nearest_neighbor_gpu"),o=e("../resize_nearest_neighbor_packed_gpu");function i(e){let{inputs:t,backend:r,attrs:s}=e,{images:i}=t,{alignCorners:l,halfPixelCenters:u,size:p}=s,[c,d]=p,h=(0,n.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new o.ResizeNearestNeighborPackedProgram(i.shape,c,d,l,u):new a.ResizeNearestNeighborProgram(i.shape,c,d,l,u);return r.runWebGLProgram(h,[i],i.dtype)}let l={kernelName:n.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../resize_nearest_neighbor_gpu":"kRdRk","../resize_nearest_neighbor_packed_gpu":"lnL9C","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kRdRk:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeNearestNeighborProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["A"],this.outputShape=[];let[a,o,i,l]=e;this.outputShape=[a,t,r,l];let u=[s&&t>1?o-1:o,s&&r>1?i-1:i],p=[s&&t>1?t-1:t,s&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/p[0]},
          ${u[1]/p[1]});
      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${n?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lnL9C:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeNearestNeighborPackedProgram",()=>n);class n{constructor(e,t,r,s,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,o,i,l]=e;this.outputShape=[a,t,r,l];let u=[s&&t>1?o-1:o,s&&r>1?i-1:i],p=[s&&t>1?t-1:t,s&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/p[0]},
          ${u[1]/p[1]},
          ${u[1]/p[1]});
      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,
                                     ${i}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${n?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3E7I3":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighborGrad",()=>o),s.export(r,"resizeNearestNeighborGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../resize_nearest_neighbor_backprop_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:n,dy:o}=t,{alignCorners:i}=s,l=new a.ResizeNearestNeigborBackpropProgram(o.shape,n.shape,i);return r.runWebGLProgram(l,[o],o.dtype)}let i={kernelName:n.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../resize_nearest_neighbor_backprop_gpu":"b1VsU","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],b1VsU:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ResizeNearestNeigborBackpropProgram",()=>n);class n{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,s,n]=t,[,a,o]=e,i=[r&&a>1?s-1:s,r&&o>1?n-1:n],l=[r&&a>1?a-1:a,r&&o>1?o-1:o],u=i[0]/l[0],p=i[1]/l[1],c=1/u,d=1/p,h=2*Math.ceil(c)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${c});
        const float invWidthScale = float(${d});

        const int winHeight = int(${h});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${o}) {
              continue;
            }

            float sourceFracRow =
              float(${i[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${i[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${s}) - 1),
                ${r} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${n}) - 1),
                ${r} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j5TOq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse",()=>l),s.export(r,"reverseConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../reverse_gpu"),o=e("../reverse_packed_gpu"),i=e("./Identity");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{dims:u}=s,p=l.shape.length,c=(0,n.util).parseAxisParam(u,l.shape);if(0===p)return(0,i.identity)({inputs:{x:l},backend:r});let d=(0,n.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new o.ReversePackedProgram(l.shape,c):new a.ReverseProgram(l.shape,c);return r.runWebGLProgram(d,[l],l.dtype)}let u={kernelName:n.Reverse,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../reverse_gpu":"db5Jm","../reverse_packed_gpu":"d30CR","./Identity":"dsrAl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],db5Jm:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ReverseProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t){this.variableNames=["x"];let r=e.length;if(r>4)throw Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=e,1===r){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let s=r=>-1!==t.indexOf(r)&&1!==e[r]?`${e[r]} - coords[${r}] - 1`:`coords[${r}]`,a=e.map((e,t)=>s(t)).join(","),o=(0,n.getCoordsDataType)(r);this.userCode=`
      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d30CR:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ReversePackedProgram",()=>o);var n=e("./packing_util"),a=e("./shader_compiler");class o{constructor(e,t){var r,s,o;this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let i=e.length;if(i>4)throw Error(`WebGL backend: Reverse of rank-${i} tensor is not yet supported`);this.outputShape=e;let l=(0,n.getChannels)("rc",i),u=`${l[i-1]} + 1 < ${this.outputShape[i-1]}`,p=`${l[i-2]} + 1 < ${this.outputShape[i-2]}`,c=(0,a.getCoordsDataType)(i);function d(r){let s=e.map((s,n)=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`),n=s.join(","),a=s.slice(-2).join(",");return`getChannel(getX(${n}), vec2(${a}))`}1===i?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${u}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${c} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${d(l.slice())};
          if(${u}){
            result.g = ${(r=l.slice())[i-1]="("+r[i-1]+" + 1)",d(r)};
          }
          if(${p}) {
            result.b = ${(s=l.slice())[i-2]="("+s[i-2]+" + 1)",d(s)};
            if(${u}) {
              result.a = ${(o=l.slice())[i-1]="("+o[i-1]+" + 1)",o[i-2]="("+o[i-2]+" + 1)",d(o)};
            }
          }
          setOutput(result);
        }
    `}}},{"./packing_util":"fZzcp","./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hu4VY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rotateWithOffsetConfig",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("../rotate_gpu");let o={kernelName:n.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:s}=e,{radians:o,fillValue:i,center:l}=t,u=new a.RotateProgram(s.shape,i),[p,c]=(0,n.backend_util).getImageCenter(l,s.shape[1],s.shape[2]),d=[[p,c,Math.sin(o),Math.cos(o)]],h=r.runWebGLProgram(u,[s],s.dtype,d);return h}}},{"@tensorflow/tfjs-core":"U1ela","../rotate_gpu":"lDWxr","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lDWxr:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"RotateProgram",()=>n);class n{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let r=e[1],s=e[2];this.outputShape=e;let n="";n="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${n}
          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${r}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jaVZn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"round",()=>i),s.export(r,"roundConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Round,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1D428":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rsqrt",()=>i),s.export(r,"rsqrtConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=(0,a.unaryKernelFunc)({opSnippet:"return inversesqrt(x);",cpuKernelImpl:o.rsqrtImplCPU}),l={kernelName:n.Rsqrt,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fBvjC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"scatterNd",()=>i),s.export(r,"scatterNdConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../scatter_gpu"),o=e("./Reshape");function i(e){let{inputs:t,backend:r,attrs:s}=e,{indices:i,updates:l}=t,{shape:u}=s,{sliceRank:p,numUpdates:c,sliceSize:d,strides:h,outputSize:f}=(0,n.backend_util).calculateShapes(l,i,u),m=[f/d,d];if(0===f)return r.makeTensorInfo(u,i.dtype);let g=(0,o.reshape)({inputs:{x:i},backend:r,attrs:{shape:[c,p]}}),x=(0,o.reshape)({inputs:{x:l},backend:r,attrs:{shape:[c,d]}}),b=r.makeTensorInfo([],"float32",new Float32Array([0])),y=new a.ScatterProgram(c,p,g.shape.length,x.shape.length,h,m),j=r.runWebGLProgram(y,[x,g,b],x.dtype),_=(0,o.reshape)({inputs:{x:j},backend:r,attrs:{shape:u}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(b),_}let l={kernelName:n.ScatterNd,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../scatter_gpu":"g5kFk","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g5kFk:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ScatterProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r,s,a,o,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;let l=(0,n.getCoordsDataType)(a.length),u=(0,n.getCoordsDataType)(o.length),p="";1===r?p="i":2===r&&(p="i, j");let c=`getIndices(${p})`,d="";1===s?d="i":2===s&&(d="i, coords[1]");let h=`getUpdates(${d})`;this.userCode=`
        ${l} strides = ${l}(${a});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${c});
              flattenedIndex += index * ${t>1?"strides[j]":"strides"};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${h};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jir9I:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"searchSorted",()=>o),s.export(r,"searchSortedConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../search_sorted_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{sortedSequence:n,values:o}=t,{side:i}=s,l=new a.SearchSortedProgram(n.shape[0],n.shape[1],o.shape[1],i),u=[[n.shape[1]]];return r.runWebGLProgram(l,[n,o],"int32",u)}let i={kernelName:n.SearchSorted,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../search_sorted_gpu":"kqwTk","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kqwTk:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SearchSortedProgram",()=>a);var n=e("@tensorflow/tfjs-core");class a{constructor(e,t,r,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,r];// WebGL1 doesn't accept non constant loop conditions, so upper bound loop
// iterations.
let a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,o=2===(0,n.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${o}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${"left"===s?"<":"<="} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7fkt8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"select",()=>o),s.export(r,"selectConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../select_gpu");function o(e){let{inputs:t,backend:r}=e,{condition:s,t:o,e:i}=t,l=new a.SelectProgram(s.shape.length,o.shape,o.shape.length);return r.runWebGLProgram(l,[s,o,i],(0,n.upcastType)(o.dtype,i.dtype))}let i={kernelName:n.Select,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../select_gpu":"1NPKx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1NPKx":[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SelectProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,r>4)throw Error(`Where for rank ${r} is not yet supported`);if(1===r)a="resRC",s="resRC";else{let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[],o=[];for(let s=0;s<t.length;s++)o.push(`${r[s]}`),s<e&&n.push(`${r[s]}`);s=n.join(),a=o.join()}let o=(0,n.getCoordsDataType)(r);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        float cVal = getC(${s});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9j0OL":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"selu",()=>i),s.export(r,"seluConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${n.backend_util.SELU_SCALEALPHA};
  float scale = ${n.backend_util.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Selu,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9FQr4":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sigmoid",()=>u),s.export(r,"sigmoidConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i=a.CHECK_NAN_SNIPPET_UNARY+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,l=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,u=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:l,cpuKernelImpl:o.sigmoidImplCPU}),p={kernelName:n.Sigmoid,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6b4Up":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sign",()=>i),s.export(r,"signConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");// Sign does not propagate NANs.
let o=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Sign,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gXNH5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sin",()=>i),s.export(r,"sinConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=a.CHECK_NAN_SNIPPET_UNARY+`
  return sin(x);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Sin,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],b4oiZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sinh",()=>i),s.export(r,"sinhConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Sinh,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hlUU8:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softplus",()=>i),s.export(r,"softplusConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Softplus,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3G4rC":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"spaceToBatchND",()=>l),s.export(r,"spaceToBatchNDConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("./PadV2"),o=e("./Reshape"),i=e("./Transpose");let l=e=>{let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{blockShape:u,paddings:p}=s;(0,n.util).assert(l.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let c=u.reduce((e,t)=>e*t),d=[[0,0]];d.push(...p);for(let e=1+u.length;e<l.shape.length;++e)d.push([0,0]);let h=[],f=(0,a.padV2)({inputs:{x:l},backend:r,attrs:{paddings:d,constantValue:0}}),m=(0,n.backend_util).getReshaped(f.shape,u,c,!1),g=(0,n.backend_util).getPermuted(m.length,u.length,!1),x=(0,n.backend_util).getReshapedPermuted(f.shape,u,c,!1),b=(0,o.reshape)({inputs:{x:f},backend:r,attrs:{shape:m}}),y=(0,i.transpose)({inputs:{x:b},backend:r,attrs:{perm:g}}),j=(0,o.reshape)({inputs:{x:y},backend:r,attrs:{shape:x}});return h.push(f),h.push(b),h.push(y),h.forEach(e=>r.disposeIntermediateTensorInfo(e)),j},u={kernelName:n.SpaceToBatchND,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","./PadV2":"bDEE0","./Reshape":"lrhL2","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4IKdc":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseFillEmptyRows",()=>o),s.export(r,"sparseFillEmptyRowsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r}=e,{indices:s,values:n,denseShape:o,defaultValue:i}=t;if(1!==o.shape.length)throw Error(`Dense shape must be a vector, saw:
         ${o.shape}`);if(2!==s.shape.length)throw Error(`Indices must be a matrix, saw:
         ${s.shape}`);if(1!==n.shape.length)throw Error(`Values must be a vector, saw:
         ${n.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let l=r.readSync(s.dataId),u=r.readSync(n.dataId),p=r.readSync(o.dataId),c=r.readSync(i.dataId)[0],[d,h,f,m,g]=(0,a.sparseFillEmptyRowsImplCPU)(l,s.shape,s.dtype,u,n.dtype,p,c);return[r.makeTensorInfo(h,s.dtype,d),r.makeTensorInfo([h[0]],n.dtype,f),r.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(e=>Number(e)))),r.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}let i={kernelName:n.SparseFillEmptyRows,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e0BU2:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseReshape",()=>o),s.export(r,"sparseReshapeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r}=e,{inputIndices:s,inputShape:n,newShape:o}=t;if(2!==s.shape.length)throw Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==n.shape.length)throw Error(`Input shape should be a vector but received shape ${n.shape}`);if(1!==o.shape.length)throw Error(`Target shape should be a vector but received shape ${o.shape}`);let i=Array.from(r.readSync(n.dataId)),l=r.readSync(s.dataId),u=Array.from(r.readSync(o.dataId)),[p,c,d]=(0,a.sparseReshapeImplCPU)(l,s.shape,s.dtype,i,u);return[r.makeTensorInfo(c,s.dtype,p),r.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}let i={kernelName:n.SparseReshape,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"22ZyK":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentMean",()=>o),s.export(r,"sparseSegmentMeanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r}=e,{data:s,indices:n,segmentIds:o}=t;if(s.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==n.shape.length)throw Error(`Indices should be a vector but received shape
              ${n.shape}`);if(1!==o.shape.length)throw Error(`Segment ids should be a vector but received shape
              ${o.shape}`);let i=r.readSync(s.dataId),l=r.readSync(n.dataId),u=r.readSync(o.dataId),[p,c]=(0,a.sparseSegmentReductionImplCPU)(i,s.shape,s.dtype,l,u,!0);return r.makeTensorInfo(c,s.dtype,p)}let i={kernelName:n.SparseSegmentMean,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7eV18":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentSum",()=>o),s.export(r,"sparseSegmentSumConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r}=e,{data:s,indices:n,segmentIds:o}=t;if(s.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==n.shape.length)throw Error(`Indices should be a vector but received shape
             ${n.shape}`);if(1!==o.shape.length)throw Error(`Segment ids should be a vector but received shape
             ${o.shape}`);let i=r.readSync(s.dataId),l=r.readSync(n.dataId),u=r.readSync(o.dataId),[p,c]=(0,a.sparseSegmentReductionImplCPU)(i,s.shape,s.dtype,l,u);return r.makeTensorInfo(c,s.dtype,p)}let i={kernelName:n.SparseSegmentSum,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kZ1T4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseToDense",()=>l),s.export(r,"sparseToDenseConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../scatter_gpu"),i=e("./Reshape");function l(e){let{inputs:t,backend:r,attrs:s}=e,{sparseIndices:l,sparseValues:u,defaultValue:p}=t,{outputShape:c}=s,{sliceRank:d,numUpdates:h,sliceSize:f,strides:m,outputSize:g}=(0,n.backend_util).calculateShapes(u,l,c);if("string"===u.dtype){let e=r.bufferSync(l),t=r.bufferSync(u),s=(0,n.util).decodeString(r.readSync(p.dataId)[0]),o=(0,a.scatterImplCPU)(e,t,c,g,f,h,d,m,s,!1);return r.makeTensorInfo(c,o.dtype,o.values)}let x=new o.ScatterProgram(h,d,l.shape.length,u.shape.length,m,[g,1],!1),b=r.runWebGLProgram(x,[u,l,p],u.dtype),y=(0,i.reshape)({inputs:{x:b},backend:r,attrs:{shape:c}});return r.disposeIntermediateTensorInfo(b),y}let u={kernelName:n.SparseToDense,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../scatter_gpu":"g5kFk","./Reshape":"lrhL2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],atoYY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"splitV",()=>o),s.export(r,"splitVConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Slice");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{numOrSizeSplits:i,axis:l}=s,u=(0,n.util).parseAxisParam(l,o.shape)[0],p=(0,n.backend_util).prepareSplitSize(o,i,u),c=o.shape.length,d=Array(c).fill(0),h=o.shape.slice();return p.map(e=>{let t=[...h];t[u]=e;let s=(0,a.slice)({inputs:{x:o},backend:r,attrs:{begin:d,size:t}});return d[u]+=e,s})}let i={kernelName:n.SplitV,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Slice":"8MBiK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hXlAk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sqrt",()=>l),s.export(r,"sqrtConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils"),o=e("../kernel_utils/shared");let i="return sqrt(x);",l=(0,a.unaryKernelFunc)({opSnippet:i,packedOpSnippet:i,cpuKernelImpl:o.sqrtImplCPU}),u={kernelName:n.Sqrt,backendName:"webgl",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4npa1":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"square",()=>o),s.export(r,"squareConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return x * x;"}),i={kernelName:n.Square,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],asQVd:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squaredDifference",()=>i),s.export(r,"squaredDifferenceConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o="return (a - b) * (a - b);",i=(0,a.binaryKernelFunc)({opSnippet:o,packedOpSnippet:o}),l={kernelName:n.SquaredDifference,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],f9BLH:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"step",()=>o),s.export(r,"stepConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../unaryop_gpu");function o({inputs:e,attrs:t,backend:r}){let{x:s}=e,n=a.CHECK_NAN_SNIPPET+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,o=new a.UnaryOpProgram(s.shape,n);return r.runWebGLProgram(o,[s],s.dtype)}let i={kernelName:n.Step,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../unaryop_gpu":"lMu15","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5ISKs":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stridedSlice",()=>u),s.export(r,"stridedSliceConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../strided_slice_gpu"),i=e("./Reshape"),l=e("./Slice");function u(e){let t;let{inputs:r,backend:s,attrs:u}=e,{x:p}=r,{begin:c,end:d,strides:h,beginMask:f,endMask:m,ellipsisMask:g,newAxisMask:x,shrinkAxisMask:b}=u,{finalShapeSparse:y,finalShape:j,isIdentity:_,sliceDim0:k,isSimpleSlice:I,begin:w,end:C,strides:S}=(0,n.slice_util).sliceInfo(p.shape,c,d,h,f,m,g,x,b);if(_)t=(0,i.reshape)({inputs:{x:p},backend:s,attrs:{shape:j}});else if(k||I){// Optimization #2, slice is memory contiguous (only occurs in dim 0)
(0,n.util).assert(p.shape.length>=1,()=>`Input must have rank at least 1, got: ${p.shape.length}`);let e=(0,n.slice_util).computeOutShape(w,C,S),r=(0,l.slice)({inputs:{x:p},backend:s,attrs:{begin:w,size:e}});t=(0,i.reshape)({inputs:{x:r},backend:s,attrs:{shape:j}}),s.disposeIntermediateTensorInfo(r)}else{let e=s.shouldExecuteOnCPU([p]);if(e){// tslint:disable-next-line: no-unnecessary-type-assertion
let e=s.readSync(p.dataId),r=(0,n.buffer)(p.shape,p.dtype,e),o=(0,a.stridedSliceImplCPU)(y,r,S,w);t=s.makeTensorInfo(j,p.dtype,o.values)}else{let e=new o.StridedSliceProgram(w,S,y);t=s.runWebGLProgram(e,[p],p.dtype)}}let T=(0,i.reshape)({inputs:{x:t},backend:s,attrs:{shape:j}});return s.disposeIntermediateTensorInfo(t),T}let p={kernelName:n.StridedSlice,backendName:"webgl",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../strided_slice_gpu":"d8V1D","./Reshape":"lrhL2","./Slice":"8MBiK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],d8V1D:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"StridedSliceProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t,r){this.variableNames=["x"],this.outputShape=r;let s=r.length,a=(0,n.getCoordsDataType)(r.length),o=(0,n.getCoordsDataType)(r.length),i="";if(1===s)i="coords * strides + begin";else{let e=0;i=r.map((t,s)=>(e++,1===r.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${o} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gisWF:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringNGrams",()=>o),s.export(r,"stringNGramsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{separator:n,nGramWidths:o,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:p}=s,{data:c,dataSplits:d}=t,h=r.readSync(c.dataId),f=r.readSync(d.dataId),[m,g]=(0,a.stringNGramsImplCPU)(h,f,n,o,i,l,u,p);return[r.makeTensorInfo([m.length],"string",m),r.makeTensorInfo(d.shape,"int32",g)]}let i={kernelName:n.StringNGrams,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"32obQ":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringSplit",()=>o),s.export(r,"stringSplitConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{skipEmpty:n}=s,{input:o,delimiter:i}=t;if("string"!==o.dtype)throw Error("Input must be of datatype string");if(1!==o.shape.length)throw Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let l=r.readSync(o.dataId),u=r.readSync(i.dataId)[0],[p,c,d]=(0,a.stringSplitImplCPU)(l,u,n),h=c.length;return[r.makeTensorInfo([h,2],"int32",p),r.makeTensorInfo([h],"string",c),r.makeTensorInfo([2],"int32",new Int32Array(d))]}let i={kernelName:n.StringSplit,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],doQoe:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringToHashBucketFast",()=>o),s.export(r,"stringToHashBucketFastConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared");function o(e){let{inputs:t,backend:r,attrs:s}=e,{numBuckets:n}=s,{input:o}=t;if("string"!==o.dtype)throw Error("Input must be of datatype string");if(n<=0)throw Error("Number of buckets must be at least 1");let i=r.readSync(o.dataId),l=(0,a.stringToHashBucketFastImplCPU)(i,n);return r.makeTensorInfo(o.shape,"int32",l)}let i={kernelName:n.StringToHashBucketFast,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l2fLE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tan",()=>o),s.export(r,"tanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=(0,a.unaryKernelFunc)({opSnippet:"return tan(x);"}),i={kernelName:n.Tan,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jw6A6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tanh",()=>i),s.export(r,"tanhConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/kernel_funcs_utils");let o=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,i=(0,a.unaryKernelFunc)({opSnippet:o}),l={kernelName:n.Tanh,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/kernel_funcs_utils":"a0KZF","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7Gmax":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tile",()=>i),s.export(r,"tileConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../tile_gpu");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{reps:l}=s;// tile gpu program cannot handle rank > 5 case.
if("string"===i.dtype||i.shape.length>5){// Even thought string tensor is always on CPU, just to be consistent on how
// to access tensor data.
let e=r.readSync(i.dataId),t="string"===i.dtype?e.map(e=>(0,n.util).decodeString(e)):e,s=(0,n.buffer)(i.shape,i.dtype,t),o=(0,a.tileImplCPU)(s,l);return r.makeTensorInfo(o.shape,o.dtype,o.values)}let u=new o.TileProgram(i.shape,l),p=r.runWebGLProgram(u,[i],i.dtype);return p}let l={kernelName:n.Tile,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../tile_gpu":"fTOQN","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fTOQN:[function(e,t,r){/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TileProgram",()=>a);var n=e("./shader_compiler");class a{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let s=0;s<r.length;s++)r[s]=e[s]*t[s];this.outputShape=r,this.rank=r.length;let s=(0,n.getCoordsDataType)(this.rank),a=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${r[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}},{"./shader_compiler":"61Vau","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cs0uZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),// Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
s.export(r,"topK",()=>h),s.export(r,"topKConfig",()=>f);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../top_k_gpu"),i=e("./Fill"),l=e("./GatherV2"),u=e("./Reshape"),p=e("./Slice");function c(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function d(e){let t=1;for(;t<e;)t*=2;return t}function h(e){let{inputs:t,backend:r,attrs:s}=e,{x:h}=t,{k:f,sorted:m}=s,g=(0,n.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),x=(0,n.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),b=h.shape,y=b[b.length-1];if(r.shouldExecuteOnCPU([h])||y<g||f>x){let e=r.readSync(h.dataId),[t,s]=(0,a.topKImplCPU)(e,b,h.dtype,f,m);return[r.makeTensorInfo(t.shape,t.dtype,t.values),r.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===f)return b[b.length-1]=0,[r.makeTensorInfo(b,h.dtype,[]),r.makeTensorInfo(b,"int32",[])];if(1/* firstPass */===y)return[h,(0,i.fill)({attrs:{shape:b,dtype:"int32",value:0},backend:r})];// Eagerly unpack x input since it is passed in to all the shaders which
// require unpacked inputs.
let j=r.texData.get(h.dataId),_=null!==j&&j.isPacked,k=_?r.unpackTensor(h):h,I=(0,n.util).sizeFromShape(b),w=I/y,C=(0,u.reshape)({inputs:{x:k},attrs:{shape:[w,y]},backend:r});_&&c(r,k);let S=d(f),T=d(y),N=null,E=()=>null===N?[C,C]:[C,N],F=(e,t,s)=>{let n=E(),a=new o.SwapProgram(s),i=null===N?1:0,l=[[y],[i],[Number.NEGATIVE_INFINITY],[e],[t]],u=N;N=r.runWebGLProgram(a,n,"int32",l),c(r,u)};// Step 1: local sort
for(let e=1;e<S;e*=2){let t=2*e;for(let r=e;r>=1;r/=2)F(t,r,[w,T])}// Step 2: merge
for(let e=T;e>S;e/=2){let t=E(),s=new o.MergeProgram([w,e/2]),n=null===N?1:0,a=[[y],[n],[S]],i=N;N=r.runWebGLProgram(s,t,"int32",a),c(r,i);// Step 3: rebuild
let l=S/2,u=2*l;for(let e=l;e>=1;e/=2)F(u,e,N.shape)}// Keep only the requested top K results instead of kPow2
let A=N;N=(0,p.slice)({inputs:{x:N},backend:r,attrs:{begin:0,size:[w,f]}}),c(r,A);// Gather values on last dimension
let R=(0,l.gatherV2)({inputs:{x:C,indices:N},backend:r,attrs:{axis:1,batchDims:1}});c(r,C);// Reshape back to the original input shape, except that the last
// dimension is k.
let D=b.slice(0,-1);D.push(f),A=N,N=(0,u.reshape)({inputs:{x:N},attrs:{shape:D},backend:r}),c(r,A);let $=R;return R=(0,u.reshape)({inputs:{x:R},attrs:{shape:D},backend:r}),c(r,$),[R,N]}let f={kernelName:n.TopK,backendName:"webgl",kernelFunc:h}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../top_k_gpu":"bwOTX","./Fill":"fPbul","./GatherV2":"1lci1","./Reshape":"lrhL2","./Slice":"8MBiK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bwOTX:[function(e,t,r){// Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
// The original algorithm is based on computing the top K only, however
// since for TFJS we require the indices of the top K values as well then the
// algorithm found here is a bit modified. Rather than producing the values
// at each step, the indices containing the top K are generated instead.
// The output values are not generated to reduce the number of outputs in the
// GPU, the values can easily be retrieved from the indices using a gather
// op.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SwapProgram",()=>n),s.export(r,"MergeProgram",()=>a);class n{/**
     * @param shape desired output shape (can be larger than input shape, output
     *                                    will be padded with -Infinity)
     */constructor(e){this.variableNames=["x","indices"],// |n| Size of the original input of TopK.
// |firstPass|indicates if this is the first time swap is being used which
// means no indices input containing the top K is present yet.
// |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...
this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class a{/**
     * @param shape desired output shape (must be half of the input size)
     */constructor(e){this.variableNames=["x","indices"],// |n| Size of the original input of TopK
// |firstPass| indicates if this is the first time swap is being used which
// means no indices input containing the top K is present yet.
// |k| Top k elements desired
this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7T7yB":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transform",()=>o),s.export(r,"transformConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../transform_gpu");function o(e){let{inputs:t,backend:r,attrs:s}=e,{image:n,transforms:o}=t,{interpolation:i,fillMode:l,fillValue:u,outputShape:p}=s,[c,d,h,f]=n.shape,[m,g]=null!=p?p:[d,h],x=new a.TransformProgram(d,h,i,l,u,[c,m,g,f]);return r.runWebGLProgram(x,[n,o],"float32")}let i={kernelName:n.Transform,backendName:"webgl",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../transform_gpu":"iSCLb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iSCLb:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"TransformProgram",()=>n);class n{constructor(e,t,r,s,n,a){let o;switch(this.variableNames=["Image","Transforms"],this.outputShape=a,s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${o} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${n});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${n});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${"nearest"===r?1:2} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],zcl2W:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unique",()=>i),s.export(r,"uniqueConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../kernel_utils/shared"),o=e("../webgl_util");function i(e){let{inputs:t,attrs:r,backend:s}=e,{axis:n}=r,{x:i}=t;(0,o.assertNotComplex)(i,"unique"),// For now, always forward calculation to the CPU backend.
console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let l=s.readSync(i.dataId),{outputValues:u,outputShape:p,indices:c}=(0,a.uniqueImplCPU)(l,n,i.shape,i.dtype);return[s.makeTensorInfo(p,i.dtype,u),s.makeTensorInfo([c.length],"int32",c)]}let l={kernelName:n.Unique,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../kernel_utils/shared":"glaaY","../webgl_util":"6G64G","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"45pFE":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unpack",()=>i),s.export(r,"unpackConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./Reshape"),o=e("./Slice");function i(e){let{inputs:t,backend:r,attrs:s}=e,{value:n}=t,{axis:i}=s;i<0&&(i+=n.shape.length);let l=n.shape.length,u=n.shape[i],p=Array(l-1),c=0;for(let e=0;e<l;e++)e!==i&&(p[c++]=n.shape[e]);let d=[],h=Array(l).fill(0),f=n.shape.slice();f[i]=1;let m=Array(u);for(let e=0;e<m.length;e++){h[i]=e;let t=(0,o.slice)({inputs:{x:n},backend:r,attrs:{begin:h,size:f}}),s=(0,a.reshape)({inputs:{x:t},backend:r,attrs:{shape:p}});m[e]=s,d.push(t)}return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),m}let l={kernelName:n.Unpack,backendName:"webgl",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","./Reshape":"lrhL2","./Slice":"8MBiK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4NxiV":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unsortedSegmentSum",()=>p),s.export(r,"unsortedSegmentSumConfig",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("../segment_gpu"),o=e("./Range"),i=e("./Reshape"),l=e("./Tile"),u=e("./Transpose");function p(e){let{inputs:t,backend:r,attrs:s}=e,{x:p,segmentIds:c}=t,{numSegments:d}=s,h=p.shape.length,f=[],m=0,g=(0,n.backend_util).getAxesPermutation([m],h),x=p;null!=g&&(x=(0,u.transpose)({inputs:{x:p},backend:r,attrs:{perm:g}}),f.push(x),m=(0,n.backend_util).getInnerMostAxes(1,h)[0]);let b=(0,n.backend_util).segment_util.computeOutShape(x.shape,m,d),y=(0,n.util).sizeFromShape([x.shape[m]]),j=(0,i.reshape)({inputs:{x:x},backend:r,attrs:{shape:[-1,y]}});f.push(j);let _=(0,n.sumOutType)(p.dtype),k=(e,t,s,i,u)=>{let p=e.shape[0],c=e.shape[1],d=(0,n.backend_util).segment_util.segOpComputeOptimalWindowSize(c,u),h=new a.SegmentOpProgram({windowSize:d,inSize:c,batchSize:p,numSegments:u},t),m=r.compileAndRun(h,[e,s],i);// No need to run another GPGPU program.
if(f.push(m),m.shape[1]===u)return m;let g=(0,o.range)({backend:r,attrs:{start:0,stop:u,step:1,dtype:"float32"}}),x=(0,l.tile)({inputs:{x:g},backend:r,attrs:{reps:[c/d]}});f.push(g),f.push(x);let b=k(m,t,x,i,u);return b},I=k(j,"unsortedSegmentSum",c,_,d),w=(0,i.reshape)({inputs:{x:I},backend:r,attrs:{shape:b}}),C=w;if(null!=g){f.push(w);let e=(0,n.backend_util).getUndoAxesPermutation(g);C=(0,u.transpose)({inputs:{x:C},backend:r,attrs:{perm:e}})}return f.forEach(e=>r.disposeIntermediateTensorInfo(e)),C}let c={kernelName:n.UnsortedSegmentSum,backendName:"webgl",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","../segment_gpu":"eTfvD","./Range":"jxAcj","./Reshape":"lrhL2","./Tile":"7Gmax","./Transpose":"3ABKY","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eTfvD:[function(e,t,r){/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"SegmentOpProgram",()=>n);class n{constructor(e,t){this.variableNames=["x","segmentIds"];let r=e.windowSize,s=e.batchSize,n=e.inSize,a=e.numSegments,o=a*Math.ceil(n/r);this.outputShape=[s,o];let i=4*Math.floor(r/4),l=r%4,u=`
        sumValue += dot(values, segFilter);
    `,p="";n%r>0&&(p=`
        if (inIdx < 0 || inIdx >= ${n}) {
          return initializationValue;
        }
      `);let c="";n%r>0&&(c=`
        if (inIdx < 0 || inIdx >= ${n}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${c}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${r}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${1===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${u}
        }
        setOutput(sumValue);
      }
    `}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hvf4f:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// All exports from this package should be in base.
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./base");s.exportAll(n,r),e("./register_all_kernels")},{"./base":"29xn6","./register_all_kernels":"7jChx","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"29xn6":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//*
 * base.ts contains all the exports from tfjs-backend-cpu
 * without auto-kernel registration
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MathBackendCPU",()=>a.MathBackendCPU),s.export(r,"version_cpu",()=>i.version),s.export(r,"shared",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("./backend_cpu"),o=e("./shared"),i=e("./version");// Side effects for default initialization of MathBackendCPU
(0,n.registerBackend)("cpu",()=>new a.MathBackendCPU,1/* priority */)},{"@tensorflow/tfjs-core":"U1ela","./backend_cpu":"cN4R7","./shared":"4O5jX","./version":"kHnWI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cN4R7:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"MathBackendCPU",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./cpu_util");let o=n.kernel_impls.whereImpl;class i extends n.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new n.DataStorage(this,(0,n.engine)())}nextDataId(){return i.nextDataId++}write(e,t,r){this.firstUse&&(this.firstUse=!1,(0,n.env)().get("IS_NODE")&&(0,n.backend_util).warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));let s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:r,refCount:1}),s}/**
     * Create a data bucket in cpu backend.
     * @param shape Shape of the `TensorInfo`.
     * @param dtype DType of the `TensorInfo`.
     * @param values The value of the `TensorInfo` stored as a flattened array.
     */makeTensorInfo(e,t,r){let s;if("string"===t&&null!=r&&r.length>0&&(0,n.util).isString(r[0])){let a=r.map(e=>(0,n.util).encodeString(e));s=this.write(a,e,t)}else s=this.write(r,e,t);return{dataId:s,shape:e,dtype:t}}/** Return refCount of a `TensorData`. */refCount(e){if(this.data.has(e)){let t=this.data.get(e);return t.refCount}return 0}/** Increase refCount of a `TensorData`. */incRef(e){let t=this.data.get(e);t.refCount++}/** Decrease refCount of a `TensorData`. */decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,r,s,n){this.data.set(e,{values:t,dtype:s,refCount:n})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:r}=this.data.get(e);if("complex64"===t){let e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);return(0,n.backend_util).mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{// Decode the bytes into string.
let r=t.map(e=>(0,n.util).decodeString(e));return(0,n.buffer)(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return(0,n.buffer)(e.shape,e.dtype,t)}makeOutput(e,t,r){return(0,n.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,r,e),this)}/**
     * Dispose the memory if the dataId has 0 refCount. Return true if the memory
     * is released or memory is not managed in this backend, false if memory is
     * not cleared.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=(0,n.util).now();e();let r=(0,n.util).now()-t;return{kernelMs:r}}memory(){return{// Unreliable due to automatic gc. The numbers above are cumulative.
unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,a.assertNotComplex)([e],"where");let t=this.readSync(e.dataId);return o(e.shape,t)}dispose(){}floatPrecision(){return 32}/** Returns the smallest representable number.  */epsilon(){return super.epsilon()}}i.nextDataId=0},{"@tensorflow/tfjs-core":"U1ela","./cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kHnWI:[function(e,t,r){/** @license See the LICENSE file. */// This code is auto-generated, do not modify this file!
var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"version",()=>n);let n="3.21.0"},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7jChx":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */// We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.
var s=e("@tensorflow/tfjs-core"),n=e("./kernels/_FusedMatMul"),a=e("./kernels/Abs"),o=e("./kernels/Acos"),i=e("./kernels/Acosh"),l=e("./kernels/Add"),u=e("./kernels/AddN"),p=e("./kernels/All"),c=e("./kernels/Any"),d=e("./kernels/ArgMax"),h=e("./kernels/ArgMin"),f=e("./kernels/Asin"),m=e("./kernels/Asinh"),g=e("./kernels/Atan"),x=e("./kernels/Atan2"),b=e("./kernels/Atanh"),y=e("./kernels/AvgPool"),j=e("./kernels/AvgPool3D"),_=e("./kernels/AvgPool3DGrad"),k=e("./kernels/AvgPoolGrad"),I=e("./kernels/BatchMatMul"),w=e("./kernels/BatchNorm"),C=e("./kernels/BatchToSpaceND"),S=e("./kernels/Bincount"),T=e("./kernels/BroadcastArgs"),N=e("./kernels/Cast"),E=e("./kernels/Ceil"),F=e("./kernels/ClipByValue"),A=e("./kernels/Complex"),R=e("./kernels/ComplexAbs"),D=e("./kernels/Concat"),$=e("./kernels/Conv2D"),P=e("./kernels/Conv2DBackpropFilter"),z=e("./kernels/Conv2DBackpropInput"),M=e("./kernels/Conv3D"),O=e("./kernels/Conv3DBackpropFilterV2"),L=e("./kernels/Conv3DBackpropInputV2"),B=e("./kernels/Cos"),U=e("./kernels/Cosh"),V=e("./kernels/CropAndResize"),G=e("./kernels/Cumprod"),W=e("./kernels/Cumsum"),q=e("./kernels/DenseBincount"),K=e("./kernels/DepthToSpace"),H=e("./kernels/DepthwiseConv2dNative"),X=e("./kernels/DepthwiseConv2dNativeBackpropFilter"),Y=e("./kernels/DepthwiseConv2dNativeBackpropInput"),Z=e("./kernels/Diag"),J=e("./kernels/Dilation2D"),Q=e("./kernels/Dilation2DBackpropFilter"),ee=e("./kernels/Dilation2DBackpropInput"),et=e("./kernels/Einsum"),er=e("./kernels/Elu"),es=e("./kernels/EluGrad"),en=e("./kernels/Equal"),ea=e("./kernels/Erf"),eo=e("./kernels/Exp"),ei=e("./kernels/ExpandDims"),el=e("./kernels/Expm1"),eu=e("./kernels/FFT"),ep=e("./kernels/Fill"),ec=e("./kernels/FlipLeftRight"),ed=e("./kernels/Floor"),eh=e("./kernels/FloorDiv"),ef=e("./kernels/FusedConv2D"),em=e("./kernels/FusedDepthwiseConv2D"),eg=e("./kernels/GatherNd"),ex=e("./kernels/GatherV2"),ev=e("./kernels/Greater"),eb=e("./kernels/GreaterEqual"),ey=e("./kernels/Identity"),ej=e("./kernels/IFFT"),e_=e("./kernels/Imag"),ek=e("./kernels/IsFinite"),eI=e("./kernels/IsInf"),ew=e("./kernels/IsNaN"),eC=e("./kernels/LeakyRelu"),eS=e("./kernels/Less"),eT=e("./kernels/LessEqual"),eN=e("./kernels/LinSpace"),eE=e("./kernels/Log"),eF=e("./kernels/Log1p"),eA=e("./kernels/LogicalAnd"),eR=e("./kernels/LogicalNot"),eD=e("./kernels/LogicalOr"),e$=e("./kernels/LRN"),eP=e("./kernels/LRNGrad"),ez=e("./kernels/Max"),eM=e("./kernels/Maximum"),eO=e("./kernels/MaxPool"),eL=e("./kernels/MaxPool3D"),eB=e("./kernels/MaxPool3DGrad"),eU=e("./kernels/MaxPoolGrad"),eV=e("./kernels/MaxPoolWithArgmax"),eG=e("./kernels/Mean"),eW=e("./kernels/Min"),eq=e("./kernels/Minimum"),eK=e("./kernels/MirrorPad"),eH=e("./kernels/Mod"),eX=e("./kernels/Multinomial"),eY=e("./kernels/Multiply"),eZ=e("./kernels/Neg"),eJ=e("./kernels/NonMaxSuppressionV3"),eQ=e("./kernels/NonMaxSuppressionV4"),e0=e("./kernels/NonMaxSuppressionV5"),e1=e("./kernels/NotEqual"),e2=e("./kernels/OneHot"),e3=e("./kernels/OnesLike"),e4=e("./kernels/Pack"),e5=e("./kernels/PadV2"),e6=e("./kernels/Pow"),e9=e("./kernels/Prelu"),e8=e("./kernels/Prod"),e7=e("./kernels/RaggedGather"),te=e("./kernels/RaggedTensorToTensor"),tt=e("./kernels/Range"),tr=e("./kernels/Real"),ts=e("./kernels/RealDiv"),tn=e("./kernels/Reciprocal"),ta=e("./kernels/Relu"),to=e("./kernels/Relu6"),ti=e("./kernels/Reshape"),tl=e("./kernels/ResizeBilinear"),tu=e("./kernels/ResizeBilinearGrad"),tp=e("./kernels/ResizeNearestNeighbor"),tc=e("./kernels/ResizeNearestNeighborGrad"),td=e("./kernels/Reverse"),th=e("./kernels/RotateWithOffset"),tf=e("./kernels/Round"),tm=e("./kernels/Rsqrt"),tg=e("./kernels/ScatterNd"),tx=e("./kernels/SearchSorted"),tv=e("./kernels/Select"),tb=e("./kernels/Selu"),ty=e("./kernels/Sigmoid"),tj=e("./kernels/Sign"),t_=e("./kernels/Sin"),tk=e("./kernels/Sinh"),tI=e("./kernels/Slice"),tw=e("./kernels/Softmax"),tC=e("./kernels/Softplus"),tS=e("./kernels/SpaceToBatchND"),tT=e("./kernels/SparseFillEmptyRows"),tN=e("./kernels/SparseReshape"),tE=e("./kernels/SparseSegmentMean"),tF=e("./kernels/SparseSegmentSum"),tA=e("./kernels/SparseToDense"),tR=e("./kernels/SplitV"),tD=e("./kernels/Sqrt"),t$=e("./kernels/Square"),tP=e("./kernels/SquaredDifference"),tz=e("./kernels/Step"),tM=e("./kernels/StridedSlice"),tO=e("./kernels/StringNGrams"),tL=e("./kernels/StringSplit"),tB=e("./kernels/StringToHashBucketFast"),tU=e("./kernels/Sub"),tV=e("./kernels/Sum"),tG=e("./kernels/Tan"),tW=e("./kernels/Tanh"),tq=e("./kernels/Tile"),tK=e("./kernels/TopK"),tH=e("./kernels/Transform"),tX=e("./kernels/Transpose"),tY=e("./kernels/Unique"),tZ=e("./kernels/Unpack"),tJ=e("./kernels/UnsortedSegmentSum"),tQ=e("./kernels/ZerosLike");// List all kernel configs here
let t0=[n._fusedMatMulConfig,a.absConfig,o.acosConfig,i.acoshConfig,l.addConfig,u.addNConfig,p.allConfig,c.anyConfig,d.argMaxConfig,h.argMinConfig,f.asinConfig,m.asinhConfig,g.atanConfig,x.atan2Config,b.atanhConfig,y.avgPoolConfig,j.avgPool3DConfig,_.avgPool3DGradConfig,k.avgPoolGradConfig,I.batchMatMulConfig,w.batchNormConfig,C.batchToSpaceNDConfig,S.bincountConfig,T.broadcastArgsConfig,N.castConfig,E.ceilConfig,F.clipByValueConfig,A.complexConfig,R.complexAbsConfig,D.concatConfig,$.conv2DConfig,P.conv2DBackpropFilterConfig,z.conv2DBackpropInputConfig,M.conv3DConfig,O.conv3DBackpropFilterV2Config,L.conv3DBackpropInputV2Config,B.cosConfig,U.coshConfig,V.cropAndResizeConfig,G.cumprodConfig,W.cumsumConfig,q.denseBincountConfig,K.depthToSpaceConfig,H.depthwiseConv2dNativeConfig,X.depthwiseConv2dNativeBackpropFilterConfig,Y.depthwiseConv2dNativeBackpropInputConfig,Z.diagConfig,J.dilation2DConfig,Q.dilation2DBackpropFilterConfig,ee.dilation2DBackpropInputConfig,et.einsumConfig,er.eluConfig,es.eluGradConfig,en.equalConfig,ea.erfConfig,eo.expConfig,ei.expandDimsConfig,el.expm1Config,eu.fftConfig,ep.fillConfig,ec.flipLeftRightConfig,ed.floorConfig,eh.floorDivConfig,ef.fusedConv2DConfig,em.fusedDepthwiseConv2DConfig,eg.gatherNdConfig,ex.gatherV2Config,ev.greaterConfig,eb.greaterEqualConfig,ey.identityConfig,ej.ifftConfig,e_.imagConfig,ek.isFiniteConfig,eI.isInfConfig,ew.isNaNConfig,eC.leakyReluConfig,eS.lessConfig,eT.lessEqualConfig,eN.linSpaceConfig,eE.logConfig,eF.log1pConfig,eA.logicalAndConfig,eR.logicalNotConfig,eD.logicalOrConfig,e$.LRNConfig,eP.LRNGradConfig,ez.maxConfig,eM.maximumConfig,eO.maxPoolConfig,eL.maxPool3DConfig,eB.maxPool3DGradConfig,eU.maxPoolGradConfig,eV.maxPoolWithArgmaxConfig,eG.meanConfig,eW.minConfig,eq.minimumConfig,eK.mirrorPadConfig,eH.modConfig,eX.multinomialConfig,eY.multiplyConfig,eZ.negConfig,eJ.nonMaxSuppressionV3Config,eQ.nonMaxSuppressionV4Config,e0.nonMaxSuppressionV5Config,e1.notEqualConfig,e2.oneHotConfig,e3.onesLikeConfig,e4.packConfig,e5.padV2Config,e6.powConfig,e9.preluConfig,e8.prodConfig,e7.raggedGatherConfig,te.raggedTensorToTensorConfig,tt.rangeConfig,tr.realConfig,ts.realDivConfig,tn.reciprocalConfig,ta.reluConfig,to.relu6Config,ti.reshapeConfig,tl.resizeBilinearConfig,tu.resizeBilinearGradConfig,tp.resizeNearestNeighborConfig,tc.resizeNearestNeighborGradConfig,td.reverseConfig,th.rotateWithOffsetConfig,tf.roundConfig,tm.rsqrtConfig,tg.scatterNdConfig,tx.searchSortedConfig,tv.selectConfig,tb.seluConfig,ty.sigmoidConfig,tj.signConfig,t_.sinConfig,tk.sinhConfig,tI.sliceConfig,tw.softmaxConfig,tC.softplusConfig,tS.spaceToBatchNDConfig,tT.sparseFillEmptyRowsConfig,tN.sparseReshapeConfig,tE.sparseSegmentMeanConfig,tF.sparseSegmentSumConfig,tA.sparseToDenseConfig,tR.splitVConfig,tD.sqrtConfig,t$.squareConfig,tP.squaredDifferenceConfig,tz.stepConfig,tM.stridedSliceConfig,tO.stringNGramsConfig,tL.stringSplitConfig,tB.stringToHashBucketFastConfig,tU.subConfig,tV.sumConfig,tG.tanConfig,tW.tanhConfig,tq.tileConfig,tK.topKConfig,tH.transformConfig,tX.transposeConfig,tY.uniqueConfig,tZ.unpackConfig,tJ.unsortedSegmentSumConfig,tQ.zerosLikeConfig];for(let e of t0)(0,s.registerKernel)(e)},{"@tensorflow/tfjs-core":"U1ela","./kernels/_FusedMatMul":"1StMW","./kernels/Abs":"11wVJ","./kernels/Acos":"k21bt","./kernels/Acosh":"gGfuF","./kernels/Add":"k4i1P","./kernels/AddN":"8dZdv","./kernels/All":"g6aj2","./kernels/Any":"3dHW9","./kernels/ArgMax":"lRYEQ","./kernels/ArgMin":"eftxf","./kernels/Asin":"launj","./kernels/Asinh":"eJNIv","./kernels/Atan":"53F2E","./kernels/Atan2":"akykq","./kernels/Atanh":"jVUty","./kernels/AvgPool":"dHHla","./kernels/AvgPool3D":"2EGph","./kernels/AvgPool3DGrad":"lLZO6","./kernels/AvgPoolGrad":"7iV62","./kernels/BatchMatMul":"eetO2","./kernels/BatchNorm":"gTgtk","./kernels/BatchToSpaceND":"i67bE","./kernels/Bincount":"eVNVz","./kernels/BroadcastArgs":"2ruEs","./kernels/Cast":"5cInC","./kernels/Ceil":"23xgl","./kernels/ClipByValue":"eksjX","./kernels/Complex":"1mXNt","./kernels/ComplexAbs":"dnW9O","./kernels/Concat":"eYOqa","./kernels/Conv2D":"9a2fk","./kernels/Conv2DBackpropFilter":"kVyDK","./kernels/Conv2DBackpropInput":"1ynCM","./kernels/Conv3D":"1WFUa","./kernels/Conv3DBackpropFilterV2":"fauvU","./kernels/Conv3DBackpropInputV2":"cO9nn","./kernels/Cos":"1IeEC","./kernels/Cosh":"atNTt","./kernels/CropAndResize":"iGagd","./kernels/Cumprod":"5YQ4j","./kernels/Cumsum":"gGOb6","./kernels/DenseBincount":"1krnE","./kernels/DepthToSpace":"iX1Dh","./kernels/DepthwiseConv2dNative":"gl2lz","./kernels/DepthwiseConv2dNativeBackpropFilter":"9IaDl","./kernels/DepthwiseConv2dNativeBackpropInput":"dDWvj","./kernels/Diag":"7aqbv","./kernels/Dilation2D":"eMRaU","./kernels/Dilation2DBackpropFilter":"e9RM9","./kernels/Dilation2DBackpropInput":"iRHZ4","./kernels/Einsum":"vhvJp","./kernels/Elu":"0QSNO","./kernels/EluGrad":"60V2v","./kernels/Equal":"3i0zH","./kernels/Erf":"eKeL6","./kernels/Exp":"cXb51","./kernels/ExpandDims":"atyUZ","./kernels/Expm1":"40ang","./kernels/FFT":"eIi7l","./kernels/Fill":"kABMk","./kernels/FlipLeftRight":"eRaDb","./kernels/Floor":"g4iP1","./kernels/FloorDiv":"6JUCA","./kernels/FusedConv2D":"cTsuN","./kernels/FusedDepthwiseConv2D":"bczSl","./kernels/GatherNd":"at2zP","./kernels/GatherV2":"hDQmv","./kernels/Greater":"52G8z","./kernels/GreaterEqual":"2GAg7","./kernels/Identity":"5buXK","./kernels/IFFT":"9rC0A","./kernels/Imag":"kiYH5","./kernels/IsFinite":"iKCAk","./kernels/IsInf":"gV3sm","./kernels/IsNaN":"2sgs8","./kernels/LeakyRelu":"8QcVu","./kernels/Less":"hCPxj","./kernels/LessEqual":"c2ACz","./kernels/LinSpace":"k62mz","./kernels/Log":"lc7KK","./kernels/Log1p":"wO5a2","./kernels/LogicalAnd":"aSoZY","./kernels/LogicalNot":"dmal6","./kernels/LogicalOr":"3otbj","./kernels/LRN":"iaz0p","./kernels/LRNGrad":"eOLg9","./kernels/Max":"32lk6","./kernels/Maximum":"7WLur","./kernels/MaxPool":"aGuRn","./kernels/MaxPool3D":"7SSTi","./kernels/MaxPool3DGrad":"g8GCJ","./kernels/MaxPoolGrad":"evq1D","./kernels/MaxPoolWithArgmax":"1yM02","./kernels/Mean":"4hSBG","./kernels/Min":"1fXRJ","./kernels/Minimum":"20aDa","./kernels/MirrorPad":"4DW95","./kernels/Mod":"c8gLw","./kernels/Multinomial":"jWrGk","./kernels/Multiply":"c4iXH","./kernels/Neg":"5Uru6","./kernels/NonMaxSuppressionV3":"hk6JQ","./kernels/NonMaxSuppressionV4":"74vgr","./kernels/NonMaxSuppressionV5":"2x28O","./kernels/NotEqual":"deYPj","./kernels/OneHot":"j2BwG","./kernels/OnesLike":"32S9P","./kernels/Pack":"aqv4E","./kernels/PadV2":"l2r3y","./kernels/Pow":"rZHpQ","./kernels/Prelu":"9ffE0","./kernels/Prod":"exxHc","./kernels/RaggedGather":"4wuU8","./kernels/RaggedTensorToTensor":"3xBwO","./kernels/Range":"9Pba6","./kernels/Real":"jEtTR","./kernels/RealDiv":"kEt2O","./kernels/Reciprocal":"lHg7w","./kernels/Relu":"3lSQI","./kernels/Relu6":"gKHjC","./kernels/Reshape":"ii0XS","./kernels/ResizeBilinear":"6TjBz","./kernels/ResizeBilinearGrad":"f2sPd","./kernels/ResizeNearestNeighbor":"gpZ6G","./kernels/ResizeNearestNeighborGrad":"gsVzO","./kernels/Reverse":"evEtu","./kernels/RotateWithOffset":"5soSH","./kernels/Round":"gr8u9","./kernels/Rsqrt":"aifQq","./kernels/ScatterNd":"27vCb","./kernels/SearchSorted":"dJ4sK","./kernels/Select":"gw3js","./kernels/Selu":"iPhN6","./kernels/Sigmoid":"7dSeC","./kernels/Sign":"ptBiy","./kernels/Sin":"bWLI4","./kernels/Sinh":"1Gagw","./kernels/Slice":"54KMc","./kernels/Softmax":"jQOby","./kernels/Softplus":"8dHBc","./kernels/SpaceToBatchND":"ims37","./kernels/SparseFillEmptyRows":"0w9AY","./kernels/SparseReshape":"9DfOs","./kernels/SparseSegmentMean":"dlzzP","./kernels/SparseSegmentSum":"2NKN8","./kernels/SparseToDense":"l1pau","./kernels/SplitV":"3zU3w","./kernels/Sqrt":"gYyg0","./kernels/Square":"jxfI2","./kernels/SquaredDifference":"3kOvy","./kernels/Step":"a36vu","./kernels/StridedSlice":"b9qpc","./kernels/StringNGrams":"aqhK2","./kernels/StringSplit":"2qSnJ","./kernels/StringToHashBucketFast":"hiS5G","./kernels/Sub":"1t4R5","./kernels/Sum":"jQcWO","./kernels/Tan":"7RffO","./kernels/Tanh":"f4TAd","./kernels/Tile":"ecG2O","./kernels/TopK":"3gK0N","./kernels/Transform":"8bOOh","./kernels/Transpose":"jPCZf","./kernels/Unique":"kivt6","./kernels/Unpack":"cdKnf","./kernels/UnsortedSegmentSum":"aKdiZ","./kernels/ZerosLike":"02BUu"}],"1StMW":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"_fusedMatMul",()=>l),s.export(r,"_fusedMatMulConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/fused_utils"),o=e("./Add"),i=e("./BatchMatMul");function l(e){let t,r,s;let{inputs:n,backend:l,attrs:u}=e,{a:p,b:c,bias:d,preluActivationWeights:h}=n,{transposeA:f,transposeB:m,activation:g,leakyreluAlpha:x}=u,b=[],y=(0,i.batchMatMul)({inputs:{a:p,b:c},attrs:{transposeA:f,transposeB:m},backend:l});for(let e of(t=y,d&&(r=(0,o.add)({inputs:{a:t,b:d},backend:l}),b.push(t),t=r),g&&(s=(0,a.applyActivation)(l,t,g,h,x),b.push(t),t=s),b))l.disposeIntermediateTensorInfo(e);return t}let u={kernelName:n._FusedMatMul,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/fused_utils":"3tfEV","./Add":"k4i1P","./BatchMatMul":"eetO2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3tfEV":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"applyActivation",()=>c);var n=e("../kernels/Elu"),a=e("../kernels/Identity"),o=e("../kernels/LeakyRelu"),i=e("../kernels/Prelu"),l=e("../kernels/Relu"),u=e("../kernels/Relu6"),p=e("../kernels/Sigmoid");function c(e,t,r,s,c){if("linear"===r)return(0,a.identity)({inputs:{x:t},backend:e});if("relu"===r)return(0,l.relu)({inputs:{x:t},backend:e});if("elu"===r)return(0,n.elu)({inputs:{x:t},backend:e});if("relu6"===r)return(0,u.relu6)({inputs:{x:t},backend:e});if("prelu"===r)return(0,i.prelu)({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===r)return(0,o.leakyRelu)({inputs:{x:t},backend:e,attrs:{alpha:c}});if("sigmoid"===r)return(0,p.sigmoid)({inputs:{x:t},backend:e});throw Error(`Activation ${r} has not been implemented for the CPU backend.`)}},{"../kernels/Elu":"0QSNO","../kernels/Identity":"5buXK","../kernels/LeakyRelu":"8QcVu","../kernels/Prelu":"9ffE0","../kernels/Relu":"3lSQI","../kernels/Relu6":"gKHjC","../kernels/Sigmoid":"7dSeC","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"0QSNO":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"elu",()=>o),s.export(r,"eluConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Elu,e=>e>=0?e:Math.exp(e)-1),i={kernelName:n.Elu,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8QcVu":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"leakyRelu",()=>o),s.export(r,"leakyReluConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{alpha:i}=s;(0,a.assertNotComplex)([o],"leakyRelu");let l=(0,n.util).sizeFromShape(o.shape),u=r.data.get(o.dataId).values,p=(0,n.util).getTypedArrayFromDType("float32",l);for(let e=0;e<u.length;e++)p[e]=u[e]<0?i*u[e]:u[e];return r.makeTensorInfo(o.shape,"float32",p)}let i={kernelName:n.LeakyRelu,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9ffE0":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"prelu",()=>l),s.export(r,"preluConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/binary_impl");let i=(0,o.createSimpleBinaryKernelImpl)((e,t)=>e<0?t*e:e);function l(e){let{inputs:t,backend:r}=e,{x:s,alpha:n}=t;(0,a.assertNotComplex)([s,n],"prelu");let o=r.data.get(s.dataId).values,l=r.data.get(n.dataId).values,[u,p]=i(s.shape,n.shape,o,l,"float32");return r.makeTensorInfo(p,"float32",u)}let u={kernelName:n.Prelu,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/binary_impl":"6Mf5d","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3lSQI":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu",()=>o),s.export(r,"reluConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Relu,e=>Math.max(0,e)),i={kernelName:n.Relu,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gKHjC:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"relu6",()=>o),s.export(r,"relu6Config",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Relu6,e=>Math.min(Math.max(0,e),6)),i={kernelName:n.Relu6,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eetO2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchMatMul",()=>i),s.export(r,"batchMatMulConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape");function i(e){let{inputs:t,backend:r,attrs:s}=e,{a:i,b:l}=t,{transposeA:u,transposeB:p}=s;(0,a.assertNotComplex)([i,l],"matMul");let c=i.shape.length,d=l.shape.length,h=u?i.shape[c-2]:i.shape[c-1],f=p?l.shape[d-1]:l.shape[d-2],m=u?i.shape[c-1]:i.shape[c-2],g=p?l.shape[d-2]:l.shape[d-1],x=i.shape.slice(0,-2),b=l.shape.slice(0,-2),y=(0,n.util).sizeFromShape(x),j=(0,n.util).sizeFromShape(b),_=(0,n.broadcast_util).assertAndGetBroadcastShape(i.shape.slice(0,-2),l.shape.slice(0,-2)),k=_.concat([m,g]);(0,n.util).assert(h===f,()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${i.shape} and ${l.shape} and transposeA=${u} and transposeB=${p} must match.`);let I=u?[y,h,m]:[y,m,h],w=p?[j,g,f]:[j,f,g],C=(0,o.reshape)({inputs:{x:i},backend:r,attrs:{shape:I}}),S=(0,o.reshape)({inputs:{x:l},backend:r,attrs:{shape:w}}),T=u?C.shape[1]:C.shape[2],N=u?C.shape[2]:C.shape[1],E=p?S.shape[1]:S.shape[2],F=Math.max(y,j),A=r.data.get(C.dataId).values,R=r.data.get(S.dataId).values,D=(0,n.util).computeStrides(C.shape),$=(0,n.util).computeStrides(S.shape),[P,z,M]=u?[D[0],1,D[1]]:[D[0],D[1],1],[O,L,B]=p?[1,$[1],$[0]]:[$[1],1,$[0]],U=N*E,V=(0,n.buffer)([F,N,E],C.dtype),G=V.values,W=r.blockSize;for(let e=0;e<F;e++)for(let t=0;t<N;t+=W)for(let r=0;r<E;r+=W)for(let s=0;s<T;s+=W){// for when blockSize doesn't evenly divide the input
let n=Math.min(t+W,N),a=Math.min(r+W,E),o=Math.min(s+W,T);for(let i=t;i<n;i++)for(let t=r;t<a;t++){let r=0;for(let n=s;n<o;n++){let s=Math.min(e,y-1)*P,a=Math.min(e,j-1)*B,o=A[s+i*z+n*M],l=R[n*O+t*L+a];r+=o*l}G[e*U+(i*E+t)]+=r}}// set correct shape on output.
return r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(S),r.makeTensorInfo(k,V.dtype,V.values)}let l={kernelName:n.BatchMatMul,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ii0XS:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reshape",()=>a),s.export(r,"reshapeConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r,attrs:s}=e,{x:a}=t,{shape:o}=s,i=(0,n.util).sizeFromShape(a.shape),l=(0,n.util).inferFromImplicitShape(o,i),u=(0,n.util).sizeFromShape(l);(0,n.util).assert(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),r.incRef(a.dataId);let p=r.data.get(a.dataId);if(null!=p.complexTensorInfos){let e=p.complexTensorInfos.real,t=p.complexTensorInfos.imag;e.shape=l,t.shape=l}return{dataId:a.dataId,shape:l,dtype:a.dtype}}let o={kernelName:n.Reshape,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k21bt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acos",()=>o),s.export(r,"acosConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Acos,e=>Math.acos(e)),i={kernelName:n.Acos,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gGfuF:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"acosh",()=>o),s.export(r,"acoshConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Acosh,e=>Math.acosh(e)),i={kernelName:n.Acosh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8dZdv":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"addN",()=>o),s.export(r,"addNConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r}=e;(0,a.assertNotComplex)(t,"addN");let s=t.map(e=>r.data.get(e.dataId).values),o=(0,n.buffer)(t[0].shape,t[0].dtype),i=o.values;for(let e=0;e<t.length;e++){let t=s[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return r.makeTensorInfo(o.shape,o.dtype,o.values)}let i={kernelName:n.AddN,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g6aj2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"all",()=>l),s.export(r,"allConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape"),i=e("./Transpose");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{axis:u,keepDims:p}=s;(0,a.assertNotComplex)(l,"all");let c=(0,n.util).parseAxisParam(u,l.shape),d=c,h=(0,n.backend_util).getAxesPermutation(d,l.shape.length),f=l;null!=h&&(f=(0,i.transpose)({inputs:{x:l},backend:r,attrs:{perm:h}}),d=(0,n.backend_util).getInnerMostAxes(d.length,l.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("all",d,f.shape.length);let[m,g]=(0,n.backend_util).computeOutAndReduceShapes(f.shape,d),x=(0,n.util).sizeFromShape(g),b=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(m),f.dtype),y=r.data.get(f.dataId).values;for(let e=0;e<b.length;++e){let t=e*x,r=y[t];for(let e=0;e<x;++e){let s=y[t+e];r=r&&s}b[e]=r}null!=h&&r.disposeIntermediateTensorInfo(f);let j=r.makeTensorInfo(m,f.dtype,b);if(p){let e=(0,n.backend_util).expandShapeToKeepDim(m,c),t=(0,o.reshape)({inputs:{x:j},backend:r,attrs:{shape:e}});return r.disposeIntermediateTensorInfo(j),t}return j}let u={kernelName:n.All,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3dHW9":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"any",()=>l),s.export(r,"anyConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape"),i=e("./Transpose");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{axis:u,keepDims:p}=s;(0,a.assertNotComplex)(l,"any");let c=(0,n.util).parseAxisParam(u,l.shape),d=c,h=(0,n.backend_util).getAxesPermutation(d,l.shape.length),f=l;null!=h&&(f=(0,i.transpose)({inputs:{x:l},backend:r,attrs:{perm:h}}),d=(0,n.backend_util).getInnerMostAxes(d.length,l.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("any",d,f.shape.length);let[m,g]=(0,n.backend_util).computeOutAndReduceShapes(f.shape,d),x=(0,n.util).sizeFromShape(g),b=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(m),f.dtype),y=r.data.get(f.dataId).values;for(let e=0;e<b.length;++e){let t=e*x,r=y[t];for(let e=0;e<x;++e){let s=y[t+e];r=r||s}b[e]=r}null!=h&&r.disposeIntermediateTensorInfo(f);let j=r.makeTensorInfo(m,f.dtype,b);if(p){let e=(0,n.backend_util).expandShapeToKeepDim(m,c),t=(0,o.reshape)({inputs:{x:j},backend:r,attrs:{shape:e}});return r.disposeIntermediateTensorInfo(j),t}return j}let u={kernelName:n.Any,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lRYEQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMax",()=>i),s.export(r,"argMaxConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l}=s;(0,a.assertNotComplex)(i,"argMax");let u=(0,n.util).parseAxisParam(l,i.shape),p=(0,n.backend_util).getAxesPermutation(u,i.shape.length),c=i,d=[];null!=p&&(d.push(c=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:p}})),u=(0,n.backend_util).getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],(0,n.backend_util).assertAxesAreInnerMostDims("argMax",u,c.shape.length);let[h,f]=(0,n.backend_util).computeOutAndReduceShapes(c.shape,u),m=(0,n.util).sizeFromShape(h),g=(0,n.util).makeZerosTypedArray(m,"int32"),x=(0,n.util).sizeFromShape(f),b=r.data.get(c.dataId).values;for(let e=0;e<g.length;++e){let t=e*x,r=b[t],s=0;for(let e=0;e<x;++e){let n=b[t+e];n>r&&(r=n,s=e)}g[e]=s}return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(h,"int32",g)}let l={kernelName:n.ArgMax,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eftxf:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"argMin",()=>i),s.export(r,"argMinConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l}=s;(0,a.assertNotComplex)(i,"argMin");let u=(0,n.util).parseAxisParam(l,i.shape),p=(0,n.backend_util).getAxesPermutation(u,i.shape.length),c=i,d=[];null!=p&&(d.push(c=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:p}})),u=(0,n.backend_util).getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],(0,n.backend_util).assertAxesAreInnerMostDims("argMin",u,c.shape.length);let[h,f]=(0,n.backend_util).computeOutAndReduceShapes(c.shape,u),m=(0,n.util).sizeFromShape(h),g=(0,n.util).makeZerosTypedArray(m,"int32"),x=(0,n.util).sizeFromShape(f),b=r.data.get(c.dataId).values;for(let e=0;e<g.length;++e){let t=e*x,r=b[t],s=0;for(let e=0;e<x;++e){let n=b[t+e];n<r&&(r=n,s=e)}g[e]=s}return d.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(h,"int32",g)}let l={kernelName:n.ArgMin,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],launj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asin",()=>o),s.export(r,"asinConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Asin,e=>Math.asin(e)),i={kernelName:n.Asin,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eJNIv:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"asinh",()=>o),s.export(r,"asinhConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Asinh,e=>Math.asinh(e)),i={kernelName:n.Asinh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"53F2E":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan",()=>o),s.export(r,"atanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Atan,e=>Math.atan(e)),i={kernelName:n.Atan,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],akykq:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atan2Impl",()=>i),s.export(r,"atan2",()=>l),s.export(r,"atan2Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>Math.atan2(e,t)),l=(0,o.binaryKernelFunc)(n.Atan2,i),u={kernelName:n.Atan2,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jVUty:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"atanh",()=>o),s.export(r,"atanhConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Atanh,e=>Math.atanh(e)),i={kernelName:n.Atanh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dHHla:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool",()=>l),s.export(r,"avgPoolConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils"),i=e("./Identity");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r;(0,a.assertNotComplex)(u,"avgPool");let{filterSize:p,strides:c,pad:d,dimRoundingMode:h}=l;(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(c,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);let f=(0,n.backend_util).computePool2DInfo(u.shape,p,c,1,d,h);if(1===f.filterWidth&&1===f.filterHeight&&(0,n.util).arraysEqual(f.inShape,f.outShape))t=(0,i.identity)({inputs:{x:u},backend:s});else{let e=s.data.get(u.dataId).values,r=(0,n.util).computeStrides(u.shape),a=(0,o.pool)(e,u.shape,u.dtype,r,f,"avg");t=s.makeTensorInfo(f.outShape,u.dtype,a.values)}return t}let u={kernelName:n.AvgPool,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","./Identity":"5buXK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1ODwb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pool",()=>a),s.export(r,"maxPoolPositions",()=>o),s.export(r,"pool3d",()=>i),s.export(r,"maxPool3dPositions",()=>l);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o){let i=a.strideHeight,l=a.strideWidth,u=a.dilationHeight,p=a.dilationWidth,c=a.effectiveFilterHeight,d=a.effectiveFilterWidth,h=a.padInfo.top,f=a.padInfo.left,m="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,n.buffer)(a.outShape,r),x=g.values,b=a.outShape[1]*a.outShape[2]*a.outShape[3],y=a.outShape[2]*a.outShape[3],j=a.outShape[3];for(let t=0;t<a.batchSize;++t){let r=t*b,n=t*s[0];for(let t=0;t<a.inChannels;++t)for(let g=0;g<a.outHeight;++g){let b=g*i-h,_=Math.max(0,b),k=Math.min(a.inHeight,c+b),I=r+g*y;for(let r=0;r<a.outWidth;++r){let i=r*l-f,c=Math.max(0,i),h=Math.min(a.inWidth,d+i),g=m,b=0,y=0;for(let r=_;r<k;r+=u){let a=n+r*s[1];for(let r=c;r<h;r+=p){let n=a+r*s[2],i=e[n+t];"max"===o&&i>g?g=i:"avg"===o&&(b+=i,y++)}if(isNaN(g))break}let w=I+r*j+t;x[w]="avg"===o?b/y:g}}}return g}function o(e,t,r,s,a=!1,o=!1){let i=(0,n.buffer)(s.outShape,"int32"),l=s.strideHeight,u=s.strideWidth,p=s.dilationHeight,c=s.dilationWidth,d=s.effectiveFilterHeight,h=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,g=(0,n.buffer)(t,r,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let r=0;r<s.outHeight;++r){let n=r*l-f,x=n;for(;x<0;)x+=p;// const xRMin = Math.max(0, xRCorner);
let b=Math.min(s.inHeight,d+n);for(let l=0;l<s.outWidth;++l){let d=l*u-m,f=d;for(;f<0;)f+=c;let y=Math.min(s.inWidth,h+d),j=Number.NEGATIVE_INFINITY,_=-1;for(let r=x;r<b;r+=p){let i=r-n;for(let n=f;n<y;n+=c){let l=n-d,u=g.get(e,r,n,t);u>j&&(j=u,_=a?o?((e*s.inHeight+r)*s.inWidth+n)*s.inChannels+t:(r*s.inWidth+n)*s.inChannels+t:i*h+l)}}i.set(_,e,r,l,t)}}return i}function i(e,t,r,s,a,o){let i=a.strideDepth,l=a.strideHeight,u=a.strideWidth,p=a.dilationDepth,c=a.dilationHeight,d=a.dilationWidth,h=a.effectiveFilterDepth,f=a.effectiveFilterHeight,m=a.effectiveFilterWidth,g=a.padInfo.front,x=a.padInfo.top,b=a.padInfo.left,y="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,j=(0,n.buffer)(a.outShape,r),_=j.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[2]*a.outShape[3]*a.outShape[4],w=a.outShape[3]*a.outShape[4],C=a.outShape[4];for(let t=0;t<a.batchSize;++t){let r=t*k,n=t*s[0];for(let t=0;t<a.inChannels;++t)for(let j=0;j<a.outDepth;++j){let k=j*i-g,S=k;for(;S<0;)S+=p;let T=Math.min(a.inDepth,h+k),N=r+j*I;for(let r=0;r<a.outHeight;++r){let i=r*l-x,h=i;for(;h<0;)h+=c;let g=Math.min(a.inHeight,f+i),j=N+r*w;for(let r=0;r<a.outWidth;++r){let i=r*u-b,l=i;for(;l<0;)l+=d;let f=Math.min(a.inWidth,m+i),x=j+r*C,k=y,I=0,w=0;for(let r=S;r<T;r+=p){let a=n+r*s[1];for(let r=h;r<g;r+=c){let n=a+r*s[2];for(let r=l;r<f;r+=d){let a=n+r*s[3],i=e[a+t];if("max"===o&&i>k?k=i:"avg"===o&&(I+=i,w++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}let N=x+t;_[N]="avg"===o?I/w:k}}}}return j}function l(e,t){let r=(0,n.buffer)(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,p=t.effectiveFilterDepth,c=t.effectiveFilterHeight,d=t.effectiveFilterWidth,h=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let n=0;n<t.batchSize;++n)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){let b=x*s-h,y=b;for(;y<0;)y+=i;let j=Math.min(t.inDepth,p+b);for(let s=0;s<t.outHeight;++s){let p=s*a-f,h=p;for(;h<0;)h+=l;let _=Math.min(t.inHeight,c+p);for(let a=0;a<t.outWidth;++a){let f=a*o-m,k=f;for(;k<0;)k+=u;let I=Math.min(t.inWidth,d+f),w=Number.NEGATIVE_INFINITY,C=-1;for(let t=y;t<j;t+=i){let r=t-b;for(let s=h;s<_;s+=l){let a=s-p;for(let o=k;o<I;o+=u){let i=o-f,l=e.get(n,t,s,o,g);l>=w&&(w=l,C=r*c*d+a*c+i)}}}r.set(C,n,x,s,a,g)}}}return r}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2EGph":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3D",()=>i),s.export(r,"avgPool3DConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{filterSize:l,strides:u,pad:p,dimRoundingMode:c,dataFormat:d}=s;(0,a.assertNotComplex)(i,"avgPool3d");let h=(0,n.backend_util).computePool3DInfo(i.shape,l,u,1/* dilations */,p,c,d),f=r.data.get(i.dataId).values,m=(0,o.pool3d)(f,i.shape,i.dtype,(0,n.util).computeStrides(i.shape),h,"avg");return r.makeTensorInfo(m.shape,"float32",m.values)}let l={kernelName:n.AvgPool3D,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lLZO6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPool3DGrad",()=>o),s.export(r,"avgPool3DGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,input:i}=t,{filterSize:l,strides:u,pad:p,dimRoundingMode:c}=s;(0,a.assertNotComplex)([o,i],"avgPool3DGrad");let d=(0,n.backend_util).computePool3DInfo(i.shape,l,u,1/* dilations */,p,c),h=d.strideDepth,f=d.strideHeight,m=d.strideWidth,g=d.filterDepth,x=d.filterHeight,b=d.filterWidth,y=d.dilationDepth,j=d.dilationHeight,_=d.dilationWidth,k=d.effectiveFilterDepth,I=d.effectiveFilterHeight,w=d.effectiveFilterWidth,C=k-1-d.padInfo.front,S=w-1-d.padInfo.left,T=I-1-d.padInfo.top,N=(0,n.buffer)(i.shape,"float32"),E=1/(g*x*b),F=r.bufferSync(o);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let r=0;r<d.inDepth;++r)for(let s=0;s<d.inHeight;++s)for(let n=0;n<d.inWidth;++n){// Shader code begins.
let a=r-C,o=s-T,i=n-S,l=0;for(let r=0;r<k;r+=y){let s=(a+r)/h;if(!(s<0)&&!(s>=d.outDepth)&&Math.floor(s)===s)for(let r=0;r<I;r+=j){let n=(o+r)/f;if(!(n<0)&&!(n>=d.outHeight)&&Math.floor(n)===n)for(let r=0;r<w;r+=_){let a=(i+r)/m;if(a<0||a>=d.outWidth||Math.floor(a)!==a)continue;let o=F.get(e,s,n,a,t);l+=o}}}N.set(l*E,e,r,s,n,t)}return r.makeTensorInfo(N.shape,N.dtype,N.values)}let i={kernelName:n.AvgPool3DGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7iV62":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"avgPoolGrad",()=>o),s.export(r,"avgPoolGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,input:i}=t;(0,a.assertNotComplex)([o,i],"avgPoolGrad");let{filterSize:l,strides:u,pad:p}=s,c=(0,n.backend_util).computePool2DInfo(i.shape,l,u,1/* dilations */,p),d=c.strideHeight,h=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterHeight,y=c.effectiveFilterWidth,j=y-1-c.padInfo.left,_=b-1-c.padInfo.top,k=(0,n.buffer)(i.shape,"float32"),I=1/(f*m),w=r.data.get(o.dataId).values,C=(0,n.buffer)(o.shape,"float32",w);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){// Shader code begins.
let n=r-_,a=s-j,o=0;for(let r=0;r<b;r+=g){let s=(n+r)/d;if(!(s<0)&&!(s>=c.outHeight)&&Math.floor(s)===s)for(let r=0;r<y;r+=x){let n=(a+r)/h;if(n<0||n>=c.outWidth||Math.floor(n)!==n)continue;let i=C.get(e,s,n,t);o+=i}}k.set(o*I,e,r,s,t)}return r.makeTensorInfo(k.shape,k.dtype,k.values)}let i={kernelName:n.AvgPoolGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gTgtk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchNorm",()=>o),s.export(r,"batchNormConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,scale:i,offset:l,mean:u,variance:p}=t;(0,n.util).assert(u.shape.length===p.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),(0,n.util).assert(null==l||u.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),(0,n.util).assert(null==i||u.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),(0,a.assertNotComplex)([o,u,p,i,l],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);let d=r.data.get(o.dataId).values,h=r.data.get(u.dataId).values,f=r.data.get(p.dataId).values,m=i?r.data.get(i.dataId).values:new Float32Array([1]),g=l?r.data.get(l.dataId).values:new Float32Array([0]),x=new Float32Array(d.length),b=g.length,y=m.length,j=f.length,_=h.length,k=0,I=0,w=0,C=0;for(let e=0;e<d.length;++e)x[e]=g[k++]+(d[e]-h[I++])*m[w++]/Math.sqrt(f[C++]+c),k>=b&&(k=0),I>=_&&(I=0),w>=y&&(w=0),C>=j&&(C=0);return r.makeTensorInfo(o.shape,o.dtype,x)}let i={kernelName:n.FusedBatchNorm,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i67bE:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"batchToSpaceND",()=>u),s.export(r,"batchToSpaceNDConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape"),i=e("./Slice"),l=e("./Transpose");function u(e){let{inputs:t,backend:r,attrs:s}=e,{x:u}=t,{blockShape:p,crops:c}=s;(0,a.assertNotComplex)([u],"batchToSpaceND");let d=p.reduce((e,t)=>e*t),h=(0,n.backend_util).getReshaped(u.shape,p,d),f=(0,n.backend_util).getPermuted(h.length,p.length),m=(0,n.backend_util).getReshapedPermuted(u.shape,p,d),g=(0,n.backend_util).getSliceBeginCoords(c,p.length),x=(0,n.backend_util).getSliceSize(m,c,p.length),b=(0,o.reshape)({inputs:{x:u},backend:r,attrs:{shape:h}}),y=(0,l.transpose)({inputs:{x:b},backend:r,attrs:{perm:f}}),j=(0,o.reshape)({inputs:{x:y},backend:r,attrs:{shape:m}}),_=(0,i.slice)({inputs:{x:j},backend:r,attrs:{begin:g,size:x}});return r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(j),_}let p={kernelName:n.BatchToSpaceND,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","./Slice":"54KMc","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eVNVz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"bincount",()=>o),s.export(r,"bincountConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Bincount_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,weights:o}=t,{size:i}=s,l=r.data.get(n.dataId).values,u=r.data.get(o.dataId).values,p=(0,a.bincountImpl)(l,u,o.dtype,o.shape,i);return r.makeTensorInfo([i],o.dtype,p)}let i={kernelName:n.Bincount,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Bincount_impl":"3vCwX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2ruEs":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"broadcastArgs",()=>a),s.export(r,"broadcastArgsConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{s0:s,s1:a}=t,o=r.data.get(s.dataId).values,i=r.data.get(a.dataId).values,l=(0,n.backend_util).assertAndGetBroadcastShape(Array.from(o),Array.from(i));return r.makeTensorInfo([l.length],"int32",Int32Array.from(l))}let o={kernelName:n.BroadcastArgs,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eksjX:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"clipByValue",()=>o),s.export(r,"clipByValueConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.ClipByValue,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e),i={kernelName:n.ClipByValue,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dnW9O:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"complexAbs",()=>a),s.export(r,"complexAbsConfig",()=>o);var n=e("@tensorflow/tfjs-core");let a=e=>{let{x:t}=e.inputs,r=e.backend,s=new Float32Array((0,n.util).sizeFromShape(t.shape)),a=r.data.get(t.dataId),o=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,l=r.data.get(o.dataId).values,u=r.data.get(i.dataId).values;for(let e=0;e<l.length;e++){let t=l[e],r=u[e];s[e]=Math.hypot(t,r)}return r.makeOutput(s,t.shape,"float32")},o={kernelName:n.ComplexAbs,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eYOqa:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"concat",()=>c),s.export(r,"concatConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("./Complex"),o=e("./Concat_impl"),i=e("./Identity"),l=e("./Imag"),u=e("./Real"),p=e("./Reshape");function c(e){let{inputs:t,backend:r,attrs:s}=e,{axis:d}=s,h=(0,n.util).parseAxisParam(d,t[0].shape)[0],f=t.map(e=>e.shape);(0,n.backend_util).assertParamsConsistent(f,h);let m=(0,n.backend_util).computeOutShape(t.map(e=>e.shape),h);if(0===(0,n.util).sizeFromShape(m))return r.makeTensorInfo(m,t[0].dtype,[]);// Keep only non-empty tensors (ignore tensors with 0 in their shape).
let g=t.filter(e=>(0,n.util).sizeFromShape(e.shape)>0);if(1===g.length)return(0,i.identity)({inputs:{x:g[0]},backend:r});if("complex64"===g[0].dtype){let e=g.map(e=>(0,u.real)({inputs:{input:e},backend:r})),t=g.map(e=>(0,l.imag)({inputs:{input:e},backend:r})),s=c({inputs:e,backend:r,attrs:{axis:h}}),n=c({inputs:t,backend:r,attrs:{axis:h}}),o=(0,a.complex)({inputs:{real:s,imag:n},backend:r});return e.forEach(e=>r.disposeIntermediateTensorInfo(e)),t.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(n),o}// Any concat of n-dimensional tensors across any axis can be reduced to
// a concatenation of two-dimensional tensors across the axis 1 by first
// partitioning the axes of the original tensors into those less than the
// axis to be concatenated and the rest. Then reshape the tensors
// into a two-dimensional tensor by collapsing these two sets of axes and
// concatenate the resulting matrices across the axis 1, finally reshaping
// the result to have the proper shape.
let x=g.map(e=>{let t=(0,n.util).sizeFromShape(e.shape.slice(h));return(0,p.reshape)({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}),b=x.map(e=>({vals:r.data.get(e.dataId).values,shape:e.shape}));// Concats 2d tensors along axis=1.
m=(0,n.backend_util).computeOutShape(x.map(e=>e.shape),1/* axis */);let y=1===x[0].shape[0],j=(0,o.concatImpl)(b,m,t[0].dtype,y),_=(0,n.backend_util).computeOutShape(g.map(e=>e.shape),h),k=r.makeTensorInfo(_,t[0].dtype,j);return x.forEach(e=>r.disposeIntermediateTensorInfo(e)),k}let d={kernelName:n.Concat,backendName:"cpu",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","./Complex":"1mXNt","./Concat_impl":"k1LJv","./Identity":"5buXK","./Imag":"kiYH5","./Real":"jEtTR","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kiYH5:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"imag",()=>a),s.export(r,"imagConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{input:s}=t,n=r.data.get(s.dataId).complexTensorInfos.imag,a=r.data.get(n.dataId).values;// When complex tensor is disposed, its underlying parts will be disposed too.
// Make new tensor out of the imag value of the complex. This makes sure the
// value is still accessible even if complex tensor is disposed.
return r.makeTensorInfo(n.shape,n.dtype,a)}let o={kernelName:n.Imag,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9a2fk":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2D",()=>o),s.export(r,"conv2DConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,filter:i}=t,{strides:l,pad:u,dataFormat:p,dilations:c,dimRoundingMode:d}=s;(0,a.assertNotComplex)([o,i],"conv2d");let h=(0,n.backend_util).convertConv2DDataFormat(p),f=(0,n.backend_util).computeConv2DInfo(o.shape,i.shape,l,c,u,d,!1,h),m=f.filterHeight,g=f.filterWidth,x=f.dilationHeight,b=f.dilationWidth,y=f.padInfo.left,j=f.padInfo.top,_="channelsLast"===f.dataFormat,k=new n.TensorBuffer(f.outShape,o.dtype),I=(0,n.util).computeStrides(o.shape),w=(0,n.util).computeStrides(i.shape),C=I[0],S=_?I[1]:I[2],T=_?I[2]:1,N=_?1:I[1],E=k.strides[0],F=_?k.strides[1]:k.strides[2],A=_?k.strides[2]:1,R=_?1:k.strides[1],D=r.data.get(o.dataId).values,$=r.data.get(i.dataId).values,P=k.values;for(let e=0;e<f.batchSize;++e){let t=e*C,r=e*E;for(let e=0;e<f.outHeight;++e){let s=r+e*F,n=e*f.strideHeight-j;for(let e=0;e<m;++e){let r=n+e*x;if(r<0||r>=f.inHeight)continue;let a=e*w[0],o=t+r*S;for(let e=0;e<f.outWidth;++e){let t=s+e*A,r=e*f.strideWidth-y;for(let e=0;e<g;++e){let s=r+e*b;if(s<0||s>=f.inWidth)continue;let n=a+e*w[1],i=o+s*T,l=n;for(let e=0;e<f.inChannels;++e){let r=D[i+e*N];for(let e=0;e<f.outChannels;++e)P[t+e*R]+=r*$[l+e];l+=f.outChannels}}}}}}return r.makeTensorInfo(k.shape,k.dtype,P)}let i={kernelName:n.Conv2D,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kVyDK:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropFilter",()=>o),s.export(r,"conv2DBackpropFilterConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,pad:u,dataFormat:p,dimRoundingMode:c,filterShape:d}=s;(0,a.assertNotComplex)([o,i],"conv2dBackpropFilter");let h=(0,n.backend_util).convertConv2DDataFormat(p),f=(0,n.backend_util).computeConv2DInfo(o.shape,d,l,1/* dilations */,u,c,!1,h),{strideHeight:m,strideWidth:g,filterHeight:x,filterWidth:b}=f,y="channelsLast"===f.dataFormat,j=new n.TensorBuffer(f.filterShape,"float32"),_=f.padInfo.left,k=f.padInfo.top,I=r.data.get(o.dataId).values,w=r.data.get(i.dataId).values,C=new n.TensorBuffer(o.shape,o.dtype,I),S=new n.TensorBuffer(i.shape,i.dtype,w);for(let e=0;e<x;++e){let t=Math.max(0,Math.ceil((k-e)/m)),r=Math.min(f.outHeight,(f.inHeight+k-e)/m);for(let s=0;s<b;++s){let n=Math.max(0,Math.ceil((_-s)/g)),a=Math.min(f.outWidth,(f.inWidth+_-s)/g);for(let o=0;o<f.inChannels;++o)for(let i=0;i<f.outChannels;++i){let l=0;for(let u=0;u<f.batchSize;++u)for(let p=t;p<r;++p){let t=e+p*m-k;for(let e=n;e<a;++e){let r=s+e*g-_;y?l+=C.get(u,t,r,o)*S.get(u,p,e,i):l+=C.get(u,o,t,r)*S.get(u,i,p,e)}}j.set(l,e,s,o,i)}}}return r.makeTensorInfo(j.shape,j.dtype,j.values)}let i={kernelName:n.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1ynCM":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv2DBackpropInput",()=>o),s.export(r,"conv2DBackpropInputConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{inputShape:l,strides:u,pad:p,dataFormat:c,dimRoundingMode:d}=s;(0,a.assertNotComplex)([o,i],"conv2dBackpropInput");let h=(0,n.util).computeStrides(i.shape),f=(0,n.util).computeStrides(o.shape),m=(0,n.backend_util).convertConv2DDataFormat(c),g=(0,n.backend_util).computeConv2DInfo(l,i.shape,u,1/* dilations */,p,d,!1,m),x=new n.TensorBuffer(g.inShape,"float32"),b=x.values,y=r.data.get(o.dataId).values,j=r.data.get(i.dataId).values,[_,k,I]=h,{batchSize:w,filterHeight:C,filterWidth:S,inChannels:T,inHeight:N,inWidth:E,outChannels:F,outHeight:A,outWidth:R,strideHeight:D,strideWidth:$}=g;m=g.dataFormat;let P=C-1-g.padInfo.top,z=S-1-g.padInfo.left,M="channelsLast"===m,O=x.strides[0],L=M?x.strides[1]:x.strides[2],B=M?x.strides[2]:1,U=M?1:x.strides[1],V=f[0],G=M?f[1]:f[2],W=M?f[2]:1,q=M?1:f[1];for(let e=0;e<w;++e)for(let t=0;t<T;++t)for(let r=0;r<N;++r){let s=r-P,n=Math.max(0,Math.ceil(s/D)),a=Math.min(A,(C+s)/D);for(let o=0;o<E;++o){let i=o-z,l=Math.max(0,Math.ceil(i/$)),u=Math.min(R,(S+i)/$),p=0;for(let r=n;r<a;++r){let n=r*D-s;for(let s=l;s<u;++s){let a=s*$-i,o=V*e+G*r+W*s,l=_*(C-1-n)+k*(S-1-a)+I*t;for(let e=0;e<F;++e){let t=y[o+q*e],r=j[l+e];p+=t*r}}}let c=O*e+L*r+B*o+U*t;b[c]=p}}return r.makeTensorInfo(x.shape,x.dtype,x.values)}let i={kernelName:n.Conv2DBackpropInput,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1WFUa":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3D",()=>o),s.export(r,"conv3DConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,filter:i}=t,{strides:l,pad:u,dilations:p}=s;(0,a.assertNotComplex)([o,i],"conv3d");let c=(0,n.backend_util).computeConv3DInfo(o.shape,i.shape,l,p,u),{filterDepth:d,filterHeight:h,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:x,padInfo:b}=c,y=b.front,j=b.left,_=b.top,k=new n.TensorBuffer(c.outShape,o.dtype),I=r.data.get(o.dataId).values,w=r.data.get(i.dataId).values,C=k.values,S=(0,n.util).computeStrides(o.shape),T=(0,n.util).computeStrides(i.shape);for(let e=0;e<c.batchSize;++e){let t=e*S[0],r=e*k.strides[0];for(let e=0;e<c.outDepth;++e){let s=r+e*k.strides[1],n=e*c.strideDepth-y;for(let e=0;e<d;++e){let r=n+e*m;if(r<0||r>=c.inDepth)continue;let a=e*T[0],o=t+r*S[1];for(let e=0;e<c.outHeight;++e){let t=s+e*k.strides[2],r=e*c.strideHeight-_;for(let e=0;e<h;++e){let s=r+e*g;if(s<0||s>=c.inHeight)continue;let n=a+e*T[1],i=o+s*S[2];for(let e=0;e<c.outWidth;++e){let r=t+e*c.outChannels,s=e*c.strideWidth-j;for(let e=0;e<f;++e){let t=s+e*x;if(t<0||t>=c.inWidth)continue;let a=n+e*T[2],o=i+t*c.inChannels,l=a;for(let e=0;e<c.inChannels;++e){let t=I[o+e];for(let e=0;e<c.outChannels;++e)C[r+e]+=t*w[l+e];l+=c.outChannels}}}}}}}}return r.makeTensorInfo(k.shape,k.dtype,k.values)}let i={kernelName:n.Conv3D,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fauvU:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropFilterV2",()=>o),s.export(r,"conv3DBackpropFilterV2Config",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,pad:u,filterShape:p}=s;(0,a.assertNotComplex)([o,i],"conv3dBackpropFilterV2");let c=(0,n.util).computeStrides(o.shape),d=(0,n.util).computeStrides(i.shape),h=(0,n.backend_util).computeConv3DInfo(o.shape,p,l,1/* dilations */,u),f=h.strideDepth,m=h.strideHeight,g=h.strideWidth,x=h.filterDepth,b=h.filterHeight,y=h.filterWidth,j=new n.TensorBuffer(h.filterShape,"float32"),_=j.values,[k,I,w,C]=j.strides,S=r.data.get(i.dataId).values,[T,N,E,F]=d,A=r.data.get(o.dataId).values,[R,D,$,P]=c,z=h.padInfo.front,M=h.padInfo.left,O=h.padInfo.top;for(let e=0;e<x;++e){let t=Math.max(0,Math.ceil((z-e)/f)),r=Math.min(h.outDepth,(h.inDepth+z-e)/f),s=e*k;for(let n=0;n<b;++n){let a=Math.max(0,Math.ceil((O-n)/m)),o=Math.min(h.outHeight,(h.inHeight+O-n)/m),i=n*I+s;for(let s=0;s<y;++s){let l=Math.max(0,Math.ceil((M-s)/g)),u=Math.min(h.outWidth,(h.inWidth+M-s)/g),p=s*w+i;for(let i=0;i<h.inChannels;++i){let c=i*C+p;for(let p=0;p<h.outChannels;++p){let d=0;for(let c=0;c<h.batchSize;++c){let h=c*R,x=c*T;for(let c=t;c<r;++c){let t=e+c*f-z,r=t*D+h,b=c*N+x;for(let e=a;e<o;++e){let t=n+e*m-O,a=t*$+r,o=e*E+b;for(let e=l;e<u;++e){let t=s+e*g-M,r=t*P+a,n=e*F+o;d+=A[r+i]*S[n+p]}}}}_[c+p]=d}}}}}return r.makeTensorInfo(j.shape,j.dtype,j.values)}let i={kernelName:n.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cO9nn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"conv3DBackpropInputV2",()=>o),s.export(r,"conv3DBackpropInputV2Config",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{pad:l,strides:u,inputShape:p}=s;(0,a.assertNotComplex)([o],"conv3dBackpropInputV2");let c=(0,n.util).computeStrides(o.shape),d=(0,n.util).computeStrides(i.shape),h=(0,n.backend_util).computeConv3DInfo(p,i.shape,u,1/* dilations */,l),f=new n.TensorBuffer(h.inShape,"float32"),m=f.values,[g,x,b,y]=f.strides,j=r.data.get(o.dataId).values,[_,k,I,w]=c,C=r.data.get(i.dataId).values,[S,T,N,E]=d,{batchSize:F,filterDepth:A,filterHeight:R,filterWidth:D,inChannels:$,inDepth:P,inHeight:z,inWidth:M,outChannels:O,outDepth:L,outHeight:B,outWidth:U,strideDepth:V,strideHeight:G,strideWidth:W}=h,q=A-1-h.padInfo.front,K=R-1-h.padInfo.top,H=D-1-h.padInfo.left;for(let e=0;e<F;++e)for(let t=0;t<$;++t)for(let r=0;r<P;++r){let s=r-q,n=Math.max(0,Math.ceil(s/V)),a=Math.min(L,(A+s)/V);// Rows as per standard 2d matrix notation
for(let o=0;o<z;++o){let i=o-K,l=Math.max(0,Math.ceil(i/G)),u=Math.min(B,(R+i)/G);// Columns as per standard 2d matrix notation
for(let p=0;p<M;++p){let c=p-H,d=Math.max(0,Math.ceil(c/W)),h=Math.min(U,(D+c)/W),f=0;for(let r=n;r<a;++r){let n=r*V-s;for(let s=l;s<u;++s){let a=s*G-i;for(let o=d;o<h;++o){let i=o*W-c,l=_*e+k*r+I*s+w*o,u=S*(A-1-n)+T*(R-1-a)+N*(D-1-i)+E*t;for(let e=0;e<O;++e){let t=j[l+e],r=C[u+e];f+=t*r}}}}m[g*e+x*r+b*o+y*p+t]=f}}}return r.makeTensorInfo(f.shape,f.dtype,f.values)}let i={kernelName:n.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1IeEC":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cos",()=>o),s.export(r,"cosConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Cos,e=>Math.cos(e)),i={kernelName:n.Cos,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],atNTt:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cosh",()=>o),s.export(r,"coshConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Cosh,e=>Math.cosh(e)),i={kernelName:n.Cosh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iGagd:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cropAndResize",()=>a),s.export(r,"cropAndResizeConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r,attrs:s}=e,{image:a,boxes:o,boxInd:i}=t,{cropSize:l,method:u,extrapolationValue:p}=s,[c,d,h,f]=a.shape,m=o.shape[0],[g,x]=l,b=(0,n.buffer)([m,g,x,f],"float32"),y=r.data.get(o.dataId).values,j=r.data.get(i.dataId).values,_=r.data.get(a.dataId).values,k=(0,n.util).computeStrides(a.shape),I=(0,n.util).computeStrides(b.shape);// Reference implementation
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc
for(let e=0;e<m;e++){let t=4*e,r=y[t],s=y[t+1],n=y[t+2],a=y[t+3],o=j[e];if(o>=c)continue;let i=g>1?(n-r)*(d-1)/(g-1):0,l=x>1?(a-s)*(h-1)/(x-1):0;for(let t=0;t<g;t++){let c=g>1?r*(d-1)+t*i:.5*(r+n)*(d-1);if(c<0||c>d-1){for(let r=0;r<x;r++)for(let s=0;s<f;s++){let n=s+r*I[2]+t*I[1]+e*I[0];b.values[n]=p}continue}if("bilinear"===u){let r=Math.floor(c),n=Math.ceil(c),i=c-r;for(let u=0;u<x;u++){let c=x>1?s*(h-1)+u*l:.5*(s+a)*(h-1);if(c<0||c>h-1){for(let r=0;r<f;r++){let s=r+u*I[2]+t*I[1]+e*I[0];b.values[s]=p}continue}let d=Math.floor(c),m=Math.ceil(c),g=c-d;for(let s=0;s<f;s++){let a=s+d*k[2]+r*k[1]+o*k[0],l=_[a];a=s+m*k[2]+r*k[1]+o*k[0];let p=_[a];a=s+d*k[2]+n*k[1]+o*k[0];let c=_[a];a=s+m*k[2]+n*k[1]+o*k[0];let h=_[a],f=l+(p-l)*g,x=c+(h-c)*g;a=s+u*I[2]+t*I[1]+e*I[0],b.values[a]=f+(x-f)*i}}}else for(let r=0;r<x;++r){let n=x>1?s*(h-1)+r*l:.5*(s+a)*(h-1);if(n<0||n>h-1){for(let s=0;s<f;s++){let n=s+r*I[2]+t*I[1]+e*I[0];b.values[n]=p}continue}let i=Math.round(n),u=Math.round(c);for(let s=0;s<f;s++){let n=s+i*k[2]+u*k[1]+o*k[0],a=s+r*I[2]+t*I[1]+e*I[0];b.values[a]=_[n]}}}}return r.makeTensorInfo(b.shape,b.dtype,b.values)}let o={kernelName:n.CropAndResize,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5YQ4j":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumprod",()=>i),s.export(r,"cumprodConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l,exclusive:u,reverse:p}=s;(0,a.assertNotComplex)(i,"cumprod");let c=(0,n.backend_util).getAxesPermutation([l],i.shape.length),d=i;null!=c&&(d=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:c}}));let h=(0,n.backend_util).getInnerMostAxes(1,i.shape.length)[0];if(h!==d.shape.length-1)throw Error(`backend.cumprod in CPU expects an inner-most axis=${d.shape.length-1} but got axis=${h}`);let f=(0,n.upcastType)(d.dtype,"int32"),m=(0,n.util).makeOnesTypedArray((0,n.util).sizeFromShape(d.shape),f),g=r.data.get(d.dataId).values,x=d.shape[d.shape.length-1],b=p?(e,t)=>e+x-t-1:(e,t)=>e+t;for(let e=0;e<g.length;e+=x)for(let t=0;t<x;t++){let r=b(e,t);if(0===t)m[r]=u?1:g[r];else{let s=b(e,t-1);m[r]=u?g[s]*m[s]:g[r]*m[s]}}let y=r.makeTensorInfo(d.shape,f,m);if(null!=c){let e=(0,n.backend_util).getUndoAxesPermutation(c),t=(0,o.transpose)({inputs:{x:y},backend:r,attrs:{perm:e}});return r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(d),t}return y}let l={kernelName:n.Cumprod,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gGOb6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"cumsum",()=>i),s.export(r,"cumsumConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Transpose");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{axis:l,exclusive:u,reverse:p}=s;(0,a.assertNotComplex)(i,"cumsum");let c=(0,n.backend_util).getAxesPermutation([l],i.shape.length),d=i;null!=c&&(d=(0,o.transpose)({inputs:{x:i},backend:r,attrs:{perm:c}}));let h=(0,n.backend_util).getInnerMostAxes(1,i.shape.length)[0];if(h!==d.shape.length-1)throw Error(`backend.cumsum in CPU expects an inner-most axis=${d.shape.length-1} but got axis=${h}`);let f=(0,n.upcastType)(d.dtype,"int32"),m=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(d.shape),f),g=r.data.get(d.dataId).values,x=d.shape[d.shape.length-1],b=p?(e,t)=>e+x-t-1:(e,t)=>e+t;for(let e=0;e<g.length;e+=x)for(let t=0;t<x;t++){let r=b(e,t);if(0===t)m[r]=u?0:g[r];else{let s=b(e,t-1);m[r]=u?g[s]+m[s]:g[r]+m[s]}}let y=r.makeTensorInfo(d.shape,f,m);if(null!=c){let e=(0,n.backend_util).getUndoAxesPermutation(c),t=(0,o.transpose)({inputs:{x:y},backend:r,attrs:{perm:e}});return r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(d),t}return y}let l={kernelName:n.Cumsum,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1krnE":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"denseBincount",()=>o),s.export(r,"denseBincountConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Bincount_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,weights:o}=t,{size:i,binaryOutput:l}=s;if(1===n.shape.length){let e=r.data.get(n.dataId).values,t=r.data.get(o.dataId).values,s=(0,a.bincountImpl)(e,t,o.dtype,o.shape,i);return r.makeTensorInfo([i],o.dtype,s)}if(2===n.shape.length){let e=r.bufferSync(n),t=r.bufferSync(o),s=(0,a.bincountReduceImpl)(e,t,i,l);return r.makeTensorInfo(s.shape,o.dtype,s.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}let i={kernelName:n.DenseBincount,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Bincount_impl":"3vCwX","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iX1Dh:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthToSpace",()=>a),s.export(r,"depthToSpaceConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r,attrs:s}=e,{x:a}=t,{blockSize:o,dataFormat:i}=s;(0,n.util).assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let l=a.shape[0],u=a.shape[1],p=a.shape[2],c=a.shape[3],d=u*o,h=p*o,f=c/(o*o),m=r.data.get(a.dataId).values,g=new Float32Array(l*d*h*f),x=0;for(let e=0;e<l;++e)for(let t=0;t<d;++t){let r=Math.floor(t/o),s=t%o;for(let t=0;t<h;++t){let n=Math.floor(t/o),a=t%o,i=(s*o+a)*f;for(let t=0;t<f;++t){let s=t+i,a=s+c*(n+p*(r+u*e));g[x++]=m[a]}}}return r.makeTensorInfo([l,d,h,f],a.dtype,g)}let o={kernelName:n.DepthToSpace,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gl2lz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNative",()=>o),s.export(r,"depthwiseConv2dNativeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,filter:i}=t,{strides:l,pad:u,dilations:p,dimRoundingMode:c}=s;(0,a.assertNotComplex)([o,i],"depthwiseConv2DNative");let d=(0,n.util).computeStrides(o.shape),h=(0,n.util).computeStrides(i.shape),f=p;null==f&&(f=[1,1]),(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(l,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`);let m=(0,n.backend_util).computeConv2DInfo(o.shape,i.shape,l,f,u,c,!0),{filterHeight:g,filterWidth:x,dilationHeight:b,dilationWidth:y,padInfo:j}=m,_=j.left,k=j.top,I=m.outChannels/m.inChannels,w=new n.TensorBuffer(m.outShape,o.dtype),C=r.data.get(o.dataId).values,S=r.data.get(i.dataId).values,T=w.values;for(let e=0;e<m.batchSize;++e){let t=e*d[0],r=e*w.strides[0];for(let e=0;e<m.outHeight;++e){let s=r+e*w.strides[1],n=e*m.strideHeight-k;for(let e=0;e<g;++e){let r=n+e*b;if(r<0||r>=m.inHeight)continue;let a=e*h[0],o=t+r*d[1];for(let e=0;e<m.outWidth;++e){let t=s+e*w.strides[2],r=e*m.strideWidth-_;for(let e=0;e<x;++e){let s=r+e*y;if(s<0||s>=m.inWidth)continue;let n=a+e*h[1],i=o+s*m.inChannels,l=t,u=n;for(let e=0;e<m.inChannels;++e){let t=C[i+e];for(let e=0;e<I;++e)T[l+e]+=t*S[u+e];l+=I,u+=I}}}}}}return r.makeTensorInfo(w.shape,w.dtype,w.values)}let i={kernelName:n.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9IaDl":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropFilter",()=>o),s.export(r,"depthwiseConv2dNativeBackpropFilterConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,dy:i}=t,{strides:l,dilations:u,pad:p,dimRoundingMode:c,filterShape:d}=s;(0,a.assertNotComplex)([o,i],"depthwiseConv2dNativeBackpropFilter");let h=(0,n.backend_util).computeConv2DInfo(o.shape,d,l,u,p,c,!0),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:x}=h,b=new n.TensorBuffer(h.filterShape,"float32"),y=h.padInfo.left,j=h.padInfo.top,_=h.outChannels/h.inChannels,k=r.data.get(o.dataId).values,I=new n.TensorBuffer(o.shape,o.dtype,k),w=r.data.get(i.dataId).values,C=new n.TensorBuffer(i.shape,i.dtype,w);for(let e=0;e<g;++e){let t=Math.max(0,Math.ceil((j-e)/f)),r=Math.min(h.outHeight,(h.inHeight+j-e)/f);for(let s=0;s<x;++s){let n=Math.max(0,Math.ceil((y-s)/m)),a=Math.min(h.outWidth,(h.inWidth+y-s)/m);for(let o=0;o<h.outChannels;++o){let i=Math.trunc(o/_),l=o%_,u=0;for(let l=0;l<h.batchSize;++l)for(let p=t;p<r;++p){let t=e+p*f-j;for(let e=n;e<a;++e){let r=s+e*m-y;u+=I.get(l,t,r,i)*C.get(l,p,e,o)}}b.set(u,e,s,i,l)}}}return r.makeTensorInfo(b.shape,b.dtype,b.values)}let i={kernelName:n.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dDWvj:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"depthwiseConv2dNativeBackpropInput",()=>o),s.export(r,"depthwiseConv2dNativeBackpropInputConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{dy:o,filter:i}=t,{strides:l,dilations:u,pad:p,dimRoundingMode:c,inputShape:d}=s;(0,a.assertNotComplex)([o,i],"depthwiseConv2DNativeBackpropInput");let h=(0,n.util).computeStrides(o.shape),f=(0,n.util).computeStrides(i.shape),m=(0,n.backend_util).computeConv2DInfo(d,i.shape,l,u,p,c,!0),g=new n.TensorBuffer(m.inShape,"float32"),x=g.values,[b,y,j]=g.strides,_=r.data.get(o.dataId).values,[k,I,w]=h,C=r.data.get(i.dataId).values,[S,T,N]=f,{batchSize:E,filterHeight:F,filterWidth:A,inChannels:R,inHeight:D,inWidth:$,outChannels:P,outHeight:z,outWidth:M,strideHeight:O,strideWidth:L}=m,B=F-1-m.padInfo.top,U=A-1-m.padInfo.left,V=P/R;for(let e=0;e<E;++e)for(let t=0;t<R;++t)for(let r=0;r<D;++r){let s=r-B,n=Math.max(0,Math.ceil(s/O)),a=Math.min(z,(F+s)/O);for(let o=0;o<$;++o){let i=o-U,l=Math.max(0,Math.ceil(i/L)),u=Math.min(M,(A+i)/L),p=0;for(let r=n;r<a;++r){let n=r*O-s;for(let s=l;s<u;++s){let a=s*L-i,o=k*e+I*r+w*s,l=S*(F-1-n)+T*(A-1-a)+N*t;for(let e=0;e<V;++e){let r=t*V+e,s=_[o+r],n=C[l+e];p+=s*n}}}x[b*e+y*r+j*o+t]=p}}return r.makeTensorInfo(g.shape,g.dtype,g.values)}let i={kernelName:n.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7aqbv":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"diag",()=>a),s.export(r,"diagConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,backend:r}=e,{x:s}=t,a=(0,n.util).sizeFromShape(s.shape),o=r.data.get(s.dataId).values,i=(0,n.buffer)([a,a],s.dtype),l=i.values;for(let e=0;e<o.length;e++)l[e*a+e]=o[e];let u=[...s.shape,...s.shape];return r.makeTensorInfo(u,i.dtype,i.values)}let o={kernelName:n.Diag,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eMRaU:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2DConfig",()=>a);var n=e("@tensorflow/tfjs-core");let a={kernelName:n.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:s,filter:a}=e,{strides:o,pad:i,dilations:l}=r,u=t.data.get(s.dataId).values,p=s.shape.length,c=t.data.get(a.dataId).values,d=a.shape.length,{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:j,strideWidth:_,filterHeight:k,filterWidth:I,dilationHeight:w,dilationWidth:C,outShape:S}=(0,n.backend_util).computeDilation2DInfo(s.shape,a.shape,o,i,"NHWC"/* dataFormat */,l),T=(0,n.util).sizeFromShape(S),N=S.length,E=(0,n.util).getArrayFromDType(s.dtype,T);// Upsampling the input by fill in `dilation size - 1` values between each
// input value.
// This implementation follows the TF c++ implementation:
// https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
for(let e=0;e<h;++e)for(let t=0;t<x;++t){let r=t*j-y.top;for(let o=0;o<b;++o){let i=o*_-y.left;for(let l=0;l<g;++l){let h=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){let o=r+t*w;if(o>=0&&o<f)for(let r=0;r<I;++r){let f=i+r*C;if(f>=0&&f<m){let i=(0,n.util).locToIndex([e,o,f,l],p,(0,n.util).computeStrides(s.shape)),m=(0,n.util).locToIndex([t,r,l],d,(0,n.util).computeStrides(a.shape)),g=u[i]+c[m];g>h&&(h=g)}}}let g=(0,n.util).locToIndex([e,t,o,l],N,(0,n.util).computeStrides(S));E[g]=h}}}let F=t.write((0,n.util).toTypedArray(E,s.dtype),S,s.dtype);return{dataId:F,shape:S,dtype:s.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e9RM9:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2DBackpropFilterConfig",()=>a);var n=e("@tensorflow/tfjs-core");let a={kernelName:n.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:s,filter:a,dy:o}=e,{strides:i,pad:l,dilations:u}=r,p=(0,n.util).toNestedArray(s.shape,t.data.get(s.dataId).values),c=(0,n.util).toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:d,inHeight:h,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:j,filterHeight:_,filterWidth:k,dilationHeight:I,dilationWidth:w,outShape:C}=(0,n.backend_util).computeDilation2DInfo(s.shape,a.shape,i,l,"NHWC"/* dataFormat */,u);(0,n.util).assert(o.rank===C.length,()=>`Error in ${n.Dilation2DBackpropFilter}, dy must have the same rank as output ${C.length}, but got ${o.rank}`);let S=(0,n.util).toNestedArray(C,t.data.get(o.dataId).values),T=(0,n.util).makeZerosNestedTypedArray(a.shape,a.dtype);// In the case of multiple argmax branches, we only back-propagate along the
// last branch, i.e., the one with largest value of `h * filter_cols + w`,
// similarly to the max-pooling backward routines.
// This implementation follows the TF c++ implementation:
// https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
for(let e=0;e<d;++e)for(let t=0;t<g;++t){let r=t*y-b.top;for(let s=0;s<x;++s){let n=s*j-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<_;++t){let s=r+t*I;if(s>=0&&s<h)for(let r=0;r<k;++r){let u=n+r*w;if(u>=0&&u<f){let n=p[e][s][u][a]+c[t][r][a];n>o&&(o=n,i=t,l=r)}}}T[i][l][a]+=S[e][t][s][a]}}}let N=t.write((0,n.util).toTypedArray(T,s.dtype),a.shape,a.dtype);return{dataId:N,shape:a.shape,dtype:a.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iRHZ4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"dilation2DBackpropInputConfig",()=>a);var n=e("@tensorflow/tfjs-core");let a={kernelName:n.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:s,filter:a,dy:o}=e,{strides:i,pad:l,dilations:u}=r,p=(0,n.util).toNestedArray(s.shape,t.data.get(s.dataId).values),c=(0,n.util).toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:d,inHeight:h,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:j,filterHeight:_,filterWidth:k,dilationHeight:I,dilationWidth:w,outShape:C}=(0,n.backend_util).computeDilation2DInfo(s.shape,a.shape,i,l,"NHWC"/* dataFormat */,u);(0,n.util).assert(o.rank===C.length,()=>`Error in ${n.Dilation2DBackpropInput}, dy must have the same rank as output ${C.length}, but got ${o.rank}`);let S=(0,n.util).toNestedArray(C,t.data.get(o.dataId).values),T=(0,n.util).makeZerosNestedTypedArray(s.shape,s.dtype);// In the case of multiple argmax branches, we only back-propagate along the
// last branch, i.e., the one with largest value of `h * filter_cols + w`,
// similarly to the max-pooling backward routines.
// This implementation follows the TF c++ implementation:
// https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
for(let e=0;e<d;++e)for(let t=0;t<g;++t){let r=t*y-b.top;for(let s=0;s<x;++s){let n=s*j-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=r<0?0:r,l=n<0?0:n;for(let t=0;t<_;++t){let s=r+t*I;if(s>=0&&s<h)for(let r=0;r<k;++r){let u=n+r*w;if(u>=0&&u<f){let n=p[e][s][u][a]+c[t][r][a];n>o&&(o=n,i=s,l=u)}}}T[e][i][l][a]+=S[e][t][s][a]}}}let N=t.write((0,n.util).toTypedArray(T,s.dtype),s.shape,s.dtype);return{dataId:N,shape:s.shape,dtype:s.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],vhvJp:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"einsum",()=>u),s.export(r,"einsumConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./Multiply"),o=e("./Reshape"),i=e("./Sum"),l=e("./Transpose");function u(e){let{inputs:t,backend:r,attrs:s}=e,{equation:u}=s,{allDims:p,summedDims:c,idDims:d}=(0,n.backend_util).decodeEinsumEquation(u,t.length);(0,n.backend_util).checkEinsumDimSizes(p.length,d,t);let{path:h,steps:f}=(0,n.backend_util).getEinsumComputePath(c,d),m=f.length,g=null,x=p.length,b=[];for(let e=0;e<m;++e){for(let s of f[e]){let e;let{permutationIndices:i,expandDims:u}=(0,n.backend_util).getEinsumPermutation(x,d[s]);(0,n.backend_util).isIdentityPermutation(i)?e=t[s]:(e=(0,l.transpose)({inputs:{x:t[s]},backend:r,attrs:{perm:i}}),b.push(e));let p=e.shape.slice();for(let e=0;e<u.length;++e)p.splice(u[e],0,1);(0,n.util).arraysEqual(e.shape,p)||(e=(0,o.reshape)({inputs:{x:e},backend:r,attrs:{shape:p}}),b.push(e)),null===g?g=e:(// tslint:disable-next-line: no-unnecessary-type-assertion
g=(0,a.multiply)({inputs:{a:e,b:g},backend:r}),b.push(g))}e<m-1&&(h[e]>=0&&(g=(0,i.sum)({inputs:{x:g},backend:r,attrs:{axis:h[e]-(p.length-x),keepDims:!1}}),b.push(g)),x--)}// Clean up intermediate tensors.
for(let e of b)e!==g&&r.disposeIntermediateTensorInfo(e);return g}let p={kernelName:n.Einsum,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","./Multiply":"c4iXH","./Reshape":"ii0XS","./Sum":"jQcWO","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jQcWO:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sum",()=>c),s.export(r,"sumConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/zeros_impl"),i=e("./Cast"),l=e("./Identity"),u=e("./Reshape"),p=e("./Transpose");function c(e){let t;let{inputs:r,backend:s,attrs:c}=e,{x:d}=r,{axis:h,keepDims:f}=c;(0,a.assertNotComplex)(d,"sum"),t="bool"===d.dtype?(0,i.cast)({inputs:{x:d},backend:s,attrs:{dtype:"int32"}}):(0,l.identity)({inputs:{x:d},backend:s});let m=t.shape.length,g=(0,n.util).parseAxisParam(h,t.shape),x=(0,n.backend_util).getAxesPermutation(g,m),b=g,y=t;null!=x&&(y=(0,p.transpose)({inputs:{x:t},backend:s,attrs:{perm:x}}),b=(0,n.backend_util).getInnerMostAxes(b.length,m)),(0,n.backend_util).assertAxesAreInnerMostDims("sum",b,y.shape.length);let[j,_]=(0,n.backend_util).computeOutAndReduceShapes(y.shape,b),k=(0,n.backend_util).upcastType(y.dtype,"int32"),I=(0,o.zeros)(s,j,k),w=(0,n.util).sizeFromShape(_),C=s.data.get(I.dataId).values,S=s.data.get(y.dataId).values;for(let e=0;e<C.length;++e){let t=e*w,r=0;for(let e=0;e<w;++e)r+=S[t+e];C[e]=r}if(f){let e=(0,n.backend_util).expandShapeToKeepDim(I.shape,g),t=I;I=(0,u.reshape)({inputs:{x:I},backend:s,attrs:{shape:e}}),s.disposeIntermediateTensorInfo(t)}return s.disposeIntermediateTensorInfo(t),null!=x&&s.disposeIntermediateTensorInfo(y),I}let d={kernelName:n.Sum,backendName:"cpu",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/zeros_impl":"5dKX9","./Cast":"5cInC","./Identity":"5buXK","./Reshape":"ii0XS","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"60V2v":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"eluGrad",()=>o),s.export(r,"eluGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r}=e,{dy:s,y:o}=t;(0,a.assertNotComplex)([s,o],"eluGrad");let i=new Float32Array((0,n.util).sizeFromShape(o.shape)),l=r.data.get(o.dataId).values,u=r.data.get(s.dataId).values;for(let e=0;e<l.length;++e){let t=l[e];t>=1?i[e]=u[e]:i[e]=u[e]*(t+1)}return r.makeTensorInfo(o.shape,"float32",i)}let i={kernelName:n.EluGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eKeL6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"erf",()=>d),s.export(r,"erfConfig",()=>h);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=n.backend_util.ERF_P,i=n.backend_util.ERF_A1,l=n.backend_util.ERF_A2,u=n.backend_util.ERF_A3,p=n.backend_util.ERF_A4,c=n.backend_util.ERF_A5,d=(0,a.unaryKernelFunc)(n.Erf,e=>{let t=Math.sign(e),r=Math.abs(e),s=1/(1+o*r);return t*(1-((((c*s+p)*s+u)*s+l)*s+i)*s*Math.exp(-r*r))}),h={kernelName:n.Erf,backendName:"cpu",kernelFunc:d}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],atyUZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"expandDims",()=>o),s.export(r,"expandDimsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Reshape");function o(e){let{inputs:t,backend:r,attrs:s}=e,{input:o}=t,{dim:i}=s,l=o.shape.length,u=o.shape.slice(),p=i;return i<0&&(// Negative value is counted from the tail of rank.
(0,n.util).assert(-(l+1)<=i,()=>`Axis must be in the interval [${-(l+1)}, ${l}]`),p=l+i+1),u.splice(p,0,1),(0,a.reshape)({inputs:{x:o},backend:r,attrs:{shape:u}})}let i={kernelName:n.ExpandDims,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eIi7l:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fft",()=>i),s.export(r,"fftConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../utils/fft_utils"),o=e("./Reshape");function i(e){let{inputs:t,backend:r}=e,{input:s}=t,i=(0,n.util).sizeFromShape(s.shape),l=s.shape[s.shape.length-1],u=i/l,p=(0,o.reshape)({inputs:{x:s},backend:r,attrs:{shape:[u,l]}}),c=(0,a.fftBatch)(p,!1,r),d=(0,o.reshape)({inputs:{x:c},backend:r,attrs:{shape:s.shape}});return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(c),d}let l={kernelName:n.FFT,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../utils/fft_utils":"kgI7x","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kgI7x:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),/**
 * Calculate FFT of inner most elements of batch tensor.
 */s.export(r,"fftBatch",()=>m),s.export(r,"fftImpl",()=>g);var n=e("@tensorflow/tfjs-core"),a=e("../kernels/Add"),o=e("../kernels/Complex"),i=e("../kernels/Concat"),l=e("../kernels/Identity"),u=e("../kernels/Imag"),p=e("../kernels/Multiply"),c=e("../kernels/Real"),d=e("../kernels/RealDiv"),h=e("../kernels/Slice"),f=e("../kernels/Sub");function m(e,t,r){let s=e.shape,a=s[0],i=s[1],l=r.data.get(e.dataId),u=l.complexTensorInfos.real,p=l.complexTensorInfos.imag,c=[a,i],d=(0,n.util).sizeFromShape(c),f=(0,n.util).getTypedArrayFromDType("float32",d),m=(0,n.util).getTypedArrayFromDType("float32",d);for(let e=0;e<a;e++){// TODO: Support slice ops for complex type.
let s=(0,h.slice)({inputs:{x:u},backend:r,attrs:{begin:[e,0],size:[1,i]}}),a=(0,h.slice)({inputs:{x:p},backend:r,attrs:{begin:[e,0],size:[1,i]}}),l=(0,o.complex)({inputs:{real:s,imag:a},backend:r}),{real:c,imag:d}=g(l,t,r),x=(0,n.backend_util).mergeRealAndImagArrays(c,d);for(let t=0;t<i;t++){let r=(0,n.backend_util).getComplexWithIndex(x,t);f[e*i+t]=r.real,m[e*i+t]=r.imag}r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(l)}let x=r.makeTensorInfo(c,"float32",f),b=r.makeTensorInfo(c,"float32",m),y=(0,o.complex)({inputs:{real:x,imag:b},backend:r});return r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),y}function g(e,t,r){let s=(0,n.util).sizeFromShape(e.shape),h=r.data.get(e.dataId),m=r.data.get(h.complexTensorInfos.real.dataId).values,g=r.data.get(h.complexTensorInfos.imag.dataId).values;if((s&s-1)==0){let h=// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.
function e(t,r,s,l,d){if(1===s)return{real:t,imag:r};let h=(0,n.backend_util).mergeRealAndImagArrays(t,r),m=s/2,g=(0,n.backend_util).complexWithEvenIndex(h),x=g.real,b=g.imag,y=[x.length],j=d.makeTensorInfo(y,"float32",x),_=d.makeTensorInfo(y,"float32",b),k=(0,o.complex)({inputs:{real:j,imag:_},backend:d}),I=(0,n.backend_util).complexWithOddIndex(h),w=I.real,C=I.imag,S=[w.length],T=d.makeTensorInfo(S,"float32",w),N=d.makeTensorInfo(S,"float32",C),E=(0,o.complex)({inputs:{real:T,imag:N},backend:d}),F=e(x,b,m,l,d),A=F.real,R=F.imag,D=[A.length],$=d.makeTensorInfo(D,"float32",A),P=d.makeTensorInfo(D,"float32",R),z=(0,o.complex)({inputs:{real:$,imag:P},backend:d}),M=e(w,C,m,l,d),O=M.real,L=M.imag,B=[O.length],U=d.makeTensorInfo(B,"float32",O),V=d.makeTensorInfo(B,"float32",L),G=(0,o.complex)({inputs:{real:U,imag:V},backend:d}),W=(0,n.backend_util).exponents(s,l),q=[W.real.length],K=d.makeTensorInfo(q,"float32",W.real),H=d.makeTensorInfo(q,"float32",W.imag),X=(0,o.complex)({inputs:{real:K,imag:H},backend:d}),Y=(0,p.multiply)({inputs:{a:X,b:G},backend:d}),Z=(0,a.add)({inputs:{a:z,b:Y},backend:d}),J=(0,f.sub)({inputs:{a:z,b:Y},backend:d}),Q=(0,c.real)({inputs:{input:Z},backend:d}),ee=(0,c.real)({inputs:{input:J},backend:d}),et=(0,u.imag)({inputs:{input:Z},backend:d}),er=(0,u.imag)({inputs:{input:J},backend:d}),es=(0,i.concat)({inputs:[Q,ee],backend:d,attrs:{axis:0}}),en=(0,i.concat)({inputs:[et,er],backend:d,attrs:{axis:0}}),ea=d.data.get(es.dataId).values,eo=d.data.get(en.dataId).values;return d.disposeIntermediateTensorInfo(j),d.disposeIntermediateTensorInfo(_),d.disposeIntermediateTensorInfo(k),d.disposeIntermediateTensorInfo(T),d.disposeIntermediateTensorInfo(N),d.disposeIntermediateTensorInfo(E),d.disposeIntermediateTensorInfo($),d.disposeIntermediateTensorInfo(P),d.disposeIntermediateTensorInfo(z),d.disposeIntermediateTensorInfo(U),d.disposeIntermediateTensorInfo(V),d.disposeIntermediateTensorInfo(G),d.disposeIntermediateTensorInfo(K),d.disposeIntermediateTensorInfo(H),d.disposeIntermediateTensorInfo(X),d.disposeIntermediateTensorInfo(Y),d.disposeIntermediateTensorInfo(Z),d.disposeIntermediateTensorInfo(J),d.disposeIntermediateTensorInfo(Q),d.disposeIntermediateTensorInfo(et),d.disposeIntermediateTensorInfo(ee),d.disposeIntermediateTensorInfo(er),d.disposeIntermediateTensorInfo(es),d.disposeIntermediateTensorInfo(en),{real:ea,imag:eo}}(m,g,s,t,r),x=[e.shape[0],e.shape[1]];if(t){let e=r.makeTensorInfo(x,"float32",h.real),t=r.makeTensorInfo(x,"float32",h.imag),a=r.makeTensorInfo([],"float32",(0,n.util).createScalarValue(s,"float32")),o=(0,l.identity)({inputs:{x:a},backend:r}),i=(0,d.realDivConfig).kernelFunc({inputs:{a:e,b:a},backend:r}),u=(0,d.realDivConfig).kernelFunc({inputs:{a:t,b:o},backend:r}),p=r.data.get(i.dataId).values,c=r.data.get(u.dataId).values;return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(u),{real:p,imag:c}}return h}{let e=(0,n.backend_util).mergeRealAndImagArrays(m,g),r=// Calculate fourier transform by multplying sinusoid matrix.
function(e,t,r){let s=new Float32Array(2*t);// TODO: Use matmul instead once it supports complex64 type.
for(let a=0;a<t;a++){let o=0,i=0;for(let s=0;s<t;s++){let l=(0,n.backend_util).exponent(a*s,t,r),u=(0,n.backend_util).getComplexWithIndex(e,s);o+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}r&&(o/=t,i/=t),(0,n.backend_util).assignToTypedArray(s,o,i,a)}return s}(e,s,t);return(0,n.backend_util).splitRealAndImagArrays(r)}}},{"@tensorflow/tfjs-core":"U1ela","../kernels/Add":"k4i1P","../kernels/Complex":"1mXNt","../kernels/Concat":"eYOqa","../kernels/Identity":"5buXK","../kernels/Imag":"kiYH5","../kernels/Multiply":"c4iXH","../kernels/Real":"jEtTR","../kernels/RealDiv":"kEt2O","../kernels/Slice":"54KMc","../kernels/Sub":"1t4R5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kEt2O:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"realDivImpl",()=>i),s.export(r,"div",()=>l),s.export(r,"realDivConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e/t),l=(0,o.binaryKernelFunc)(n.RealDiv,i),u={kernelName:n.RealDiv,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kABMk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fill",()=>a),s.export(r,"fillConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{backend:t,attrs:r}=e,{shape:s,value:a,dtype:o}=r,i=o||(0,n.util).inferDtype(a),l=(0,n.util).getArrayFromDType(i,(0,n.util).sizeFromShape(s));return function(e,t,r){e.fill(t)}(l,a,0),t.makeTensorInfo(s,i,l)}let o={kernelName:n.Fill,backendName:"cpu",kernelFunc:a}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eRaDb:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"flipLeftRightConfig",()=>a);var n=e("@tensorflow/tfjs-core");let a={kernelName:n.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:s}=e,a=(0,n.util).getTypedArrayFromDType(s.dtype,(0,n.util).sizeFromShape(s.shape)),[o,i,l,u]=s.shape,p=r.data.get(s.dataId).values;for(let e=0;e<o;e++){let t=e*l*i*u;for(let e=0;e<i;e++){let r=e*(l*u);for(let e=0;e<l;e++){let s=e*u;for(let n=0;n<u;n++){let o=Math.round(l-e-1),i=t+r+s+n,c=p[i];// If the coordinate position falls within the image boundaries...
if(o>=0&&o<l){// set the output to the image value at the coordinate position.
let e=o*u,s=t+r+e+n;c=p[s]}a[i]=c}}}}let c=r.write(a,s.shape,s.dtype);return{dataId:c,shape:s.shape,dtype:s.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6JUCA":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"floorDivImpl",()=>i),s.export(r,"floorDiv",()=>l),s.export(r,"floorDivConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>Math.floor(e/t)),l=(0,o.binaryKernelFunc)(n.FloorDiv,i,null,"int32"),u={kernelName:n.FloorDiv,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cTsuN:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fusedConv2D",()=>u),s.export(r,"fusedConv2DConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../utils/fused_utils"),o=e("./Add"),i=e("./Conv2D"),l=e("./Reshape");function u(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,filter:u,bias:p,preluActivationWeights:c}=t,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:g,activation:x,leakyreluAlpha:b}=s,y=(0,i.conv2D)({inputs:{x:n,filter:u},backend:r,attrs:{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:g}});if(p){let e=y;// For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned
// to the channel of the conv2d's result; if the bias is a scalar, the
// bias_add is computed as if the bias was broadcasted to the shape of the
// conv2d's result.
if("NCHW"===f&&1===p.shape.length&&1!==p.shape[0]){let e=(0,l.reshape)({inputs:{x:p},backend:r,attrs:{shape:[p.shape[0],1,1]}});y=(0,o.add)({inputs:{a:y,b:e},backend:r}),r.disposeIntermediateTensorInfo(e)}else // for NCHW (1D case) is handled above.
y=(0,o.add)({inputs:{a:y,b:p},backend:r});r.disposeIntermediateTensorInfo(e)}if(x){let e=y;// For NCHW format, if PReLu activation weights is a 1-D tensor, it is
// supposed to be aligned with the channel of the conv2d's result. For other
// cases, whether NCHW or NHWC data format, the conv2d result is
// already aligned with the activation weights.
if("NCHW"===f&&"prelu"===x&&1===c.shape.length&&1!==c.shape[0]){let e=(0,l.reshape)({inputs:{x:c},backend:r,attrs:{shape:[c.shape[0],1,1]}});y=(0,a.applyActivation)(r,y,x,e,b),r.disposeIntermediateTensorInfo(e)}else y=(0,a.applyActivation)(r,y,x,c,b);r.disposeIntermediateTensorInfo(e)}return y}let p={kernelName:n.FusedConv2D,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../utils/fused_utils":"3tfEV","./Add":"k4i1P","./Conv2D":"9a2fk","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bczSl:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"fusedDepthwiseConv2D",()=>l),s.export(r,"fusedDepthwiseConv2DConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/fused_utils"),o=e("./Add"),i=e("./DepthwiseConv2dNative");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:n,filter:l,bias:u,preluActivationWeights:p}=t,{strides:c,pad:d,dataFormat:h,dilations:f,dimRoundingMode:m,activation:g,leakyreluAlpha:x}=s,b=(0,i.depthwiseConv2dNative)({inputs:{x:n,filter:l},backend:r,attrs:{strides:c,pad:d,dataFormat:h,dilations:f,dimRoundingMode:m}});if(u){let e=b;b=(0,o.add)({inputs:{a:b,b:u},backend:r}),r.disposeIntermediateTensorInfo(e)}if(g){let e=b;b=(0,a.applyActivation)(r,b,g,p,x),r.disposeIntermediateTensorInfo(e)}return b}let u={kernelName:n.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/fused_utils":"3tfEV","./Add":"k4i1P","./DepthwiseConv2dNative":"gl2lz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],at2zP:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherNd",()=>o),s.export(r,"gatherNdConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./GatherNd_Impl");function o(e){let{inputs:t,backend:r}=e,{params:s,indices:o}=t,i=(0,n.util).sizeFromShape(s.shape),l=o.shape,u=l[l.length-1],[p,c,d,h]=(0,n.backend_util).prepareAndValidate(s,o);if(0===c)return r.makeTensorInfo(p,s.dtype,[]);let f=r.data.get(o.dataId).values,m=r.bufferSync(s),g=(0,a.gatherNdImpl)(f,m,s.dtype,c,u,d,h,s.shape,i);return r.makeTensorInfo(p,s.dtype,g.values)}let i={kernelName:n.GatherNd,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./GatherNd_Impl":"hksb1","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hDQmv:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"gatherV2",()=>l),s.export(r,"gatherV2Config",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./GatherV2_impl"),i=e("./Reshape");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l,indices:u}=t,{axis:p,batchDims:c}=s;(0,a.assertNotComplex)([l,u],"gatherV2");// Throw error when any index is out of bound.
let d=(0,n.util).parseAxisParam(p,l.shape)[0],h=r.data.get(u.dataId).values,f=l.shape[d];for(let e=0;e<h.length;++e){let t=h[e];(0,n.util).assert(t<=f-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${f-1}]`)}let m=c;null==c&&(m=0);let g=(0,n.util).sizeFromShape(u.shape),x=(0,n.backend_util).segment_util.collectGatherOpShapeInfo(l,u,d,m),b=(0,i.reshape)({inputs:{x:l},backend:r,attrs:{shape:[x.batchSize,x.outerSize,x.dimSize,x.sliceSize]}}),y=(0,i.reshape)({inputs:{x:u},backend:r,attrs:{shape:[x.batchSize,g/x.batchSize]}}),j=[x.batchSize,x.outerSize,g/x.batchSize,x.sliceSize],_=r.bufferSync(y),k=r.bufferSync(b),I=(0,o.gatherV2Impl)(k,_,j);return r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.makeTensorInfo(x.outputShape,I.dtype,I.values)}let u={kernelName:n.GatherV2,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./GatherV2_impl":"bLQoC","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9rC0A":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"ifft",()=>i),s.export(r,"ifftConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../utils/fft_utils"),o=e("./Reshape");function i(e){let{inputs:t,backend:r}=e,{input:s}=t,i=(0,n.util).sizeFromShape(s.shape),l=s.shape[s.shape.length-1],u=i/l,p=(0,o.reshape)({inputs:{x:s},backend:r,attrs:{shape:[u,l]}}),c=(0,a.fftBatch)(p,!0,r),d=(0,o.reshape)({inputs:{x:c},backend:r,attrs:{shape:s.shape}});return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(c),d}let l={kernelName:n.IFFT,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../utils/fft_utils":"kgI7x","./Reshape":"ii0XS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iKCAk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isFinite",()=>o),s.export(r,"isFiniteConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.IsFinite,e=>Number.isFinite(e)?1:0,"bool"),i={kernelName:n.IsFinite,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gV3sm:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isInf",()=>o),s.export(r,"isInfConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.IsInf,e=>Math.abs(e)===1/0?1:0,"bool"),i={kernelName:n.IsInf,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2sgs8":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"isNaN",()=>o),s.export(r,"isNaNConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.IsNan,e=>Number.isNaN(e)?1:0,"bool"),i={kernelName:n.IsNan,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],k62mz:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"linSpace",()=>o),s.export(r,"linSpaceConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./LinSpace_impl");function o(e){let{backend:t,attrs:r}=e,{start:s,stop:n,num:o}=r,i=(0,a.linSpaceImpl)(s,n,o);return t.makeTensorInfo([i.length],"float32",i)}let i={kernelName:n.LinSpace,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./LinSpace_impl":"gD6ks","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],wO5a2:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"log1p",()=>o),s.export(r,"log1pConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Log1p,e=>Math.log1p(e)),i={kernelName:n.Log1p,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aSoZY:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalAndImpl",()=>i),s.export(r,"logicalAnd",()=>l),s.export(r,"logicalAndConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e&&t),l=(0,o.binaryKernelFunc)(n.LogicalAnd,i,null,"bool"),u={kernelName:n.LogicalAnd,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dmal6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalNot",()=>o),s.export(r,"logicalNotConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.LogicalNot,e=>e?0:1,"bool"),i={kernelName:n.LogicalNot,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3otbj":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"logicalOrImpl",()=>i),s.export(r,"logicalOr",()=>l),s.export(r,"logicalOrConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>e||t),l=(0,o.binaryKernelFunc)(n.LogicalOr,i,null,"bool"),u={kernelName:n.LogicalOr,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iaz0p:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lRN",()=>o),s.export(r,"LRNConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{depthRadius:i,bias:l,alpha:u,beta:p}=s;(0,a.assertNotComplex)(o,"LRN");let c=o.shape[3],d=c-1,h=r.data.get(o.dataId).values,f=(0,n.util).sizeFromShape(o.shape),m=new Float32Array(f);for(let e=0;e<f;e++){let t=function(e){let t=e%c,r=e-t+Math.max(0,t-i),s=e-t+Math.min(t+i,d),n=0;for(;r<=s;r++){let e=h[r];n+=e*e}return n}(e),r=h[e]*Math.pow(l+u*t,-p);m[e]=r}return r.makeTensorInfo(o.shape,o.dtype,m)}let i={kernelName:n.LRN,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eOLg9:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"lRNGrad",()=>o),s.export(r,"LRNGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o,y:i,dy:l}=t,{depthRadius:u,bias:p,alpha:c,beta:d}=s;(0,a.assertNotComplex)(l,"LRNGrad");let h=(0,n.util).sizeFromShape(l.shape),f=l.shape[3],m=r.data.get(l.dataId).values,g=r.data.get(o.dataId).values,x=r.data.get(i.dataId).values,b=new Float32Array(h);for(let e=0;e<h;e++){let t=e%f,r=e-t+Math.max(0,t-u),s=e-t+Math.min(f,t+u+1),n=0;for(let e=r;e<s;e++)n+=Math.pow(g[e],2);n=c*n+p;for(let t=r;t<s;t++){let r=-2*c*d*g[t]*x[e]/n;e===t&&(r+=Math.pow(n,-d)),r*=m[e],b[t]+=r}}return r.makeTensorInfo(l.shape,o.dtype,b)}let i={kernelName:n.LRNGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"32lk6":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"max",()=>l),s.export(r,"maxConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Max_impl"),i=e("./Transpose_impl");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{reductionIndices:u,keepDims:p}=s,c=l.shape,d=c.length,h=(0,n.util).parseAxisParam(u,c),f=h,m=(0,n.backend_util).getAxesPermutation(f,d),g=r.data.get(l.dataId).values;if(null!=m){let e=Array(d);for(let t=0;t<e.length;t++)e[t]=c[m[t]];g=(0,i.transposeImpl)(g,c,l.dtype,m,e),f=(0,n.backend_util).getInnerMostAxes(f.length,d),c=e}(0,a.assertNotComplex)(l,"max"),(0,n.backend_util).assertAxesAreInnerMostDims("max",f,d);let[x,b]=(0,n.backend_util).computeOutAndReduceShapes(c,f),y=(0,n.util).sizeFromShape(b),j=(0,o.maxImpl)(g,y,x,l.dtype),_=r.write(j,x,l.dtype),k=x;if(p){// reshape
let e=(0,n.backend_util).expandShapeToKeepDim(x,h);k=e}return{dataId:_,shape:k,dtype:l.dtype}}let u={kernelName:n.Max,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Max_impl":"bz6kW","./Transpose_impl":"biCwU","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aGuRn:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool",()=>l),s.export(r,"maxPoolConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils"),i=e("./Identity");function l(e){let t;let{inputs:r,backend:s,attrs:l}=e,{x:u}=r;(0,a.assertNotComplex)(u,"maxPool");let{filterSize:p,strides:c,pad:d,dimRoundingMode:h}=l;(0,n.util).assert((0,n.backend_util).eitherStridesOrDilationsAreOne(c,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${c} and dilations '1'`);let f=(0,n.backend_util).computePool2DInfo(u.shape,p,c,1,d,h);if(1===f.filterWidth&&1===f.filterHeight&&(0,n.util).arraysEqual(f.inShape,f.outShape))t=(0,i.identity)({inputs:{x:u},backend:s});else{let e=s.data.get(u.dataId).values,r=(0,n.util).computeStrides(u.shape),a=(0,o.pool)(e,u.shape,u.dtype,r,f,"max");t=s.makeTensorInfo(f.outShape,u.dtype,a.values)}return t}let u={kernelName:n.MaxPool,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","./Identity":"5buXK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7SSTi":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3D",()=>i),s.export(r,"maxPool3DConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{filterSize:l,strides:u,pad:p,dimRoundingMode:c,dataFormat:d}=s;(0,a.assertNotComplex)(i,"maxPool3d");let h=(0,n.backend_util).computePool3DInfo(i.shape,l,u,1/* dilations */,p,c,d),f=r.data.get(i.dataId).values,m=(0,o.pool3d)(f,i.shape,i.dtype,(0,n.util).computeStrides(i.shape),h,"max");return r.makeTensorInfo(m.shape,"float32",m.values)}let l={kernelName:n.MaxPool3D,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],g8GCJ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPool3DGrad",()=>i),s.export(r,"maxPool3DGradConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils");function i(e){let{inputs:t,backend:r,attrs:s}=e,{dy:i,input:l}=t,{filterSize:u,strides:p,pad:c,dimRoundingMode:d}=s;(0,a.assertNotComplex)([i,l],"maxPool3DGrad");let h=(0,n.backend_util).computePool3DInfo(l.shape,u,p,1/* dilations */,c,d),f=r.bufferSync(l),m=(0,o.maxPool3dPositions)(f,h),g=h.strideDepth,x=h.strideHeight,b=h.strideWidth,y=h.dilationDepth,j=h.dilationHeight,_=h.dilationWidth,k=h.effectiveFilterDepth,I=h.effectiveFilterHeight,w=h.effectiveFilterWidth,C=k-1-h.padInfo.front,S=w-1-h.padInfo.left,T=I-1-h.padInfo.top,N=(0,n.buffer)(l.shape,"float32"),E=r.bufferSync(i);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let r=0;r<h.inDepth;++r)for(let s=0;s<h.inHeight;++s)for(let n=0;n<h.inWidth;++n){// Shader code begins
let a=r-C,o=s-T,i=n-S,l=0;for(let r=0;r<k;r+=y){let s=(a+r)/g;if(!(s<0)&&!(s>=h.outDepth)&&Math.floor(s)===s)for(let n=0;n<I;n+=j){let a=(o+n)/x;if(!(a<0)&&!(a>=h.outHeight)&&Math.floor(a)===a)for(let o=0;o<w;o+=_){let u=(i+o)/b;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;let p=k*I*w-1-m.get(e,s,a,u,t),c=r*I*w+n*w+o,d=p===c?1:0;if(0===d)continue;let f=E.get(e,s,a,u,t);l+=f*d}}}N.set(l,e,r,s,n,t)}return r.makeTensorInfo(N.shape,N.dtype,N.values)}let l={kernelName:n.MaxPool3DGrad,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],evq1D:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolGrad",()=>i),s.export(r,"maxPoolGradConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("../utils/pool_utils");function i(e){let{inputs:t,backend:r,attrs:s}=e,{dy:i,input:l,output:u}=t;(0,a.assertNotComplex)([l,u],"maxPoolGrad");let{filterSize:p,strides:c,pad:d,dimRoundingMode:h}=s,f=(0,n.backend_util).computePool2DInfo(l.shape,p,c,1/* dilations */,d,h),m=r.data.get(l.dataId).values,g=(0,n.buffer)(f.outShape,l.dtype,(0,o.maxPoolPositions)(m,l.shape,l.dtype,f).values),x=f.strideHeight,b=f.strideWidth,y=f.dilationHeight,j=f.dilationWidth,_=f.effectiveFilterHeight,k=f.effectiveFilterWidth,I=k-1-f.padInfo.left,w=_-1-f.padInfo.top,C=(0,n.buffer)(l.shape,"float32"),S=r.data.get(i.dataId).values,T=(0,n.buffer)(i.shape,"float32",S);for(let e=0;e<f.batchSize;++e)for(let t=0;t<f.inChannels;++t)for(let r=0;r<f.inHeight;++r)for(let s=0;s<f.inWidth;++s){// Shader code begins.
let n=r-w,a=s-I,o=0;for(let r=0;r<_;r+=y){let s=(n+r)/x;if(!(s<0)&&!(s>=f.outHeight)&&Math.floor(s)===s)for(let n=0;n<k;n+=j){let i=(a+n)/b;if(i<0||i>=f.outWidth||Math.floor(i)!==i)continue;let l=_*k-1-g.get(e,s,i,t),u=r*k+n,p=l===u?1:0;if(0===p)continue;let c=T.get(e,s,i,t);o+=c*p}}C.set(o,e,r,s,t)}return r.makeTensorInfo(C.shape,C.dtype,C.values)}let l={kernelName:n.MaxPoolGrad,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","../utils/pool_utils":"1ODwb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1yM02":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolWithArgmaxConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./MaxPoolWithArgmax_impl");let i={kernelName:n.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:s}=e,{filterSize:i,strides:l,pad:u,includeBatchInIndex:p}=t;(0,a.assertNotComplex)(s,"MaxPoolWithArgmax");let c=r.data.get(s.dataId).values,d=(0,n.backend_util).computePool2DInfo(s.shape,i,l,[1,1],u),[h,f]=(0,o.maxPoolWithArgmaxImpl)(c,s.shape,s.dtype,p,d),m=r.write(h,d.outShape,s.dtype),g=r.write(f,d.outShape,s.dtype);return[{dataId:m,shape:d.outShape,dtype:s.dtype},{dataId:g,shape:d.outShape,dtype:"int32"}]}}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./MaxPoolWithArgmax_impl":"lpT9k","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lpT9k:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"maxPoolWithArgmaxImpl",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("../utils/pool_utils");function o(e,t,r,s,o){let i=(0,n.util).computeStrides(t),l=(0,a.pool)(e,t,r,i,o,"max"),u=(0,a.maxPoolPositions)(e,t,r,o,!0,s);return[l.values,u.values]}},{"@tensorflow/tfjs-core":"U1ela","../utils/pool_utils":"1ODwb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4hSBG":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mean",()=>l),s.export(r,"meanConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("./Cast"),o=e("./RealDiv"),i=e("./Sum");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{axis:u,keepDims:p}=s,c=(0,n.util).parseAxisParam(u,l.shape),d=(0,n.backend_util).computeOutAndReduceShapes(l.shape,c),h=d[1],f=(0,n.util).sizeFromShape(h),m=[],g=r.makeTensorInfo([],"float32",new Float32Array([f]));m.push(g);let x=(0,a.cast)({inputs:{x:l},backend:r,attrs:{dtype:"float32"}});m.push(x);let b=(0,o.div)({inputs:{a:x,b:g},backend:r});m.push(b);let y=(0,i.sum)({inputs:{x:b},backend:r,attrs:{axis:u,keepDims:p}});return m.forEach(e=>r.disposeIntermediateTensorInfo(e)),y}let u={kernelName:n.Mean,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","./Cast":"5cInC","./RealDiv":"kEt2O","./Sum":"jQcWO","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1fXRJ":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"min",()=>l),s.export(r,"minConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape"),i=e("./Transpose");function l(e){let{inputs:t,backend:r,attrs:s}=e,{x:l}=t,{axis:u,keepDims:p}=s;(0,a.assertNotComplex)(l,"min");let c=(0,n.util).parseAxisParam(u,l.shape),d=c,h=(0,n.backend_util).getAxesPermutation(d,l.shape.length),f=l;null!=h&&(f=(0,i.transpose)({inputs:{x:l},backend:r,attrs:{perm:h}}),d=(0,n.backend_util).getInnerMostAxes(d.length,l.shape.length)),(0,n.backend_util).assertAxesAreInnerMostDims("min",d,f.shape.length);let[m,g]=(0,n.backend_util).computeOutAndReduceShapes(f.shape,d),x=(0,n.util).sizeFromShape(g),b=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(m),f.dtype),y=r.data.get(f.dataId).values;for(let e=0;e<b.length;++e){let t=e*x,r=y[t];for(let e=0;e<x;++e){let s=y[t+e];(Number.isNaN(s)||s<r)&&(r=s)}b[e]=r}null!=h&&r.disposeIntermediateTensorInfo(f);let j=r.makeTensorInfo(m,f.dtype,b);if(p){let e=(0,n.backend_util).expandShapeToKeepDim(m,c),t=(0,o.reshape)({inputs:{x:j},backend:r,attrs:{shape:e}});return r.disposeIntermediateTensorInfo(j),t}return j}let u={kernelName:n.Min,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4DW95":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"mirrorPad",()=>o),s.export(r,"mirrorPadConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{paddings:i,mode:l}=s;(0,a.assertNotComplex)(o,"mirrorPad");let u=i.map((e,t)=>e[0]+o.shape[t]+e[1]),p=i.map(e=>e[0]),c=i.map((e,t)=>e[0]+o.shape[t]),d="reflect"===l?0:1,h=r.data.get(o.dataId).values,f=o.shape.length,m=(0,n.util).computeStrides(o.shape),g=(0,n.util).sizeFromShape(u),x=u.length,b=(0,n.util).computeStrides(u),y=(0,n.util).getTypedArrayFromDType(o.dtype,g);for(let e=0;e<g;e++){let t=(0,n.util).indexToLoc(e,x,b);for(let e=0;e<x;e++)t[e]<p[e]?t[e]=2*p[e]-t[e]-d:t[e]>=c[e]&&(t[e]=(c[e]-1)*2-t[e]+d);t=t.map((e,t)=>e-p[t]);let r=(0,n.util).locToIndex(t,f,m);y[e]=h[r]}let j=r.write(y,u,o.dtype);return{dataId:j,shape:u,dtype:o.dtype}}let i={kernelName:n.MirrorPad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c8gLw:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"modImpl",()=>i),s.export(r,"mod",()=>l),s.export(r,"modConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>{let r=e%t;return e<0&&t<0||e>=0&&t>=0?r:(r+t)%t}),l=(0,o.binaryKernelFunc)(n.Mod,i),u={kernelName:n.Mod,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jWrGk:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"multinomial",()=>l),s.export(r,"multinomialConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("seedrandom"),o=e("../cpu_util"),i=e("./Softmax");function l(e){let{inputs:t,backend:r,attrs:s}=e,{logits:l}=t,{numSamples:u,seed:p,normalized:c}=s;(0,o.assertNotComplex)(l,"multinomial");let d=c?l:(0,i.softmax)({inputs:{logits:l},backend:r,attrs:{dim:-1}}),h=d.shape[0],f=d.shape[1],m=r.data.get(d.dataId).values,g=[h,u],x=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(g),"int32");for(let e=0;e<h;++e){let t=e*f,r=new Float32Array(f-1);r[0]=m[t];for(let e=1;e<r.length;++e)r[e]=r[e-1]+m[t+e];let s=a.alea(p.toString()),n=e*u;for(let e=0;e<u;++e){let t=s();// Assume last event happened by default.
x[n+e]=r.length;for(let s=0;s<r.length;s++)if(t<r[s]){x[n+e]=s;break}}}return c||r.disposeIntermediateTensorInfo(d),r.makeTensorInfo(g,"int32",x)}let u={kernelName:n.Multinomial,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela",seedrandom:"lsyFP","../cpu_util":"fliQI","./Softmax":"jQOby","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jQOby:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softmax",()=>c),s.export(r,"softmaxConfig",()=>d);var n=e("@tensorflow/tfjs-core"),a=e("./Exp"),o=e("./Max"),i=e("./RealDiv"),l=e("./Reshape"),u=e("./Sub"),p=e("./Sum");function c(e){let{inputs:t,backend:r,attrs:s}=e,{logits:c}=t,{dim:d}=s,h=c.shape.length,f=d;if(-1===f&&(f=h-1),f!==h-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${h} and dim was ${f}`);let m=(0,n.util).parseAxisParam([f],c.shape),g=(0,o.max)({inputs:{x:c},backend:r,attrs:{reductionIndices:m,keepDims:!1}}),x=(0,n.backend_util).expandShapeToKeepDim(g.shape,m),b=(0,l.reshape)({inputs:{x:g},backend:r,attrs:{shape:x}}),y=(0,u.sub)({inputs:{a:c,b:b},backend:r}),j=(0,a.exp)({inputs:{x:y},backend:r}),_=(0,p.sum)({inputs:{x:j},backend:r,attrs:{axis:m,keepDims:!1}}),k=(0,l.reshape)({inputs:{x:_},backend:r,attrs:{shape:x}}),I=(0,i.div)({inputs:{a:j,b:k},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(k),I}let d={kernelName:n.Softmax,backendName:"cpu",kernelFunc:c}},{"@tensorflow/tfjs-core":"U1ela","./Exp":"cXb51","./Max":"32lk6","./RealDiv":"kEt2O","./Reshape":"ii0XS","./Sub":"1t4R5","./Sum":"jQcWO","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hk6JQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV3",()=>i),s.export(r,"nonMaxSuppressionV3Config",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");let o=n.kernel_impls.nonMaxSuppressionV3Impl;function i(e){let{inputs:t,backend:r,attrs:s}=e,{boxes:n,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p}=s;(0,a.assertNotComplex)(n,"NonMaxSuppression");let c=r.data.get(n.dataId).values,d=r.data.get(i.dataId).values,{selectedIndices:h}=o(c,d,l,u,p);return r.makeTensorInfo([h.length],"int32",new Int32Array(h))}let l={kernelName:n.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"74vgr":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV4",()=>i),s.export(r,"nonMaxSuppressionV4Config",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");let o=n.kernel_impls.nonMaxSuppressionV4Impl;function i(e){let{inputs:t,backend:r,attrs:s}=e,{boxes:n,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p,padToMaxOutputSize:c}=s;(0,a.assertNotComplex)(n,"NonMaxSuppressionPadded");let d=r.data.get(n.dataId).values,h=r.data.get(i.dataId).values,{selectedIndices:f,validOutputs:m}=o(d,h,l,u,p,c);return[r.makeTensorInfo([f.length],"int32",new Int32Array(f)),r.makeTensorInfo([],"int32",new Int32Array([m]))]}let l={kernelName:n.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2x28O":[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"nonMaxSuppressionV5",()=>i),s.export(r,"nonMaxSuppressionV5Config",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");let o=n.kernel_impls.nonMaxSuppressionV5Impl;function i(e){let{inputs:t,backend:r,attrs:s}=e,{boxes:n,scores:i}=t,{maxOutputSize:l,iouThreshold:u,scoreThreshold:p,softNmsSigma:c}=s;(0,a.assertNotComplex)(n,"NonMaxSuppressionWithScore");let d=r.data.get(n.dataId).values,h=r.data.get(i.dataId).values,{selectedIndices:f,selectedScores:m}=o(d,h,l,u,p,c);return[r.makeTensorInfo([f.length],"int32",new Int32Array(f)),r.makeTensorInfo([m.length],"float32",new Float32Array(m))]}let l={kernelName:n.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],j2BwG:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"oneHot",()=>o),s.export(r,"oneHotConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{indices:o}=t,{dtype:i,depth:l,onValue:u,offValue:p}=s;(0,a.assertNotComplex)(o,"oneHot");let c=(0,n.util).sizeFromShape(o.shape),d=new Float32Array(c*l);d.fill(p);let h=r.data.get(o.dataId).values;for(let e=0;e<c;++e)h[e]>=0&&h[e]<l&&(d[e*l+h[e]]=u);return r.makeTensorInfo([...o.shape,l],i,d)}let i={kernelName:n.OneHot,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"32S9P":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"onesLike",()=>p),s.export(r,"onesLikeConfig",()=>c);var n=e("@tensorflow/tfjs-core"),a=e("./Complex"),o=e("./Fill"),i=e("./Imag"),l=e("./Real"),u=e("./ZerosLike");function p(e){let{inputs:t,backend:r}=e,{x:s}=t;if("string"===s.dtype)throw Error("onesLike is not supported for string tensors");if("complex64"!==s.dtype)return(0,o.fill)({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}});{let e=(0,l.real)({inputs:{input:s},backend:r}),t=p({inputs:{x:e},backend:r}),n=(0,i.imag)({inputs:{input:s},backend:r}),o=(0,u.zerosLike)({inputs:{x:n},backend:r}),c=(0,a.complex)({inputs:{real:t,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(o),c}}let c={kernelName:n.OnesLike,backendName:"cpu",kernelFunc:p}},{"@tensorflow/tfjs-core":"U1ela","./Complex":"1mXNt","./Fill":"kABMk","./Imag":"kiYH5","./Real":"jEtTR","./ZerosLike":"02BUu","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"02BUu":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"zerosLike",()=>u),s.export(r,"zerosLikeConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("./Complex"),o=e("./Fill"),i=e("./Imag"),l=e("./Real");function u(e){let{inputs:t,backend:r}=e,{x:s}=t;if("string"===s.dtype)throw Error("zerosLike is not supported for string tensors");if("complex64"!==s.dtype)return(0,o.fill)({backend:r,attrs:{shape:s.shape,value:0,dtype:s.dtype}});{let e=(0,l.real)({inputs:{input:s},backend:r}),t=u({inputs:{x:e},backend:r}),n=(0,i.imag)({inputs:{input:s},backend:r}),o=u({inputs:{x:n},backend:r}),p=(0,a.complex)({inputs:{real:t,imag:o},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(o),p}}let p={kernelName:n.ZerosLike,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","./Complex":"1mXNt","./Fill":"kABMk","./Imag":"kiYH5","./Real":"jEtTR","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aqv4E:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"pack",()=>i),s.export(r,"packConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./Concat"),o=e("./ExpandDims");function i(e){let{inputs:t,backend:r,attrs:s}=e,{axis:i}=s;if(1===t.length)return(0,o.expandDims)({inputs:{input:t[0]},backend:r,attrs:{dim:i}});let l=t[0].shape,u=t[0].dtype;t.forEach(e=>{(0,n.util).assertShapesMatch(l,e.shape,"All tensors passed to stack must have matching shapes"),(0,n.util).assert(u===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let p=[],c=t.map(e=>{let t=(0,o.expandDims)({inputs:{input:e},backend:r,attrs:{dim:i}});return p.push(t),t}),d=(0,a.concat)({inputs:c,backend:r,attrs:{axis:i}});return p.forEach(e=>r.disposeIntermediateTensorInfo(e)),d}let l={kernelName:n.Pack,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","./Concat":"eYOqa","./ExpandDims":"atyUZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l2r3y:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"padV2",()=>o),s.export(r,"padV2Config",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{paddings:i,constantValue:l}=s;(0,a.assertNotComplex)(o,"pad");let u=i.map((e,t)=>e[0]+o.shape[t]+e[1]),p=i.map(e=>e[0]),c=r.data.get(o.dataId).values,d=(0,n.util).sizeFromShape(o.shape),h=o.shape.length,f=(0,n.util).computeStrides(o.shape),m=(0,n.util).sizeFromShape(u),g=u.length,x=(0,n.util).computeStrides(u),b=(0,n.util).getTypedArrayFromDType(o.dtype,m);0!==l&&b.fill(l);for(let e=0;e<d;e++){let t=(0,n.util).indexToLoc(e,h,f),r=t.map((e,t)=>e+p[t]),s=(0,n.util).locToIndex(r,g,x);b[s]=c[e]}let y=r.write(b,u,o.dtype);return{dataId:y,shape:u,dtype:o.dtype}}let i={kernelName:n.PadV2,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],rZHpQ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"powImpl",()=>i),s.export(r,"pow",()=>l),s.export(r,"powConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/binary_impl"),o=e("../utils/binary_utils");let i=(0,a.createSimpleBinaryKernelImpl)((e,t)=>Math.pow(e,t)),l=(0,o.binaryKernelFunc)(n.Pow,i),u={kernelName:n.Pow,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/binary_impl":"6Mf5d","../utils/binary_utils":"cp3P7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4wuU8":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedGather",()=>o),s.export(r,"raggedGatherConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./RaggedGather_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{paramsNestedSplits:n,paramsDenseValues:o,indices:i}=t,{outputRaggedRank:l}=s,u=n.map(e=>r.data.get(e.dataId).values),p=n.map(e=>e.shape),c=r.data.get(o.dataId).values,d=r.data.get(i.dataId).values,[h,f,m]=(0,a.raggedGatherImpl)(u,p,c,o.shape,o.dtype,d,i.shape,l),g=h.map(e=>r.makeTensorInfo([e.length],"int32",e)),x=r.makeTensorInfo(m,o.dtype,f);return g.concat([x])}let i={kernelName:n.RaggedGather,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./RaggedGather_impl":"hO4Vw","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3xBwO":[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"raggedTensorToTensor",()=>o),s.export(r,"raggedTensorToTensorConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./RaggedTensorToTensor_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{shape:n,values:o,defaultValue:i,rowPartitionTensors:l}=t,{rowPartitionTypes:u}=s,p=r.data.get(n.dataId).values,c=r.data.get(o.dataId).values,d=r.data.get(i.dataId).values,h=l.map(e=>r.data.get(e.dataId).values),f=l.map(e=>e.shape),[m,g]=(0,a.raggedTensorToTensorImpl)(p,n.shape,c,o.shape,o.dtype,d,i.shape,h,f,u);return r.makeTensorInfo(m,o.dtype,g)}let i={kernelName:n.RaggedTensorToTensor,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./RaggedTensorToTensor_impl":"11hDB","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9Pba6":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"range",()=>o),s.export(r,"rangeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Range_impl");function o(e){let{backend:t,attrs:r}=e,{start:s,stop:n,dtype:o,step:i}=r,l=(0,a.rangeImpl)(s,n,i,o);return t.makeTensorInfo([l.length],o,l)}let i={kernelName:n.Range,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Range_impl":"5kb3C","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],lHg7w:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reciprocal",()=>o),s.export(r,"reciprocalConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Reciprocal,e=>1/e),i={kernelName:n.Reciprocal,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6TjBz":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinear",()=>o),s.export(r,"resizeBilinearConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:l,size:u}=s;(0,a.assertNotComplex)(o,"resizeBilinear");let p=(0,n.util).computeStrides(o.shape),[c,d]=u,[h,f,m,g]=o.shape,x=r.data.get(o.dataId).values,b=new Float32Array((0,n.util).sizeFromShape([h,c,d,g])),y=[i&&c>1?f-1:f,i&&d>1?m-1:m],j=[i&&c>1?c-1:c,i&&d>1?d-1:d],_=0,k=y[0]/j[0],I=y[1]/j[1];for(let e=0;e<h;e++)for(let t=0;t<c;t++){let r;r=l?k*(t+.5)-.5:k*t;let s=Math.max(0,Math.floor(r)),n=r-s,a=Math.min(f-1,Math.ceil(r)),o=e*p[0]+s*p[1],i=e*p[0]+a*p[1];for(let e=0;e<d;e++){let t;t=l?I*(e+.5)-.5:I*e;let r=Math.max(0,Math.floor(t)),s=t-r,a=Math.min(m-1,Math.ceil(t)),u=o+r*p[2],c=i+r*p[2],d=o+a*p[2],h=i+a*p[2];for(let e=0;e<g;e++){// Begin shader.
// Compute the fractional index of the source.
let t=x[u+e],r=x[c+e],a=x[d+e],o=x[h+e],i=t+(a-t)*s,l=r+(o-r)*s,p=i+(l-i)*n;b[_++]=p}}}return r.makeTensorInfo([h,c,d,g],"float32",b)}let i={kernelName:n.ResizeBilinear,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],f2sPd:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeBilinearGrad",()=>o),s.export(r,"resizeBilinearGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:l}=s;(0,a.assertNotComplex)([i,o],"resizeBilinearGrad");let u=(0,n.util).computeStrides(o.shape),[p,c,d,h]=o.shape,[,f,m]=i.shape,g=new Float32Array(p*c*d*h),x=[l&&f>1?c-1:c,l&&m>1?d-1:d],b=[l&&f>1?f-1:f,l&&m>1?m-1:m],y=x[0]/b[0],j=x[1]/b[1],_=r.data.get(i.dataId).values,k=0;for(let e=0;e<p;e++){let t=e*u[0];for(let e=0;e<f;e++){let r=e*y,s=Math.floor(r),n=Math.min(Math.ceil(r),c-1),a=t+s*u[1],o=t+n*u[1],i=r-s,l=1-i;for(let e=0;e<m;e++){let t=e*j,r=Math.floor(t),s=Math.min(Math.ceil(t),d-1),n=t-r,p=1-n,c=a+r*u[2],f=a+s*u[2],m=o+r*u[2],x=o+s*u[2],b=l*p,y=l*n,I=i*p,w=i*n;for(let e=0;e<h;e++){let t=_[k++];g[c+e]+=t*b,g[f+e]+=t*y,g[m+e]+=t*I,g[x+e]+=t*w}}}}return r.makeTensorInfo([p,d,c,h],"float32",g)}let i={kernelName:n.ResizeBilinearGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gpZ6G:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighbor",()=>o),s.export(r,"resizeNearestNeighborConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:l,size:u}=s;(0,a.assertNotComplex)(o,"resizeNearestNeighbor");let p=(0,n.util).computeStrides(o.shape),[c,d]=u,[h,f,m,g]=o.shape,x=r.data.get(o.dataId).values,b=new Float32Array(h*c*d*g),y=[i&&c>1?f-1:f,i&&d>1?m-1:m],j=[i&&c>1?c-1:c,i&&d>1?d-1:d],_=y[0]/j[0],k=y[1]/j[1],I=0;for(let e=0;e<h;e++){let t=e*p[0];for(let e=0;e<c;e++){let r=l?_*(e+.5):_*e,s=Math.min(f-1,i?Math.round(r):Math.floor(r));l&&(s=Math.max(0,s));let n=t+s*p[1];for(let e=0;e<d;e++){let t=l?k*(e+.5):k*e,r=Math.min(m-1,i?Math.round(t):Math.floor(t));l&&(r=Math.max(0,r));let s=n+r*p[2];for(let e=0;e<g;e++){// Begin shader.
// Compute the fractional index of the source.
let t=x[s+e];b[I++]=t}}}}return r.makeTensorInfo([h,c,d,g],o.dtype,b)}let i={kernelName:n.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gsVzO:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"resizeNearestNeighborGrad",()=>o),s.export(r,"resizeNearestNeighborGradConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:l}=s;(0,a.assertNotComplex)([i,o],"resizeNearestNeighborGrad");let u=(0,n.util).computeStrides(o.shape),p=(0,n.util).computeStrides(i.shape),[c,d,h,f]=o.shape,[,m,g]=i.shape,x=new Float32Array(c*d*h*f),b=r.data.get(i.dataId).values,y=[l&&m>1?d-1:d,l&&g>1?h-1:h],j=[l&&m>1?m-1:m,l&&g>1?g-1:g],_=y[0]/j[0],k=y[1]/j[1],I=1/_,w=1/k,C=2*Math.ceil(I)+2,S=2*Math.ceil(w)+2;// Loop over the output space.
for(let e=0;e<c;e++){let t=e*u[0];for(let e=0;e<d;e++){let r=t+e*u[1],s=Math.floor(e*I),n=Math.floor(s-C/2);for(let s=0;s<h;s++){let a=r+s*u[2],o=Math.floor(s*w),i=Math.floor(o-S/2);for(let r=0;r<f;r++){let o=0;// loop over dy
for(let a=0;a<C;a++){let u=a+n;// Guard against the window exceeding the bounds of dy
if(u<0||u>=m)continue;let c=t+u*p[1],f=u*_,x=Math.min(d-1,l?Math.round(f):Math.floor(f));if(e===x)for(let e=0;e<S;e++){let t=e+i;// Guard against the window exceeding the bounds of dy
if(t<0||t>=g)continue;let n=c+t*p[2],a=t*k,u=Math.min(h-1,l?Math.round(a):Math.floor(a));s===u&&(o+=b[n+r])}}x[a+r]=o}}}}return r.makeTensorInfo(o.shape,o.dtype,x)}let i={kernelName:n.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],evEtu:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"reverse",()=>i),s.export(r,"reverseConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Identity");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:i}=t,{dims:l}=s;(0,a.assertNotComplex)(i,"reverse");let u=i.shape.length,p=(0,n.util).parseAxisParam(l,i.shape);if(0===u)return(0,o.identity)({inputs:{x:i},backend:r});let c=new n.TensorBuffer(i.shape,i.dtype),d=r.bufferSync(i);for(let e=0;e<c.size;e++){let t=c.indexToLoc(e),r=t.slice();p.forEach(e=>r[e]=i.shape[e]-1-r[e]),c.set(d.get(...r),...t)}return r.makeTensorInfo(c.shape,c.dtype,c.values)}let l={kernelName:n.Reverse,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Identity":"5buXK","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"5soSH":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"rotateWithOffsetConfig",()=>a);var n=e("@tensorflow/tfjs-core");let a={kernelName:n.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:s}=e,{radians:a,fillValue:o,center:i}=t,l=(0,n.util).getTypedArrayFromDType(s.dtype,(0,n.util).sizeFromShape(s.shape)),[u,p,c,d]=s.shape,[h,f]=(0,n.backend_util).getImageCenter(i,p,c),m=Math.sin(a),g=Math.cos(a),x=r.data.get(s.dataId).values;for(let e=0;e<u;e++){let t=e*c*p*d;for(let e=0;e<p;e++){let r=e*(c*d);for(let s=0;s<c;s++){let n=s*d;for(let a=0;a<d;a++){let i=[u,e,s,a],b=i[2],y=i[1],j=(b-h)*g-(y-f)*m,_=(b-h)*m+(y-f)*g;j=Math.round(j+h),_=Math.round(_+f);let k=o;// If the coordinate position falls within the image boundaries...
if("number"!=typeof o&&(k=3===a?255:o[a]),j>=0&&j<c&&_>=0&&_<p){// set the output to the image value at the coordinate position.
let e=_*(c*d),r=j*d,s=t+e+r+a;k=x[s]}let I=t+r+n+a;l[I]=k}}}}let b=r.write(l,s.shape,s.dtype);return{dataId:b,shape:s.shape,dtype:s.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gr8u9:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"round",()=>o),s.export(r,"roundConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Round,e=>{// The algorithm is based on banker's rounding.
let t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),i={kernelName:n.Round,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"27vCb":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"scatterNd",()=>o),s.export(r,"scatterNdConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Scatter_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{indices:o,updates:i}=t,{shape:l}=s,{sliceRank:u,numUpdates:p,sliceSize:c,strides:d,outputSize:h}=(0,n.backend_util).calculateShapes(i,o,l),f=r.bufferSync(o),m=r.bufferSync(i),g=(0,a.scatterImpl)(f,m,l,h,c,p,u,d,0/* defaultValue */,!0);return r.makeTensorInfo(l,g.dtype,g.values)}let i={kernelName:n.ScatterNd,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Scatter_impl":"cdVA2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dJ4sK:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"searchSorted",()=>o),s.export(r,"searchSortedConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./SearchSorted_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{sortedSequence:n,values:o}=t,{side:i}=s,l=r.data.get(n.dataId).values,u=r.data.get(o.dataId).values,p=(0,a.searchSortedImpl)(l,u,n.shape[0],n.shape[1],o.shape[1],i);return r.makeTensorInfo(o.shape,"int32",p)}let i={kernelName:n.SearchSorted,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./SearchSorted_impl":"bOeDq","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bOeDq:[function(e,t,r){/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"searchSortedImpl",()=>a);var n=e("@tensorflow/tfjs-core");function a(e,t,r,s,a,o){let i=(0,n.util).getArrayFromDType("int32",r*a);for(let n=0;n<r;++n){let r=e.slice(n*s,(n+1)*s),l=n*a;for(let e=0;e<a;++e)i[l+e]="left"===o?function(e,t){let r=0,s=e.length,n=0;for(;r<s;)e[n=Math.floor((r+s)/2)]<t?r=n+1:s=n;return s}(r,t[e+l]):function(e,t){let r=0,s=e.length,n=0;for(;r<s;)e[n=Math.floor((r+s)/2)]<=t?r=n+1:s=n;return s}(r,t[e+l])}return i}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gw3js:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"select",()=>o),s.export(r,"selectConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");function o(e){let{inputs:t,backend:r}=e,{condition:s,t:o,e:i}=t;(0,a.assertNotComplex)([s,o,i],"select");let l=s.shape.length,u=r.data.get(s.dataId).values,p=r.data.get(o.dataId).values,c=r.data.get(i.dataId).values,d=(0,n.upcastType)(o.dtype,i.dtype),h=(0,n.util).makeZerosTypedArray((0,n.util).sizeFromShape(o.shape),d),f=0,m=0===l||l>1||1===o.shape.length?1:(0,n.util).sizeFromShape(o.shape.slice(1));for(let e=0;e<u.length;e++)for(let t=0;t<m;t++)1===u[e]?h[f++]=p[e]:h[f++]=c[e];return r.makeTensorInfo(o.shape,d,h)}let i={kernelName:n.Select,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iPhN6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"selu",()=>l),s.export(r,"seluConfig",()=>u);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=n.backend_util.SELU_SCALEALPHA,i=n.backend_util.SELU_SCALE,l=(0,a.unaryKernelFunc)(n.Selu,e=>e>=0?i*e:o*(Math.exp(e)-1)),u={kernelName:n.Selu,backendName:"cpu",kernelFunc:l}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ptBiy:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sign",()=>o),s.export(r,"signConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Sign,e=>e<0?-1:e>0?1:0),i={kernelName:n.Sign,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],bWLI4:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sin",()=>o),s.export(r,"sinConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Sin,e=>Math.sin(e)),i={kernelName:n.Sin,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1Gagw":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sinh",()=>o),s.export(r,"sinhConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Sinh,e=>Math.sinh(e)),i={kernelName:n.Sinh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8dHBc":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"softplus",()=>i),s.export(r,"softplusConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=Math.log(11920928955078125e-23)+2,i=(0,a.unaryKernelFunc)(n.Softplus,e=>{let t=Math.exp(e);return e<o?t:e>-o?e:Math.log(1+t)}),l={kernelName:n.Softplus,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ims37:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"spaceToBatchND",()=>u),s.export(r,"spaceToBatchNDConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./PadV2"),i=e("./Reshape"),l=e("./Transpose");function u(e){let{inputs:t,backend:r,attrs:s}=e,{x:u}=t,{blockShape:p,paddings:c}=s;(0,a.assertNotComplex)([u],"spaceToBatchND");let d=(0,n.util).sizeFromShape(p),h=[[0,0]];h.push(...c);for(let e=1+p.length;e<u.shape.length;++e)h.push([0,0]);let f=(0,o.padV2Config).kernelFunc({inputs:{x:u},backend:r,attrs:{paddings:h,constantValue:0}}),m=(0,n.backend_util).getReshaped(f.shape,p,d,!1),g=(0,n.backend_util).getPermuted(m.length,p.length,!1),x=(0,n.backend_util).getReshapedPermuted(f.shape,p,d,!1),b=(0,i.reshape)({inputs:{x:f},backend:r,attrs:{shape:m}}),y=(0,l.transpose)({inputs:{x:b},backend:r,attrs:{perm:g}}),j=(0,i.reshape)({inputs:{x:y},backend:r,attrs:{shape:x}});return r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),j}let p={kernelName:n.SpaceToBatchND,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./PadV2":"l2r3y","./Reshape":"ii0XS","./Transpose":"jPCZf","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"0w9AY":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseFillEmptyRows",()=>o),s.export(r,"sparseFillEmptyRowsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./SparseFillEmptyRows_impl");function o(e){let{inputs:t,backend:r}=e,{indices:s,values:n,denseShape:o,defaultValue:i}=t;if(1!==o.shape.length)throw Error(`Dense shape must be a vector, saw:
        ${o.shape}`);if(2!==s.shape.length)throw Error(`Indices must be a matrix, saw:
        ${s.shape}`);if(1!==n.shape.length)throw Error(`Values must be a vector, saw:
        ${n.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let l=r.data.get(s.dataId).values,u=r.data.get(n.dataId).values,p=r.data.get(o.dataId).values,c=r.data.get(i.dataId).values[0],[d,h,f,m,g]=(0,a.sparseFillEmptyRowsImpl)(l,s.shape,s.dtype,u,n.dtype,p,c);return[r.makeTensorInfo(h,s.dtype,d),r.makeTensorInfo([h[0]],n.dtype,f),r.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(e=>Number(e)))),r.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}let i={kernelName:n.SparseFillEmptyRows,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./SparseFillEmptyRows_impl":"gjRSZ","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9DfOs":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseReshape",()=>o),s.export(r,"sparseReshapeConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./SparseReshape_impl");function o(e){let{inputs:t,backend:r}=e,{inputIndices:s,inputShape:n,newShape:o}=t;if(2!==s.shape.length)throw Error(`Input indices should be a matrix but received shape
        ${s.shape}`);if(1!==n.shape.length)throw Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(1!==o.shape.length)throw Error(`Target shape should be a vector but received shape ${o.shape}`);let i=Array.from(r.data.get(n.dataId).values),l=r.data.get(s.dataId).values,u=Array.from(r.data.get(o.dataId).values),[p,c,d]=(0,a.sparseReshapeImpl)(l,s.shape,s.dtype,i,u);return[r.makeTensorInfo(c,s.dtype,p),r.makeTensorInfo([d.length],o.dtype,new Int32Array(d))]}let i={kernelName:n.SparseReshape,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./SparseReshape_impl":"7idqz","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],dlzzP:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentMean",()=>o),s.export(r,"sparseSegmentMeanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./SparseSegmentReduction_impl");function o(e){let{inputs:t,backend:r}=e,{data:s,indices:n,segmentIds:o}=t;if(s.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==n.shape.length)throw Error(`Indices should be a vector but received shape
          ${n.shape}`);if(1!==o.shape.length)throw Error(`Segment ids should be a vector but received shape
          ${o.shape}`);if(n.shape[0]!==o.shape[0])throw Error("segmentIds and indices should have same size.");let i=r.data.get(s.dataId).values,l=r.data.get(n.dataId).values,u=r.data.get(o.dataId).values,[p,c]=(0,a.sparseSegmentReductionImpl)(i,s.shape,s.dtype,l,u,!0);return r.makeTensorInfo(c,s.dtype,p)}let i={kernelName:n.SparseSegmentMean,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./SparseSegmentReduction_impl":"apbuT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2NKN8":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseSegmentSum",()=>o),s.export(r,"sparseSegmentSumConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./SparseSegmentReduction_impl");function o(e){let{inputs:t,backend:r}=e,{data:s,indices:n,segmentIds:o}=t;if(s.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==n.shape.length)throw Error(`Indices should be a vector but received shape
         ${n.shape}`);if(1!==o.shape.length)throw Error(`Segment ids should be a vector but received shape
         ${o.shape}`);if(n.shape[0]!==o.shape[0])throw Error("segmentIds and indices should have same size.");let i=r.data.get(s.dataId).values,l=r.data.get(n.dataId).values,u=r.data.get(o.dataId).values,[p,c]=(0,a.sparseSegmentReductionImpl)(i,s.shape,s.dtype,l,u);return r.makeTensorInfo(c,s.dtype,p)}let i={kernelName:n.SparseSegmentSum,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./SparseSegmentReduction_impl":"apbuT","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l1pau:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"sparseToDense",()=>o),s.export(r,"sparseToDenseConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Scatter_impl");function o(e){let t;let{inputs:r,backend:s,attrs:o}=e,{sparseIndices:i,sparseValues:l,defaultValue:u}=r,{outputShape:p}=o,{sliceRank:c,numUpdates:d,sliceSize:h,strides:f,outputSize:m}=(0,n.backend_util).calculateShapes(l,i,p),g=s.bufferSync(i);switch(l.dtype){case"bool":{let e=s.bufferSync(l),r=!!s.data.get(u.dataId).values[0];t=(0,a.scatterImpl)(g,e,p,m,h,d,c,f,r,!1);break}case"float32":{let e=s.bufferSync(l),r=s.data.get(u.dataId).values[0];t=(0,a.scatterImpl)(g,e,p,m,h,d,c,f,r,!1);break}case"int32":{let e=s.bufferSync(l),r=s.data.get(u.dataId).values[0];t=(0,a.scatterImpl)(g,e,p,m,h,d,c,f,r,!1);break}case"string":{let e=s.bufferSync(l),r=(0,n.util).decodeString(s.data.get(u.dataId).values[0]);t=(0,a.scatterImpl)(g,e,p,m,h,d,c,f,r,!1);break}default:throw Error(`Unsupported type ${l.dtype}`)}return s.makeTensorInfo(p,t.dtype,t.values)}let i={kernelName:n.SparseToDense,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Scatter_impl":"cdVA2","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3zU3w":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"splitV",()=>o),s.export(r,"splitVConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./Slice");function o(e){let{inputs:t,backend:r,attrs:s}=e,{x:o}=t,{numOrSizeSplits:i,axis:l}=s,u=(0,n.util).parseAxisParam(l,o.shape)[0],p=(0,n.backend_util).prepareSplitSize(o,i,u),c=Array(o.shape.length).fill(0),d=o.shape.slice();return p.map(e=>{let t=[...d];t[u]=e;let s=(0,a.slice)({inputs:{x:o},backend:r,attrs:{begin:c,size:t}});return c[u]+=e,s})}let i={kernelName:n.SplitV,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./Slice":"54KMc","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jxfI2:[function(e,t,r){/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"squareConfig",()=>o);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util");let o={kernelName:n.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{let{x:r}=e;(0,a.assertNotComplex)(r,"square");let s=t.data.get(r.dataId).values,n=new Float32Array(s.length);for(let e=0;e<s.length;++e){let t=s[e];n[e]=t*t}let o=t.write(n,r.shape,r.dtype);return{dataId:o,shape:r.shape,dtype:r.dtype}}}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],a36vu:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"step",()=>o),s.export(r,"stepConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Step,(e,t)=>isNaN(e)?NaN:e>0?1:t.alpha),i={kernelName:n.Step,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],b9qpc:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stridedSlice",()=>u),s.export(r,"stridedSliceConfig",()=>p);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Reshape"),i=e("./Slice"),l=e("./StridedSlice_impl");function u(e){let t;let{inputs:r,backend:s,attrs:u}=e,{x:p}=r,{begin:c,end:d,strides:h,beginMask:f,endMask:m,ellipsisMask:g,newAxisMask:x,shrinkAxisMask:b}=u;(0,a.assertNotComplex)(p,"stridedSlice");let{finalShapeSparse:y,finalShape:j,isIdentity:_,sliceDim0:k,isSimpleSlice:I,begin:w,end:C,strides:S}=(0,n.slice_util).sliceInfo(p.shape,c,d,h,f,m,g,x,b);// ref:
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc
if(_)t=(0,o.reshape)({inputs:{x:p},backend:s,attrs:{shape:j}});else if(k||I){// Optimization #2, slice is memory contiguous (only occurs in dim 0)
(0,n.util).assert(p.shape.length>=1,()=>`Input must have rank at least 1, got: ${p.shape.length}`);let e=(0,n.slice_util).computeOutShape(w,C,S),r=(0,i.slice)({inputs:{x:p},backend:s,attrs:{begin:w,size:e}});t=(0,o.reshape)({inputs:{x:r},backend:s,attrs:{shape:j}}),s.disposeIntermediateTensorInfo(r)}else{let e=s.bufferSync(p),r=(0,l.stridedSliceImpl)(y,e,S,w);t=s.makeTensorInfo(j,r.dtype,r.values)}return t}let p={kernelName:n.StridedSlice,backendName:"cpu",kernelFunc:u}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Reshape":"ii0XS","./Slice":"54KMc","./StridedSlice_impl":"cUQt7","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aqhK2:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringNGrams",()=>o),s.export(r,"stringNGramsConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./StringNGrams_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{separator:n,nGramWidths:o,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:p}=s,{data:c,dataSplits:d}=t,h=r.data.get(c.dataId).values,f=r.data.get(d.dataId).values,[m,g]=(0,a.stringNGramsImpl)(h,f,n,o,i,l,u,p);return[r.makeTensorInfo([m.length],"string",m),r.makeTensorInfo(d.shape,"int32",g)]}let i={kernelName:n.StringNGrams,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./StringNGrams_impl":"2G8NP","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2qSnJ":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringSplit",()=>o),s.export(r,"stringSplitConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./StringSplit_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{skipEmpty:n}=s,{input:o,delimiter:i}=t;if("string"!==o.dtype)throw Error("Input must be of datatype string");if(1!==o.shape.length)throw Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let l=r.data.get(o.dataId).values,u=r.data.get(i.dataId).values[0],[p,c,d]=(0,a.stringSplitImpl)(l,u,n),h=c.length;return[r.makeTensorInfo([h,2],"int32",p),r.makeTensorInfo([h],"string",c),r.makeTensorInfo([2],"int32",new Int32Array(d))]}let i={kernelName:n.StringSplit,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./StringSplit_impl":"7o38c","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hiS5G:[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"stringToHashBucketFast",()=>o),s.export(r,"stringToHashBucketFastConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("./StringToHashBucketFast_impl");function o(e){let{inputs:t,backend:r,attrs:s}=e,{numBuckets:n}=s,{input:o}=t;if("string"!==o.dtype)throw Error("Input must be of datatype string");if(n<=0)throw Error("Number of buckets must be at least 1");let i=r.data.get(o.dataId).values,l=(0,a.stringToHashBucketFastImpl)(i,n);return r.makeTensorInfo(o.shape,"int32",l)}let i={kernelName:n.StringToHashBucketFast,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","./StringToHashBucketFast_impl":"e57Im","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7RffO":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tan",()=>o),s.export(r,"tanConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Tan,e=>Math.tan(e)),i={kernelName:n.Tan,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],f4TAd:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tanh",()=>o),s.export(r,"tanhConfig",()=>i);var n=e("@tensorflow/tfjs-core"),a=e("../utils/unary_utils");let o=(0,a.unaryKernelFunc)(n.Tanh,e=>Math.tanh(e)),i={kernelName:n.Tanh,backendName:"cpu",kernelFunc:o}},{"@tensorflow/tfjs-core":"U1ela","../utils/unary_utils":"gxuSt","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ecG2O:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"tile",()=>i),s.export(r,"tileConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Tile_impl");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{reps:i}=s;(0,a.assertNotComplex)(n,"tile");let l=(0,o.tileImpl)(r.bufferSync(n),i);return r.makeTensorInfo(l.shape,l.dtype,l.values)}let l={kernelName:n.Tile,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Tile_impl":"iJ8AS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"3gK0N":[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"topK",()=>i),s.export(r,"topKConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./TopK_impl");function i(e){let{inputs:t,backend:r,attrs:s}=e,{x:n}=t,{k:i,sorted:l}=s;(0,a.assertNotComplex)(n,"topk");let u=r.data.get(n.dataId).values,[p,c]=(0,o.topKImpl)(u,n.shape,n.dtype,i,l);return[r.makeTensorInfo(p.shape,p.dtype,p.values),r.makeTensorInfo(c.shape,c.dtype,c.values)]}let l={kernelName:n.TopK,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./TopK_impl":"cPIa5","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8bOOh":[function(e,t,r){/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"transform",()=>a),s.export(r,"transformConfig",()=>o);var n=e("@tensorflow/tfjs-core");function a(e){let{inputs:t,attrs:r,backend:s}=e,{image:a,transforms:o}=t,{interpolation:u,fillMode:p,fillValue:c,outputShape:d}=r,[h,f,m,g]=a.shape,[x,b]=null!=d?d:[f,m],y=[h,x,b,g],j=(0,n.util).computeStrides(a.shape),_=j[0],k=j[1],I=j[2],w=(0,n.util).computeStrides(y),C=w[0],S=w[1],T=w[2],N=(0,n.util).getTypedArrayFromDType(a.dtype,(0,n.util).sizeFromShape(y));N.fill(c);let E=s.data.get(a.dataId).values,F=s.data.get(o.dataId).values;// Ref TF implementation:
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h
for(let e=0;e<h;++e){let t=1===o.shape[0]?F:F.subarray(8*e,8*e+8);for(let r=0;r<x;++r)for(let s=0;s<b;++s)for(let n=0;n<g;++n){let a;let o=t[6]*s+t[7]*r+1;if(0===o)continue;let d=(t[0]*s+t[1]*r+t[2])/o,h=(t[3]*s+t[4]*r+t[5])/o,g=i(d,m,p),x=i(h,f,p);switch(u){case"nearest":a=function(e,t,r,s,n,a,o,i,u,p,c){let d=Math.round(i),h=Math.round(u);return l(e,t,r,s,n,a,o,d,h,p,c)}(E,f,m,_,k,I,e,x,g,n,c);break;case"bilinear":a=function(e,t,r,s,n,a,o,i,u,p,c){let d=Math.floor(i),h=Math.floor(u),f=d+1,m=h+1,g=(m-u)*l(e,t,r,s,n,a,o,d,h,p,c)+(u-h)*l(e,t,r,s,n,a,o,d,m,p,c),x=(m-u)*l(e,t,r,s,n,a,o,f,h,p,c)+(u-h)*l(e,t,r,s,n,a,o,f,m,p,c);// f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)
//         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)
return(f-i)*g+(i-d)*x}(E,f,m,_,k,I,e,x,g,n,c);break;default:throw Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${u}`)}let b=e*C+r*S+s*T+n;N[b]=a}return s.makeTensorInfo(y,a.dtype,N)}let A=s.write(N,y,a.dtype);return{dataId:A,shape:a.shape,dtype:a.dtype}}let o={kernelName:n.Transform,backendName:"cpu",kernelFunc:a};function i(e,t,r){switch(r){case"reflect":return function(e,t){// Reflect [abcd] to [dcba|abcd|dcba].
let r=e;if(r<0){if(t<=1)r=0;else{let e=2*t;r<e&&(r=e*Math.trunc(-r/e)+r),r=r<-t?r+e:-r-1}}else if(r>t-1){if(t<=1)r=0;else{let e=2*t;(r-=e*Math.trunc(r/e))>=t&&(r=e-r-1)}}// clamp is necessary because when outCoord = 3.5 and len = 4,
// inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
return(0,n.util).clamp(0,r,t-1)}(e,t);case"wrap":return function(e,t){// Wrap [abcd] to [abcd|abcd|abcd].
let r=e;if(r<0){if(t<=1)r=0;else{let e=t-1;r+=t*(Math.trunc(-r/e)+1)}}else if(r>t-1){if(t<=1)r=0;else{let e=t-1;r-=t*Math.trunc(r/e)}}// clamp is necessary because when outCoord = -0.5 and len = 4,
// inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
return(0,n.util).clamp(0,r,t-1)}(e,t);case"nearest":return(0,n.util).clamp(0,e,t-1);default:return e}}function l(e,t,r,s,n,a,o,i,l,u,p){return 0<=i&&i<t&&0<=l&&l<r?e[o*s+i*n+l*a+u]:p}},{"@tensorflow/tfjs-core":"U1ela","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],kivt6:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unique",()=>i),s.export(r,"uniqueConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Unique_impl");function i(e){let{inputs:t,attrs:r,backend:s}=e,{axis:n}=r,{x:i}=t;(0,a.assertNotComplex)(i,"unique");let l=s.data.get(i.dataId).values,{outputValues:u,outputShape:p,indices:c}=(0,o.uniqueImpl)(l,n,i.shape,i.dtype);return[s.makeTensorInfo(p,i.dtype,u),s.makeTensorInfo([c.length],"int32",c)]}let l={kernelName:n.Unique,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Unique_impl":"ehtBe","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cdKnf:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unpack",()=>i),s.export(r,"unpackConfig",()=>l);var n=e("@tensorflow/tfjs-core"),a=e("./Reshape"),o=e("./Slice");function i(e){let{inputs:t,backend:r,attrs:s}=e,{value:n}=t,{axis:i}=s;i<0&&(i+=n.shape.length);let l=n.shape.length,u=n.shape[i],p=Array(l-1),c=0;for(let e=0;e<l;e++)e!==i&&(p[c++]=n.shape[e]);let d=Array(l).fill(0),h=n.shape.slice();h[i]=1;let f=Array(u);for(let e=0;e<f.length;e++){d[i]=e;let t=(0,o.slice)({inputs:{x:n},backend:r,attrs:{begin:d,size:h}});f[e]=(0,a.reshape)({inputs:{x:t},backend:r,attrs:{shape:p}}),r.disposeIntermediateTensorInfo(t)}return f}let l={kernelName:n.Unpack,backendName:"cpu",kernelFunc:i}},{"@tensorflow/tfjs-core":"U1ela","./Reshape":"ii0XS","./Slice":"54KMc","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],aKdiZ:[function(e,t,r){/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"unsortedSegmentSum",()=>d),s.export(r,"unsortedSegmentSumConfig",()=>h);var n=e("@tensorflow/tfjs-core"),a=e("../cpu_util"),o=e("./Cast"),i=e("./Equal"),l=e("./ExpandDims"),u=e("./Multiply"),p=e("./Pack"),c=e("./Sum");function d(e){let{inputs:t,backend:r,attrs:s}=e,{x:d,segmentIds:h}=t,{numSegments:f}=s;(0,a.assertNotComplex)(d,"unsortedSegmentSum");let m=d.shape.length,g=h.shape.length,x=[],b=[],y=m-g,j=h;for(let e=0;e<y;++e){let t=(0,l.expandDims)({inputs:{input:j},backend:r,attrs:{dim:e+1}});j=t,b.push(t)}for(let e=0;e<f;++e){let t=(0,n.util).createScalarValue(e,"int32"),s=r.makeTensorInfo([],"int32",t),a=(0,i.equal)({inputs:{a:s,b:j},backend:r}),l=(0,o.cast)({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),p=(0,u.multiply)({inputs:{a:l,b:d},backend:r}),h=(0,c.sum)({inputs:{x:p},backend:r,attrs:{axis:0,keepDims:!1}});x.push(h),b.push(s),b.push(a),b.push(l),b.push(p),b.push(h)}let _=(0,p.pack)({inputs:x,backend:r,attrs:{axis:0}});return b.forEach(e=>r.disposeIntermediateTensorInfo(e)),_}let h={kernelName:n.UnsortedSegmentSum,backendName:"cpu",kernelFunc:d}},{"@tensorflow/tfjs-core":"U1ela","../cpu_util":"fliQI","./Cast":"5cInC","./Equal":"3i0zH","./ExpandDims":"atyUZ","./Multiply":"c4iXH","./Pack":"aqv4E","./Sum":"jQcWO","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],jinHn:[function(e,t,r){t.exports=JSON.parse('{"vocab":["[nop]",".","[N@]","[Se]","[Li+1]","[=Ge]","[\\\\N]","[Mg+2]","[ClH0]","[Ba+2]","[N]","[=Mo]","[SH1-2]","[=O]","[Zr+4]","[\\\\N+1]","[/Br]","[Mo+2]","[/-Ring1]","[=SH0]","[Sn]","[=Si]","[N-1]","[Fe+2]","[FH0]","[B-1]","[2H]","[/N+1]","[Cl-1]","[=V+2]","[\\\\NH1+1]","[=N]","[CH0]","[P@@]","[=Fe]","[\\\\S]","[Cl]","[Al+3]","[\\\\-Ring2]","[As+3]","[Ring1]","[Sm+3]","[=Ni]","[Co+2]","[NH1+2]","[\\\\C@H1]","[Mo]","[S-2]","[=PH0]","[Zn]","[Cr]","[Br-1]","[=P]","[S]","[#Branch2]","[-/Ring1]","[\\\\C@@H1]","[NH2+1]","[Sr]","[=Cr]","[=N-1]","[=SnH2]","[\\\\NH1]","[PH0]","[NH0]","[Gd]","[Na]","[/C@@H1]","[Au+1]","[Ce]","[Dy]","[=Ti]","[CH2]","[Hg]","[=Ring2]","[=Zr]","[Zr+2]","[I]","[Si]","[=Branch1]","[K]","[BH0]","[Pr+3]","[Nd+3]","[Ag+1]","[In+3]","[Cl+3]","[Cu]","[O-2]","[W]","[N+1]","[=Ca]","[=S]","[=P+1]","[/N]","[#O+1]","[H+1]","[Nb+5]","[NH3+1]","[Branch3]","[Gd+3]","[Zn+2]","[/C@]","[Cd+2]","[Ce+3]","[Pb+2]","[Na+1]","[#Branch1]","[Lu+3]","[MgH2]","[\\\\Br]","[-/Ring2]","[NH1+1]","[S-1]","[I-1]","[O]","[=V]","[Y]","[Rh]","[#S]","[Cs+1]","[Ni]","[H]","[#N]","[Cu+1]","[=PH1]","[SH1-1]","[=Mn]","[Mn+3]","[#C]","[Branch2]","[Sb+3]","[=B]","[\\\\As]","[=Sn]","[H-1]","[=Ce]","[B+3]","[=O+1]","[=Branch2]","[K+1]","[=Pb]","[P@]","[Al]","[=Ring1]","[Co]","[Be]","[=Se]","[/I]","[C@@H1]","[/S]","[Ring2]","[Ni+2]","[/As]","[C]","[Ta]","[F-1]","[Sb]","[Au]","[/NH1+1]","[Zr]","[CH1-1]","[Rh+3]","[Si@]","[\\\\O]","[-\\\\Ring1]","[SnH2]","[Bi+3]","[Fe]","[Hf]","[=NH1+1]","[Pb]","[\\\\Cl]","[Ca+2]","[Ir]","[Pt+2]","[Hg+2]","[#B]","[Ge]","[=Te]","[Nd]","[OH1-1]","[NH1]","[C+1]","[Co+3]","[=Cd]","[Y+3]","[Ti+2]","[Au+3]","[OH0]","[Pd+2]","[O+1]","[=As]","[/C]","[Hg+1]","[=N+1]","[Sn+2]","[O-1]","[F]","[NH4+1]","[Re]","[/O]","[Sr+2]","[/-Ring2]","[Dy+3]","[S+1]","[Sn+4]","[\\\\I]","[Ti+4]","[Mn+2]","[Mg]","[B]","[La]","[=W]","[Cs]","[#C-1]","[=Sr]","[=S+1]","[=Be]","[C@H1]","[\\\\C]","[Ca]","[Si+4]","[PH1]","[Nb]","[Cr+3]","[Branch1]","[Hf+4]","[=Nb]","[P]","[CH1]","[Ag]","[=C-1]","[\\\\-Ring1]","[C-1]","[C@@]","[/Cl]","[Cu+2]","[Cd]","[CaH2]","[=Co]","[/C@@]","[Li]","[Ti]","[=C]","[P+1]","[=CH0]","[=Y]","[V+2]","[SiH1]","[V]","[La+3]","[Ru+3]","[=Cu]","[C@]","[Fe+3]","[Te]","[=Zn]","[Bi]","[Br]","[/C@H1]","[Mn]","[SH0]","[Pt+4]","[As]","[/NH1]","[Nop]","[Ring3]","[#Branch3]","[=Branch3]","[\\\\C@]","[#N+1]","[=Ring3]"],"vocab_stoi":{"[nop]":0,".":1,"[N@]":2,"[Se]":3,"[Li+1]":4,"[=Ge]":5,"[\\\\N]":6,"[Mg+2]":7,"[ClH0]":8,"[Ba+2]":9,"[N]":10,"[=Mo]":11,"[SH1-2]":12,"[=O]":13,"[Zr+4]":14,"[\\\\N+1]":15,"[/Br]":16,"[Mo+2]":17,"[/-Ring1]":18,"[=SH0]":19,"[Sn]":20,"[=Si]":21,"[N-1]":22,"[Fe+2]":23,"[FH0]":24,"[B-1]":25,"[2H]":26,"[/N+1]":27,"[Cl-1]":28,"[=V+2]":29,"[\\\\NH1+1]":30,"[=N]":31,"[CH0]":32,"[P@@]":33,"[=Fe]":34,"[\\\\S]":35,"[Cl]":36,"[Al+3]":37,"[\\\\-Ring2]":38,"[As+3]":39,"[Ring1]":40,"[Sm+3]":41,"[=Ni]":42,"[Co+2]":43,"[NH1+2]":44,"[\\\\C@H1]":45,"[Mo]":46,"[S-2]":47,"[=PH0]":48,"[Zn]":49,"[Cr]":50,"[Br-1]":51,"[=P]":52,"[S]":53,"[#Branch2]":54,"[-/Ring1]":55,"[\\\\C@@H1]":56,"[NH2+1]":57,"[Sr]":58,"[=Cr]":59,"[=N-1]":60,"[=SnH2]":61,"[\\\\NH1]":62,"[PH0]":63,"[NH0]":64,"[Gd]":65,"[Na]":66,"[/C@@H1]":67,"[Au+1]":68,"[Ce]":69,"[Dy]":70,"[=Ti]":71,"[CH2]":72,"[Hg]":73,"[=Ring2]":74,"[=Zr]":75,"[Zr+2]":76,"[I]":77,"[Si]":78,"[=Branch1]":79,"[K]":80,"[BH0]":81,"[Pr+3]":82,"[Nd+3]":83,"[Ag+1]":84,"[In+3]":85,"[Cl+3]":86,"[Cu]":87,"[O-2]":88,"[W]":89,"[N+1]":90,"[=Ca]":91,"[=S]":92,"[=P+1]":93,"[/N]":94,"[#O+1]":95,"[H+1]":96,"[Nb+5]":97,"[NH3+1]":98,"[Branch3]":99,"[Gd+3]":100,"[Zn+2]":101,"[/C@]":102,"[Cd+2]":103,"[Ce+3]":104,"[Pb+2]":105,"[Na+1]":106,"[#Branch1]":107,"[Lu+3]":108,"[MgH2]":109,"[\\\\Br]":110,"[-/Ring2]":111,"[NH1+1]":112,"[S-1]":113,"[I-1]":114,"[O]":115,"[=V]":116,"[Y]":117,"[Rh]":118,"[#S]":119,"[Cs+1]":120,"[Ni]":121,"[H]":122,"[#N]":123,"[Cu+1]":124,"[=PH1]":125,"[SH1-1]":126,"[=Mn]":127,"[Mn+3]":128,"[#C]":129,"[Branch2]":130,"[Sb+3]":131,"[=B]":132,"[\\\\As]":133,"[=Sn]":134,"[H-1]":135,"[=Ce]":136,"[B+3]":137,"[=O+1]":138,"[=Branch2]":139,"[K+1]":140,"[=Pb]":141,"[P@]":142,"[Al]":143,"[=Ring1]":144,"[Co]":145,"[Be]":146,"[=Se]":147,"[/I]":148,"[C@@H1]":149,"[/S]":150,"[Ring2]":151,"[Ni+2]":152,"[/As]":153,"[C]":154,"[Ta]":155,"[F-1]":156,"[Sb]":157,"[Au]":158,"[/NH1+1]":159,"[Zr]":160,"[CH1-1]":161,"[Rh+3]":162,"[Si@]":163,"[\\\\O]":164,"[-\\\\Ring1]":165,"[SnH2]":166,"[Bi+3]":167,"[Fe]":168,"[Hf]":169,"[=NH1+1]":170,"[Pb]":171,"[\\\\Cl]":172,"[Ca+2]":173,"[Ir]":174,"[Pt+2]":175,"[Hg+2]":176,"[#B]":177,"[Ge]":178,"[=Te]":179,"[Nd]":180,"[OH1-1]":181,"[NH1]":182,"[C+1]":183,"[Co+3]":184,"[=Cd]":185,"[Y+3]":186,"[Ti+2]":187,"[Au+3]":188,"[OH0]":189,"[Pd+2]":190,"[O+1]":191,"[=As]":192,"[/C]":193,"[Hg+1]":194,"[=N+1]":195,"[Sn+2]":196,"[O-1]":197,"[F]":198,"[NH4+1]":199,"[Re]":200,"[/O]":201,"[Sr+2]":202,"[/-Ring2]":203,"[Dy+3]":204,"[S+1]":205,"[Sn+4]":206,"[\\\\I]":207,"[Ti+4]":208,"[Mn+2]":209,"[Mg]":210,"[B]":211,"[La]":212,"[=W]":213,"[Cs]":214,"[#C-1]":215,"[=Sr]":216,"[=S+1]":217,"[=Be]":218,"[C@H1]":219,"[\\\\C]":220,"[Ca]":221,"[Si+4]":222,"[PH1]":223,"[Nb]":224,"[Cr+3]":225,"[Branch1]":226,"[Hf+4]":227,"[=Nb]":228,"[P]":229,"[CH1]":230,"[Ag]":231,"[=C-1]":232,"[\\\\-Ring1]":233,"[C-1]":234,"[C@@]":235,"[/Cl]":236,"[Cu+2]":237,"[Cd]":238,"[CaH2]":239,"[=Co]":240,"[/C@@]":241,"[Li]":242,"[Ti]":243,"[=C]":244,"[P+1]":245,"[=CH0]":246,"[=Y]":247,"[V+2]":248,"[SiH1]":249,"[V]":250,"[La+3]":251,"[Ru+3]":252,"[=Cu]":253,"[C@]":254,"[Fe+3]":255,"[Te]":256,"[=Zn]":257,"[Bi]":258,"[Br]":259,"[/C@H1]":260,"[Mn]":261,"[SH0]":262,"[Pt+4]":263,"[As]":264,"[/NH1]":265,"[Nop]":266,"[Ring3]":267,"[#Branch3]":268,"[=Branch3]":269,"[\\\\C@]":270,"[#N+1]":271,"[=Ring3]":272}}')},{}],i29vj:[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("be2dce49686acc37")).__esModule&&(s=s.default),s.render=e("f8a15ef7569339e3").render,s.__cssModules=e("490fb38dfd079d65").default,e("4d3c8b07a01ba87a").default(s),s.__scopeId="data-v-11fbda",s.__file="ModelCard.vue",r.default=s},{be2dce49686acc37:"fKgJv",f8a15ef7569339e3:"eeJHW","490fb38dfd079d65":"iQPlA","4d3c8b07a01ba87a":"jWoNo","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],fKgJv:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default={name:"ModelCard",props:{url:String},data:()=>({display:!1,hasImage:!1,image:null,index:"title",card:null,title:"",details:[{id:"details",name:"Model Details"},{id:"use",name:"Intended Use"},{id:"factors",name:"Factors"},{id:"metrics",name:"Metrics"},{id:"evaluation",name:"Evaluation Data"},{id:"training",name:"Training Data"},{id:"ethics",name:"Ethical Considerations"},{id:"caveats",name:"Caveats"}],content:null}),mounted:function(){fetch(this.url).then(e=>e.json()).then(e=>{this.card=e,this.title=this.card.title,this.content=this.card[this.details[0].id],this.card.image&&(this.hasImage=!0,this.image=this.card.image)})},methods:{cardContent(e){return this.card&&e in this.card?this.card[e]:""}}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],eeJHW:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>u);var n=e("vue");let a={class:"model-card"},o={key:0,class:"container has-text-justified"},i={key:0},l=["src"];function u(e,t,r,s,u,p){return(0,n.openBlock)(),(0,n.createElementBlock)("div",a,[(0,n.createElementVNode)("button",{onClick:t[0]||(t[0]=e=>u.display=!u.display)},"more info "+(0,n.toDisplayString)(u.display?"\uD83D\uDD3D":"▶️"),1),u.display?((0,n.openBlock)(),(0,n.createElementBlock)("div",o,[((0,n.openBlock)(!0),(0,n.createElementBlock)(n.Fragment,null,(0,n.renderList)(u.details,e=>((0,n.openBlock)(),(0,n.createElementBlock)("p",{key:e.id},[(0,n.createElementVNode)("strong",null,(0,n.toDisplayString)(e.name),1),(0,n.createTextVNode)(" "+(0,n.toDisplayString)(p.cardContent(e.id)),1)]))),128)),u.hasImage?((0,n.openBlock)(),(0,n.createElementBlock)("div",i,[(0,n.createElementVNode)("img",{src:u.image,alt:"Image justifying model fit",width:"500"},null,8,l)])):(0,n.createCommentVNode)("",!0)])):(0,n.createCommentVNode)("",!0)])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iQPlA:[function(){},{}],jWoNo:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ld8fl:[function(e,t,r){/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"add",()=>a.default),s.export(r,"after",()=>i.default),s.export(r,"ary",()=>u.default),s.export(r,"assign",()=>c.default),s.export(r,"assignIn",()=>h.default),s.export(r,"assignInWith",()=>m.default),s.export(r,"assignWith",()=>x.default),s.export(r,"at",()=>y.default),s.export(r,"attempt",()=>_.default),s.export(r,"before",()=>I.default),s.export(r,"bind",()=>C.default),s.export(r,"bindAll",()=>T.default),s.export(r,"bindKey",()=>E.default),s.export(r,"camelCase",()=>A.default),s.export(r,"capitalize",()=>D.default),s.export(r,"castArray",()=>P.default),s.export(r,"ceil",()=>M.default),s.export(r,"chain",()=>L.default),s.export(r,"chunk",()=>U.default),s.export(r,"clamp",()=>G.default),s.export(r,"clone",()=>q.default),s.export(r,"cloneDeep",()=>H.default),s.export(r,"cloneDeepWith",()=>Y.default),s.export(r,"cloneWith",()=>J.default),s.export(r,"commit",()=>ee.default),s.export(r,"compact",()=>er.default),s.export(r,"concat",()=>en.default),s.export(r,"cond",()=>eo.default),s.export(r,"conforms",()=>el.default),s.export(r,"conformsTo",()=>ep.default),s.export(r,"constant",()=>ed.default),s.export(r,"countBy",()=>ef.default),s.export(r,"create",()=>eg.default),s.export(r,"curry",()=>ev.default),s.export(r,"curryRight",()=>ey.default),s.export(r,"debounce",()=>e_.default),s.export(r,"deburr",()=>eI.default),s.export(r,"defaultTo",()=>eC.default),s.export(r,"defaults",()=>eT.default),s.export(r,"defaultsDeep",()=>eE.default),s.export(r,"defer",()=>eA.default),s.export(r,"delay",()=>eD.default),s.export(r,"difference",()=>eP.default),s.export(r,"differenceBy",()=>eM.default),s.export(r,"differenceWith",()=>eL.default),s.export(r,"divide",()=>eU.default),s.export(r,"drop",()=>eG.default),s.export(r,"dropRight",()=>eq.default),s.export(r,"dropRightWhile",()=>eH.default),s.export(r,"dropWhile",()=>eY.default),s.export(r,"each",()=>eJ.default),s.export(r,"eachRight",()=>e0.default),s.export(r,"endsWith",()=>e2.default),s.export(r,"entries",()=>e4.default),s.export(r,"entriesIn",()=>e6.default),s.export(r,"eq",()=>e8.default),s.export(r,"escape",()=>te.default),s.export(r,"escapeRegExp",()=>tr.default),s.export(r,"every",()=>tn.default),s.export(r,"extend",()=>to.default),s.export(r,"extendWith",()=>tl.default),s.export(r,"fill",()=>tp.default),s.export(r,"filter",()=>td.default),s.export(r,"find",()=>tf.default),s.export(r,"findIndex",()=>tg.default),s.export(r,"findKey",()=>tv.default),s.export(r,"findLast",()=>ty.default),s.export(r,"findLastIndex",()=>t_.default),s.export(r,"findLastKey",()=>tI.default),s.export(r,"first",()=>tC.default),s.export(r,"flatMap",()=>tT.default),s.export(r,"flatMapDeep",()=>tE.default),s.export(r,"flatMapDepth",()=>tA.default),s.export(r,"flatten",()=>tD.default),s.export(r,"flattenDeep",()=>tP.default),s.export(r,"flattenDepth",()=>tM.default),s.export(r,"flip",()=>tL.default),s.export(r,"floor",()=>tU.default),s.export(r,"flow",()=>tG.default),s.export(r,"flowRight",()=>tq.default),s.export(r,"forEach",()=>tH.default),s.export(r,"forEachRight",()=>tY.default),s.export(r,"forIn",()=>tJ.default),s.export(r,"forInRight",()=>t0.default),s.export(r,"forOwn",()=>t2.default),s.export(r,"forOwnRight",()=>t4.default),s.export(r,"fromPairs",()=>t6.default),s.export(r,"functions",()=>t8.default),s.export(r,"functionsIn",()=>re.default),s.export(r,"get",()=>rr.default),s.export(r,"groupBy",()=>rn.default),s.export(r,"gt",()=>ro.default),s.export(r,"gte",()=>rl.default),s.export(r,"has",()=>rp.default),s.export(r,"hasIn",()=>rd.default),s.export(r,"head",()=>rf.default),s.export(r,"identity",()=>rg.default),s.export(r,"inRange",()=>rv.default),s.export(r,"includes",()=>ry.default),s.export(r,"indexOf",()=>r_.default),s.export(r,"initial",()=>rI.default),s.export(r,"intersection",()=>rC.default),s.export(r,"intersectionBy",()=>rT.default),s.export(r,"intersectionWith",()=>rE.default),s.export(r,"invert",()=>rA.default),s.export(r,"invertBy",()=>rD.default),s.export(r,"invoke",()=>rP.default),s.export(r,"invokeMap",()=>rM.default),s.export(r,"isArguments",()=>rL.default),s.export(r,"isArray",()=>rU.default),s.export(r,"isArrayBuffer",()=>rG.default),s.export(r,"isArrayLike",()=>rq.default),s.export(r,"isArrayLikeObject",()=>rH.default),s.export(r,"isBoolean",()=>rY.default),s.export(r,"isBuffer",()=>rJ.default),s.export(r,"isDate",()=>r0.default),s.export(r,"isElement",()=>r2.default),s.export(r,"isEmpty",()=>r4.default),s.export(r,"isEqual",()=>r6.default),s.export(r,"isEqualWith",()=>r8.default),s.export(r,"isError",()=>se.default),s.export(r,"isFinite",()=>sr.default),s.export(r,"isFunction",()=>sn.default),s.export(r,"isInteger",()=>so.default),s.export(r,"isLength",()=>sl.default),s.export(r,"isMap",()=>sp.default),s.export(r,"isMatch",()=>sd.default),s.export(r,"isMatchWith",()=>sf.default),s.export(r,"isNaN",()=>sg.default),s.export(r,"isNative",()=>sv.default),s.export(r,"isNil",()=>sy.default),s.export(r,"isNull",()=>s_.default),s.export(r,"isNumber",()=>sI.default),s.export(r,"isObject",()=>sC.default),s.export(r,"isObjectLike",()=>sT.default),s.export(r,"isPlainObject",()=>sE.default),s.export(r,"isRegExp",()=>sA.default),s.export(r,"isSafeInteger",()=>sD.default),s.export(r,"isSet",()=>sP.default),s.export(r,"isString",()=>sM.default),s.export(r,"isSymbol",()=>sL.default),s.export(r,"isTypedArray",()=>sU.default),s.export(r,"isUndefined",()=>sG.default),s.export(r,"isWeakMap",()=>sq.default),s.export(r,"isWeakSet",()=>sH.default),s.export(r,"iteratee",()=>sY.default),s.export(r,"join",()=>sJ.default),s.export(r,"kebabCase",()=>s0.default),s.export(r,"keyBy",()=>s2.default),s.export(r,"keys",()=>s4.default),s.export(r,"keysIn",()=>s6.default),s.export(r,"last",()=>s8.default),s.export(r,"lastIndexOf",()=>ne.default),s.export(r,"lodash",()=>nr.default),s.export(r,"lowerCase",()=>nn.default),s.export(r,"lowerFirst",()=>no.default),s.export(r,"lt",()=>nl.default),s.export(r,"lte",()=>np.default),s.export(r,"map",()=>nd.default),s.export(r,"mapKeys",()=>nf.default),s.export(r,"mapValues",()=>ng.default),s.export(r,"matches",()=>nv.default),s.export(r,"matchesProperty",()=>ny.default),s.export(r,"max",()=>n_.default),s.export(r,"maxBy",()=>nI.default),s.export(r,"mean",()=>nC.default),s.export(r,"meanBy",()=>nT.default),s.export(r,"memoize",()=>nE.default),s.export(r,"merge",()=>nA.default),s.export(r,"mergeWith",()=>nD.default),s.export(r,"method",()=>nP.default),s.export(r,"methodOf",()=>nM.default),s.export(r,"min",()=>nL.default),s.export(r,"minBy",()=>nU.default),s.export(r,"mixin",()=>nG.default),s.export(r,"multiply",()=>nq.default),s.export(r,"negate",()=>nH.default),s.export(r,"next",()=>nY.default),s.export(r,"noop",()=>nJ.default),s.export(r,"now",()=>n0.default),s.export(r,"nth",()=>n2.default),s.export(r,"nthArg",()=>n4.default),s.export(r,"omit",()=>n6.default),s.export(r,"omitBy",()=>n8.default),s.export(r,"once",()=>ae.default),s.export(r,"orderBy",()=>ar.default),s.export(r,"over",()=>an.default),s.export(r,"overArgs",()=>ao.default),s.export(r,"overEvery",()=>al.default),s.export(r,"overSome",()=>ap.default),s.export(r,"pad",()=>ad.default),s.export(r,"padEnd",()=>af.default),s.export(r,"padStart",()=>ag.default),s.export(r,"parseInt",()=>av.default),s.export(r,"partial",()=>ay.default),s.export(r,"partialRight",()=>a_.default),s.export(r,"partition",()=>aI.default),s.export(r,"pick",()=>aC.default),s.export(r,"pickBy",()=>aT.default),s.export(r,"plant",()=>aE.default),s.export(r,"property",()=>aA.default),s.export(r,"propertyOf",()=>aD.default),s.export(r,"pull",()=>aP.default),s.export(r,"pullAll",()=>aM.default),s.export(r,"pullAllBy",()=>aL.default),s.export(r,"pullAllWith",()=>aU.default),s.export(r,"pullAt",()=>aG.default),s.export(r,"random",()=>aq.default),s.export(r,"range",()=>aH.default),s.export(r,"rangeRight",()=>aY.default),s.export(r,"rearg",()=>aJ.default),s.export(r,"reduce",()=>a0.default),s.export(r,"reduceRight",()=>a2.default),s.export(r,"reject",()=>a4.default),s.export(r,"remove",()=>a6.default),s.export(r,"repeat",()=>a8.default),s.export(r,"replace",()=>oe.default),s.export(r,"rest",()=>or.default),s.export(r,"result",()=>on.default),s.export(r,"reverse",()=>oo.default),s.export(r,"round",()=>ol.default),s.export(r,"sample",()=>op.default),s.export(r,"sampleSize",()=>od.default),s.export(r,"set",()=>of.default),s.export(r,"setWith",()=>og.default),s.export(r,"shuffle",()=>ov.default),s.export(r,"size",()=>oy.default),s.export(r,"slice",()=>o_.default),s.export(r,"snakeCase",()=>oI.default),s.export(r,"some",()=>oC.default),s.export(r,"sortBy",()=>oT.default),s.export(r,"sortedIndex",()=>oE.default),s.export(r,"sortedIndexBy",()=>oA.default),s.export(r,"sortedIndexOf",()=>oD.default),s.export(r,"sortedLastIndex",()=>oP.default),s.export(r,"sortedLastIndexBy",()=>oM.default),s.export(r,"sortedLastIndexOf",()=>oL.default),s.export(r,"sortedUniq",()=>oU.default),s.export(r,"sortedUniqBy",()=>oG.default),s.export(r,"split",()=>oq.default),s.export(r,"spread",()=>oH.default),s.export(r,"startCase",()=>oY.default),s.export(r,"startsWith",()=>oJ.default),s.export(r,"stubArray",()=>o0.default),s.export(r,"stubFalse",()=>o2.default),s.export(r,"stubObject",()=>o4.default),s.export(r,"stubString",()=>o6.default),s.export(r,"stubTrue",()=>o8.default),s.export(r,"subtract",()=>ie.default),s.export(r,"sum",()=>ir.default),s.export(r,"sumBy",()=>ia.default),s.export(r,"tail",()=>ii.default),s.export(r,"take",()=>iu.default),s.export(r,"takeRight",()=>ic.default),s.export(r,"takeRightWhile",()=>ih.default),s.export(r,"takeWhile",()=>ig.default),s.export(r,"tap",()=>iv.default),s.export(r,"template",()=>iy.default),s.export(r,"templateSettings",()=>i_.default),s.export(r,"throttle",()=>iI.default),s.export(r,"thru",()=>iC.default),s.export(r,"times",()=>iT.default),s.export(r,"toArray",()=>iE.default),s.export(r,"toFinite",()=>iA.default),s.export(r,"toInteger",()=>iD.default),s.export(r,"toIterator",()=>iP.default),s.export(r,"toJSON",()=>iM.default),s.export(r,"toLength",()=>iL.default),s.export(r,"toLower",()=>iU.default),s.export(r,"toNumber",()=>iG.default),s.export(r,"toPairs",()=>iq.default),s.export(r,"toPairsIn",()=>iH.default),s.export(r,"toPath",()=>iY.default),s.export(r,"toPlainObject",()=>iJ.default),s.export(r,"toSafeInteger",()=>i0.default),s.export(r,"toString",()=>i2.default),s.export(r,"toUpper",()=>i4.default),s.export(r,"transform",()=>i6.default),s.export(r,"trim",()=>i8.default),s.export(r,"trimEnd",()=>le.default),s.export(r,"trimStart",()=>lr.default),s.export(r,"truncate",()=>ln.default),s.export(r,"unary",()=>lo.default),s.export(r,"unescape",()=>ll.default),s.export(r,"union",()=>lp.default),s.export(r,"unionBy",()=>ld.default),s.export(r,"unionWith",()=>lf.default),s.export(r,"uniq",()=>lg.default),s.export(r,"uniqBy",()=>lv.default),s.export(r,"uniqWith",()=>ly.default),s.export(r,"uniqueId",()=>l_.default),s.export(r,"unset",()=>lI.default),s.export(r,"unzip",()=>lC.default),s.export(r,"unzipWith",()=>lT.default),s.export(r,"update",()=>lE.default),s.export(r,"updateWith",()=>lA.default),s.export(r,"upperCase",()=>lD.default),s.export(r,"upperFirst",()=>lP.default),s.export(r,"value",()=>lM.default),s.export(r,"valueOf",()=>lL.default),s.export(r,"values",()=>lU.default),s.export(r,"valuesIn",()=>lG.default),s.export(r,"without",()=>lq.default),s.export(r,"words",()=>lH.default),s.export(r,"wrap",()=>lY.default),s.export(r,"wrapperAt",()=>lJ.default),s.export(r,"wrapperChain",()=>l0.default),s.export(r,"wrapperCommit",()=>ee.default),s.export(r,"wrapperLodash",()=>nr.default),s.export(r,"wrapperNext",()=>nY.default),s.export(r,"wrapperPlant",()=>aE.default),s.export(r,"wrapperReverse",()=>l2.default),s.export(r,"wrapperToIterator",()=>iP.default),s.export(r,"wrapperValue",()=>l4.default),s.export(r,"xor",()=>l6.default),s.export(r,"xorBy",()=>l8.default),s.export(r,"xorWith",()=>ue.default),s.export(r,"zip",()=>ur.default),s.export(r,"zipObject",()=>un.default),s.export(r,"zipObjectDeep",()=>uo.default),s.export(r,"zipWith",()=>ul.default),s.export(r,"default",()=>up.default);var n=e("./add.js"),a=s.interopDefault(n),o=e("./after.js"),i=s.interopDefault(o),l=e("./ary.js"),u=s.interopDefault(l),p=e("./assign.js"),c=s.interopDefault(p),d=e("./assignIn.js"),h=s.interopDefault(d),f=e("./assignInWith.js"),m=s.interopDefault(f),g=e("./assignWith.js"),x=s.interopDefault(g),b=e("./at.js"),y=s.interopDefault(b),j=e("./attempt.js"),_=s.interopDefault(j),k=e("./before.js"),I=s.interopDefault(k),w=e("./bind.js"),C=s.interopDefault(w),S=e("./bindAll.js"),T=s.interopDefault(S),N=e("./bindKey.js"),E=s.interopDefault(N),F=e("./camelCase.js"),A=s.interopDefault(F),R=e("./capitalize.js"),D=s.interopDefault(R),$=e("./castArray.js"),P=s.interopDefault($),z=e("./ceil.js"),M=s.interopDefault(z),O=e("./chain.js"),L=s.interopDefault(O),B=e("./chunk.js"),U=s.interopDefault(B),V=e("./clamp.js"),G=s.interopDefault(V),W=e("./clone.js"),q=s.interopDefault(W),K=e("./cloneDeep.js"),H=s.interopDefault(K),X=e("./cloneDeepWith.js"),Y=s.interopDefault(X),Z=e("./cloneWith.js"),J=s.interopDefault(Z),Q=e("./commit.js"),ee=s.interopDefault(Q),et=e("./compact.js"),er=s.interopDefault(et),es=e("./concat.js"),en=s.interopDefault(es),ea=e("./cond.js"),eo=s.interopDefault(ea),ei=e("./conforms.js"),el=s.interopDefault(ei),eu=e("./conformsTo.js"),ep=s.interopDefault(eu),ec=e("./constant.js"),ed=s.interopDefault(ec),eh=e("./countBy.js"),ef=s.interopDefault(eh),em=e("./create.js"),eg=s.interopDefault(em),ex=e("./curry.js"),ev=s.interopDefault(ex),eb=e("./curryRight.js"),ey=s.interopDefault(eb),ej=e("./debounce.js"),e_=s.interopDefault(ej),ek=e("./deburr.js"),eI=s.interopDefault(ek),ew=e("./defaultTo.js"),eC=s.interopDefault(ew),eS=e("./defaults.js"),eT=s.interopDefault(eS),eN=e("./defaultsDeep.js"),eE=s.interopDefault(eN),eF=e("./defer.js"),eA=s.interopDefault(eF),eR=e("./delay.js"),eD=s.interopDefault(eR),e$=e("./difference.js"),eP=s.interopDefault(e$),ez=e("./differenceBy.js"),eM=s.interopDefault(ez),eO=e("./differenceWith.js"),eL=s.interopDefault(eO),eB=e("./divide.js"),eU=s.interopDefault(eB),eV=e("./drop.js"),eG=s.interopDefault(eV),eW=e("./dropRight.js"),eq=s.interopDefault(eW),eK=e("./dropRightWhile.js"),eH=s.interopDefault(eK),eX=e("./dropWhile.js"),eY=s.interopDefault(eX),eZ=e("./each.js"),eJ=s.interopDefault(eZ),eQ=e("./eachRight.js"),e0=s.interopDefault(eQ),e1=e("./endsWith.js"),e2=s.interopDefault(e1),e3=e("./entries.js"),e4=s.interopDefault(e3),e5=e("./entriesIn.js"),e6=s.interopDefault(e5),e9=e("./eq.js"),e8=s.interopDefault(e9),e7=e("./escape.js"),te=s.interopDefault(e7),tt=e("./escapeRegExp.js"),tr=s.interopDefault(tt),ts=e("./every.js"),tn=s.interopDefault(ts),ta=e("./extend.js"),to=s.interopDefault(ta),ti=e("./extendWith.js"),tl=s.interopDefault(ti),tu=e("./fill.js"),tp=s.interopDefault(tu),tc=e("./filter.js"),td=s.interopDefault(tc),th=e("./find.js"),tf=s.interopDefault(th),tm=e("./findIndex.js"),tg=s.interopDefault(tm),tx=e("./findKey.js"),tv=s.interopDefault(tx),tb=e("./findLast.js"),ty=s.interopDefault(tb),tj=e("./findLastIndex.js"),t_=s.interopDefault(tj),tk=e("./findLastKey.js"),tI=s.interopDefault(tk),tw=e("./first.js"),tC=s.interopDefault(tw),tS=e("./flatMap.js"),tT=s.interopDefault(tS),tN=e("./flatMapDeep.js"),tE=s.interopDefault(tN),tF=e("./flatMapDepth.js"),tA=s.interopDefault(tF),tR=e("./flatten.js"),tD=s.interopDefault(tR),t$=e("./flattenDeep.js"),tP=s.interopDefault(t$),tz=e("./flattenDepth.js"),tM=s.interopDefault(tz),tO=e("./flip.js"),tL=s.interopDefault(tO),tB=e("./floor.js"),tU=s.interopDefault(tB),tV=e("./flow.js"),tG=s.interopDefault(tV),tW=e("./flowRight.js"),tq=s.interopDefault(tW),tK=e("./forEach.js"),tH=s.interopDefault(tK),tX=e("./forEachRight.js"),tY=s.interopDefault(tX),tZ=e("./forIn.js"),tJ=s.interopDefault(tZ),tQ=e("./forInRight.js"),t0=s.interopDefault(tQ),t1=e("./forOwn.js"),t2=s.interopDefault(t1),t3=e("./forOwnRight.js"),t4=s.interopDefault(t3),t5=e("./fromPairs.js"),t6=s.interopDefault(t5),t9=e("./functions.js"),t8=s.interopDefault(t9),t7=e("./functionsIn.js"),re=s.interopDefault(t7),rt=e("./get.js"),rr=s.interopDefault(rt),rs=e("./groupBy.js"),rn=s.interopDefault(rs),ra=e("./gt.js"),ro=s.interopDefault(ra),ri=e("./gte.js"),rl=s.interopDefault(ri),ru=e("./has.js"),rp=s.interopDefault(ru),rc=e("./hasIn.js"),rd=s.interopDefault(rc),rh=e("./head.js"),rf=s.interopDefault(rh),rm=e("./identity.js"),rg=s.interopDefault(rm),rx=e("./inRange.js"),rv=s.interopDefault(rx),rb=e("./includes.js"),ry=s.interopDefault(rb),rj=e("./indexOf.js"),r_=s.interopDefault(rj),rk=e("./initial.js"),rI=s.interopDefault(rk),rw=e("./intersection.js"),rC=s.interopDefault(rw),rS=e("./intersectionBy.js"),rT=s.interopDefault(rS),rN=e("./intersectionWith.js"),rE=s.interopDefault(rN),rF=e("./invert.js"),rA=s.interopDefault(rF),rR=e("./invertBy.js"),rD=s.interopDefault(rR),r$=e("./invoke.js"),rP=s.interopDefault(r$),rz=e("./invokeMap.js"),rM=s.interopDefault(rz),rO=e("./isArguments.js"),rL=s.interopDefault(rO),rB=e("./isArray.js"),rU=s.interopDefault(rB),rV=e("./isArrayBuffer.js"),rG=s.interopDefault(rV),rW=e("./isArrayLike.js"),rq=s.interopDefault(rW),rK=e("./isArrayLikeObject.js"),rH=s.interopDefault(rK),rX=e("./isBoolean.js"),rY=s.interopDefault(rX),rZ=e("./isBuffer.js"),rJ=s.interopDefault(rZ),rQ=e("./isDate.js"),r0=s.interopDefault(rQ),r1=e("./isElement.js"),r2=s.interopDefault(r1),r3=e("./isEmpty.js"),r4=s.interopDefault(r3),r5=e("./isEqual.js"),r6=s.interopDefault(r5),r9=e("./isEqualWith.js"),r8=s.interopDefault(r9),r7=e("./isError.js"),se=s.interopDefault(r7),st=e("./isFinite.js"),sr=s.interopDefault(st),ss=e("./isFunction.js"),sn=s.interopDefault(ss),sa=e("./isInteger.js"),so=s.interopDefault(sa),si=e("./isLength.js"),sl=s.interopDefault(si),su=e("./isMap.js"),sp=s.interopDefault(su),sc=e("./isMatch.js"),sd=s.interopDefault(sc),sh=e("./isMatchWith.js"),sf=s.interopDefault(sh),sm=e("./isNaN.js"),sg=s.interopDefault(sm),sx=e("./isNative.js"),sv=s.interopDefault(sx),sb=e("./isNil.js"),sy=s.interopDefault(sb),sj=e("./isNull.js"),s_=s.interopDefault(sj),sk=e("./isNumber.js"),sI=s.interopDefault(sk),sw=e("./isObject.js"),sC=s.interopDefault(sw),sS=e("./isObjectLike.js"),sT=s.interopDefault(sS),sN=e("./isPlainObject.js"),sE=s.interopDefault(sN),sF=e("./isRegExp.js"),sA=s.interopDefault(sF),sR=e("./isSafeInteger.js"),sD=s.interopDefault(sR),s$=e("./isSet.js"),sP=s.interopDefault(s$),sz=e("./isString.js"),sM=s.interopDefault(sz),sO=e("./isSymbol.js"),sL=s.interopDefault(sO),sB=e("./isTypedArray.js"),sU=s.interopDefault(sB),sV=e("./isUndefined.js"),sG=s.interopDefault(sV),sW=e("./isWeakMap.js"),sq=s.interopDefault(sW),sK=e("./isWeakSet.js"),sH=s.interopDefault(sK),sX=e("./iteratee.js"),sY=s.interopDefault(sX),sZ=e("./join.js"),sJ=s.interopDefault(sZ),sQ=e("./kebabCase.js"),s0=s.interopDefault(sQ),s1=e("./keyBy.js"),s2=s.interopDefault(s1),s3=e("./keys.js"),s4=s.interopDefault(s3),s5=e("./keysIn.js"),s6=s.interopDefault(s5),s9=e("./last.js"),s8=s.interopDefault(s9),s7=e("./lastIndexOf.js"),ne=s.interopDefault(s7),nt=e("./wrapperLodash.js"),nr=s.interopDefault(nt),ns=e("./lowerCase.js"),nn=s.interopDefault(ns),na=e("./lowerFirst.js"),no=s.interopDefault(na),ni=e("./lt.js"),nl=s.interopDefault(ni),nu=e("./lte.js"),np=s.interopDefault(nu),nc=e("./map.js"),nd=s.interopDefault(nc),nh=e("./mapKeys.js"),nf=s.interopDefault(nh),nm=e("./mapValues.js"),ng=s.interopDefault(nm),nx=e("./matches.js"),nv=s.interopDefault(nx),nb=e("./matchesProperty.js"),ny=s.interopDefault(nb),nj=e("./max.js"),n_=s.interopDefault(nj),nk=e("./maxBy.js"),nI=s.interopDefault(nk),nw=e("./mean.js"),nC=s.interopDefault(nw),nS=e("./meanBy.js"),nT=s.interopDefault(nS),nN=e("./memoize.js"),nE=s.interopDefault(nN),nF=e("./merge.js"),nA=s.interopDefault(nF),nR=e("./mergeWith.js"),nD=s.interopDefault(nR),n$=e("./method.js"),nP=s.interopDefault(n$),nz=e("./methodOf.js"),nM=s.interopDefault(nz),nO=e("./min.js"),nL=s.interopDefault(nO),nB=e("./minBy.js"),nU=s.interopDefault(nB),nV=e("./mixin.js"),nG=s.interopDefault(nV),nW=e("./multiply.js"),nq=s.interopDefault(nW),nK=e("./negate.js"),nH=s.interopDefault(nK),nX=e("./next.js"),nY=s.interopDefault(nX),nZ=e("./noop.js"),nJ=s.interopDefault(nZ),nQ=e("./now.js"),n0=s.interopDefault(nQ),n1=e("./nth.js"),n2=s.interopDefault(n1),n3=e("./nthArg.js"),n4=s.interopDefault(n3),n5=e("./omit.js"),n6=s.interopDefault(n5),n9=e("./omitBy.js"),n8=s.interopDefault(n9),n7=e("./once.js"),ae=s.interopDefault(n7),at=e("./orderBy.js"),ar=s.interopDefault(at),as=e("./over.js"),an=s.interopDefault(as),aa=e("./overArgs.js"),ao=s.interopDefault(aa),ai=e("./overEvery.js"),al=s.interopDefault(ai),au=e("./overSome.js"),ap=s.interopDefault(au),ac=e("./pad.js"),ad=s.interopDefault(ac),ah=e("./padEnd.js"),af=s.interopDefault(ah),am=e("./padStart.js"),ag=s.interopDefault(am),ax=e("./parseInt.js"),av=s.interopDefault(ax),ab=e("./partial.js"),ay=s.interopDefault(ab),aj=e("./partialRight.js"),a_=s.interopDefault(aj),ak=e("./partition.js"),aI=s.interopDefault(ak),aw=e("./pick.js"),aC=s.interopDefault(aw),aS=e("./pickBy.js"),aT=s.interopDefault(aS),aN=e("./plant.js"),aE=s.interopDefault(aN),aF=e("./property.js"),aA=s.interopDefault(aF),aR=e("./propertyOf.js"),aD=s.interopDefault(aR),a$=e("./pull.js"),aP=s.interopDefault(a$),az=e("./pullAll.js"),aM=s.interopDefault(az),aO=e("./pullAllBy.js"),aL=s.interopDefault(aO),aB=e("./pullAllWith.js"),aU=s.interopDefault(aB),aV=e("./pullAt.js"),aG=s.interopDefault(aV),aW=e("./random.js"),aq=s.interopDefault(aW),aK=e("./range.js"),aH=s.interopDefault(aK),aX=e("./rangeRight.js"),aY=s.interopDefault(aX),aZ=e("./rearg.js"),aJ=s.interopDefault(aZ),aQ=e("./reduce.js"),a0=s.interopDefault(aQ),a1=e("./reduceRight.js"),a2=s.interopDefault(a1),a3=e("./reject.js"),a4=s.interopDefault(a3),a5=e("./remove.js"),a6=s.interopDefault(a5),a9=e("./repeat.js"),a8=s.interopDefault(a9),a7=e("./replace.js"),oe=s.interopDefault(a7),ot=e("./rest.js"),or=s.interopDefault(ot),os=e("./result.js"),on=s.interopDefault(os),oa=e("./reverse.js"),oo=s.interopDefault(oa),oi=e("./round.js"),ol=s.interopDefault(oi),ou=e("./sample.js"),op=s.interopDefault(ou),oc=e("./sampleSize.js"),od=s.interopDefault(oc),oh=e("./set.js"),of=s.interopDefault(oh),om=e("./setWith.js"),og=s.interopDefault(om),ox=e("./shuffle.js"),ov=s.interopDefault(ox),ob=e("./size.js"),oy=s.interopDefault(ob),oj=e("./slice.js"),o_=s.interopDefault(oj),ok=e("./snakeCase.js"),oI=s.interopDefault(ok),ow=e("./some.js"),oC=s.interopDefault(ow),oS=e("./sortBy.js"),oT=s.interopDefault(oS),oN=e("./sortedIndex.js"),oE=s.interopDefault(oN),oF=e("./sortedIndexBy.js"),oA=s.interopDefault(oF),oR=e("./sortedIndexOf.js"),oD=s.interopDefault(oR),o$=e("./sortedLastIndex.js"),oP=s.interopDefault(o$),oz=e("./sortedLastIndexBy.js"),oM=s.interopDefault(oz),oO=e("./sortedLastIndexOf.js"),oL=s.interopDefault(oO),oB=e("./sortedUniq.js"),oU=s.interopDefault(oB),oV=e("./sortedUniqBy.js"),oG=s.interopDefault(oV),oW=e("./split.js"),oq=s.interopDefault(oW),oK=e("./spread.js"),oH=s.interopDefault(oK),oX=e("./startCase.js"),oY=s.interopDefault(oX),oZ=e("./startsWith.js"),oJ=s.interopDefault(oZ),oQ=e("./stubArray.js"),o0=s.interopDefault(oQ),o1=e("./stubFalse.js"),o2=s.interopDefault(o1),o3=e("./stubObject.js"),o4=s.interopDefault(o3),o5=e("./stubString.js"),o6=s.interopDefault(o5),o9=e("./stubTrue.js"),o8=s.interopDefault(o9),o7=e("./subtract.js"),ie=s.interopDefault(o7),it=e("./sum.js"),ir=s.interopDefault(it),is=e("./sumBy.js"),ia=s.interopDefault(is),io=e("./tail.js"),ii=s.interopDefault(io),il=e("./take.js"),iu=s.interopDefault(il),ip=e("./takeRight.js"),ic=s.interopDefault(ip),id=e("./takeRightWhile.js"),ih=s.interopDefault(id),im=e("./takeWhile.js"),ig=s.interopDefault(im),ix=e("./tap.js"),iv=s.interopDefault(ix),ib=e("./template.js"),iy=s.interopDefault(ib),ij=e("./templateSettings.js"),i_=s.interopDefault(ij),ik=e("./throttle.js"),iI=s.interopDefault(ik),iw=e("./thru.js"),iC=s.interopDefault(iw),iS=e("./times.js"),iT=s.interopDefault(iS),iN=e("./toArray.js"),iE=s.interopDefault(iN),iF=e("./toFinite.js"),iA=s.interopDefault(iF),iR=e("./toInteger.js"),iD=s.interopDefault(iR),i$=e("./toIterator.js"),iP=s.interopDefault(i$),iz=e("./toJSON.js"),iM=s.interopDefault(iz),iO=e("./toLength.js"),iL=s.interopDefault(iO),iB=e("./toLower.js"),iU=s.interopDefault(iB),iV=e("./toNumber.js"),iG=s.interopDefault(iV),iW=e("./toPairs.js"),iq=s.interopDefault(iW),iK=e("./toPairsIn.js"),iH=s.interopDefault(iK),iX=e("./toPath.js"),iY=s.interopDefault(iX),iZ=e("./toPlainObject.js"),iJ=s.interopDefault(iZ),iQ=e("./toSafeInteger.js"),i0=s.interopDefault(iQ),i1=e("./toString.js"),i2=s.interopDefault(i1),i3=e("./toUpper.js"),i4=s.interopDefault(i3),i5=e("./transform.js"),i6=s.interopDefault(i5),i9=e("./trim.js"),i8=s.interopDefault(i9),i7=e("./trimEnd.js"),le=s.interopDefault(i7),lt=e("./trimStart.js"),lr=s.interopDefault(lt),ls=e("./truncate.js"),ln=s.interopDefault(ls),la=e("./unary.js"),lo=s.interopDefault(la),li=e("./unescape.js"),ll=s.interopDefault(li),lu=e("./union.js"),lp=s.interopDefault(lu),lc=e("./unionBy.js"),ld=s.interopDefault(lc),lh=e("./unionWith.js"),lf=s.interopDefault(lh),lm=e("./uniq.js"),lg=s.interopDefault(lm),lx=e("./uniqBy.js"),lv=s.interopDefault(lx),lb=e("./uniqWith.js"),ly=s.interopDefault(lb),lj=e("./uniqueId.js"),l_=s.interopDefault(lj),lk=e("./unset.js"),lI=s.interopDefault(lk),lw=e("./unzip.js"),lC=s.interopDefault(lw),lS=e("./unzipWith.js"),lT=s.interopDefault(lS),lN=e("./update.js"),lE=s.interopDefault(lN),lF=e("./updateWith.js"),lA=s.interopDefault(lF),lR=e("./upperCase.js"),lD=s.interopDefault(lR),l$=e("./upperFirst.js"),lP=s.interopDefault(l$),lz=e("./value.js"),lM=s.interopDefault(lz),lO=e("./valueOf.js"),lL=s.interopDefault(lO),lB=e("./values.js"),lU=s.interopDefault(lB),lV=e("./valuesIn.js"),lG=s.interopDefault(lV),lW=e("./without.js"),lq=s.interopDefault(lW),lK=e("./words.js"),lH=s.interopDefault(lK),lX=e("./wrap.js"),lY=s.interopDefault(lX),lZ=e("./wrapperAt.js"),lJ=s.interopDefault(lZ),lQ=e("./wrapperChain.js"),l0=s.interopDefault(lQ),l1=e("./wrapperReverse.js"),l2=s.interopDefault(l1),l3=e("./wrapperValue.js"),l4=s.interopDefault(l3),l5=e("./xor.js"),l6=s.interopDefault(l5),l9=e("./xorBy.js"),l8=s.interopDefault(l9),l7=e("./xorWith.js"),ue=s.interopDefault(l7),ut=e("./zip.js"),ur=s.interopDefault(ut),us=e("./zipObject.js"),un=s.interopDefault(us),ua=e("./zipObjectDeep.js"),uo=s.interopDefault(ua),ui=e("./zipWith.js"),ul=s.interopDefault(ui),uu=e("./lodash.default.js"),up=s.interopDefault(uu)},{"./add.js":!1,"./after.js":!1,"./ary.js":!1,"./assign.js":!1,"./assignIn.js":!1,"./assignInWith.js":!1,"./assignWith.js":!1,"./at.js":!1,"./attempt.js":!1,"./before.js":!1,"./bind.js":!1,"./bindAll.js":!1,"./bindKey.js":!1,"./camelCase.js":!1,"./capitalize.js":!1,"./castArray.js":!1,"./ceil.js":!1,"./chain.js":!1,"./chunk.js":!1,"./clamp.js":!1,"./clone.js":!1,"./cloneDeep.js":!1,"./cloneDeepWith.js":!1,"./cloneWith.js":!1,"./commit.js":!1,"./compact.js":!1,"./concat.js":!1,"./cond.js":!1,"./conforms.js":!1,"./conformsTo.js":!1,"./constant.js":!1,"./countBy.js":!1,"./create.js":!1,"./curry.js":!1,"./curryRight.js":!1,"./debounce.js":"l3yba","./deburr.js":!1,"./defaultTo.js":!1,"./defaults.js":!1,"./defaultsDeep.js":!1,"./defer.js":!1,"./delay.js":!1,"./difference.js":!1,"./differenceBy.js":!1,"./differenceWith.js":!1,"./divide.js":!1,"./drop.js":!1,"./dropRight.js":!1,"./dropRightWhile.js":!1,"./dropWhile.js":!1,"./each.js":!1,"./eachRight.js":!1,"./endsWith.js":!1,"./entries.js":!1,"./entriesIn.js":!1,"./eq.js":!1,"./escape.js":!1,"./escapeRegExp.js":!1,"./every.js":!1,"./extend.js":!1,"./extendWith.js":!1,"./fill.js":!1,"./filter.js":!1,"./find.js":!1,"./findIndex.js":!1,"./findKey.js":!1,"./findLast.js":!1,"./findLastIndex.js":!1,"./findLastKey.js":!1,"./first.js":!1,"./flatMap.js":!1,"./flatMapDeep.js":!1,"./flatMapDepth.js":!1,"./flatten.js":!1,"./flattenDeep.js":!1,"./flattenDepth.js":!1,"./flip.js":!1,"./floor.js":!1,"./flow.js":!1,"./flowRight.js":!1,"./forEach.js":!1,"./forEachRight.js":!1,"./forIn.js":!1,"./forInRight.js":!1,"./forOwn.js":!1,"./forOwnRight.js":!1,"./fromPairs.js":!1,"./functions.js":!1,"./functionsIn.js":!1,"./get.js":!1,"./groupBy.js":!1,"./gt.js":!1,"./gte.js":!1,"./has.js":!1,"./hasIn.js":!1,"./head.js":!1,"./identity.js":!1,"./inRange.js":!1,"./includes.js":!1,"./indexOf.js":!1,"./initial.js":!1,"./intersection.js":!1,"./intersectionBy.js":!1,"./intersectionWith.js":!1,"./invert.js":!1,"./invertBy.js":!1,"./invoke.js":!1,"./invokeMap.js":!1,"./isArguments.js":!1,"./isArray.js":!1,"./isArrayBuffer.js":!1,"./isArrayLike.js":!1,"./isArrayLikeObject.js":!1,"./isBoolean.js":!1,"./isBuffer.js":!1,"./isDate.js":!1,"./isElement.js":!1,"./isEmpty.js":!1,"./isEqual.js":!1,"./isEqualWith.js":!1,"./isError.js":!1,"./isFinite.js":!1,"./isFunction.js":!1,"./isInteger.js":!1,"./isLength.js":!1,"./isMap.js":!1,"./isMatch.js":!1,"./isMatchWith.js":!1,"./isNaN.js":!1,"./isNative.js":!1,"./isNil.js":!1,"./isNull.js":!1,"./isNumber.js":!1,"./isObject.js":!1,"./isObjectLike.js":!1,"./isPlainObject.js":!1,"./isRegExp.js":!1,"./isSafeInteger.js":!1,"./isSet.js":!1,"./isString.js":!1,"./isSymbol.js":!1,"./isTypedArray.js":!1,"./isUndefined.js":!1,"./isWeakMap.js":!1,"./isWeakSet.js":!1,"./iteratee.js":!1,"./join.js":!1,"./kebabCase.js":!1,"./keyBy.js":!1,"./keys.js":!1,"./keysIn.js":!1,"./last.js":!1,"./lastIndexOf.js":!1,"./wrapperLodash.js":!1,"./lowerCase.js":!1,"./lowerFirst.js":!1,"./lt.js":!1,"./lte.js":!1,"./map.js":!1,"./mapKeys.js":!1,"./mapValues.js":!1,"./matches.js":!1,"./matchesProperty.js":!1,"./max.js":!1,"./maxBy.js":!1,"./mean.js":!1,"./meanBy.js":!1,"./memoize.js":!1,"./merge.js":!1,"./mergeWith.js":!1,"./method.js":!1,"./methodOf.js":!1,"./min.js":!1,"./minBy.js":!1,"./mixin.js":!1,"./multiply.js":!1,"./negate.js":!1,"./next.js":!1,"./noop.js":!1,"./now.js":!1,"./nth.js":!1,"./nthArg.js":!1,"./omit.js":!1,"./omitBy.js":!1,"./once.js":!1,"./orderBy.js":!1,"./over.js":!1,"./overArgs.js":!1,"./overEvery.js":!1,"./overSome.js":!1,"./pad.js":!1,"./padEnd.js":!1,"./padStart.js":!1,"./parseInt.js":!1,"./partial.js":!1,"./partialRight.js":!1,"./partition.js":!1,"./pick.js":!1,"./pickBy.js":!1,"./plant.js":!1,"./property.js":!1,"./propertyOf.js":!1,"./pull.js":!1,"./pullAll.js":!1,"./pullAllBy.js":!1,"./pullAllWith.js":!1,"./pullAt.js":!1,"./random.js":!1,"./range.js":!1,"./rangeRight.js":!1,"./rearg.js":!1,"./reduce.js":!1,"./reduceRight.js":!1,"./reject.js":!1,"./remove.js":!1,"./repeat.js":!1,"./replace.js":!1,"./rest.js":!1,"./result.js":!1,"./reverse.js":!1,"./round.js":!1,"./sample.js":!1,"./sampleSize.js":!1,"./set.js":!1,"./setWith.js":!1,"./shuffle.js":!1,"./size.js":!1,"./slice.js":!1,"./snakeCase.js":!1,"./some.js":!1,"./sortBy.js":!1,"./sortedIndex.js":!1,"./sortedIndexBy.js":!1,"./sortedIndexOf.js":!1,"./sortedLastIndex.js":!1,"./sortedLastIndexBy.js":!1,"./sortedLastIndexOf.js":!1,"./sortedUniq.js":!1,"./sortedUniqBy.js":!1,"./split.js":!1,"./spread.js":!1,"./startCase.js":!1,"./startsWith.js":!1,"./stubArray.js":!1,"./stubFalse.js":!1,"./stubObject.js":!1,"./stubString.js":!1,"./stubTrue.js":!1,"./subtract.js":!1,"./sum.js":!1,"./sumBy.js":!1,"./tail.js":!1,"./take.js":!1,"./takeRight.js":!1,"./takeRightWhile.js":!1,"./takeWhile.js":!1,"./tap.js":!1,"./template.js":!1,"./templateSettings.js":!1,"./throttle.js":!1,"./thru.js":!1,"./times.js":!1,"./toArray.js":!1,"./toFinite.js":!1,"./toInteger.js":!1,"./toIterator.js":!1,"./toJSON.js":!1,"./toLength.js":!1,"./toLower.js":!1,"./toNumber.js":!1,"./toPairs.js":!1,"./toPairsIn.js":!1,"./toPath.js":!1,"./toPlainObject.js":!1,"./toSafeInteger.js":!1,"./toString.js":!1,"./toUpper.js":!1,"./transform.js":!1,"./trim.js":!1,"./trimEnd.js":!1,"./trimStart.js":!1,"./truncate.js":!1,"./unary.js":!1,"./unescape.js":!1,"./union.js":!1,"./unionBy.js":!1,"./unionWith.js":!1,"./uniq.js":!1,"./uniqBy.js":!1,"./uniqWith.js":!1,"./uniqueId.js":!1,"./unset.js":!1,"./unzip.js":!1,"./unzipWith.js":!1,"./update.js":!1,"./updateWith.js":!1,"./upperCase.js":!1,"./upperFirst.js":!1,"./value.js":!1,"./valueOf.js":!1,"./values.js":!1,"./valuesIn.js":!1,"./without.js":!1,"./words.js":!1,"./wrap.js":!1,"./wrapperAt.js":!1,"./wrapperChain.js":!1,"./wrapperReverse.js":!1,"./wrapperValue.js":!1,"./xor.js":!1,"./xorBy.js":!1,"./xorWith.js":!1,"./zip.js":!1,"./zipObject.js":!1,"./zipObjectDeep.js":!1,"./zipWith.js":!1,"./lodash.default.js":!1,"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],l3yba:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./isObject.js"),a=s.interopDefault(n),o=e("./now.js"),i=s.interopDefault(o),l=e("./toNumber.js"),u=s.interopDefault(l),p=Math.max,c=Math.min;r.default=/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */function(e,t,r){var s,n,o,l,d,h,f=0,m=!1,g=!1,x=!0;if("function"!=typeof e)throw TypeError("Expected a function");function b(t){var r=s,a=n;return s=n=void 0,f=t,l=e.apply(a,r)}function y(e){var r=e-h,s=e-f;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return void 0===h||r>=t||r<0||g&&s>=o}function j(){var e,r,s,n=(0,i.default)();if(y(n))return _(n);// Restart the timer.
d=setTimeout(j,(e=n-h,r=n-f,s=t-e,g?c(s,o-r):s))}function _(e){return(// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
(d=void 0,x&&s)?b(e):(s=n=void 0,l))}function k(){var e,r=(0,i.default)(),a=y(r);if(s=arguments,n=this,h=r,a){if(void 0===d)return(// Reset any `maxWait` timer.
f=e=h,// Start the timer for the trailing edge.
d=setTimeout(j,t),m?b(e):l);if(g)return(// Handle invocations in a tight loop.
clearTimeout(d),d=setTimeout(j,t),b(h))}return void 0===d&&(d=setTimeout(j,t)),l}return t=(0,u.default)(t)||0,(0,a.default)(r)&&(m=!!r.leading,o=(g="maxWait"in r)?p((0,u.default)(r.maxWait)||0,t):o,x="trailing"in r?!!r.trailing:x),k.cancel=function(){void 0!==d&&clearTimeout(d),f=0,s=h=n=d=void 0},k.flush=function(){return void 0===d?l:_((0,i.default)())},k}},{"./isObject.js":"ah1Cr","./now.js":"i9l7u","./toNumber.js":"4AdPu","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],ah1Cr:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i9l7u:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_root.js"),a=s.interopDefault(n);r.default=function(){return(0,a.default).Date.now()}},{"./_root.js":"10cmd","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"10cmd":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_freeGlobal.js"),a=s.interopDefault(n),o="object"==typeof self&&self&&self.Object===Object&&self,i=a.default||o||Function("return this")();r.default=i},{"./_freeGlobal.js":"cvlFB","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],cvlFB:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r);var s=arguments[3],n="object"==typeof s&&s&&s.Object===Object&&s;r.default=n},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"4AdPu":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_baseTrim.js"),a=s.interopDefault(n),o=e("./isObject.js"),i=s.interopDefault(o),l=e("./isSymbol.js"),u=s.interopDefault(l),p=0/0,c=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,h=/^0o[0-7]+$/i,f=parseInt;r.default=/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */function(e){if("number"==typeof e)return e;if((0,u.default)(e))return p;if((0,i.default)(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=(0,i.default)(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=(0,a.default)(e);var r=d.test(e);return r||h.test(e)?f(e.slice(2),r?2:8):c.test(e)?p:+e}},{"./_baseTrim.js":"luSuV","./isObject.js":"ah1Cr","./isSymbol.js":"8V8ty","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],luSuV:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_trimmedEndIndex.js"),a=s.interopDefault(n),o=/^\s+/;r.default=/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */function(e){return e?e.slice(0,(0,a.default)(e)+1).replace(o,""):e}},{"./_trimmedEndIndex.js":"c0kTb","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c0kTb:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r);var s=/\s/;r.default=/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */function(e){for(var t=e.length;t--&&s.test(e.charAt(t)););return t}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"8V8ty":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_baseGetTag.js"),a=s.interopDefault(n),o=e("./isObjectLike.js"),i=s.interopDefault(o);r.default=/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */function(e){return"symbol"==typeof e||(0,i.default)(e)&&"[object Symbol]"==(0,a.default)(e)}},{"./_baseGetTag.js":"9Chff","./isObjectLike.js":"6kL9F","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"9Chff":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_Symbol.js"),a=s.interopDefault(n),o=e("./_getRawTag.js"),i=s.interopDefault(o),l=e("./_objectToString.js"),u=s.interopDefault(l),p=a.default?a.default.toStringTag:void 0;r.default=/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":p&&p in Object(e)?(0,i.default)(e):(0,u.default)(e)}},{"./_Symbol.js":"c53Uj","./_getRawTag.js":"gkm0n","./_objectToString.js":"2GCBc","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],c53Uj:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_root.js"),a=s.interopDefault(n).default.Symbol;r.default=a},{"./_root.js":"10cmd","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gkm0n:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("./_Symbol.js"),a=s.interopDefault(n),o=Object.prototype,i=o.hasOwnProperty,l=o.toString,u=a.default?a.default.toStringTag:void 0;r.default=/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */function(e){var t=i.call(e,u),r=e[u];try{e[u]=void 0;var s=!0}catch(e){}var n=l.call(e);return s&&(t?e[u]=r:delete e[u]),n}},{"./_Symbol.js":"c53Uj","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"2GCBc":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r);/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var s=Object.prototype.toString;r.default=/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */function(e){return s.call(e)}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6kL9F":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=function(e){return null!=e&&"object"==typeof e}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"6YQNR":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>i);var n=e("vue");let a={class:"tf-prediction"},o=/*#__PURE__*/(0,n.createElementVNode)("br",null,null,-1);function i(e,t,r,s,i,l){let u=(0,n.resolveComponent)("tf-result"),p=(0,n.resolveComponent)("model-card");return(0,n.openBlock)(),(0,n.createElementBlock)("div",a,[(0,n.createVNode)(u,{title:"sol",description:"Prediction of solubility",predictions:i.predictions,adjective:r.adjective,overall:l.overall},null,8,["predictions","adjective","overall"]),o,(0,n.createVNode)(p,{url:this.url+"/card.json"},null,8,["url"])])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"7dmuM":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],"1BoZH":[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("85a1f74b1a0879cc")).__esModule&&(s=s.default),s.render=e("d1e0bfaeb6612d23").render,e("cc4730969b439620").default(s),s.__scopeId="data-v-52911e",s.__file="Reference.vue",r.default=s},{"85a1f74b1a0879cc":"i85iB",d1e0bfaeb6612d23:"gc211",cc4730969b439620:"gBDVW","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],i85iB:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default={name:"Reference",props:{reflink:{type:String,default:""},reftitle:{type:String,default:""},journal:{type:String,default:""},year:{type:String,default:""},issue:{type:String,default:""},volume:{type:String,default:""},pages:{type:String,default:""},doi:{type:String,default:""}}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gc211:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>i);var n=e("vue");let a=["href"],o={key:0};function i(e,t,r,s,i,l){return(0,n.openBlock)(),(0,n.createElementBlock)("small",null,[(0,n.createElementVNode)("a",{href:r.reflink},(0,n.toDisplayString)(r.reftitle),9,a),(0,n.createTextVNode)(". "),(0,n.createElementVNode)("em",null,(0,n.toDisplayString)(r.journal?r.journal:""),1),r.year?((0,n.openBlock)(),(0,n.createElementBlock)("span",o,[(0,n.createTextVNode)(", "),(0,n.createElementVNode)("b",null,(0,n.toDisplayString)(r.year?r.year:""),1)])):(0,n.createCommentVNode)("",!0),(0,n.createElementVNode)("em",null,(0,n.toDisplayString)(r.volume?", "+r.volume:""),1),(0,n.createTextVNode)((0,n.toDisplayString)(r.issue?" ("+r.issue+")":"")+(0,n.toDisplayString)(r.pages?" "+r.pages+".":".")+" "+(0,n.toDisplayString)(r.doi?"DOI: "+r.doi+".":""),1)])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],gBDVW:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],hfJpU:[function(e,t,r){t.exports=JSON.parse('{"name":"mol-dashboard","version":"1.0.0","description":"molecule dashboard","browserslist":"> 0.5%, last 2 versions, not dead","scripts":{"start":"parcel src/index.html","build":"parcel build src/index.html --no-cache --no-scope-hoist --public-url https://mol.dev/"},"author":"Andrew White","license":"GNUv3","dependencies":{"@tensorflow/tfjs":"^3.17.0","buffer":"^6.0.3","bulma":"^0.9.3","lodash-es":"^4.17.21","parcel":"^2.5.0","smiles-drawer":"^1.2.0","vue":"^3.2.20"},"devDependencies":{"@parcel/optimizer-data-url":"^2.5.0","@parcel/transformer-inline-string":"^2.5.0","@parcel/transformer-sass":"^2.5.0","@parcel/transformer-vue":"^2.5.0","@vue/cli-service":"^5.0.8","eslint":"^8.2.0","eslint-plugin-vue":"^8.0.3"},"alias":{"process":false}}')},{}],kqzyW:[function(e,t,r){let s;e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),(s=e("1fb3277a72313563")).__esModule&&(s=s.default),s.render=e("63fced7c0b48e9d").render,e("dd54c55cc42ca11a").default(s),s.__scopeId="data-v-d1286e",s.__file="SmilesViewer.vue",r.default=s},{"1fb3277a72313563":"iZhbW","63fced7c0b48e9d":"90B9u",dd54c55cc42ca11a:"VBYkS","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],iZhbW:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r);var n=e("smiles-drawer"),a=s.interopDefault(n),o=e("lodash-es");r.default={name:"SmilesViewer",props:{smiles:String,viewWidth:Number,palette:{type:String,default:"light"}},data:()=>({drawer:null}),mounted:function(){this.renewDrawer()},watch:{smiles:(0,o.debounce)(function(){this.updateSmiles(this.smiles)},500),viewWidth:function(){this.$refs.smilesCanvas.width=this.viewWidth,this.renewDrawer()}},methods:{updateSmiles:function(e){this.drawer&&e.length>0&&(0,a.default).parse(e,e=>{this.drawer.draw(e,this.$refs.smilesCanvas,this.palette)},e=>{console.log(e)})},renewDrawer:function(){// set to current width of canvas
let e={width:this.$refs.smilesCanvas.width,height:this.$refs.smilesCanvas.height};this.drawer=new a.default.Drawer(e),this.updateSmiles(this.smiles)}}}},{"smiles-drawer":"e2P7o","lodash-es":"ld8fl","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],e2P7o:[function(e,t,r){//@ts-check
let s=e("e76aa41a80ac853d"),n=e("cac39455a0d4cde3"),a=e("a58d8ea94e60b553");// Detect SSR (server side rendering)
var o=!!("undefined"!=typeof window&&window.document&&window.document.createElement),i={Version:"1.0.0"};i.Drawer=s,i.Parser=n,i.SvgDrawer=a,/**
* Cleans a SMILES string (removes non-valid characters)
*
* @static
* @param {String} smiles A SMILES string.
* @returns {String} The clean SMILES string.
*/i.clean=function(e){return e.replace(/[^A-Za-z0-9@\.\+\-\?!\(\)\[\]\{\}/\\=#\$:\*]/g,"")},/**
* Applies the smiles drawer draw function to each canvas element that has a smiles string in the data-smiles attribute.
*
* @static
* @param {Object} options SmilesDrawer options.
* @param {String} [selector='canvas[data-smiles]'] Selectors for the draw areas (canvas elements).
* @param {String} [themeName='light'] The theme to apply.
* @param {Function} [onError='null'] A callback function providing an error object.
*/i.apply=function(e,t="canvas[data-smiles]",r="light",n=null){let a=new s(e),o=document.querySelectorAll(t);for(var l=0;l<o.length;l++){let e=o[l];i.parse(e.getAttribute("data-smiles"),function(t){a.draw(t,e,r,!1)},function(e){n&&n(e)})}},/**
* Parses the entered smiles string.
* 
* @static
* @param {String} smiles A SMILES string.
* @param {Function} successCallback A callback that is called on success with the parse tree.
* @param {Function} errorCallback A callback that is called with the error object on error.
*/i.parse=function(e,t,r){try{t&&t(n.parse(e))}catch(e){r&&r(e)}},o&&(window.SmilesDrawer=i),Array.prototype.fill||Object.defineProperty(Array.prototype,"fill",{value:function(e){// Steps 1-2.
if(this==null)throw TypeError("this is null or not defined");// Step 12.
for(var t=Object(this),r=t.length>>>0,s=arguments[1],n=s>>0,a=n<0?Math.max(r+n,0):Math.min(n,r),o=arguments[2],i=void 0===o?r:o>>0,l=i<0?Math.max(r+i,0):Math.min(i,r);a<l;)t[a]=e,a++;// Step 13.
return t}}),t.exports=i},{e76aa41a80ac853d:"jq7Y0",cac39455a0d4cde3:"3qCoD",a58d8ea94e60b553:"cV8FS"}],jq7Y0:[function(e,t,r){//@ts-check
let s=e("d6b64b4ae4f36742"),n=e("389da5eebc6dd22"),a=e("f3dd1cbe0b275723"),o=e("a198b09bfe49f9fe");e("61b212e51f2d4e89");let i=e("b5b770a4f11ebca1"),l=e("4dddb76c085053ee"),u=e("d1ea121c9564b764"),p=e("fad7e45b4db4d408"),c=e("8ac0375f6ad8d3d1"),d=e("5cece0131c01500e"),h=e("36388b1880252640"),f=e("10960c00f7d2a3a8");t.exports=/** 
 * The main class of the application representing the smiles drawer 
 * 
 * @property {Graph} graph The graph associated with this SmilesDrawer.Drawer instance.
 * @property {Number} ringIdCounter An internal counter to keep track of ring ids.
 * @property {Number} ringConnectionIdCounter An internal counter to keep track of ring connection ids.
 * @property {CanvasWrapper} canvasWrapper The CanvasWrapper associated with this SmilesDrawer.Drawer instance.
 * @property {Number} totalOverlapScore The current internal total overlap score.
 * @property {Object} defaultOptions The default options.
 * @property {Object} opts The merged options.
 * @property {Object} theme The current theme.
 */class{/**
   * The constructor for the class SmilesDrawer.
   *
   * @param {Object} options An object containing custom values for different options. It is merged with the default options.
   */constructor(e){this.graph=null,this.doubleBondConfigCount=0,this.doubleBondConfig=null,this.ringIdCounter=0,this.ringConnectionIdCounter=0,this.canvasWrapper=null,this.totalOverlapScore=0,this.defaultOptions={width:500,height:500,bondThickness:.6,bondLength:15,shortBondLength:.85,bondSpacing:.18*15,atomVisualization:"default",isomeric:!0,debug:!1,terminalCarbons:!1,explicitHydrogens:!0,overlapSensitivity:.42,overlapResolutionIterations:1,compactDrawing:!0,fontSizeLarge:5,fontSizeSmall:3,padding:20,experimentalSSSR:!1,kkThreshold:.1,kkInnerThreshold:.1,kkMaxIteration:2e4,kkMaxInnerIteration:50,kkMaxEnergy:1e9,themes:{dark:{C:"#fff",O:"#e74c3c",N:"#3498db",F:"#27ae60",CL:"#16a085",BR:"#d35400",I:"#8e44ad",P:"#d35400",S:"#f1c40f",B:"#e67e22",SI:"#e67e22",H:"#fff",BACKGROUND:"#141414"},light:{C:"#222",O:"#e74c3c",N:"#3498db",F:"#27ae60",CL:"#16a085",BR:"#d35400",I:"#8e44ad",P:"#d35400",S:"#f1c40f",B:"#e67e22",SI:"#e67e22",H:"#222",BACKGROUND:"#fff"}}},this.opts=this.extend(!0,this.defaultOptions,e),this.opts.halfBondSpacing=this.opts.bondSpacing/2,this.opts.bondLengthSq=this.opts.bondLength*this.opts.bondLength,this.opts.halfFontSizeLarge=this.opts.fontSizeLarge/2,this.opts.quarterFontSizeLarge=this.opts.fontSizeLarge/4,this.opts.fifthFontSizeSmall=this.opts.fontSizeSmall/5,// Set the default theme.
this.theme=this.opts.themes.dark}/**
   * A helper method to extend the default options with user supplied ones.
   */extend(){let e=this,t={},r=!1,s=0,n=arguments.length;for("[object Boolean]"===Object.prototype.toString.call(arguments[0])&&(r=arguments[0],s++);s<n;s++){let n=arguments[s];!function(s){for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(r&&"[object Object]"===Object.prototype.toString.call(s[n])?t[n]=e.extend(!0,t[n],s[n]):t[n]=s[n])}(n)}return t}/**
   * Draws the parsed smiles data to a canvas element.
   *
   * @param {Object} data The tree returned by the smiles parser.
   * @param {(String|HTMLElement)} target The id of the HTML canvas element the structure is drawn to - or the element itself.
   * @param {String} themeName='dark' The name of the theme to use. Built-in themes are 'light' and 'dark'.
   * @param {Boolean} infoOnly=false Only output info on the molecule without drawing anything to the canvas.
   */draw(e,t,r="light",s=!1){this.initDraw(e,r,s),this.infoOnly||(this.themeManager=new f(this.opts.themes,r),this.canvasWrapper=new c(t,this.themeManager,this.opts)),!s&&(this.processGraph(),// Set the canvas to the appropriate size
this.canvasWrapper.scale(this.graph.vertices),// Do the actual drawing
this.drawEdges(this.opts.debug),this.drawVertices(this.opts.debug),this.canvasWrapper.reset(),this.opts.debug&&(console.log(this.graph),console.log(this.rings),console.log(this.ringConnections)))}/**
   * Returns the number of rings this edge is a part of.
   *
   * @param {Number} edgeId The id of an edge.
   * @returns {Number} The number of rings the provided edge is part of.
   */edgeRingCount(e){let t=this.graph.edges[e],r=this.graph.vertices[t.sourceId],s=this.graph.vertices[t.targetId];return Math.min(r.value.rings.length,s.value.rings.length)}/**
   * Returns an array containing the bridged rings associated with this  molecule.
   *
   * @returns {Ring[]} An array containing all bridged rings associated with this molecule.
   */getBridgedRings(){let e=[];for(var t=0;t<this.rings.length;t++)this.rings[t].isBridged&&e.push(this.rings[t]);return e}/**
   * Returns an array containing all fused rings associated with this molecule.
   *
   * @returns {Ring[]} An array containing all fused rings associated with this molecule.
   */getFusedRings(){let e=[];for(var t=0;t<this.rings.length;t++)this.rings[t].isFused&&e.push(this.rings[t]);return e}/**
   * Returns an array containing all spiros associated with this molecule.
   *
   * @returns {Ring[]} An array containing all spiros associated with this molecule.
   */getSpiros(){let e=[];for(var t=0;t<this.rings.length;t++)this.rings[t].isSpiro&&e.push(this.rings[t]);return e}/**
   * Returns a string containing a semicolon and new-line separated list of ring properties: Id; Members Count; Neighbours Count; IsSpiro; IsFused; IsBridged; Ring Count (subrings of bridged rings)
   *
   * @returns {String} A string as described in the method description.
   */printRingInfo(){let e="";for(var t=0;t<this.rings.length;t++){let r=this.rings[t];e+=r.id+";"+r.members.length+";"+r.neighbours.length+";"+(r.isSpiro?"true;":"false;")+(r.isFused?"true;":"false;")+(r.isBridged?"true;":"false;")+r.rings.length+";\n"}return e}/**
   * Rotates the drawing to make the widest dimension horizontal.
   */rotateDrawing(){// Rotate the vertices to make the molecule align horizontally
// Find the longest distance
let e=0,t=0,r=0;for(var s=0;s<this.graph.vertices.length;s++){let a=this.graph.vertices[s];if(a.value.isDrawn)for(var n=s+1;n<this.graph.vertices.length;n++){let o=this.graph.vertices[n];if(!o.value.isDrawn)continue;let i=a.position.distanceSq(o.position);i>r&&(r=i,e=s,t=n)}}let o=-a.subtract(this.graph.vertices[e].position,this.graph.vertices[t].position).angle();if(!isNaN(o)){// Round to 30 degrees
let e=o%.523599;e<.2617995?o-=e:o+=.523599-e;// Finally, rotate everything
for(var s=0;s<this.graph.vertices.length;s++)s!==t&&this.graph.vertices[s].position.rotateAround(o,this.graph.vertices[t].position);for(var s=0;s<this.rings.length;s++)this.rings[s].center.rotateAround(o,this.graph.vertices[t].position)}}/**
   * Returns the total overlap score of the current molecule.
   *
   * @returns {Number} The overlap score.
   */getTotalOverlapScore(){return this.totalOverlapScore}/**
   * Returns the ring count of the current molecule.
   *
   * @returns {Number} The ring count.
   */getRingCount(){return this.rings.length}/**
   * Checks whether or not the current molecule  a bridged ring.
   *
   * @returns {Boolean} A boolean indicating whether or not the current molecule  a bridged ring.
   */hasBridgedRing(){return this.bridgedRing}/**
   * Returns the number of heavy atoms (non-hydrogen) in the current molecule.
   *
   * @returns {Number} The heavy atom count.
   */getHeavyAtomCount(){let e=0;for(var t=0;t<this.graph.vertices.length;t++)"H"!==this.graph.vertices[t].value.element&&e++;return e}/**
   * Returns the molecular formula of the loaded molecule as a string.
   * 
   * @returns {String} The molecular formula.
   */getMolecularFormula(){let e="",t=new Map;// Initialize element count
for(var r=0;r<this.graph.vertices.length;r++){let e=this.graph.vertices[r].value;// Add the implicit hydrogens according to valency, exclude
// bracket atoms as they were handled and always have the number
// of hydrogens specified explicitly
if(t.has(e.element)?t.set(e.element,t.get(e.element)+1):t.set(e.element,1),e.bracket&&!e.bracket.chirality&&(t.has("H")?t.set("H",t.get("H")+e.bracket.hcount):t.set("H",e.bracket.hcount)),!e.bracket){let r=l.maxBonds[e.element]-e.bondCount;e.isPartOfAromaticRing&&r--,t.has("H")?t.set("H",t.get("H")+r):t.set("H",r)}}if(t.has("C")){let r=t.get("C");e+="C"+(r>1?r:""),t.delete("C")}if(t.has("H")){let r=t.get("H");e+="H"+(r>1?r:""),t.delete("H")}return Object.keys(l.atomicNumbers).sort().map(r=>{if(t.has(r)){let s=t.get(r);e+=r+(s>1?s:"")}}),e}/**
   * Returns the type of the ringbond (e.g. '=' for a double bond). The ringbond represents the break in a ring introduced when creating the MST. If the two vertices supplied as arguments are not part of a common ringbond, the method returns null.
   *
   * @param {Vertex} vertexA A vertex.
   * @param {Vertex} vertexB A vertex.
   * @returns {(String|null)} Returns the ringbond type or null, if the two supplied vertices are not connected by a ringbond.
   */getRingbondType(e,t){// Checks whether the two vertices are the ones connecting the ring
// and what the bond type should be.
if(1>e.value.getRingbondCount()||1>t.value.getRingbondCount())return null;for(var r=0;r<e.value.ringbonds.length;r++)for(var s=0;s<t.value.ringbonds.length;s++)if(e.value.ringbonds[r].id===t.value.ringbonds[s].id){// If the bonds are equal, it doesn't matter which bond is returned.
// if they are not equal, return the one that is not the default ("-")
if("-"===e.value.ringbonds[r].bondType)return t.value.ringbonds[s].bond;return e.value.ringbonds[r].bond}return null}initDraw(e,t,r){this.data=e,this.infoOnly=r,this.ringIdCounter=0,this.ringConnectionIdCounter=0,this.graph=new d(e,this.opts.isomeric),this.rings=[],this.ringConnections=[],this.originalRings=[],this.originalRingConnections=[],this.bridgedRing=!1,// Reset those, in case the previous drawn SMILES had a dangling \ or /
this.doubleBondConfigCount=null,this.doubleBondConfig=null,this.initRings(),this.initHydrogens()}processGraph(){this.position(),// Restore the ring information (removes bridged rings and replaces them with the original, multiple, rings)
this.restoreRingInformation(),// Atoms bonded to the same ring atom
this.resolvePrimaryOverlaps();let e=this.getOverlapScore();this.totalOverlapScore=this.getOverlapScore().total;for(var t=0;t<this.opts.overlapResolutionIterations;t++)for(var r=0;r<this.graph.edges.length;r++){let t=this.graph.edges[r];if(this.isEdgeRotatable(t)){let r=this.graph.getTreeDepth(t.sourceId,t.targetId),n=this.graph.getTreeDepth(t.targetId,t.sourceId),a=t.targetId,o=t.sourceId;if(r>n&&(a=t.sourceId,o=t.targetId),this.getSubtreeOverlapScore(o,a,e.vertexScores).value>this.opts.overlapSensitivity){let t=this.graph.vertices[a],r=this.graph.vertices[o],n=r.getNeighbours(a);if(1===n.length){let e=this.graph.vertices[n[0]],a=e.position.getRotateAwayFromAngle(t.position,r.position,s.toRad(120));this.rotateSubtree(e.id,r.id,a,r.position);// If the new overlap is bigger, undo change
let o=this.getOverlapScore().total;o>this.totalOverlapScore?this.rotateSubtree(e.id,r.id,-a,r.position):this.totalOverlapScore=o}else if(2===n.length){// Switch places / sides
// If vertex a is in a ring, do nothing
if(0!==r.value.rings.length&&0!==t.value.rings.length)continue;let e=this.graph.vertices[n[0]],a=this.graph.vertices[n[1]];if(1===e.value.rings.length&&1===a.value.rings.length)// Both neighbours in same ring. TODO: does this create problems with wedges? (up = down and vice versa?)
{if(e.value.rings[0]!==a.value.rings[0])continue}else{if(0!==e.value.rings.length||0!==a.value.rings.length)continue;let n=e.position.getRotateAwayFromAngle(t.position,r.position,s.toRad(120)),o=a.position.getRotateAwayFromAngle(t.position,r.position,s.toRad(120));this.rotateSubtree(e.id,r.id,n,r.position),this.rotateSubtree(a.id,r.id,o,r.position);let i=this.getOverlapScore().total;i>this.totalOverlapScore?(this.rotateSubtree(e.id,r.id,-n,r.position),this.rotateSubtree(a.id,r.id,-o,r.position)):this.totalOverlapScore=i}}e=this.getOverlapScore()}}}this.resolveSecondaryOverlaps(e.scores),this.opts.isomeric&&this.annotateStereochemistry(),this.opts.compactDrawing&&"default"===this.opts.atomVisualization&&this.initPseudoElements(),this.rotateDrawing()}/**
   * Initializes rings and ringbonds for the current molecule.
   */initRings(){let e=new Map;// Close the open ring bonds (spanning tree -> graph)
for(var t=this.graph.vertices.length-1;t>=0;t--){let s=this.graph.vertices[t];if(0!==s.value.ringbonds.length)for(var r=0;r<s.value.ringbonds.length;r++){let t=s.value.ringbonds[r].id,n=s.value.ringbonds[r].bond;// If the other ringbond id has not been discovered,
// add it to the open bonds map and continue.
// if the other ringbond id has already been discovered,
// create a bond between the two atoms.
if(e.has(t)){let a=s.id,o=e.get(t)[0],l=e.get(t)[1],u=new i(a,o,1);u.setBondType(l||n||"-");let p=this.graph.addEdge(u),c=this.graph.vertices[o];s.addRingbondChild(o,r),s.value.addNeighbouringElement(c.value.element),c.addRingbondChild(a,r),c.value.addNeighbouringElement(s.value.element),s.edges.push(p),c.edges.push(p),e.delete(t)}else e.set(t,[s.id,n])}}// Get the rings in the graph (the SSSR)
let s=h.getRings(this.graph,this.opts.experimentalSSSR);if(null!==s){for(var t=0;t<s.length;t++){let e=[...s[t]],n=this.addRing(new u(e));// Add the ring to the atoms
for(var r=0;r<e.length;r++)this.graph.vertices[e[r]].value.rings.push(n)}// Find connection between rings
// Check for common vertices and create ring connections. This is a bit
// ugly, but the ringcount is always fairly low (< 100)
for(var t=0;t<this.rings.length-1;t++)for(var r=t+1;r<this.rings.length;r++){let e=this.rings[t],s=this.rings[r],n=new p(e,s);n.vertices.size>0&&this.addRingConnection(n)}// Add neighbours to the rings
for(var t=0;t<this.rings.length;t++){let e=this.rings[t];e.neighbours=p.getNeighbours(this.ringConnections,e.id)}// Anchor the ring to one of it's members, so that the ring center will always
// be tied to a single vertex when doing repositionings
for(var t=0;t<this.rings.length;t++){let e=this.rings[t];this.graph.vertices[e.members[0]].value.addAnchoredRing(e.id)}// Replace rings contained by a larger bridged ring with a bridged ring
for(// Backup the ring information to restore after placing the bridged ring.
// This is needed in order to identify aromatic rings and stuff like this in
// rings that are member of the superring.
this.backupRingInformation();this.rings.length>0;){let e=-1;for(var t=0;t<this.rings.length;t++){let r=this.rings[t];this.isPartOfBridgedRing(r.id)&&!r.isBridged&&(e=r.id)}if(-1===e)break;let r=this.getRing(e),s=this.getBridgedRingRings(r.id);this.bridgedRing=!0,this.createBridgedRing(s,r.members[0]);// Remove the rings
for(var t=0;t<s.length;t++)this.removeRing(s[t])}}}initHydrogens(){// Do not draw hydrogens except when they are connected to a stereocenter connected to two or more rings.
if(!this.opts.explicitHydrogens)for(var e=0;e<this.graph.vertices.length;e++){let t=this.graph.vertices[e];if("H"!==t.value.element)continue;// Hydrogens should have only one neighbour, so just take the first
// Also set hasHydrogen true on connected atom
let r=this.graph.vertices[t.neighbours[0]];r.value.hasHydrogen=!0,(!r.value.isStereoCenter||r.value.rings.length<2&&!r.value.bridgedRing||r.value.bridgedRing&&r.value.originalRings.length<2)&&(t.value.isDrawn=!1)}}/**
   * Returns all rings connected by bridged bonds starting from the ring with the supplied ring id.
   *
   * @param {Number} ringId A ring id.
   * @returns {Number[]} An array containing all ring ids of rings part of a bridged ring system.
   */getBridgedRingRings(e){let t=[],r=this,s=function(e){let n=r.getRing(e);t.push(e);for(var a=0;a<n.neighbours.length;a++){let o=n.neighbours[a];-1===t.indexOf(o)&&o!==e&&p.isBridge(r.ringConnections,r.graph.vertices,e,o)&&s(o)}};return s(e),n.unique(t)}/**
   * Checks whether or not a ring is part of a bridged ring.
   *
   * @param {Number} ringId A ring id.
   * @returns {Boolean} A boolean indicating whether or not the supplied ring (by id) is part of a bridged ring system.
   */isPartOfBridgedRing(e){for(var t=0;t<this.ringConnections.length;t++)if(this.ringConnections[t].containsRing(e)&&this.ringConnections[t].isBridge(this.graph.vertices))return!0;return!1}/**
   * Creates a bridged ring.
   *
   * @param {Number[]} ringIds An array of ids of rings involved in the bridged ring.
   * @param {Number} sourceVertexId The vertex id to start the bridged ring discovery from.
   * @returns {Ring} The bridged ring.
   */createBridgedRing(e,t){let r=new Set,s=new Set,a=new Set;for(var o=0;o<e.length;o++){let t=this.getRing(e[o]);t.isPartOfBridged=!0;for(var i=0;i<t.members.length;i++)s.add(t.members[i]);for(var i=0;i<t.neighbours.length;i++){let r=t.neighbours[i];-1===e.indexOf(r)&&a.add(t.neighbours[i])}}// A vertex is part of the bridged ring if it only belongs to
// one of the rings (or to another ring
// which is not part of the bridged ring).
let l=new Set;for(let t of s){let s=this.graph.vertices[t],a=n.intersection(e,s.value.rings);1===s.value.rings.length||1===a.length?r.add(s.id):l.add(s.id)}let p=[];for(let e of l){let t=this.graph.vertices[e],s=!1;for(let e=0;e<t.edges.length;e++)1===this.edgeRingCount(t.edges[e])&&(s=!0);s?t.value.isBridgeNode=!0:t.value.isBridge=!0,r.add(t.id)}// Create the ring
let c=new u([...r]);this.addRing(c),c.isBridged=!0,c.neighbours=[...a];for(var o=0;o<e.length;o++)c.rings.push(this.getRing(e[o]).clone());for(var o=0;o<c.members.length;o++)this.graph.vertices[c.members[o]].value.bridgedRing=c.id;// Atoms inside the ring are no longer part of a ring but are now
// associated with the bridged ring
for(var o=0;o<p.length;o++)this.graph.vertices[p[o]].value.rings=[];// Remove former rings from members of the bridged ring and add the bridged ring
for(let t of r){let r=this.graph.vertices[t];r.value.rings=n.removeAll(r.value.rings,e),r.value.rings.push(c.id)}// Remove all the ring connections no longer used
for(var o=0;o<e.length;o++)for(var i=o+1;i<e.length;i++)this.removeRingConnectionsBetween(e[o],e[i]);// Update the ring connections and add this ring to the neighbours neighbours
for(let t of a){let r=this.getRingConnections(t,e);for(var i=0;i<r.length;i++)this.getRingConnection(r[i]).updateOther(c.id,t);this.getRing(t).neighbours.push(c.id)}return c}/**
   * Checks whether or not two vertices are in the same ring.
   *
   * @param {Vertex} vertexA A vertex.
   * @param {Vertex} vertexB A vertex.
   * @returns {Boolean} A boolean indicating whether or not the two vertices are in the same ring.
   */areVerticesInSameRing(e,t){// This is a little bit lighter (without the array and push) than
// getCommonRings().length > 0
for(var r=0;r<e.value.rings.length;r++)for(var s=0;s<t.value.rings.length;s++)if(e.value.rings[r]===t.value.rings[s])return!0;return!1}/**
   * Returns an array of ring ids shared by both vertices.
   *
   * @param {Vertex} vertexA A vertex.
   * @param {Vertex} vertexB A vertex.
   * @returns {Number[]} An array of ids of rings shared by the two vertices.
   */getCommonRings(e,t){let r=[];for(var s=0;s<e.value.rings.length;s++)for(var n=0;n<t.value.rings.length;n++)e.value.rings[s]==t.value.rings[n]&&r.push(e.value.rings[s]);return r}/**
   * Returns the aromatic or largest ring shared by the two vertices.
   *
   * @param {Vertex} vertexA A vertex.
   * @param {Vertex} vertexB A vertex.
   * @returns {(Ring|null)} If an aromatic common ring exists, that ring, else the largest (non-aromatic) ring, else null.
   */getLargestOrAromaticCommonRing(e,t){let r=this.getCommonRings(e,t),s=0,n=null;for(var a=0;a<r.length;a++){let e=this.getRing(r[a]),t=e.getSize();if(e.isBenzeneLike(this.graph.vertices))return e;t>s&&(s=t,n=e)}return n}/**
   * Returns an array of vertices positioned at a specified location.
   *
   * @param {Vector2} position The position to search for vertices.
   * @param {Number} radius The radius within to search.
   * @param {Number} excludeVertexId A vertex id to be excluded from the search results.
   * @returns {Number[]} An array containing vertex ids in a given location.
   */getVerticesAt(e,t,r){let s=[];for(var n=0;n<this.graph.vertices.length;n++){let a=this.graph.vertices[n];a.id!==r&&a.positioned&&e.distanceSq(a.position)<=t*t&&s.push(a.id)}return s}/**
   * Returns the closest vertex (connected as well as unconnected).
   *
   * @param {Vertex} vertex The vertex of which to find the closest other vertex.
   * @returns {Vertex} The closest vertex.
   */getClosestVertex(e){let t=99999,r=null;for(var s=0;s<this.graph.vertices.length;s++){let n=this.graph.vertices[s];if(n.id===e.id)continue;let a=e.position.distanceSq(n.position);a<t&&(t=a,r=n)}return r}/**
   * Add a ring to this representation of a molecule.
   *
   * @param {Ring} ring A new ring.
   * @returns {Number} The ring id of the new ring.
   */addRing(e){return e.id=this.ringIdCounter++,this.rings.push(e),e.id}/**
   * Removes a ring from the array of rings associated with the current molecule.
   *
   * @param {Number} ringId A ring id.
   */removeRing(e){this.rings=this.rings.filter(function(t){return t.id!==e}),// Also remove ring connections involving this ring
this.ringConnections=this.ringConnections.filter(function(t){return t.firstRingId!==e&&t.secondRingId!==e});// Remove the ring as neighbour of other rings
for(var t=0;t<this.rings.length;t++){let r=this.rings[t];r.neighbours=r.neighbours.filter(function(t){return t!==e})}}/**
   * Gets a ring object from the array of rings associated with the current molecule by its id. The ring id is not equal to the index, since rings can be added and removed when processing bridged rings.
   *
   * @param {Number} ringId A ring id.
   * @returns {Ring} A ring associated with the current molecule.
   */getRing(e){for(var t=0;t<this.rings.length;t++)if(this.rings[t].id==e)return this.rings[t]}/**
   * Add a ring connection to this representation of a molecule.
   *
   * @param {RingConnection} ringConnection A new ringConnection.
   * @returns {Number} The ring connection id of the new ring connection.
   */addRingConnection(e){return e.id=this.ringConnectionIdCounter++,this.ringConnections.push(e),e.id}/**
   * Removes a ring connection from the array of rings connections associated with the current molecule.
   *
   * @param {Number} ringConnectionId A ring connection id.
   */removeRingConnection(e){this.ringConnections=this.ringConnections.filter(function(t){return t.id!==e})}/**
   * Removes all ring connections between two vertices.
   *
   * @param {Number} vertexIdA A vertex id.
   * @param {Number} vertexIdB A vertex id.
   */removeRingConnectionsBetween(e,t){let r=[];for(var s=0;s<this.ringConnections.length;s++){let n=this.ringConnections[s];(n.firstRingId===e&&n.secondRingId===t||n.firstRingId===t&&n.secondRingId===e)&&r.push(n.id)}for(var s=0;s<r.length;s++)this.removeRingConnection(r[s])}/**
   * Get a ring connection with a given id.
   * 
   * @param {Number} id 
   * @returns {RingConnection} The ring connection with the specified id.
   */getRingConnection(e){for(var t=0;t<this.ringConnections.length;t++)if(this.ringConnections[t].id==e)return this.ringConnections[t]}/**
   * Get the ring connections between a ring and a set of rings.
   *
   * @param {Number} ringId A ring id.
   * @param {Number[]} ringIds An array of ring ids.
   * @returns {Number[]} An array of ring connection ids.
   */getRingConnections(e,t){let r=[];for(var s=0;s<this.ringConnections.length;s++){let a=this.ringConnections[s];for(var n=0;n<t.length;n++){let s=t[n];(a.firstRingId===e&&a.secondRingId===s||a.firstRingId===s&&a.secondRingId===e)&&r.push(a.id)}}return r}/**
   * Returns the overlap score of the current molecule based on its positioned vertices. The higher the score, the more overlaps occur in the structure drawing.
   *
   * @returns {Object} Returns the total overlap score and the overlap score of each vertex sorted by score (higher to lower). Example: { total: 99, scores: [ { id: 0, score: 22 }, ... ]  }
   */getOverlapScore(){let e=0,t=new Float32Array(this.graph.vertices.length);for(var r=0;r<this.graph.vertices.length;r++)t[r]=0;for(var r=0;r<this.graph.vertices.length;r++)for(var s=this.graph.vertices.length;--s>r;){let n=this.graph.vertices[r],o=this.graph.vertices[s];if(!n.value.isDrawn||!o.value.isDrawn)continue;let i=a.subtract(n.position,o.position).lengthSq();if(i<this.opts.bondLengthSq){let n=(this.opts.bondLength-Math.sqrt(i))/this.opts.bondLength;e+=n,t[r]+=n,t[s]+=n}}let n=[];for(var r=0;r<this.graph.vertices.length;r++)n.push({id:r,score:t[r]});return n.sort(function(e,t){return t.score-e.score}),{total:e,scores:n,vertexScores:t}}/**
   * When drawing a double bond, choose the side to place the double bond. E.g. a double bond should always been drawn inside a ring.
   *
   * @param {Vertex} vertexA A vertex.
   * @param {Vertex} vertexB A vertex.
   * @param {Vector2[]} sides An array containing the two normals of the line spanned by the two provided vertices.
   * @returns {Object} Returns an object containing the following information: {
          totalSideCount: Counts the sides of each vertex in the molecule, is an array [ a, b ],
          totalPosition: Same as position, but based on entire molecule,
          sideCount: Counts the sides of each neighbour, is an array [ a, b ],
          position: which side to position the second bond, is 0 or 1, represents the index in the normal array. This is based on only the neighbours
          anCount: the number of neighbours of vertexA,
          bnCount: the number of neighbours of vertexB
      }
   */chooseSide(e,t,r){// Check which side has more vertices
// Get all the vertices connected to the both ends
let s=e.getNeighbours(t.id),a=t.getNeighbours(e.id),o=s.length,i=a.length,l=n.merge(s,a),u=[0,0];for(var p=0;p<l.length;p++)this.graph.vertices[l[p]].position.sameSideAs(e.position,t.position,r[0])?u[0]++:u[1]++;// Considering all vertices in the graph, this is to resolve ties
// from the above side counts
let c=[0,0];for(var p=0;p<this.graph.vertices.length;p++)this.graph.vertices[p].position.sameSideAs(e.position,t.position,r[0])?c[0]++:c[1]++;return{totalSideCount:c,totalPosition:c[0]>c[1]?0:1,sideCount:u,position:u[0]>u[1]?0:1,anCount:o,bnCount:i}}/**
   * Sets the center for a ring.
   *
   * @param {Ring} ring A ring.
   */setRingCenter(e){let t=e.getSize(),r=new a(0,0);for(var s=0;s<t;s++)r.add(this.graph.vertices[e.members[s]].position);e.center=r.divide(t)}/**
   * Gets the center of a ring contained within a bridged ring and containing a given vertex.
   *
   * @param {Ring} ring A bridged ring.
   * @param {Vertex} vertex A vertex.
   * @returns {Vector2} The center of the subring that containing the vertex.
   */getSubringCenter(e,t){let r=t.value.originalRings,s=e.center,n=Number.MAX_VALUE;// Always get the smallest ring.
for(var a=0;a<r.length;a++)for(var o=0;o<e.rings.length;o++)r[a]===e.rings[o].id&&e.rings[o].getSize()<n&&(s=e.rings[o].center,n=e.rings[o].getSize());return s}/**
   * Draw the actual edges as bonds to the canvas.
   *
   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.
   */drawEdges(e){let t=this,r=Array(this.graph.edges.length);// Draw ring for implicitly defined aromatic rings
if(r.fill(!1),this.graph.traverseBF(0,function(s){let n=t.graph.getEdges(s.id);for(var a=0;a<n.length;a++){let s=n[a];r[s]||(r[s]=!0,t.drawEdge(s,e))}}),!this.bridgedRing)for(var s=0;s<this.rings.length;s++){let e=this.rings[s];this.isRingAromatic(e)&&this.canvasWrapper.drawAromaticityRing(e)}}/**
   * Draw the an edge as a bonds to the canvas.
   *
   * @param {Number} edgeId An edge id.
   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.
   */drawEdge(e,t){let r=this.graph.edges[e],s=this.graph.vertices[r.sourceId],i=this.graph.vertices[r.targetId],l=s.value.element,u=i.value.element;if((!s.value.isDrawn||!i.value.isDrawn)&&"default"===this.opts.atomVisualization)return;let p=s.position,c=i.position,d=this.getEdgeNormals(r),h=n.clone(d);if(h[0].multiplyScalar(10).add(p),h[1].multiplyScalar(10).add(p),"="===r.bondType||"="===this.getRingbondType(s,i)||r.isPartOfAromaticRing&&this.bridgedRing){// Always draw double bonds inside the ring
let e=this.areVerticesInSameRing(s,i),t=this.chooseSide(s,i,h);if(e){let e=this.getLargestOrAromaticCommonRing(s,i).center;d[0].multiplyScalar(this.opts.bondSpacing),d[1].multiplyScalar(this.opts.bondSpacing);// Choose the normal that is on the same side as the center
let t=null;(t=e.sameSideAs(s.position,i.position,a.add(p,d[0]))?new o(a.add(p,d[0]),a.add(c,d[0]),l,u):new o(a.add(p,d[1]),a.add(c,d[1]),l,u)).shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),r.isPartOfAromaticRing?this.canvasWrapper.drawLine(t,!0):this.canvasWrapper.drawLine(t),// The normal edge
this.canvasWrapper.drawLine(new o(p,c,l,u))}else if(r.center||s.isTerminal()&&i.isTerminal()){d[0].multiplyScalar(this.opts.halfBondSpacing),d[1].multiplyScalar(this.opts.halfBondSpacing);let e=new o(a.add(p,d[0]),a.add(c,d[0]),l,u),t=new o(a.add(p,d[1]),a.add(c,d[1]),l,u);this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(t)}else if(0==t.anCount&&t.bnCount>1||0==t.bnCount&&t.anCount>1){// Both lines are the same length here
// Add the spacing to the edges (which are of unit length)
d[0].multiplyScalar(this.opts.halfBondSpacing),d[1].multiplyScalar(this.opts.halfBondSpacing);let e=new o(a.add(p,d[0]),a.add(c,d[0]),l,u),t=new o(a.add(p,d[1]),a.add(c,d[1]),l,u);this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(t)}else if(t.sideCount[0]>t.sideCount[1]){d[0].multiplyScalar(this.opts.bondSpacing),d[1].multiplyScalar(this.opts.bondSpacing);let e=new o(a.add(p,d[0]),a.add(c,d[0]),l,u);e.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(new o(p,c,l,u))}else if(t.sideCount[0]<t.sideCount[1]){d[0].multiplyScalar(this.opts.bondSpacing),d[1].multiplyScalar(this.opts.bondSpacing);let e=new o(a.add(p,d[1]),a.add(c,d[1]),l,u);e.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(new o(p,c,l,u))}else if(t.totalSideCount[0]>t.totalSideCount[1]){d[0].multiplyScalar(this.opts.bondSpacing),d[1].multiplyScalar(this.opts.bondSpacing);let e=new o(a.add(p,d[0]),a.add(c,d[0]),l,u);e.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(new o(p,c,l,u))}else if(t.totalSideCount[0]<=t.totalSideCount[1]){d[0].multiplyScalar(this.opts.bondSpacing),d[1].multiplyScalar(this.opts.bondSpacing);let e=new o(a.add(p,d[1]),a.add(c,d[1]),l,u);e.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(new o(p,c,l,u))}}else if("#"===r.bondType){d[0].multiplyScalar(this.opts.bondSpacing/1.5),d[1].multiplyScalar(this.opts.bondSpacing/1.5);let e=new o(a.add(p,d[0]),a.add(c,d[0]),l,u),t=new o(a.add(p,d[1]),a.add(c,d[1]),l,u);this.canvasWrapper.drawLine(e),this.canvasWrapper.drawLine(t),this.canvasWrapper.drawLine(new o(p,c,l,u))}else if("."===r.bondType);else{let e=s.value.isStereoCenter,t=i.value.isStereoCenter;"up"===r.wedge?this.canvasWrapper.drawWedge(new o(p,c,l,u,e,t)):"down"===r.wedge?this.canvasWrapper.drawDashedWedge(new o(p,c,l,u,e,t)):this.canvasWrapper.drawLine(new o(p,c,l,u,e,t))}if(t){let t=a.midpoint(p,c);this.canvasWrapper.drawDebugText(t.x,t.y,"e: "+e)}}/**
   * Draws the vertices representing atoms to the canvas.
   *
   * @param {Boolean} debug A boolean indicating whether or not to draw debug messages to the canvas.
   */drawVertices(e){for(var t=this.graph.vertices.length,t=0;t<this.graph.vertices.length;t++){let r=this.graph.vertices[t],s=r.value,o=0,i=0,u=r.value.bondCount,p=s.element,c=l.maxBonds[p]-u,d=r.getTextDirection(this.graph.vertices),h=(!!this.opts.terminalCarbons||"C"!==p||!!s.hasAttachedPseudoElements)&&r.isTerminal(),f="C"===s.element;if("N"===s.element&&s.isPartOfAromaticRing&&(c=0),s.bracket&&(c=s.bracket.hcount,o=s.bracket.charge,i=s.bracket.isotope),"allballs"===this.opts.atomVisualization)this.canvasWrapper.drawBall(r.position.x,r.position.y,p);else if(s.isDrawn&&(!f||s.drawExplicit||h||s.hasAttachedPseudoElements)||1===this.graph.vertices.length)"default"===this.opts.atomVisualization?this.canvasWrapper.drawText(r.position.x,r.position.y,p,c,d,h,o,i,s.getAttachedPseudoElements()):"balls"===this.opts.atomVisualization&&this.canvasWrapper.drawBall(r.position.x,r.position.y,p);else if(2===r.getNeighbourCount()&&!0==r.forcePositioned){// If there is a carbon which bonds are in a straight line, draw a dot
let e=this.graph.vertices[r.neighbours[0]].position,t=this.graph.vertices[r.neighbours[1]].position;.1>Math.abs(Math.PI-a.threePointangle(r.position,e,t))&&this.canvasWrapper.drawPoint(r.position.x,r.position.y,p)}if(e){let e="v: "+r.id+" "+n.print(s.ringbonds);this.canvasWrapper.drawDebugText(r.position.x,r.position.y,e)}}// Draw the ring centers for debug purposes
if(this.opts.debug)for(var t=0;t<this.rings.length;t++){let e=this.rings[t].center;this.canvasWrapper.drawDebugPoint(e.x,e.y,"r: "+this.rings[t].id)}}/**
   * Position the vertices according to their bonds and properties.
   */position(){let e=null;// Always start drawing at a bridged ring if there is one
// If not, start with a ring
// else, start with 0
for(var t=0;t<this.graph.vertices.length;t++)if(null!==this.graph.vertices[t].value.bridgedRing){e=this.graph.vertices[t];break}for(var t=0;t<this.rings.length;t++)this.rings[t].isBridged&&(e=this.graph.vertices[this.rings[t].members[0]]);this.rings.length>0&&null===e&&(e=this.graph.vertices[this.rings[0].members[0]]),null===e&&(e=this.graph.vertices[0]),this.createNextBond(e,null,0)}/**
   * Stores the current information associated with rings.
   */backupRingInformation(){this.originalRings=[],this.originalRingConnections=[];for(var e=0;e<this.rings.length;e++)this.originalRings.push(this.rings[e]);for(var e=0;e<this.ringConnections.length;e++)this.originalRingConnections.push(this.ringConnections[e]);for(var e=0;e<this.graph.vertices.length;e++)this.graph.vertices[e].value.backupRings()}/**
   * Restores the most recently backed up information associated with rings.
   */restoreRingInformation(){// Get the subring centers from the bridged rings
let e=this.getBridgedRings();this.rings=[],this.ringConnections=[];for(var t=0;t<e.length;t++){let s=e[t];for(var r=0;r<s.rings.length;r++){let e=s.rings[r];this.originalRings[e.id].center=e.center}}for(var t=0;t<this.originalRings.length;t++)this.rings.push(this.originalRings[t]);for(var t=0;t<this.originalRingConnections.length;t++)this.ringConnections.push(this.originalRingConnections[t]);for(var t=0;t<this.graph.vertices.length;t++)this.graph.vertices[t].value.restoreRings()}// TODO: This needs some cleaning up
/**
   * Creates a new ring, that is, positiones all the vertices inside a ring.
   *
   * @param {Ring} ring The ring to position.
   * @param {(Vector2|null)} [center=null] The center of the ring to be created.
   * @param {(Vertex|null)} [startVertex=null] The first vertex to be positioned inside the ring.
   * @param {(Vertex|null)} [previousVertex=null] The last vertex that was positioned.
   * @param {Boolean} [previousVertex=false] A boolean indicating whether or not this ring was force positioned already - this is needed after force layouting a ring, in order to draw rings connected to it.
   */createRing(e,t=null,r=null,n=null){if(e.positioned)return;t=t||new a(0,0);let o=e.getOrderedNeighbours(this.ringConnections),i=r?a.subtract(r.position,t).angle():0,l=s.polyCircumradius(this.opts.bondLength,e.getSize()),u=s.centralAngle(e.getSize());e.centralAngle=u;let c=i,d=this,h=r?r.id:null;// If the ring is bridged, then draw the vertices inside the ring
// using a force based approach
if(-1===e.members.indexOf(h)&&(r&&(r.positioned=!1),h=e.members[0]),e.isBridged){this.graph.kkLayout(e.members.slice(),t,r.id,e,this.opts.bondLength,this.opts.kkThreshold,this.opts.kkInnerThreshold,this.opts.kkMaxIteration,this.opts.kkMaxInnerIteration,this.opts.kkMaxEnergy),e.positioned=!0,// Update the center of the bridged ring
this.setRingCenter(e),t=e.center;// Setting the centers for the subrings
for(var f=0;f<e.rings.length;f++)this.setRingCenter(e.rings[f])}else e.eachMember(this.graph.vertices,function(r){let s=d.graph.vertices[r];s.positioned||s.setPosition(t.x+Math.cos(c)*l,t.y+Math.sin(c)*l),c+=u,(!e.isBridged||e.rings.length<3)&&(s.angle=c,s.positioned=!0)},h,n?n.id:null);e.positioned=!0,e.center=t;// Draw neighbours in decreasing order of connectivity
for(var f=0;f<o.length;f++){let r=this.getRing(o[f].neighbour);if(r.positioned)continue;let n=p.getVertices(this.ringConnections,e.id,r.id);if(2===n.length){// This ring is a fused ring
e.isFused=!0,r.isFused=!0;let o=this.graph.vertices[n[0]],i=this.graph.vertices[n[1]],l=a.midpoint(o.position,i.position),u=a.normals(o.position,i.position);// Normalize the normals
u[0].normalize(),u[1].normalize();// Set length from middle of side to center (the apothem)
let p=s.polyCircumradius(this.opts.bondLength,r.getSize()),c=s.apothem(p,r.getSize());u[0].multiplyScalar(c).add(l),u[1].multiplyScalar(c).add(l);// Pick the normal which results in a larger distance to the previous center
// Also check whether it's inside another ring
let d=u[0];a.subtract(t,u[1]).lengthSq()>a.subtract(t,u[0]).lengthSq()&&(d=u[1]);// Get the vertex (A or B) which is in clock-wise direction of the other
let h=a.subtract(o.position,d),f=a.subtract(i.position,d);-1===h.clockwise(f)?r.positioned||this.createRing(r,d,o,i):r.positioned||this.createRing(r,d,i,o)}else if(1===n.length){// This ring is a spiro
e.isSpiro=!0,r.isSpiro=!0;let o=this.graph.vertices[n[0]],i=a.subtract(t,o.position);i.invert(),i.normalize();// Get the distance from the vertex to the center
let l=s.polyCircumradius(this.opts.bondLength,r.getSize());i.multiplyScalar(l),i.add(o.position),r.positioned||this.createRing(r,i,o)}}// Next, draw atoms that are not part of a ring that are directly attached to this ring
for(var f=0;f<e.members.length;f++){let t=this.graph.vertices[e.members[f]],r=t.neighbours;// If there are multiple, the ovlerap will be resolved in the appropriate step
for(var m=0;m<r.length;m++){let e=this.graph.vertices[r[m]];e.positioned||(e.value.isConnectedToRing=!0,this.createNextBond(e,t,0))}}}/**
   * Rotate an entire subtree by an angle around a center.
   *
   * @param {Number} vertexId A vertex id (the root of the sub-tree).
   * @param {Number} parentVertexId A vertex id in the previous direction of the subtree that is to rotate.
   * @param {Number} angle An angle in randians.
   * @param {Vector2} center The rotational center.
   */rotateSubtree(e,t,r,s){let n=this;this.graph.traverseTree(e,t,function(e){e.position.rotateAround(r,s);for(var t=0;t<e.value.anchoredRings.length;t++){let a=n.rings[e.value.anchoredRings[t]];a&&a.center.rotateAround(r,s)}})}/**
   * Gets the overlap score of a subtree.
   *
   * @param {Number} vertexId A vertex id (the root of the sub-tree).
   * @param {Number} parentVertexId A vertex id in the previous direction of the subtree.
   * @param {Number[]} vertexOverlapScores An array containing the vertex overlap scores indexed by vertex id.
   * @returns {Object} An object containing the total overlap score and the center of mass of the subtree weighted by overlap score { value: 0.2, center: new Vector2() }.
   */getSubtreeOverlapScore(e,t,r){let s=this,n=0,o=new a(0,0),i=0;return this.graph.traverseTree(e,t,function(e){if(!e.value.isDrawn)return;let t=r[e.id];t>s.opts.overlapSensitivity&&(n+=t,i++);let a=s.graph.vertices[e.id].position.clone();a.multiplyScalar(t),o.add(a)}),o.divide(n),{value:n/i,center:o}}/**
   * Returns the current (positioned vertices so far) center of mass.
   * 
   * @returns {Vector2} The current center of mass.
   */getCurrentCenterOfMass(){let e=new a(0,0),t=0;for(var r=0;r<this.graph.vertices.length;r++){let s=this.graph.vertices[r];s.positioned&&(e.add(s.position),t++)}return e.divide(t)}/**
   * Returns the current (positioned vertices so far) center of mass in the neighbourhood of a given position.
   *
   * @param {Vector2} vec The point at which to look for neighbours.
   * @param {Number} [r=currentBondLength*2.0] The radius of vertices to include.
   * @returns {Vector2} The current center of mass.
   */getCurrentCenterOfMassInNeigbourhood(e,t=2*this.opts.bondLength){let r=new a(0,0),s=0,n=t*t;for(var o=0;o<this.graph.vertices.length;o++){let t=this.graph.vertices[o];t.positioned&&e.distanceSq(t.position)<n&&(r.add(t.position),s++)}return r.divide(s)}/**
   * Resolve primary (exact) overlaps, such as two vertices that are connected to the same ring vertex.
   */resolvePrimaryOverlaps(){let e=[],t=Array(this.graph.vertices.length);// Looking for overlaps created by two bonds coming out of a ring atom, which both point straight
// away from the ring and are thus perfectly overlapping.
for(var r=0;r<this.rings.length;r++){let a=this.rings[r];for(var s=0;s<a.members.length;s++){let r=this.graph.vertices[a.members[s]];if(t[r.id])continue;t[r.id]=!0;let o=this.getNonRingNeighbours(r.id);if(o.length>1){// Look for rings where there are atoms with two bonds outside the ring (overlaps)
let t=[];for(var n=0;n<r.value.rings.length;n++)t.push(r.value.rings[n]);e.push({common:r,rings:t,vertices:o})}else if(1===o.length&&2===r.value.rings.length){// Look for bonds coming out of joined rings to adjust the angle, an example is: C1=CC(=CC=C1)[C@]12SCCN1CC1=CC=CC=C21
// where the angle has to be adjusted to account for fused ring
let t=[];for(var n=0;n<r.value.rings.length;n++)t.push(r.value.rings[n]);e.push({common:r,rings:t,vertices:o})}}}for(var r=0;r<e.length;r++){let t=e[r];if(2===t.vertices.length){let e=t.vertices[0],r=t.vertices[1];if(!e.value.isDrawn||!r.value.isDrawn)continue;let s=(2*Math.PI-this.getRing(t.rings[0]).getAngle())/6;this.rotateSubtree(e.id,t.common.id,s,t.common.position),this.rotateSubtree(r.id,t.common.id,-s,t.common.position);// Decide which way to rotate the vertices depending on the effect it has on the overlap score
let n=this.getOverlapScore(),a=this.getSubtreeOverlapScore(e.id,t.common.id,n.vertexScores),o=this.getSubtreeOverlapScore(r.id,t.common.id,n.vertexScores),i=a.value+o.value;this.rotateSubtree(e.id,t.common.id,-2*s,t.common.position),this.rotateSubtree(r.id,t.common.id,2*s,t.common.position),n=this.getOverlapScore(),a=this.getSubtreeOverlapScore(e.id,t.common.id,n.vertexScores),o=this.getSubtreeOverlapScore(r.id,t.common.id,n.vertexScores),a.value+o.value>i&&(this.rotateSubtree(e.id,t.common.id,2*s,t.common.position),this.rotateSubtree(r.id,t.common.id,-2*s,t.common.position))}else 1===t.vertices.length&&t.rings.length}}/**
   * Resolve secondary overlaps. Those overlaps are due to the structure turning back on itself.
   *
   * @param {Object[]} scores An array of objects sorted descending by score.
   * @param {Number} scores[].id A vertex id.
   * @param {Number} scores[].score The overlap score associated with the vertex id.
   */resolveSecondaryOverlaps(e){for(var t=0;t<e.length;t++)if(e[t].score>this.opts.overlapSensitivity){let r=this.graph.vertices[e[t].id];if(r.isTerminal()){let e=this.getClosestVertex(r);if(e){// If one of the vertices is the first one, the previous vertex is not the central vertex but the dummy
// so take the next rather than the previous, which is vertex 1
let t=null;t=e.isTerminal()?0===e.id?this.graph.vertices[1].position:e.previousPosition:0===e.id?this.graph.vertices[1].position:e.position;let n=0===r.id?this.graph.vertices[1].position:r.previousPosition;r.position.rotateAwayFrom(t,n,s.toRad(20))}}}}/**
   * Get the last non-null or 0 angle vertex.
   * @param {Number} vertexId A vertex id.
   * @returns {Vertex} The last vertex with an angle that was not 0 or null.
   */getLastVertexWithAngle(e){let t=0,r=null;for(;!t&&e;)t=(r=this.graph.vertices[e]).angle,e=r.parentVertexId;return r}/**
   * Positiones the next vertex thus creating a bond.
   *
   * @param {Vertex} vertex A vertex.
   * @param {Vertex} [previousVertex=null] The previous vertex which has been positioned.
   * @param {Number} [angle=0.0] The (global) angle of the vertex.
   * @param {Boolean} [originShortest=false] Whether the origin is the shortest subtree in the branch.
   * @param {Boolean} [skipPositioning=false] Whether or not to skip positioning and just check the neighbours.
   */createNextBond(e,t=null,r=0,o=!1,i=!1){if(e.positioned&&!i)return;// If the double bond config was set on this vertex, do not check later
let l=!1;// Keeping track of configurations around double bonds
if(t){let r=this.graph.getEdge(e.id,t.id);("/"===r.bondType||"\\"===r.bondType)&&++this.doubleBondConfigCount%2==1&&null===this.doubleBondConfig&&(this.doubleBondConfig=r.bondType,l=!0,null===t.parentVertexId&&e.value.branchBond&&("/"===this.doubleBondConfig?this.doubleBondConfig="\\":"\\"===this.doubleBondConfig&&(this.doubleBondConfig="/")))}// If the current node is the member of one ring, then point straight away
// from the center of the ring. However, if the current node is a member of
// two rings, point away from the middle of the centers of the two rings
if(!i){if(t){if(t.value.rings.length>0){let r=t.neighbours,s=null,o=new a(0,0);if(null===t.value.bridgedRing&&t.value.rings.length>1)for(var u=0;u<r.length;u++){let e=this.graph.vertices[r[u]];if(n.containsAll(e.value.rings,t.value.rings)){s=e;break}}if(null===s){for(var u=0;u<r.length;u++){let e=this.graph.vertices[r[u]];e.positioned&&this.areVerticesInSameRing(e,t)&&o.add(a.subtract(e.position,t.position))}o.invert().normalize().multiplyScalar(this.opts.bondLength).add(t.position)}else o=s.position.clone().rotateAround(Math.PI,t.position);e.previousPosition=t.position,e.setPositionFromVector(o),e.positioned=!0}else{// If the previous vertex was not part of a ring, draw a bond based
// on the global angle of the previous bond
let s=new a(this.opts.bondLength,0);s.rotate(r),s.add(t.position),e.setPositionFromVector(s),e.previousPosition=t.position,e.positioned=!0}}else{// Add a (dummy) previous position if there is no previous vertex defined
// Since the first vertex is at (0, 0), create a vector at (bondLength, 0)
// and rotate it by 90°
let t=new a(this.opts.bondLength,0);t.rotate(s.toRad(-60)),e.previousPosition=t,e.setPosition(this.opts.bondLength,0),e.angle=s.toRad(-60),null===e.value.bridgedRing&&(e.positioned=!0)}}// Go to next vertex
// If two rings are connected by a bond ...
if(null!==e.value.bridgedRing){let t=this.getRing(e.value.bridgedRing);if(!t.positioned){let r=a.subtract(e.previousPosition,e.position);r.invert(),r.normalize();let n=s.polyCircumradius(this.opts.bondLength,t.members.length);r.multiplyScalar(n),r.add(e.position),this.createRing(t,r,e)}}else if(e.value.rings.length>0){let t=this.getRing(e.value.rings[0]);if(!t.positioned){let r=a.subtract(e.previousPosition,e.position);r.invert(),r.normalize();let n=s.polyCircumradius(this.opts.bondLength,t.getSize());r.multiplyScalar(n),r.add(e.position),this.createRing(t,r,e)}}else{e.value.isStereoCenter;let r=e.getNeighbours(),i=[];// Remove neighbours that are not drawn
for(var u=0;u<r.length;u++)this.graph.vertices[r[u]].value.isDrawn&&i.push(r[u]);t&&(i=n.remove(i,t.id));let p=e.getAngle();if(1===i.length){let r=this.graph.vertices[i[0]];// Make a single chain always cis except when there's a tribble (yes, this is a Star Trek reference) bond
// or if there are successive double bonds. Added a ring check because if there is an aromatic ring the ring bond inside the ring counts as a double bond and leads to =-= being straight.
if("#"===e.value.bondType||t&&"#"===t.value.bondType||"="===e.value.bondType&&t&&0===t.value.rings.length&&"="===t.value.bondType&&"-"!==e.value.branchBond)e.value.drawExplicit=!1,t&&(this.graph.getEdge(e.id,t.id).center=!0),this.graph.getEdge(e.id,r.id).center=!0,("#"===e.value.bondType||t&&"#"===t.value.bondType)&&(r.angle=0),r.drawExplicit=!0,this.createNextBond(r,e,p+r.angle);else if(t&&t.value.rings.length>0){// If coming out of a ring, always draw away from the center of mass
let t=s.toRad(60),n=-t,o=new a(this.opts.bondLength,0),i=new a(this.opts.bondLength,0);o.rotate(t).add(e.position),i.rotate(n).add(e.position);// let centerOfMass = this.getCurrentCenterOfMassInNeigbourhood(vertex.position, 100);
let l=this.getCurrentCenterOfMass(),u=o.distanceSq(l),c=i.distanceSq(l);r.angle=u<c?n:t,this.createNextBond(r,e,p+r.angle)}else{let s=e.angle;// Handle configuration around double bonds
if(t&&t.neighbours.length>3?s=s>0?Math.min(1.0472,s):s<0?Math.max(-1.0472,s):1.0472:s||(s=this.getLastVertexWithAngle(e.id).angle)||(s=1.0472),t&&!l){let t=this.graph.getEdge(e.id,r.id).bondType;"/"===t?("/"===this.doubleBondConfig||"\\"===this.doubleBondConfig&&(s=-s),this.doubleBondConfig=null):"\\"===t&&("/"===this.doubleBondConfig?s=-s:this.doubleBondConfig,this.doubleBondConfig=null)}o?r.angle=s:r.angle=-s,this.createNextBond(r,e,p+r.angle)}}else if(2===i.length){// If the previous vertex comes out of a ring, it doesn't have an angle set
let r=e.angle;r||(r=1.0472);// Check for the longer subtree - always go with cis for the longer subtree
let s=this.graph.getTreeDepth(i[0],e.id),n=this.graph.getTreeDepth(i[1],e.id),a=this.graph.vertices[i[0]],o=this.graph.vertices[i[1]];a.value.subtreeDepth=s,o.value.subtreeDepth=n;// Also get the subtree for the previous direction (this is important when
// the previous vertex is the shortest path)
let l=this.graph.getTreeDepth(t?t.id:null,e.id);t&&(t.value.subtreeDepth=l);let u=0,c=1;"C"===o.value.element&&"C"!==a.value.element&&n>1&&s<5?(u=1,c=0):"C"!==o.value.element&&"C"===a.value.element&&s>1&&n<5?(u=0,c=1):n>s&&(u=1,c=0);let d=this.graph.vertices[i[u]],h=this.graph.vertices[i[c]];this.graph.getEdge(e.id,d.id),this.graph.getEdge(e.id,h.id);// If the origin tree is the shortest, make them the main chain
let f=!1;l<s&&l<n&&(f=!0),h.angle=r,d.angle=-r,"\\"===this.doubleBondConfig?"\\"===h.value.branchBond&&(h.angle=-r,d.angle=r):"/"===this.doubleBondConfig&&"/"===h.value.branchBond&&(h.angle=-r,d.angle=r),this.createNextBond(h,e,p+h.angle,f),this.createNextBond(d,e,p+d.angle,f)}else if(3===i.length){// The vertex with the longest sub-tree should always go straight
let r=this.graph.getTreeDepth(i[0],e.id),n=this.graph.getTreeDepth(i[1],e.id),a=this.graph.getTreeDepth(i[2],e.id),o=this.graph.vertices[i[0]],l=this.graph.vertices[i[1]],u=this.graph.vertices[i[2]];o.value.subtreeDepth=r,l.value.subtreeDepth=n,u.value.subtreeDepth=a,n>r&&n>a?(o=this.graph.vertices[i[1]],l=this.graph.vertices[i[0]],u=this.graph.vertices[i[2]]):a>r&&a>n&&(o=this.graph.vertices[i[2]],l=this.graph.vertices[i[0]],u=this.graph.vertices[i[1]]),t&&t.value.rings.length<1&&o.value.rings.length<1&&l.value.rings.length<1&&u.value.rings.length<1&&1===this.graph.getTreeDepth(l.id,e.id)&&1===this.graph.getTreeDepth(u.id,e.id)&&this.graph.getTreeDepth(o.id,e.id)>1?(o.angle=-e.angle,e.angle>=0?(l.angle=s.toRad(30),u.angle=s.toRad(90)):(l.angle=-s.toRad(30),u.angle=-s.toRad(90))):(o.angle=0,l.angle=s.toRad(90),u.angle=-s.toRad(90)),this.createNextBond(o,e,p+o.angle),this.createNextBond(l,e,p+l.angle),this.createNextBond(u,e,p+u.angle)}else if(4===i.length){// The vertex with the longest sub-tree should always go to the reflected opposide direction
let t=this.graph.getTreeDepth(i[0],e.id),r=this.graph.getTreeDepth(i[1],e.id),n=this.graph.getTreeDepth(i[2],e.id),a=this.graph.getTreeDepth(i[3],e.id),o=this.graph.vertices[i[0]],l=this.graph.vertices[i[1]],u=this.graph.vertices[i[2]],c=this.graph.vertices[i[3]];o.value.subtreeDepth=t,l.value.subtreeDepth=r,u.value.subtreeDepth=n,c.value.subtreeDepth=a,r>t&&r>n&&r>a?(o=this.graph.vertices[i[1]],l=this.graph.vertices[i[0]],u=this.graph.vertices[i[2]],c=this.graph.vertices[i[3]]):n>t&&n>r&&n>a?(o=this.graph.vertices[i[2]],l=this.graph.vertices[i[0]],u=this.graph.vertices[i[1]],c=this.graph.vertices[i[3]]):a>t&&a>r&&a>n&&(o=this.graph.vertices[i[3]],l=this.graph.vertices[i[0]],u=this.graph.vertices[i[1]],c=this.graph.vertices[i[2]]),o.angle=-s.toRad(36),l.angle=s.toRad(36),u.angle=-s.toRad(108),c.angle=s.toRad(108),this.createNextBond(o,e,p+o.angle),this.createNextBond(l,e,p+l.angle),this.createNextBond(u,e,p+u.angle),this.createNextBond(c,e,p+c.angle)}}}/**
   * Gets the vetex sharing the edge that is the common bond of two rings.
   *
   * @param {Vertex} vertex A vertex.
   * @returns {(Number|null)} The id of a vertex sharing the edge that is the common bond of two rings with the vertex provided or null, if none.
   */getCommonRingbondNeighbour(e){let t=e.neighbours;for(var r=0;r<t.length;r++){let s=this.graph.vertices[t[r]];if(n.containsAll(s.value.rings,e.value.rings))return s}return null}/**
   * Check if a vector is inside any ring.
   *
   * @param {Vector2} vec A vector.
   * @returns {Boolean} A boolean indicating whether or not the point (vector) is inside any of the rings associated with the current molecule.
   */isPointInRing(e){for(var t=0;t<this.rings.length;t++){let r=this.rings[t];if(!r.positioned)continue;let n=s.polyCircumradius(this.opts.bondLength,r.getSize()),a=n*n;if(e.distanceSq(r.center)<a)return!0}return!1}/**
   * Check whether or not an edge is part of a ring.
   *
   * @param {Edge} edge An edge.
   * @returns {Boolean} A boolean indicating whether or not the edge is part of a ring.
   */isEdgeInRing(e){let t=this.graph.vertices[e.sourceId],r=this.graph.vertices[e.targetId];return this.areVerticesInSameRing(t,r)}/**
   * Check whether or not an edge is rotatable.
   *
   * @param {Edge} edge An edge.
   * @returns {Boolean} A boolean indicating whether or not the edge is rotatable.
   */isEdgeRotatable(e){let t=this.graph.vertices[e.sourceId],r=this.graph.vertices[e.targetId];return!("-"!==e.bondType||t.isTerminal()||r.isTerminal()||t.value.rings.length>0&&r.value.rings.length>0&&this.areVerticesInSameRing(t,r))}/**
   * Check whether or not a ring is an implicitly defined aromatic ring (lower case smiles).
   *
   * @param {Ring} ring A ring.
   * @returns {Boolean} A boolean indicating whether or not a ring is implicitly defined as aromatic.
   */isRingAromatic(e){for(var t=0;t<e.members.length;t++)if(!this.graph.vertices[e.members[t]].value.isPartOfAromaticRing)return!1;return!0}/**
   * Get the normals of an edge.
   *
   * @param {Edge} edge An edge.
   * @returns {Vector2[]} An array containing two vectors, representing the normals.
   */getEdgeNormals(e){let t=this.graph.vertices[e.sourceId].position,r=this.graph.vertices[e.targetId].position;return a.units(t,r)}/**
   * Returns an array of vertices that are neighbouring a vertix but are not members of a ring (including bridges).
   *
   * @param {Number} vertexId A vertex id.
   * @returns {Vertex[]} An array of vertices.
   */getNonRingNeighbours(e){let t=[],r=this.graph.vertices[e],s=r.neighbours;for(var a=0;a<s.length;a++){let e=this.graph.vertices[s[a]];0===n.intersection(r.value.rings,e.value.rings).length&&!1==e.value.isBridge&&t.push(e)}return t}/**
   * Annotaed stereochemistry information for visualization.
   */annotateStereochemistry(){// For each stereo-center
for(var e=0;e<this.graph.vertices.length;e++){let a=this.graph.vertices[e];if(!a.value.isStereoCenter)continue;let o=a.getNeighbours(),i=o.length,l=Array(i);for(var t=0;t<i;t++){let e=new Uint8Array(this.graph.vertices.length),s=Array([]);e[a.id]=1,this.visitStereochemistry(o[t],a.id,e,s,10,0);// Sort each level according to atomic number
for(var r=0;r<s.length;r++)s[r].sort(function(e,t){return t-e});l[t]=[t,s]}let u=0,p=0;for(var t=0;t<l.length;t++){l[t][1].length>u&&(u=l[t][1].length);for(var r=0;r<l[t][1].length;r++)l[t][1][r].length>p&&(p=l[t][1][r].length)}for(var t=0;t<l.length;t++){let e=u-l[t][1].length;for(var r=0;r<e;r++)l[t][1].push([]);// Break ties by the position in the SMILES string as per specification
l[t][1].push([o[t]]);// Make all same length. Fill with zeroes.
for(var r=0;r<l[t][1].length;r++){let e=p-l[t][1][r].length;for(var n=0;n<e;n++)l[t][1][r].push(0)}}l.sort(function(e,t){for(var r=0;r<e[1].length;r++)for(var s=0;s<e[1][r].length;s++){if(e[1][r][s]>t[1][r][s])return -1;if(e[1][r][s]<t[1][r][s])return 1}return 0});let c=new Uint8Array(i);for(var t=0;t<i;t++)c[t]=l[t][0],a.value.priority=t;// Check the angles between elements 0 and 1, and 0 and 2 to determine whether they are
// drawn cw or ccw
// TODO: OC(Cl)=[C@]=C(C)F currently fails here, however this is, IMHO, not a valid SMILES.
let d=this.graph.vertices[o[c[0]]].position,h=this.graph.vertices[o[c[1]]].position,f=this.graph.vertices[o[c[2]]].position,m=d.relativeClockwise(h,a.position);d.relativeClockwise(f,a.position);// If the second priority is clockwise from the first, the ligands are drawn clockwise, since
// The hydrogen can be drawn on either side
let g=-1===m,x="@"===a.value.bracket.chirality?-1:1,b=s.parityOfPermutation(c)*x==1?"R":"S",y="down",j="up";(g&&"R"!==b||!g&&"S"!==b)&&(a.value.hydrogenDirection="up",y="up",j="down"),a.value.hasHydrogen&&(this.graph.getEdge(a.id,o[c[c.length-1]]).wedge=y);// Get the shortest subtree to flip up / down. Ignore lowest priority
// The rules are following:
// 1. Do not draw wedge between two stereocenters
// 2. Heteroatoms
// 3. Draw outside ring
// 4. Shortest subtree
let _=Array(o.length-1),k=a.value.rings.length>1&&a.value.hasHydrogen,I=a.value.hasHydrogen?1:0;for(var t=0;t<c.length-I;t++){_[t]=new Uint32Array(2);let e=this.graph.vertices[o[c[t]]];_[t][0]+=e.value.isStereoCenter?0:1e5,// wedgeOrder[j][0] += neighbour.value.rings.length > 0 ? 0 : 10000;
// Only add if in same ring, unlike above
_[t][0]+=this.areVerticesInSameRing(e,a)?0:1e4,_[t][0]+=e.value.isHeteroAtom()?1e3:0,_[t][0]-=0===e.value.subtreeDepth?1e3:0,_[t][0]+=1e3-e.value.subtreeDepth,_[t][1]=o[c[t]]}// If all neighbours are in a ring, do not draw wedge, the hydrogen will be drawn.
if(_.sort(function(e,t){return e[0]>t[0]?-1:e[0]<t[0]?1:0}),!k){let e=_[0][1];if(a.value.hasHydrogen)this.graph.getEdge(a.id,e).wedge=j;else{let r=j;for(var t=c.length-1;t>=0&&(r=r===y?j:y,o[c[t]]!==e);t--);this.graph.getEdge(a.id,e).wedge=r}}a.value.chirality=b}}/**
   * 
   * 
   * @param {Number} vertexId The id of a vertex.
   * @param {(Number|null)} previousVertexId The id of the parent vertex of the vertex.
   * @param {Uint8Array} visited An array containing the visited flag for all vertices in the graph.
   * @param {Array} priority An array of arrays storing the atomic numbers for each level.
   * @param {Number} maxDepth The maximum depth.
   * @param {Number} depth The current depth.
   */visitStereochemistry(e,t,r,s,n,a,o=0){r[e]=1;let i=this.graph.vertices[e],l=i.value.getAtomicNumber();s.length<=a&&s.push([]);for(var u=0;u<this.graph.getEdge(e,t).weight;u++)s[a].push(1e3*o+l);let p=this.graph.vertices[e].neighbours;for(var u=0;u<p.length;u++)1!==r[p[u]]&&a<n-1&&this.visitStereochemistry(p[u],e,r.slice(),s,n,a+1,l);// Valences are filled with hydrogens and passed to the next level.
if(a<n-1){let t=0;for(var u=0;u<p.length;u++)t+=this.graph.getEdge(e,p[u]).weight;for(var u=0;u<i.value.getMaxBonds()-t;u++)s.length<=a+1&&s.push([]),s[a+1].push(1e3*l+1)}}/**
   * Creates pseudo-elements (such as Et, Me, Ac, Bz, ...) at the position of the carbon sets
   * the involved atoms not to be displayed.
   */initPseudoElements(){for(var e=0;e<this.graph.vertices.length;e++){let r=this.graph.vertices[e],s=r.neighbours,n=Array(s.length);for(var t=0;t<s.length;t++)n[t]=this.graph.vertices[s[t]];// Ignore atoms that have less than 3 neighbours, except if
// the vertex is connected to a ring and has two neighbours
if(3>r.getNeighbourCount()||r.value.rings.length>0||"P"===r.value.element||"C"===r.value.element&&3===n.length&&"N"===n[0].value.element&&"N"===n[1].value.element&&"N"===n[2].value.element)continue;// Continue if there are less than two heteroatoms
// or if a neighbour has more than 1 neighbour
let a=0,o=0;for(var t=0;t<n.length;t++){let e=n[t],r=e.value.element,s=e.getNeighbourCount();"C"!==r&&"H"!==r&&1===s&&a++,s>1&&o++}if(o>1||a<2)continue;// Get the previous atom (the one which is not terminal)
let i=null;for(var t=0;t<n.length;t++){let e=n[t];e.getNeighbourCount()>1&&(i=e)}for(var t=0;t<n.length;t++){let e=n[t];if(e.getNeighbourCount()>1)continue;e.value.isDrawn=!1;let s=l.maxBonds[e.value.element]-e.value.bondCount,a="";e.value.bracket&&(s=e.value.bracket.hcount,a=e.value.bracket.charge||0),r.value.attachPseudoElement(e.value.element,i?i.value.element:null,s,a)}}// The second pass
for(var e=0;e<this.graph.vertices.length;e++){let r=this.graph.vertices[e],s=r.value,n=s.element;if("C"===n||"H"===n||!s.isDrawn)continue;let a=r.neighbours,o=Array(a.length);for(var t=0;t<a.length;t++)o[t]=this.graph.vertices[a[t]];for(var t=0;t<o.length;t++){let e=o[t].value;if(!e.hasAttachedPseudoElements||2!==e.getAttachedPseudoElementsCount())continue;let s=e.getAttachedPseudoElements();s.hasOwnProperty("0O")&&s.hasOwnProperty("3C")&&(e.isDrawn=!1,r.value.attachPseudoElement("Ac","",0))}}}}},{d6b64b4ae4f36742:"absWn","389da5eebc6dd22":"2ffbV",f3dd1cbe0b275723:"ltay8",a198b09bfe49f9fe:"hJ5Qi","61b212e51f2d4e89":"c5diN",b5b770a4f11ebca1:"7rIHz","4dddb76c085053ee":"g62h9",d1ea121c9564b764:"akR7W",fad7e45b4db4d408:"jwLk6","8ac0375f6ad8d3d1":"lErGt","5cece0131c01500e":"esUs1","36388b1880252640":"e6YHD","10960c00f7d2a3a8":"l4F7i"}],absWn:[function(e,t,r){/** 
 * A static class containing helper functions for math-related tasks. 
 */class s{/**
     * Rounds a value to a given number of decimals.
     *
     * @static
     * @param {Number} value A number.
     * @param {Number} decimals The number of decimals.
     * @returns {Number} A number rounded to a given number of decimals.
     */static round(e,t){return Number(Math.round(e+"e"+(t=t||1))+"e-"+t)}/**
     * Returns the means of the angles contained in an array. In radians.
     *
     * @static
     * @param {Number[]} arr An array containing angles (in radians).
     * @returns {Number} The mean angle in radians.
     */static meanAngle(e){let t=0,r=0;for(var s=0;s<e.length;s++)t+=Math.sin(e[s]),r+=Math.cos(e[s]);return Math.atan2(t/e.length,r/e.length)}/**
     * Returns the inner angle of a n-sided regular polygon.
     *
     * @static
     * @param {Number} n Number of sides of a regular polygon.
     * @returns {Number} The inner angle of a given regular polygon.
     */static innerAngle(e){return s.toRad((e-2)*180/e)}/**
     * Returns the circumradius of a n-sided regular polygon with a given side-length.
     *
     * @static
     * @param {Number} s The side length of the regular polygon.
     * @param {Number} n The number of sides.
     * @returns {Number} The circumradius of the regular polygon.
     */static polyCircumradius(e,t){return e/(2*Math.sin(Math.PI/t))}/**
     * Returns the apothem of a regular n-sided polygon based on its radius.
     *
     * @static
     * @param {Number} r The radius.
     * @param {Number} n The number of edges of the regular polygon.
     * @returns {Number} The apothem of a n-sided polygon based on its radius.
     */static apothem(e,t){return e*Math.cos(Math.PI/t)}static apothemFromSideLength(e,t){let r=s.polyCircumradius(e,t);return s.apothem(r,t)}/**
     * The central angle of a n-sided regular polygon. In radians.
     *
     * @static
     * @param {Number} n The number of sides of the regular polygon.
     * @returns {Number} The central angle of the n-sided polygon in radians.
     */static centralAngle(e){return s.toRad(360/e)}/**
     * Convertes radians to degrees.
     *
     * @static
     * @param {Number} rad An angle in radians.
     * @returns {Number} The angle in degrees.
     */static toDeg(e){return e*s.degFactor}/**
     * Converts degrees to radians.
     *
     * @static
     * @param {Number} deg An angle in degrees.
     * @returns {Number} The angle in radians.
     */static toRad(e){return e*s.radFactor}/**
     * Returns the parity of the permutation (1 or -1)
     * @param {(Array|Uint8Array)} arr An array containing the permutation.
     * @returns {Number} The parity of the permutation (1 or -1), where 1 means even and -1 means odd.
     */static parityOfPermutation(e){let t=new Uint8Array(e.length),r=0,s=function(r,n=0){return 1===t[r]?n:(n++,t[r]=1,s(e[r],n))};for(var n=0;n<e.length;n++)1!==t[n]&&(r+=1-s(n)%2);return r%2?-1:1}/** The factor to convert degrees to radians. */static get radFactor(){return Math.PI/180}/** The factor to convert radians to degrees. */static get degFactor(){return 180/Math.PI}/** Two times PI. */static get twoPI(){return 2*Math.PI}}t.exports=s},{}],"2ffbV":[function(e,t,r){//@ts-check
/** 
 * A static class containing helper functions for array-related tasks. 
 */class s{/**
     * Clone an array or an object. If an object is passed, a shallow clone will be created.
     *
     * @static
     * @param {*} arr The array or object to be cloned.
     * @returns {*} A clone of the array or object.
     */static clone(e){let t=Array.isArray(e)?[]:{};for(let r in e){let n=e[r];"function"==typeof n.clone?t[r]=n.clone():t[r]="object"==typeof n?s.clone(n):n}return t}/**
     * Returns a boolean indicating whether or not the two arrays contain the same elements.
     * Only supports 1d, non-nested arrays.
     *
     * @static
     * @param {Array} arrA An array.
     * @param {Array} arrB An array.
     * @returns {Boolean} A boolean indicating whether or not the two arrays contain the same elements.
     */static equals(e,t){if(e.length!==t.length)return!1;let r=e.slice().sort(),s=t.slice().sort();for(var n=0;n<r.length;n++)if(r[n]!==s[n])return!1;return!0}/**
     * Returns a string representation of an array. If the array contains objects with an id property, the id property is printed for each of the elements.
     *
     * @static
     * @param {Object[]} arr An array.
     * @param {*} arr[].id If the array contains an object with the property 'id', the properties value is printed. Else, the array elements value is printend.
     * @returns {String} A string representation of the array.
     */static print(e){if(0==e.length)return"";let t="(";for(let r=0;r<e.length;r++)t+=e[r].id?e[r].id+", ":e[r]+", ";return(t=t.substring(0,t.length-2))+")"}/**
     * Run a function for each element in the array. The element is supplied as an argument for the callback function
     *
     * @static
     * @param {Array} arr An array.
     * @param {Function} callback The callback function that is called for each element.
     */static each(e,t){for(let r=0;r<e.length;r++)t(e[r])}/**
     * Return the array element from an array containing objects, where a property of the object is set to a given value.
     *
     * @static
     * @param {Array} arr An array.
     * @param {(String|Number)} property A property contained within an object in the array.
     * @param {(String|Number)} value The value of the property.
     * @returns {*} The array element matching the value.
     */static get(e,t,r){for(let s=0;s<e.length;s++)if(e[s][t]==r)return e[s]}/**
     * Checks whether or not an array contains a given value. the options object passed as a second argument can contain three properties. value: The value to be searched for. property: The property that is to be searched for a given value. func: A function that is used as a callback to return either true or false in order to do a custom comparison.
     *
     * @static
     * @param {Array} arr An array.
     * @param {Object} options See method description.
     * @param {*} options.value The value for which to check.
     * @param {String} [options.property=undefined] The property on which to check.
     * @param {Function} [options.func=undefined] A custom property function.
     * @returns {Boolean} A boolean whether or not the array contains a value.
     */static contains(e,t){if(t.property||t.func){if(t.func){for(let r=0;r<e.length;r++)if(t.func(e[r]))return!0}else for(let r=0;r<e.length;r++)if(e[r][t.property]==t.value)return!0}else for(let r=0;r<e.length;r++)if(e[r]==t.value)return!0;return!1}/**
     * Returns an array containing the intersection between two arrays. That is, values that are common to both arrays.
     *
     * @static
     * @param {Array} arrA An array.
     * @param {Array} arrB An array.
     * @returns {Array} The intersecting vlaues.
     */static intersection(e,t){let r=[];for(let s=0;s<e.length;s++)for(let n=0;n<t.length;n++)e[s]===t[n]&&r.push(e[s]);return r}/**
     * Returns an array of unique elements contained in an array.
     *
     * @static
     * @param {Array} arr An array.
     * @returns {Array} An array of unique elements contained within the array supplied as an argument.
     */static unique(e){let t={};return e.filter(function(e){// using !== instead of hasOwnProperty (http://andrew.hedges.name/experiments/in/)
return void 0===t[e]&&(t[e]=!0)})}/**
     * Count the number of occurences of a value in an array.
     *
     * @static
     * @param {Array} arr An array.
     * @param {*} value A value to be counted.
     * @returns {Number} The number of occurences of a value in the array.
     */static count(e,t){let r=0;for(let s=0;s<e.length;s++)e[s]===t&&r++;return r}/**
     * Toggles the value of an array. If a value is not contained in an array, the array returned will contain all the values of the original array including the value. If a value is contained in an array, the array returned will contain all the values of the original array excluding the value.
     *
     * @static
     * @param {Array} arr An array.
     * @param {*} value A value to be toggled.
     * @returns {Array} The toggled array.
     */static toggle(e,t){let r=[],s=!1;for(let n=0;n<e.length;n++)e[n]!==t?r.push(e[n]):// means it was removed
s=!0;return s||r.push(t),r}/**
     * Remove a value from an array.
     *
     * @static
     * @param {Array} arr An array.
     * @param {*} value A value to be removed.
     * @returns {Array} A new array with the element with a given value removed.
     */static remove(e,t){let r=[];for(let s=0;s<e.length;s++)e[s]!==t&&r.push(e[s]);return r}/**
     * Remove a value from an array with unique values.
     *
     * @static
     * @param {Array} arr An array.
     * @param {*} value A value to be removed.
     * @returns {Array} An array with the element with a given value removed.
     */static removeUnique(e,t){let r=e.indexOf(t);return r>-1&&e.splice(r,1),e}/**
     * Remove all elements contained in one array from another array.
     *
     * @static
     * @param {Array} arrA The array to be filtered.
     * @param {Array} arrB The array containing elements that will be removed from the other array.
     * @returns {Array} The filtered array.
     */static removeAll(e,t){return e.filter(function(e){return -1===t.indexOf(e)})}/**
     * Merges two arrays and returns the result. The first array will be appended to the second array.
     *
     * @static
     * @param {Array} arrA An array.
     * @param {Array} arrB An array.
     * @returns {Array} The merged array.
     */static merge(e,t){let r=Array(e.length+t.length);for(let t=0;t<e.length;t++)r[t]=e[t];for(let s=0;s<t.length;s++)r[e.length+s]=t[s];return r}/**
     * Checks whether or not an array contains all the elements of another array, without regard to the order.
     *
     * @static
     * @param {Array} arrA An array.
     * @param {Array} arrB An array.
     * @returns {Boolean} A boolean indicating whether or not both array contain the same elements.
     */static containsAll(e,t){let r=0;for(let s=0;s<e.length;s++)for(let n=0;n<t.length;n++)e[s]===t[n]&&r++;return r===t.length}/**
     * Sort an array of atomic number information. Where the number is indicated as x, x.y, x.y.z, ...
     *
     * @param {Object[]} arr An array of vertex ids with their associated atomic numbers.
     * @param {Number} arr[].vertexId A vertex id.
     * @param {String} arr[].atomicNumber The atomic number associated with the vertex id.
     * @returns {Object[]} The array sorted by atomic number. Example of an array entry: { atomicNumber: 2, vertexId: 5 }.
     */static sortByAtomicNumberDesc(e){let t=e.map(function(e,t){return{index:t,value:e.atomicNumber.split(".").map(Number)}});return t.sort(function(e,t){let r=Math.min(t.value.length,e.value.length),s=0;for(;s<r&&t.value[s]===e.value[s];)s++;return s===r?t.value.length-e.value.length:t.value[s]-e.value[s]}),t.map(function(t){return e[t.index]})}/**
     * Copies a an n-dimensional array.
     * 
     * @param {Array} arr The array to be copied.
     * @returns {Array} The copy.
     */static deepCopy(e){let t=[];for(let r=0;r<e.length;r++){let n=e[r];n instanceof Array?t[r]=s.deepCopy(n):t[r]=n}return t}}t.exports=s},{}],ltay8:[function(e,t,r){//@ts-check
/** 
 * A class representing a 2D vector.
 * 
 * @property {Number} x The x component of the vector.
 * @property {Number} y The y component of the vector.
 */class s{/**
     * The constructor of the class Vector2.
     *
     * @param {(Number|Vector2)} x The initial x coordinate value or, if the single argument, a Vector2 object.
     * @param {Number} y The initial y coordinate value.
     */constructor(e,t){0==arguments.length?(this.x=0,this.y=0):1==arguments.length?(this.x=e.x,this.y=e.y):(this.x=e,this.y=t)}/**
     * Clones this vector and returns the clone.
     *
     * @returns {Vector2} The clone of this vector.
     */clone(){return new s(this.x,this.y)}/**
     * Returns a string representation of this vector.
     *
     * @returns {String} A string representation of this vector.
     */toString(){return"("+this.x+","+this.y+")"}/**
     * Add the x and y coordinate values of a vector to the x and y coordinate values of this vector.
     *
     * @param {Vector2} vec Another vector.
     * @returns {Vector2} Returns itself.
     */add(e){return this.x+=e.x,this.y+=e.y,this}/**
     * Subtract the x and y coordinate values of a vector from the x and y coordinate values of this vector.
     *
     * @param {Vector2} vec Another vector.
     * @returns {Vector2} Returns itself.
     */subtract(e){return this.x-=e.x,this.y-=e.y,this}/**
     * Divide the x and y coordinate values of this vector by a scalar.
     *
     * @param {Number} scalar The scalar.
     * @returns {Vector2} Returns itself.
     */divide(e){return this.x/=e,this.y/=e,this}/**
     * Multiply the x and y coordinate values of this vector by the values of another vector.
     *
     * @param {Vector2} v A vector.
     * @returns {Vector2} Returns itself.
     */multiply(e){return this.x*=e.x,this.y*=e.y,this}/**
     * Multiply the x and y coordinate values of this vector by a scalar.
     *
     * @param {Number} scalar The scalar.
     * @returns {Vector2} Returns itself.
     */multiplyScalar(e){return this.x*=e,this.y*=e,this}/**
     * Inverts this vector. Same as multiply(-1.0).
     *
     * @returns {Vector2} Returns itself.
     */invert(){return this.x=-this.x,this.y=-this.y,this}/**
     * Returns the angle of this vector in relation to the coordinate system.
     *
     * @returns {Number} The angle in radians.
     */angle(){return Math.atan2(this.y,this.x)}/**
     * Returns the euclidean distance between this vector and another vector.
     *
     * @param {Vector2} vec A vector.
     * @returns {Number} The euclidean distance between the two vectors.
     */distance(e){return Math.sqrt((e.x-this.x)*(e.x-this.x)+(e.y-this.y)*(e.y-this.y))}/**
     * Returns the squared euclidean distance between this vector and another vector. When only the relative distances of a set of vectors are needed, this is is less expensive than using distance(vec).
     *
     * @param {Vector2} vec Another vector.
     * @returns {Number} The squared euclidean distance of the two vectors.
     */distanceSq(e){return(e.x-this.x)*(e.x-this.x)+(e.y-this.y)*(e.y-this.y)}/**
     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to the coordinate system.
     *
     * @param {Vector2} vec Another vector.
     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to the coordinate system.
     */clockwise(e){let t=this.y*e.x,r=this.x*e.y;return t>r?-1:t===r?0:1}/**
     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to an arbitrary third vector.
     *
     * @param {Vector2} center The central vector.
     * @param {Vector2} vec Another vector.
     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to an arbitrary third vector.
     */relativeClockwise(e,t){let r=(this.y-e.y)*(t.x-e.x),s=(this.x-e.x)*(t.y-e.y);return r>s?-1:r===s?0:1}/**
     * Rotates this vector by a given number of radians around the origin of the coordinate system.
     *
     * @param {Number} angle The angle in radians to rotate the vector.
     * @returns {Vector2} Returns itself.
     */rotate(e){let t=new s(0,0),r=Math.cos(e),n=Math.sin(e);return t.x=this.x*r-this.y*n,t.y=this.x*n+this.y*r,this.x=t.x,this.y=t.y,this}/**
     * Rotates this vector around another vector.
     *
     * @param {Number} angle The angle in radians to rotate the vector.
     * @param {Vector2} vec The vector which is used as the rotational center.
     * @returns {Vector2} Returns itself.
     */rotateAround(e,t){let r=Math.sin(e),s=Math.cos(e);this.x-=t.x,this.y-=t.y;let n=this.x*s-this.y*r,a=this.x*r+this.y*s;return this.x=n+t.x,this.y=a+t.y,this}/**
     * Rotate a vector around a given center to the same angle as another vector (so that the two vectors and the center are in a line, with both vectors on one side of the center), keeps the distance from this vector to the center.
     *
     * @param {Vector2} vec The vector to rotate this vector to.
     * @param {Vector2} center The rotational center.
     * @param {Number} [offsetAngle=0.0] An additional amount of radians to rotate the vector.
     * @returns {Vector2} Returns itself.
     */rotateTo(e,t,r=0){// Problem if this is first position
this.x+=.001,this.y-=.001;let n=s.subtract(this,t),a=s.subtract(e,t),o=s.angle(a,n);return this.rotateAround(o+r,t),this}/**
     * Rotates the vector away from a specified vector around a center.
     * 
     * @param {Vector2} vec The vector this one is rotated away from.
     * @param {Vector2} center The rotational center.
     * @param {Number} angle The angle by which to rotate.
     */rotateAwayFrom(e,t,r){this.rotateAround(r,t);let s=this.distanceSq(e);this.rotateAround(-2*r,t),this.distanceSq(e)<s&&this.rotateAround(2*r,t)}/**
     * Returns the angle in radians used to rotate this vector away from a given vector.
     * 
     * @param {Vector2} vec The vector this one is rotated away from.
     * @param {Vector2} center The rotational center.
     * @param {Number} angle The angle by which to rotate.
     * @returns {Number} The angle in radians.
     */getRotateAwayFromAngle(e,t,r){let s=this.clone();s.rotateAround(r,t);let n=s.distanceSq(e);return(s.rotateAround(-2*r,t),s.distanceSq(e)<n)?r:-r}/**
     * Returns the angle in radians used to rotate this vector towards a given vector.
     * 
     * @param {Vector2} vec The vector this one is rotated towards to.
     * @param {Vector2} center The rotational center.
     * @param {Number} angle The angle by which to rotate.
     * @returns {Number} The angle in radians.
     */getRotateTowardsAngle(e,t,r){let s=this.clone();s.rotateAround(r,t);let n=s.distanceSq(e);return(s.rotateAround(-2*r,t),s.distanceSq(e)>n)?r:-r}/**
     * Gets the angles between this vector and another vector around a common center of rotation.
     *
     * @param {Vector2} vec Another vector.
     * @param {Vector2} center The center of rotation.
     * @returns {Number} The angle between this vector and another vector around a center of rotation in radians.
     */getRotateToAngle(e,t){let r=s.subtract(this,t),n=s.subtract(e,t),a=s.angle(n,r);return Number.isNaN(a)?0:a}/**
     * Checks whether a vector lies within a polygon spanned by a set of vectors.
     *
     * @param {Vector2[]} polygon An array of vectors spanning the polygon.
     * @returns {Boolean} A boolean indicating whether or not this vector is within a polygon.
     */isInPolygon(e){let t=!1;// Its not always a given, that the polygon is convex (-> sugars)
for(let r=0,s=e.length-1;r<e.length;s=r++)e[r].y>this.y!=e[s].y>this.y&&this.x<(e[s].x-e[r].x)*(this.y-e[r].y)/(e[s].y-e[r].y)+e[r].x&&(t=!t);return t}/**
     * Returns the length of this vector.
     *
     * @returns {Number} The length of this vector.
     */length(){return Math.sqrt(this.x*this.x+this.y*this.y)}/**
     * Returns the square of the length of this vector.
     *
     * @returns {Number} The square of the length of this vector.
     */lengthSq(){return this.x*this.x+this.y*this.y}/**
     * Normalizes this vector.
     *
     * @returns {Vector2} Returns itself.
     */normalize(){return this.divide(this.length()),this}/**
     * Returns a normalized copy of this vector.
     *
     * @returns {Vector2} A normalized copy of this vector.
     */normalized(){return s.divideScalar(this,this.length())}/**
     * Calculates which side of a line spanned by two vectors this vector is.
     *
     * @param {Vector2} vecA A vector.
     * @param {Vector2} vecB A vector.
     * @returns {Number} A number indicating the side of this vector, given a line spanned by two other vectors.
     */whichSide(e,t){return(this.x-e.x)*(t.y-e.y)-(this.y-e.y)*(t.x-e.x)}/**
     * Checks whether or not this vector is on the same side of a line spanned by two vectors as another vector.
     *
     * @param {Vector2} vecA A vector spanning the line.
     * @param {Vector2} vecB A vector spanning the line.
     * @param {Vector2} vecC A vector to check whether or not it is on the same side as this vector.
     * @returns {Boolean} Returns a boolean indicating whether or not this vector is on the same side as another vector.
     */sameSideAs(e,t,r){let s=this.whichSide(e,t),n=r.whichSide(e,t);return s<0&&n<0||0==s&&0==n||s>0&&n>0}/**
     * Adds two vectors and returns the result as a new vector.
     *
     * @static
     * @param {Vector2} vecA A summand.
     * @param {Vector2} vecB A summand.
     * @returns {Vector2} Returns the sum of two vectors.
     */static add(e,t){return new s(e.x+t.x,e.y+t.y)}/**
     * Subtracts one vector from another and returns the result as a new vector.
     *
     * @static
     * @param {Vector2} vecA The minuend.
     * @param {Vector2} vecB The subtrahend.
     * @returns {Vector2} Returns the difference of two vectors.
     */static subtract(e,t){return new s(e.x-t.x,e.y-t.y)}/**
     * Multiplies two vectors (value by value) and returns the result.
     *
     * @static
     * @param {Vector2} vecA A vector.
     * @param {Vector2} vecB A vector.
     * @returns {Vector2} Returns the product of two vectors.
     */static multiply(e,t){return new s(e.x*t.x,e.y*t.y)}/**
     * Multiplies two vectors (value by value) and returns the result.
     *
     * @static
     * @param {Vector2} vec A vector.
     * @param {Number} scalar A scalar.
     * @returns {Vector2} Returns the product of two vectors.
     */static multiplyScalar(e,t){return new s(e.x,e.y).multiplyScalar(t)}/**
     * Returns the midpoint of a line spanned by two vectors.
     *
     * @static
     * @param {Vector2} vecA A vector spanning the line.
     * @param {Vector2} vecB A vector spanning the line.
     * @returns {Vector2} The midpoint of the line spanned by two vectors.
     */static midpoint(e,t){return new s((e.x+t.x)/2,(e.y+t.y)/2)}/**
     * Returns the normals of a line spanned by two vectors.
     *
     * @static
     * @param {Vector2} vecA A vector spanning the line.
     * @param {Vector2} vecB A vector spanning the line.
     * @returns {Vector2[]} An array containing the two normals, each represented by a vector.
     */static normals(e,t){let r=s.subtract(t,e);return[new s(-r.y,r.x),new s(r.y,-r.x)]}/**
     * Returns the unit (normalized normal) vectors of a line spanned by two vectors.
     *
     * @static
     * @param {Vector2} vecA A vector spanning the line.
     * @param {Vector2} vecB A vector spanning the line.
     * @returns {Vector2[]} An array containing the two unit vectors.
     */static units(e,t){let r=s.subtract(t,e);return[new s(-r.y,r.x).normalize(),new s(r.y,-r.x).normalize()]}/**
     * Divides a vector by another vector and returns the result as new vector.
     *
     * @static
     * @param {Vector2} vecA The dividend.
     * @param {Vector2} vecB The divisor.
     * @returns {Vector2} The fraction of the two vectors.
     */static divide(e,t){return new s(e.x/t.x,e.y/t.y)}/**
     * Divides a vector by a scalar and returns the result as new vector.
     *
     * @static
     * @param {Vector2} vecA The dividend.
     * @param {Number} s The scalar.
     * @returns {Vector2} The fraction of the two vectors.
     */static divideScalar(e,t){return new s(e.x/t,e.y/t)}/**
     * Returns the dot product of two vectors.
     *
     * @static
     * @param {Vector2} vecA A vector.
     * @param {Vector2} vecB A vector.
     * @returns {Number} The dot product of two vectors.
     */static dot(e,t){return e.x*t.x+e.y*t.y}/**
     * Returns the angle between two vectors.
     *
     * @static
     * @param {Vector2} vecA A vector.
     * @param {Vector2} vecB A vector.
     * @returns {Number} The angle between two vectors in radians.
     */static angle(e,t){return Math.acos(s.dot(e,t)/(e.length()*t.length()))}/**
     * Returns the angle between two vectors based on a third vector in between.
     *
     * @static
     * @param {Vector2} vecA A vector.
     * @param {Vector2} vecB A (central) vector.
     * @param {Vector2} vecC A vector.
     * @returns {Number} The angle in radians.
     */static threePointangle(e,t,r){let n=s.subtract(t,e),a=s.subtract(r,t),o=e.distance(t),i=t.distance(r);return Math.acos(s.dot(n,a)/(o*i))}/**
     * Returns the scalar projection of a vector on another vector.
     *
     * @static
     * @param {Vector2} vecA The vector to be projected.
     * @param {Vector2} vecB The vector to be projection upon.
     * @returns {Number} The scalar component.
     */static scalarProjection(e,t){let r=t.normalized();return s.dot(e,r)}/**
     * Returns the average vector (normalized) of the input vectors.
     *
     * @static
     * @param {Array} vecs An array containing vectors.
     * @returns {Vector2} The resulting vector (normalized).
     */static averageDirection(e){let t=new s(0,0);for(var r=0;r<e.length;r++){let s=e[r];t.add(s)}return t.normalize()}}t.exports=s},{}],hJ5Qi:[function(e,t,r){//@ts-check
let s=e("7b5b31515b6ead9e");/** 
 * A class representing a line.
 * 
 * @property {Vector2} from The Vector2 defining the start of the line.
 * @property {Vector2} to The Vector2 defining the end of the line.
 * @property {String} elementFrom The element symbol associated with the start of the line.
 * @property {String} elementTo The element symbol associated with the end of the line.
 * @property {Boolean} chiralFrom A boolean indicating whether or not the source atom is a chiral center.
 * @property {Boolean} chiralTo A boolean indicating whether or tno the target atom is a chiral center.
 */class n{/**
     * The constructor for the class Line.
     *
     * @param {Vector2} [from=new Vector2(0, 0)] A vector marking the beginning of the line.
     * @param {Vector2} [to=new Vector2(0, 0)] A vector marking the end of the line.
     * @param {string} [elementFrom=null] A one-letter representation of the element associated with the vector marking the beginning of the line.
     * @param {string} [elementTo=null] A one-letter representation of the element associated with the vector marking the end of the line.
     * @param {Boolean} [chiralFrom=false] Whether or not the from atom is a chiral center.
     * @param {Boolean} [chiralTo=false] Whether or not the to atom is a chiral center.
     */constructor(e=new s(0,0),t=new s(0,0),r=null,n=null,a=!1,o=!1){this.from=e,this.to=t,this.elementFrom=r,this.elementTo=n,this.chiralFrom=a,this.chiralTo=o}/**
     * Clones this line and returns the clone.
     *
     * @returns {Line} A clone of this line.
     */clone(){return new n(this.from.clone(),this.to.clone(),this.elementFrom,this.elementTo)}/**
     * Returns the length of this line.
     *
     * @returns {Number} The length of this line.
     */getLength(){return Math.sqrt(Math.pow(this.to.x-this.from.x,2)+Math.pow(this.to.y-this.from.y,2))}/**
     * Returns the angle of the line in relation to the coordinate system (the x-axis).
     *
     * @returns {Number} The angle in radians.
     */getAngle(){return s.subtract(this.getRightVector(),this.getLeftVector()).angle()}/**
     * Returns the right vector (the vector with the larger x value).
     *
     * @returns {Vector2} The right vector.
     */getRightVector(){return(// Return the vector with the larger x value (the right one)
this.from.x<this.to.x?this.to:this.from)}/**
     * Returns the left vector (the vector with the smaller x value).
     *
     * @returns {Vector2} The left vector.
     */getLeftVector(){return(// Return the vector with the smaller x value (the left one)
this.from.x<this.to.x?this.from:this.to)}/**
     * Returns the element associated with the right vector (the vector with the larger x value).
     *
     * @returns {String} The element associated with the right vector.
     */getRightElement(){return this.from.x<this.to.x?this.elementTo:this.elementFrom}/**
     * Returns the element associated with the left vector (the vector with the smaller x value).
     *
     * @returns {String} The element associated with the left vector.
     */getLeftElement(){return this.from.x<this.to.x?this.elementFrom:this.elementTo}/**
     * Returns whether or not the atom associated with the right vector (the vector with the larger x value) is a chiral center.
     *
     * @returns {Boolean} Whether or not the atom associated with the right vector is a chiral center.
     */getRightChiral(){return this.from.x<this.to.x?this.chiralTo:this.chiralFrom}/**
     * Returns whether or not the atom associated with the left vector (the vector with the smaller x value) is a chiral center.
     *
     * @returns {Boolean} Whether or not the atom  associated with the left vector is a chiral center.
     */getLeftChiral(){return this.from.x<this.to.x?this.chiralFrom:this.chiralTo}/**
     * Set the value of the right vector.
     *
     * @param {Number} x The x value.
     * @param {Number} y The y value.
     * @returns {Line} This line.
     */setRightVector(e,t){return this.from.x<this.to.x?(this.to.x=e,this.to.y=t):(this.from.x=e,this.from.y=t),this}/**
     * Set the value of the left vector.
     *
     * @param {Number} x The x value.
     * @param {Number} y The y value.
     * @returns {Line} This line.
     */setLeftVector(e,t){return this.from.x<this.to.x?(this.from.x=e,this.from.y=t):(this.to.x=e,this.to.y=t),this}/**
     * Rotates this line to be aligned with the x-axis. The center of rotation is the left vector.
     *
     * @returns {Line} This line.
     */rotateToXAxis(){let e=this.getLeftVector();return this.setRightVector(e.x+this.getLength(),e.y),this}/**
     * Rotate the line by a given value (in radians). The center of rotation is the left vector.
     *
     * @param {Number} theta The angle (in radians) to rotate the line.
     * @returns {Line} This line.
     */rotate(e){let t=this.getLeftVector(),r=this.getRightVector(),s=Math.sin(e),n=Math.cos(e),a=n*(r.x-t.x)-s*(r.y-t.y)+t.x,o=s*(r.x-t.x)-n*(r.y-t.y)+t.y;return this.setRightVector(a,o),this}/**
     * Shortens this line from the "from" direction by a given value (in pixels).
     *
     * @param {Number} by The length in pixels to shorten the vector by.
     * @returns {Line} This line.
     */shortenFrom(e){let t=s.subtract(this.to,this.from);return t.normalize(),t.multiplyScalar(e),this.from.add(t),this}/**
     * Shortens this line from the "to" direction by a given value (in pixels).
     *
     * @param {Number} by The length in pixels to shorten the vector by.
     * @returns {Line} This line.
     */shortenTo(e){let t=s.subtract(this.from,this.to);return t.normalize(),t.multiplyScalar(e),this.to.add(t),this}/**
     * Shorten the right side.
     *
     * @param {Number} by The length in pixels to shorten the vector by.
     * @returns {Line} Returns itself.
     */shortenRight(e){return this.from.x<this.to.x?this.shortenTo(e):this.shortenFrom(e),this}/**
     * Shorten the left side.
     * 
     * @param {Number} by The length in pixels to shorten the vector by.
     * @returns {Line} Returns itself.
     */shortenLeft(e){return this.from.x<this.to.x?this.shortenFrom(e):this.shortenTo(e),this}/**
     * Shortens this line from both directions by a given value (in pixels).
     *
     * @param {Number} by The length in pixels to shorten the vector by.
     * @returns {Line} This line.
     */shorten(e){let t=s.subtract(this.from,this.to);return t.normalize(),t.multiplyScalar(e/2),this.to.add(t),this.from.subtract(t),this}}t.exports=n},{"7b5b31515b6ead9e":"ltay8"}],c5diN:[function(e,t,r){//@ts-check
let s=e("a64e480a0c91db49"),n=e("b5cf518e988e8646"),a=e("8545593c35ef91f7");e("dc7f1f1a90aa0607");/** 
 * A class representing a vertex.
 * 
 * @property {Number} id The id of this vertex.
 * @property {Atom} value The atom associated with this vertex.
 * @property {Vector2} position The position of this vertex.
 * @property {Vector2} previousPosition The position of the previous vertex.
 * @property {Number|null} parentVertexId The id of the previous vertex.
 * @property {Number[]} children The ids of the children of this vertex.
 * @property {Number[]} spanningTreeChildren The ids of the children of this vertex as defined in the spanning tree defined by the SMILES.
 * @property {Number[]} edges The ids of edges associated with this vertex.
 * @property {Boolean} positioned A boolean indicating whether or not this vertex has been positioned.
 * @property {Number} angle The angle of this vertex.
 * @property {Number} dir The direction of this vertex.
 * @property {Number} neighbourCount The number of neighbouring vertices.
 * @property {Number[]} neighbours The vertex ids of neighbouring vertices.
 * @property {String[]} neighbouringElements The element symbols associated with neighbouring vertices.
 * @property {Boolean} forcePositioned A boolean indicating whether or not this vertex was positioned using a force-based approach.
 */class o{/**
   * The constructor for the class Vertex.
   *
   * @param {Atom} value The value associated with this vertex.
   * @param {Number} [x=0] The initial x coordinate of the positional vector of this vertex.
   * @param {Number} [y=0] The initial y coordinate of the positional vector of this vertex.
   */constructor(e,t=0,r=0){this.id=null,this.value=e,this.position=new a(t||0,r||0),this.previousPosition=new a(0,0),this.parentVertexId=null,this.children=[],this.spanningTreeChildren=[],this.edges=[],this.positioned=!1,this.angle=null,this.dir=1,this.neighbourCount=0,this.neighbours=[],this.neighbouringElements=[],this.forcePositioned=!1}/**
   * Set the 2D coordinates of the vertex.
   * 
   * @param {Number} x The x component of the coordinates.
   * @param {Number} y The y component of the coordinates.
   * 
   */setPosition(e,t){this.position.x=e,this.position.y=t}/**
   * Set the 2D coordinates of the vertex from a Vector2.
   * 
   * @param {Vector2} v A 2D vector.
   * 
   */setPositionFromVector(e){this.position.x=e.x,this.position.y=e.y}/**
   * Add a child vertex id to this vertex.
   * @param {Number} vertexId The id of a vertex to be added as a child to this vertex.
   */addChild(e){this.children.push(e),this.neighbours.push(e),this.neighbourCount++}/**
   * Add a child vertex id to this vertex as the second child of the neighbours array,
   * except this vertex is the first vertex of the SMILE string, then it is added as the first.
   * This is used to get the correct ordering of neighbours for parity calculations.
   * If a hydrogen is implicitly attached to the chiral center, insert as the third child.
   * @param {Number} vertexId The id of a vertex to be added as a child to this vertex.
   * @param {Number} ringbondIndex The index of the ringbond.
   */addRingbondChild(e,t){if(this.children.push(e),this.value.bracket){let r=1;0===this.id&&0===this.value.bracket.hcount&&(r=0),1===this.value.bracket.hcount&&0===t&&(r=2),1===this.value.bracket.hcount&&1===t&&(r=this.neighbours.length<3?2:3),null===this.value.bracket.hcount&&0===t&&(r=1),null===this.value.bracket.hcount&&1===t&&(r=this.neighbours.length<3?1:2),this.neighbours.splice(r,0,e)}else this.neighbours.push(e);this.neighbourCount++}/**
   * Set the vertex id of the parent.
   * 
   * @param {Number} parentVertexId The parents vertex id.
   */setParentVertexId(e){this.neighbourCount++,this.parentVertexId=e,this.neighbours.push(e)}/**
   * Returns true if this vertex is terminal (has no parent or child vertices), otherwise returns false. Always returns true if associated value has property hasAttachedPseudoElements set to true.
   *
   * @returns {Boolean} A boolean indicating whether or not this vertex is terminal.
   */isTerminal(){return!!this.value.hasAttachedPseudoElements||null===this.parentVertexId&&this.children.length<2||0===this.children.length}/**
   * Clones this vertex and returns the clone.
   *
   * @returns {Vertex} A clone of this vertex.
   */clone(){let e=new o(this.value,this.position.x,this.position.y);return e.id=this.id,e.previousPosition=new a(this.previousPosition.x,this.previousPosition.y),e.parentVertexId=this.parentVertexId,e.children=n.clone(this.children),e.spanningTreeChildren=n.clone(this.spanningTreeChildren),e.edges=n.clone(this.edges),e.positioned=this.positioned,e.angle=this.angle,e.forcePositioned=this.forcePositioned,e}/**
   * Returns true if this vertex and the supplied vertex both have the same id, else returns false.
   *
   * @param {Vertex} vertex The vertex to check.
   * @returns {Boolean} A boolean indicating whether or not the two vertices have the same id.
   */equals(e){return this.id===e.id}/**
   * Returns the angle of this vertexes positional vector. If a reference vector is supplied in relations to this vector, else in relations to the coordinate system.
   *
   * @param {Vector2} [referenceVector=null] - The reference vector.
   * @param {Boolean} [returnAsDegrees=false] - If true, returns angle in degrees, else in radians.
   * @returns {Number} The angle of this vertex.
   */getAngle(e=null,t=!1){let r=null;return(r=e?a.subtract(this.position,e):a.subtract(this.position,this.previousPosition),t)?s.toDeg(r.angle()):r.angle()}/**
   * Returns the suggested text direction when text is added at the position of this vertex.
   *
   * @param {Vertex[]} vertices The array of vertices for the current molecule.
   * @returns {String} The suggested direction of the text.
   */getTextDirection(e){let t=this.getDrawnNeighbours(e),r=[];for(let s=0;s<t.length;s++)r.push(this.getAngle(e[t[s]].position));let n=s.meanAngle(r),a=Math.PI/2;return 2===(n=Math.round(Math.round(n/a)*a))?"down":-2===n?"up":0===n||-0===n?"right":3===n||-3===n?"left":"down"// default to down
}/**
   * Returns an array of ids of neighbouring vertices.
   *
   * @param {Number} [vertexId=null] If a value is supplied, the vertex with this id is excluded from the returned indices.
   * @returns {Number[]} An array containing the ids of neighbouring vertices.
   */getNeighbours(e=null){if(null===e)return this.neighbours.slice();let t=[];for(let r=0;r<this.neighbours.length;r++)this.neighbours[r]!==e&&t.push(this.neighbours[r]);return t}/**
   * Returns an array of ids of neighbouring vertices that will be drawn (vertex.value.isDrawn === true).
   * 
   * @param {Vertex[]} vertices An array containing the vertices associated with the current molecule.
   * @returns {Number[]} An array containing the ids of neighbouring vertices that will be drawn.
   */getDrawnNeighbours(e){let t=[];for(let r=0;r<this.neighbours.length;r++)e[this.neighbours[r]].value.isDrawn&&t.push(this.neighbours[r]);return t}/**
   * Returns the number of neighbours of this vertex.
   *
   * @returns {Number} The number of neighbours.
   */getNeighbourCount(){return this.neighbourCount}/**
   * Returns a list of ids of vertices neighbouring this one in the original spanning tree, excluding the ringbond connections.
   *
   * @param {Number} [vertexId=null] If supplied, the vertex with this id is excluded from the array returned.
   * @returns {Number[]} An array containing the ids of the neighbouring vertices.
   */getSpanningTreeNeighbours(e=null){let t=[];for(let r=0;r<this.spanningTreeChildren.length;r++)(void 0===e||e!=this.spanningTreeChildren[r])&&t.push(this.spanningTreeChildren[r]);return null!=this.parentVertexId&&(void 0===e||e!=this.parentVertexId)&&t.push(this.parentVertexId),t}/**
   * Gets the next vertex in the ring in opposide direction to the supplied vertex id.
   *
   * @param {Vertex[]} vertices The array of vertices for the current molecule.
   * @param {Number} ringId The id of the ring containing this vertex.
   * @param {Number} previousVertexId The id of the previous vertex. The next vertex will be opposite from the vertex with this id as seen from this vertex.
   * @returns {Number} The id of the next vertex in the ring.
   */getNextInRing(e,t,r){let s=this.getNeighbours();for(let a=0;a<s.length;a++)if(n.contains(e[s[a]].value.rings,{value:t})&&s[a]!=r)return s[a];return null}}t.exports=o},{a64e480a0c91db49:"absWn",b5cf518e988e8646:"2ffbV","8545593c35ef91f7":"ltay8",dc7f1f1a90aa0607:"g62h9"}],g62h9:[function(e,t,r){//@ts-check
let s=e("5866f3f812d8a574");e("9c2213114e66fda1"),e("60e382c1956472fc");/** 
 * A class representing an atom.
 * 
 * @property {String} element The element symbol of this atom. Single-letter symbols are always uppercase. Examples: H, C, F, Br, Si, ...
 * @property {Boolean} drawExplicit A boolean indicating whether or not this atom is drawn explicitly (for example, a carbon atom). This overrides the default behaviour.
 * @property {Object[]} ringbonds An array containing the ringbond ids and bond types as specified in the original SMILE.
 * @property {String} branchBond The branch bond as defined in the SMILES.
 * @property {Number} ringbonds[].id The ringbond id as defined in the SMILES.
 * @property {String} ringbonds[].bondType The bond type of the ringbond as defined in the SMILES.
 * @property {Number[]} rings The ids of rings which contain this atom.
 * @property {String} bondType The bond type associated with this array. Examples: -, =, #, ...
 * @property {Boolean} isBridge A boolean indicating whether or not this atom is part of a bridge in a bridged ring (contained by the largest ring).
 * @property {Boolean} isBridgeNode A boolean indicating whether or not this atom is a bridge node (a member of the largest ring in a bridged ring which is connected to a bridge-atom).
 * @property {Number[]} originalRings Used to back up rings when they are replaced by a bridged ring.
 * @property {Number} bridgedRing The id of the bridged ring if the atom is part of a bridged ring.
 * @property {Number[]} anchoredRings The ids of the rings that are anchored to this atom. The centers of anchored rings are translated when this atom is translated.
 * @property {Object} bracket If this atom is defined as a bracket atom in the original SMILES, this object contains all the bracket information. Example: { hcount: {Number}, charge: ['--', '-', '+', '++'], isotope: {Number} }.
 * @property {Number} plane Specifies on which "plane" the atoms is in stereochemical deptictions (-1 back, 0 middle, 1 front).
 * @property {Object[]} attachedPseudoElements A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.
 * @property {String} attachedPseudoElement[].element The element symbol.
 * @property {Number} attachedPseudoElement[].count The number of occurences that match the key.
 * @property {Number} attachedPseudoElement[].hyrogenCount The number of hydrogens attached to each atom matching the key.
 * @property {Boolean} hasAttachedPseudoElements A boolean indicating whether or not this attom will be drawn with an attached pseudo element or concatinated elements.
 * @property {Boolean} isDrawn A boolean indicating whether or not this atom is drawn. In contrast to drawExplicit, the bond is drawn neither.
 * @property {Boolean} isConnectedToRing A boolean indicating whether or not this atom is directly connected (but not a member of) a ring.
 * @property {String[]} neighbouringElements An array containing the element symbols of neighbouring atoms.
 * @property {Boolean} isPartOfAromaticRing A boolean indicating whether or not this atom is part of an explicitly defined aromatic ring. Example: c1ccccc1.
 * @property {Number} bondCount The number of bonds in which this atom is participating.
 * @property {String} chirality The chirality of this atom if it is a stereocenter (R or S).
 * @property {Number} priority The priority of this atom acording to the CIP rules, where 0 is the highest priority.
 * @property {Boolean} mainChain A boolean indicating whether or not this atom is part of the main chain (used for chirality).
 * @property {String} hydrogenDirection The direction of the hydrogen, either up or down. Only for stereocenters with and explicit hydrogen.
 * @property {Number} subtreeDepth The depth of the subtree coming from a stereocenter.
 */class n{/**
   * The constructor of the class Atom.
   *
   * @param {String} element The one-letter code of the element.
   * @param {String} [bondType='-'] The type of the bond associated with this atom.
   */constructor(e,t="-"){this.element=1===e.length?e.toUpperCase():e,this.drawExplicit=!1,this.ringbonds=[],this.rings=[],this.bondType=t,this.branchBond=null,this.isBridge=!1,this.isBridgeNode=!1,this.originalRings=[],this.bridgedRing=null,this.anchoredRings=[],this.bracket=null,this.plane=0,this.attachedPseudoElements={},this.hasAttachedPseudoElements=!1,this.isDrawn=!0,this.isConnectedToRing=!1,this.neighbouringElements=[],this.isPartOfAromaticRing=e!==this.element,this.bondCount=0,this.chirality="",this.isStereoCenter=!1,this.priority=0,this.mainChain=!1,this.hydrogenDirection="down",this.subtreeDepth=1,this.hasHydrogen=!1}/**
   * Adds a neighbouring element to this atom.
   * 
   * @param {String} element A string representing an element.
   */addNeighbouringElement(e){this.neighbouringElements.push(e)}/**
   * Attaches a pseudo element (e.g. Ac) to the atom.
   * @param {String} element The element identifier (e.g. Br, C, ...).
   * @param {String} previousElement The element that is part of the main chain (not the terminals that are converted to the pseudo element or concatinated).
   * @param {Number} [hydrogenCount=0] The number of hydrogens for the element.
   * @param {Number} [charge=0] The charge for the element.
   */attachPseudoElement(e,t,r=0,s=0){null===r&&(r=0),null===s&&(s=0);let n=r+e+s;this.attachedPseudoElements[n]?this.attachedPseudoElements[n].count+=1:this.attachedPseudoElements[n]={element:e,count:1,hydrogenCount:r,previousElement:t,charge:s},this.hasAttachedPseudoElements=!0}/**
   * Returns the attached pseudo elements sorted by hydrogen count (ascending).
   *
   * @returns {Object} The sorted attached pseudo elements.
   */getAttachedPseudoElements(){let e={},t=this;return Object.keys(this.attachedPseudoElements).sort().forEach(function(r){e[r]=t.attachedPseudoElements[r]}),e}/**
   * Returns the number of attached pseudo elements.
   *
   * @returns {Number} The number of attached pseudo elements.
   */getAttachedPseudoElementsCount(){return Object.keys(this.attachedPseudoElements).length}/**
   * Returns whether this atom is a heteroatom (not C and not H).
   *
   * @returns {Boolean} A boolean indicating whether this atom is a heteroatom.
   */isHeteroAtom(){return"C"!==this.element&&"H"!==this.element}/**
   * Defines this atom as the anchor for a ring. When doing repositionings of the vertices and the vertex associated with this atom is moved, the center of this ring is moved as well.
   *
   * @param {Number} ringId A ring id.
   */addAnchoredRing(e){s.contains(this.anchoredRings,{value:e})||this.anchoredRings.push(e)}/**
   * Returns the number of ringbonds (breaks in rings to generate the MST of the smiles) within this atom is connected to.
   *
   * @returns {Number} The number of ringbonds this atom is connected to.
   */getRingbondCount(){return this.ringbonds.length}/**
   * Backs up the current rings.
   */backupRings(){this.originalRings=Array(this.rings.length);for(let e=0;e<this.rings.length;e++)this.originalRings[e]=this.rings[e]}/**
   * Restores the most recent backed up rings.
   */restoreRings(){this.rings=Array(this.originalRings.length);for(let e=0;e<this.originalRings.length;e++)this.rings[e]=this.originalRings[e]}/**
   * Checks whether or not two atoms share a common ringbond id. A ringbond is a break in a ring created when generating the spanning tree of a structure.
   *
   * @param {Atom} atomA An atom.
   * @param {Atom} atomB An atom.
   * @returns {Boolean} A boolean indicating whether or not two atoms share a common ringbond.
   */haveCommonRingbond(e,t){for(let r=0;r<e.ringbonds.length;r++)for(let s=0;s<t.ringbonds.length;s++)if(e.ringbonds[r].id==t.ringbonds[s].id)return!0;return!1}/**
   * Check whether or not the neighbouring elements of this atom equal the supplied array.
   * 
   * @param {String[]} arr An array containing all the elements that are neighbouring this atom. E.g. ['C', 'O', 'O', 'N']
   * @returns {Boolean} A boolean indicating whether or not the neighbours match the supplied array of elements.
   */neighbouringElementsEqual(e){if(e.length!==this.neighbouringElements.length)return!1;e.sort(),this.neighbouringElements.sort();for(var t=0;t<this.neighbouringElements.length;t++)if(e[t]!==this.neighbouringElements[t])return!1;return!0}/**
   * Get the atomic number of this atom.
   * 
   * @returns {Number} The atomic number of this atom.
   */getAtomicNumber(){return n.atomicNumbers[this.element]}/**
   * Get the maximum number of bonds for this atom.
   * 
   * @returns {Number} The maximum number of bonds of this atom.
   */getMaxBonds(){return n.maxBonds[this.element]}/**
   * A map mapping element symbols to their maximum bonds.
   */static get maxBonds(){return{H:1,C:4,N:3,O:2,P:3,S:2,B:3,F:1,I:1,Cl:1,Br:1}}/**
   * A map mapping element symbols to the atomic number.
   */static get atomicNumbers(){return{H:1,He:2,Li:3,Be:4,B:5,b:5,C:6,c:6,N:7,n:7,O:8,o:8,F:9,Ne:10,Na:11,Mg:12,Al:13,Si:14,P:15,p:15,S:16,s:16,Cl:17,Ar:18,K:19,Ca:20,Sc:21,Ti:22,V:23,Cr:24,Mn:25,Fe:26,Co:27,Ni:28,Cu:29,Zn:30,Ga:31,Ge:32,As:33,Se:34,Br:35,Kr:36,Rb:37,Sr:38,Y:39,Zr:40,Nb:41,Mo:42,Tc:43,Ru:44,Rh:45,Pd:46,Ag:47,Cd:48,In:49,Sn:50,Sb:51,Te:52,I:53,Xe:54,Cs:55,Ba:56,La:57,Ce:58,Pr:59,Nd:60,Pm:61,Sm:62,Eu:63,Gd:64,Tb:65,Dy:66,Ho:67,Er:68,Tm:69,Yb:70,Lu:71,Hf:72,Ta:73,W:74,Re:75,Os:76,Ir:77,Pt:78,Au:79,Hg:80,Tl:81,Pb:82,Bi:83,Po:84,At:85,Rn:86,Fr:87,Ra:88,Ac:89,Th:90,Pa:91,U:92,Np:93,Pu:94,Am:95,Cm:96,Bk:97,Cf:98,Es:99,Fm:100,Md:101,No:102,Lr:103,Rf:104,Db:105,Sg:106,Bh:107,Hs:108,Mt:109,Ds:110,Rg:111,Cn:112,Uut:113,Uuq:114,Uup:115,Uuh:116,Uus:117,Uuo:118}}/**
   * A map mapping element symbols to the atomic mass.
   */static get mass(){return{H:1,He:2,Li:3,Be:4,B:5,b:5,C:6,c:6,N:7,n:7,O:8,o:8,F:9,Ne:10,Na:11,Mg:12,Al:13,Si:14,P:15,p:15,S:16,s:16,Cl:17,Ar:18,K:19,Ca:20,Sc:21,Ti:22,V:23,Cr:24,Mn:25,Fe:26,Co:27,Ni:28,Cu:29,Zn:30,Ga:31,Ge:32,As:33,Se:34,Br:35,Kr:36,Rb:37,Sr:38,Y:39,Zr:40,Nb:41,Mo:42,Tc:43,Ru:44,Rh:45,Pd:46,Ag:47,Cd:48,In:49,Sn:50,Sb:51,Te:52,I:53,Xe:54,Cs:55,Ba:56,La:57,Ce:58,Pr:59,Nd:60,Pm:61,Sm:62,Eu:63,Gd:64,Tb:65,Dy:66,Ho:67,Er:68,Tm:69,Yb:70,Lu:71,Hf:72,Ta:73,W:74,Re:75,Os:76,Ir:77,Pt:78,Au:79,Hg:80,Tl:81,Pb:82,Bi:83,Po:84,At:85,Rn:86,Fr:87,Ra:88,Ac:89,Th:90,Pa:91,U:92,Np:93,Pu:94,Am:95,Cm:96,Bk:97,Cf:98,Es:99,Fm:100,Md:101,No:102,Lr:103,Rf:104,Db:105,Sg:106,Bh:107,Hs:108,Mt:109,Ds:110,Rg:111,Cn:112,Uut:113,Uuq:114,Uup:115,Uuh:116,Uus:117,Uuo:118}}}t.exports=n},{"5866f3f812d8a574":"2ffbV","9c2213114e66fda1":"c5diN","60e382c1956472fc":"akR7W"}],akR7W:[function(e,t,r){//@ts-check
let s=e("e937a715dc6782e5"),n=e("55e34792bba23950");e("34d43bbf3c08afab");let a=e("28a4d5ee71ccb887");/** 
 * A class representing a ring.
 * 
 * @property {Number} id The id of this ring.
 * @property {Number[]} members An array containing the vertex ids of the ring members.
 * @property {Number[]} edges An array containing the edge ids of the edges between the ring members.
 * @property {Number[]} insiders An array containing the vertex ids of the vertices contained within the ring if it is a bridged ring.
 * @property {Number[]} neighbours An array containing the ids of neighbouring rings.
 * @property {Boolean} positioned A boolean indicating whether or not this ring has been positioned.
 * @property {Vector2} center The center of this ring.
 * @property {Ring[]} rings The rings contained within this ring if this ring is bridged.
 * @property {Boolean} isBridged A boolean whether or not this ring is bridged.
 * @property {Boolean} isPartOfBridged A boolean whether or not this ring is part of a bridge ring.
 * @property {Boolean} isSpiro A boolean whether or not this ring is part of a spiro.
 * @property {Boolean} isFused A boolean whether or not this ring is part of a fused ring.
 * @property {Number} centralAngle The central angle of this ring.
 * @property {Boolean} canFlip A boolean indicating whether or not this ring allows flipping of attached vertices to the inside of the ring.
 */class o{/**
     * The constructor for the class Ring.
     *
     * @param {Number[]} members An array containing the vertex ids of the members of the ring to be created.
     */constructor(e){this.id=null,this.members=e,this.edges=[],this.insiders=[],this.neighbours=[],this.positioned=!1,this.center=new n(0,0),this.rings=[],this.isBridged=!1,this.isPartOfBridged=!1,this.isSpiro=!1,this.isFused=!1,this.centralAngle=0,this.canFlip=!0}/**
     * Clones this ring and returns the clone.
     *
     * @returns {Ring} A clone of this ring.
     */clone(){let e=new o(this.members);return e.id=this.id,e.insiders=s.clone(this.insiders),e.neighbours=s.clone(this.neighbours),e.positioned=this.positioned,e.center=this.center.clone(),e.rings=s.clone(this.rings),e.isBridged=this.isBridged,e.isPartOfBridged=this.isPartOfBridged,e.isSpiro=this.isSpiro,e.isFused=this.isFused,e.centralAngle=this.centralAngle,e.canFlip=this.canFlip,e}/**
     * Returns the size (number of members) of this ring.
     *
     * @returns {Number} The size (number of members) of this ring.
     */getSize(){return this.members.length}/**
     * Gets the polygon representation (an array of the ring-members positional vectors) of this ring.
     *
     * @param {Vertex[]} vertices An array of vertices representing the current molecule.
     * @returns {Vector2[]} An array of the positional vectors of the ring members.
     */getPolygon(e){let t=[];for(let r=0;r<this.members.length;r++)t.push(e[this.members[r]].position);return t}/**
     * Returns the angle of this ring in relation to the coordinate system.
     *
     * @returns {Number} The angle in radians.
     */getAngle(){return Math.PI-this.centralAngle}/**
     * Loops over the members of this ring from a given start position in a direction opposite to the vertex id passed as the previousId.
     *
     * @param {Vertex[]} vertices The vertices associated with the current molecule.
     * @param {Function} callback A callback with the current vertex id as a parameter.
     * @param {Number} startVertexId The vertex id of the start vertex.
     * @param {Number} previousVertexId The vertex id of the previous vertex (the loop calling the callback function will run in the opposite direction of this vertex).
     */eachMember(e,t,r,s){let n=r=r||0===r?r:this.members[0],a=0;for(;null!=n&&a<100;){let o=n;t(o),n=e[n].getNextInRing(e,this.id,s),s=o,n==r&&(n=null),a++}}/**
     * Returns an array containing the neighbouring rings of this ring ordered by ring size.
     *
     * @param {RingConnection[]} ringConnections An array of ring connections associated with the current molecule.
     * @returns {Object[]} An array of neighbouring rings sorted by ring size. Example: { n: 5, neighbour: 1 }.
     */getOrderedNeighbours(e){let t=Array(this.neighbours.length);for(let r=0;r<this.neighbours.length;r++){let s=a.getVertices(e,this.id,this.neighbours[r]);t[r]={n:s.length,neighbour:this.neighbours[r]}}return t.sort(function(e,t){// Sort highest to lowest
return t.n-e.n}),t}/**
     * Check whether this ring is an implicitly defined benzene-like (e.g. C1=CC=CC=C1) with 6 members and 3 double bonds.
     *
     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.
     * @returns {Boolean} A boolean indicating whether or not this ring is an implicitly defined benzene-like.
     */isBenzeneLike(e){let t=this.getDoubleBondCount(e),r=this.members.length;return 3===t&&6===r||2===t&&5===r}/**
     * Get the number of double bonds inside this ring.
     *
     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.
     * @returns {Number} The number of double bonds inside this ring.
     */getDoubleBondCount(e){let t=0;for(let r=0;r<this.members.length;r++){let s=e[this.members[r]].value;("="===s.bondType||"="===s.branchBond)&&t++}return t}/**
     * Checks whether or not this ring contains a member with a given vertex id.
     *
     * @param {Number} vertexId A vertex id.
     * @returns {Boolean} A boolean indicating whether or not this ring contains a member with the given vertex id.
     */contains(e){for(let t=0;t<this.members.length;t++)if(this.members[t]==e)return!0;return!1}}t.exports=o},{e937a715dc6782e5:"2ffbV","55e34792bba23950":"ltay8","34d43bbf3c08afab":"c5diN","28a4d5ee71ccb887":"jwLk6"}],jwLk6:[function(e,t,r){e("7d5c619cefc668b4"),e("232222596f097fdf"),t.exports=/** 
 * A class representing a ring connection.
 * 
 * @property {Number} id The id of this ring connection.
 * @property {Number} firstRingId A ring id.
 * @property {Number} secondRingId A ring id.
 * @property {Set<Number>} vertices A set containing the vertex ids participating in the ring connection.
 */class{/**
     * The constructor for the class RingConnection.
     *
     * @param {Ring} firstRing A ring.
     * @param {Ring} secondRing A ring.
     */constructor(e,t){this.id=null,this.firstRingId=e.id,this.secondRingId=t.id,this.vertices=new Set;for(var r=0;r<e.members.length;r++){let s=e.members[r];for(let e=0;e<t.members.length;e++)s===t.members[e]&&this.addVertex(s)}}/**
     * Adding a vertex to the ring connection.
     *
     * @param {Number} vertexId A vertex id.
     */addVertex(e){this.vertices.add(e)}/**
     * Update the ring id of this ring connection that is not the ring id supplied as the second argument.
     *
     * @param {Number} ringId A ring id. The new ring id to be set.
     * @param {Number} otherRingId A ring id. The id that is NOT to be updated.
     */updateOther(e,t){this.firstRingId===t?this.secondRingId=e:this.firstRingId=e}/**
     * Returns a boolean indicating whether or not a ring with a given id is participating in this ring connection.
     * 
     * @param {Number} ringId A ring id.
     * @returns {Boolean} A boolean indicating whether or not a ring with a given id participates in this ring connection.
     */containsRing(e){return this.firstRingId===e||this.secondRingId===e}/**
     * Checks whether or not this ring connection is a bridge in a bridged ring.
     *
     * @param {Vertex[]} vertices The array of vertices associated with the current molecule.
     * @returns {Boolean} A boolean indicating whether or not this ring connection is a bridge.
     */isBridge(e){if(this.vertices.size>2)return!0;for(let t of this.vertices)if(e[t].value.rings.length>2)return!0;return!1}/**
     * Checks whether or not two rings are connected by a bridged bond.
     *
     * @static
     * @param {RingConnection[]} ringConnections An array of ring connections containing the ring connections associated with the current molecule.
     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.
     * @param {Number} firstRingId A ring id.
     * @param {Number} secondRingId A ring id.
     * @returns {Boolean} A boolean indicating whether or not two rings ar connected by a bridged bond.
     */static isBridge(e,t,r,s){let n=null;for(let a=0;a<e.length;a++)if((n=e[a]).firstRingId===r&&n.secondRingId===s||n.firstRingId===s&&n.secondRingId===r)return n.isBridge(t);return!1}/**
     * Retruns the neighbouring rings of a given ring.
     *
     * @static
     * @param {RingConnection[]} ringConnections An array of ring connections containing ring connections associated with the current molecule.
     * @param {Number} ringId A ring id.
     * @returns {Number[]} An array of ring ids of neighbouring rings.
     */static getNeighbours(e,t){let r=[];for(let s=0;s<e.length;s++){let n=e[s];n.firstRingId===t?r.push(n.secondRingId):n.secondRingId===t&&r.push(n.firstRingId)}return r}/**
     * Returns an array of vertex ids associated with a given ring connection.
     *
     * @static
     * @param {RingConnection[]} ringConnections An array of ring connections containing ring connections associated with the current molecule.
     * @param {Number} firstRingId A ring id.
     * @param {Number} secondRingId A ring id.
     * @returns {Number[]} An array of vertex ids associated with the ring connection.
     */static getVertices(e,t,r){for(let s=0;s<e.length;s++){let n=e[s];if(n.firstRingId===t&&n.secondRingId===r||n.firstRingId===r&&n.secondRingId===t)return[...n.vertices]}}}},{"7d5c619cefc668b4":"c5diN","232222596f097fdf":"akR7W"}],"7rIHz":[function(e,t,r){//@ts-check
/** 
 * A class representing an edge. 
 * 
 * @property {Number} id The id of this edge.
 * @property {Number} sourceId The id of the source vertex.
 * @property {Number} targetId The id of the target vertex.
 * @property {Number} weight The weight of this edge. That is, the degree of the bond (single bond = 1, double bond = 2, etc).
 * @property {String} [bondType='-'] The bond type of this edge.
 * @property {Boolean} [isPartOfAromaticRing=false] Whether or not this edge is part of an aromatic ring.
 * @property {Boolean} [center=false] Wheter or not the bond is centered. For example, this affects straight double bonds.
 * @property {String} [wedge=''] Wedge direction. Either '', 'up' or 'down'
 */class s{/**
     * The constructor for the class Edge.
     *
     * @param {Number} sourceId A vertex id.
     * @param {Number} targetId A vertex id.
     * @param {Number} [weight=1] The weight of the edge.
     */constructor(e,t,r=1){this.id=null,this.sourceId=e,this.targetId=t,this.weight=r,this.bondType="-",this.isPartOfAromaticRing=!1,this.center=!1,this.wedge=""}/**
     * Set the bond type of this edge. This also sets the edge weight.
     * @param {String} bondType 
     */setBondType(e){this.bondType=e,this.weight=s.bonds[e]}/**
     * An object mapping the bond type to the number of bonds.
     *
     * @returns {Object} The object containing the map.
     */static get bonds(){return{"-":1,"/":1,"\\":1,"=":2,"#":3,$:4}}}t.exports=s},{}],lErGt:[function(e,t,r){//@ts-check
let s=e("5fa513c2135990a5"),n=e("b49353e683371066");e("e6481c5525094abb"),e("7f5e61ebe2a4581a"),e("191f5d07ff9be5f");let{getChargeText:a}=e("431826ecaa08fe94");t.exports=/** 
 * A class wrapping a canvas element.
 * 
 * @property {HTMLElement} canvas The HTML element for the canvas associated with this CanvasWrapper instance.
 * @property {CanvasRenderingContext2D} ctx The CanvasRenderingContext2D of the canvas associated with this CanvasWrapper instance.
 * @property {Object} colors The colors object as defined in the SmilesDrawer options.
 * @property {Object} opts The SmilesDrawer options.
 * @property {Number} drawingWidth The width of the canvas.
 * @property {Number} drawingHeight The height of the canvas.
 * @property {Number} offsetX The horizontal offset required for centering the drawing.
 * @property {Number} offsetY The vertical offset required for centering the drawing.
 * @property {Number} fontLarge The large font size in pt.
 * @property {Number} fontSmall The small font size in pt.
 */class{/**
     * The constructor for the class CanvasWrapper.
     *
     * @param {(String|HTMLElement)} target The canvas id or the canvas HTMLElement.
     * @param {ThemeManager} themeManager Theme manager for setting proper colors.
     * @param {Object} options The smiles drawer options object.
     */constructor(e,t,r){"string"==typeof e||e instanceof String?this.canvas=document.getElementById(e):this.canvas=e,this.ctx=this.canvas.getContext("2d"),this.themeManager=t,this.opts=r,this.drawingWidth=0,this.drawingHeight=0,this.offsetX=0,this.offsetY=0,this.fontLarge=this.opts.fontSizeLarge+"pt Helvetica, Arial, sans-serif",this.fontSmall=this.opts.fontSizeSmall+"pt Helvetica, Arial, sans-serif",this.updateSize(this.opts.width,this.opts.height),this.ctx.font=this.fontLarge,this.hydrogenWidth=this.ctx.measureText("H").width,this.halfHydrogenWidth=this.hydrogenWidth/2,this.halfBondThickness=this.opts.bondThickness/2;// TODO: Find out why clear was here.
// this.clear();
}/**
     * Update the width and height of the canvas
     * 
     * @param {Number} width 
     * @param {Number} height 
     */updateSize(e,t){this.devicePixelRatio=window.devicePixelRatio||1,this.backingStoreRatio=this.ctx.webkitBackingStorePixelRatio||this.ctx.mozBackingStorePixelRatio||this.ctx.msBackingStorePixelRatio||this.ctx.oBackingStorePixelRatio||this.ctx.backingStorePixelRatio||1,this.ratio=this.devicePixelRatio/this.backingStoreRatio,1!==this.ratio?(this.canvas.width=e*this.ratio,this.canvas.height=t*this.ratio,this.canvas.style.width=e+"px",this.canvas.style.height=t+"px",this.ctx.setTransform(this.ratio,0,0,this.ratio,0,0)):(this.canvas.width=e*this.ratio,this.canvas.height=t*this.ratio)}/**
     * Sets a provided theme.
     *
     * @param {Object} theme A theme from the smiles drawer options.
     */setTheme(e){this.colors=e}/**
     * Scale the canvas based on vertex positions.
     *
     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.
     */scale(e){// Figure out the final size of the image
let t=-Number.MAX_VALUE,r=-Number.MAX_VALUE,s=Number.MAX_VALUE,n=Number.MAX_VALUE;for(var a=0;a<e.length;a++){if(!e[a].value.isDrawn)continue;let o=e[a].position;t<o.x&&(t=o.x),r<o.y&&(r=o.y),s>o.x&&(s=o.x),n>o.y&&(n=o.y)}// Add padding
var o=this.opts.padding;t+=o,r+=o,s-=o,n-=o,this.drawingWidth=t-s,this.drawingHeight=r-n;var i=this.canvas.offsetWidth/this.drawingWidth,l=this.canvas.offsetHeight/this.drawingHeight,u=i<l?i:l;this.ctx.scale(u,u),this.offsetX=-s,this.offsetY=-n,i<l?this.offsetY+=this.canvas.offsetHeight/(2*u)-this.drawingHeight/2:this.offsetX+=this.canvas.offsetWidth/(2*u)-this.drawingWidth/2}/**
     * Resets the transform of the canvas.
     */reset(){this.ctx.setTransform(1,0,0,1,0,0)}/**
     * Returns the hex code of a color associated with a key from the current theme.
     *
     * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).
     * @returns {String} A color hex value.
     */getColor(e){return(e=e.toUpperCase())in this.colors?this.colors[e]:this.colors.C}/**
     * Draws a circle to a canvas context.
     * @param {Number} x The x coordinate of the circles center.
     * @param {Number} y The y coordinate of the circles center.
     * @param {Number} radius The radius of the circle
     * @param {String} color A hex encoded color.
     * @param {Boolean} [fill=true] Whether to fill or stroke the circle.
     * @param {Boolean} [debug=false] Draw in debug mode.
     * @param {String} [debugText=''] A debug message.
     */drawCircle(e,t,r,n,a=!0,o=!1,i=""){let l=this.ctx,u=this.offsetX,p=this.offsetY;l.save(),l.lineWidth=1.5,l.beginPath(),l.arc(e+u,t+p,r,0,s.twoPI,!0),l.closePath(),o?(a?(l.fillStyle="#f00",l.fill()):(l.strokeStyle="#f00",l.stroke()),this.drawDebugText(e,t,i)):a?(l.fillStyle=n,l.fill()):(l.strokeStyle=n,l.stroke()),l.restore()}/**
     * Draw a line to a canvas.
     *
     * @param {Line} line A line.
     * @param {Boolean} [dashed=false] Whether or not the line is dashed.
     * @param {Number} [alpha=1.0] The alpha value of the color.
     */drawLine(e,t=!1,r=1){let s=this.ctx,n=this.offsetX,a=this.offsetY,o=e.clone().shorten(4),i=o.getLeftVector().clone(),l=o.getRightVector().clone();i.x+=n,i.y+=a,l.x+=n,l.y+=a,t||(s.save(),s.globalCompositeOperation="destination-out",s.beginPath(),s.moveTo(i.x,i.y),s.lineTo(l.x,l.y),s.lineCap="round",s.lineWidth=this.opts.bondThickness+1.2,s.strokeStyle=this.themeManager.getColor("BACKGROUND"),s.stroke(),s.globalCompositeOperation="source-over",s.restore()),i=e.getLeftVector().clone(),l=e.getRightVector().clone(),i.x+=n,i.y+=a,l.x+=n,l.y+=a,s.save(),s.beginPath(),s.moveTo(i.x,i.y),s.lineTo(l.x,l.y),s.lineCap="round",s.lineWidth=this.opts.bondThickness;let u=this.ctx.createLinearGradient(i.x,i.y,l.x,l.y);u.addColorStop(.4,this.themeManager.getColor(e.getLeftElement())||this.themeManager.getColor("C")),u.addColorStop(.6,this.themeManager.getColor(e.getRightElement())||this.themeManager.getColor("C")),t&&(s.setLineDash([1,1.5]),s.lineWidth=this.opts.bondThickness/1.5),r<1&&(s.globalAlpha=r),s.strokeStyle=u,s.stroke(),s.restore()}/**
     * Draw a wedge on the canvas.
     *
     * @param {Line} line A line.
     * @param {Number} width The wedge width.
     */drawWedge(e,t=1){if(isNaN(e.from.x)||isNaN(e.from.y)||isNaN(e.to.x)||isNaN(e.to.y))return;let r=this.ctx,s=this.offsetX,a=this.offsetY,o=e.clone().shorten(5),i=o.getLeftVector().clone(),l=o.getRightVector().clone();i.x+=s,i.y+=a,l.x+=s,l.y+=a,i=e.getLeftVector().clone(),l=e.getRightVector().clone(),i.x+=s,i.y+=a,l.x+=s,l.y+=a,r.save();let u=n.normals(i,l);u[0].normalize(),u[1].normalize();let p=e.getRightChiral(),c=i,d=l;p&&(c=l,d=i);let h=n.add(c,n.multiplyScalar(u[0],this.halfBondThickness)),f=n.add(d,n.multiplyScalar(u[0],1.5+this.halfBondThickness)),m=n.add(d,n.multiplyScalar(u[1],1.5+this.halfBondThickness)),g=n.add(c,n.multiplyScalar(u[1],this.halfBondThickness));r.beginPath(),r.moveTo(h.x,h.y),r.lineTo(f.x,f.y),r.lineTo(m.x,m.y),r.lineTo(g.x,g.y);let x=this.ctx.createRadialGradient(l.x,l.y,this.opts.bondLength,l.x,l.y,0);x.addColorStop(.4,this.themeManager.getColor(e.getLeftElement())||this.themeManager.getColor("C")),x.addColorStop(.6,this.themeManager.getColor(e.getRightElement())||this.themeManager.getColor("C")),r.fillStyle=x,r.fill(),r.restore()}/**
     * Draw a dashed wedge on the canvas.
     *
     * @param {Line} line A line.
     */drawDashedWedge(e){let t,r,s,a;if(isNaN(e.from.x)||isNaN(e.from.y)||isNaN(e.to.x)||isNaN(e.to.y))return;let o=this.ctx,i=this.offsetX,l=this.offsetY,u=e.getLeftVector().clone(),p=e.getRightVector().clone();u.x+=i,u.y+=l,p.x+=i,p.y+=l,o.save();let c=n.normals(u,p);c[0].normalize(),c[1].normalize();let d=e.getRightChiral(),h=e.clone();d?(t=p,r=u,h.shortenRight(1),s=h.getRightVector().clone(),a=h.getLeftVector().clone()):(t=u,r=p,h.shortenLeft(1),s=h.getLeftVector().clone(),a=h.getRightVector().clone()),s.x+=i,s.y+=l,a.x+=i,a.y+=l;let f=n.subtract(r,t).normalize();o.strokeStyle=this.themeManager.getColor("C"),o.lineCap="round",o.lineWidth=this.opts.bondThickness,o.beginPath();let m=e.getLength(),g=1.25/(m/(3*this.opts.bondThickness)),x=!1;for(var b=0;b<1;b+=g){let r=n.multiplyScalar(f,b*m),s=n.add(t,r),a=1.5*b,i=n.multiplyScalar(c[0],a);!x&&b>.5&&(o.stroke(),o.beginPath(),o.strokeStyle=this.themeManager.getColor(e.getRightElement())||this.themeManager.getColor("C"),x=!0),s.subtract(i),o.moveTo(s.x,s.y),s.add(n.multiplyScalar(i,2)),o.lineTo(s.x,s.y)}o.stroke(),o.restore()}/**
     * Draws a debug text message at a given position
     *
     * @param {Number} x The x coordinate.
     * @param {Number} y The y coordinate.
     * @param {String} text The debug text.
     */drawDebugText(e,t,r){let s=this.ctx;s.save(),s.font="5px Droid Sans, sans-serif",s.textAlign="start",s.textBaseline="top",s.fillStyle="#ff0000",s.fillText(r,e+this.offsetX,t+this.offsetY),s.restore()}/**
     * Draw a ball to the canvas.
     *
     * @param {Number} x The x position of the text.
     * @param {Number} y The y position of the text.
     * @param {String} elementName The name of the element (single-letter).
     */drawBall(e,t,r){let n=this.ctx;n.save(),n.beginPath(),n.arc(e+this.offsetX,t+this.offsetY,this.opts.bondLength/4.5,0,s.twoPI,!1),n.fillStyle=this.themeManager.getColor(r),n.fill(),n.restore()}/**
     * Draw a point to the canvas.
     *
     * @param {Number} x The x position of the point.
     * @param {Number} y The y position of the point.
     * @param {String} elementName The name of the element (single-letter).
     */drawPoint(e,t,r){let n=this.ctx,a=this.offsetX,o=this.offsetY;n.save(),n.globalCompositeOperation="destination-out",n.beginPath(),n.arc(e+a,t+o,1.5,0,s.twoPI,!0),n.closePath(),n.fill(),n.globalCompositeOperation="source-over",n.beginPath(),n.arc(e+this.offsetX,t+this.offsetY,.75,0,s.twoPI,!1),n.fillStyle=this.themeManager.getColor(r),n.fill(),n.restore()}/**
     * Draw a text to the canvas.
     *
     * @param {Number} x The x position of the text.
     * @param {Number} y The y position of the text.
     * @param {String} elementName The name of the element (single-letter).
     * @param {Number} hydrogens The number of hydrogen atoms.
     * @param {String} direction The direction of the text in relation to the associated vertex.
     * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.
     * @param {Number} charge The charge of the atom.
     * @param {Number} isotope The isotope number.
     * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.
     * @param {String} attachedPseudoElement.element The element symbol.
     * @param {Number} attachedPseudoElement.count The number of occurences that match the key.
     * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.
     */drawText(e,t,r,n,o,i,l,u,p={}){let c=this.ctx,d=this.offsetX,h=this.offsetY;c.save(),c.textAlign="start",c.textBaseline="alphabetic";// Charge
let f="",m=0;l&&(f=a(l),c.font=this.fontSmall,m=c.measureText(f).width);let g="0",x=0;u>0&&(g=u.toString(),c.font=this.fontSmall,x=c.measureText(g).width),1===l&&"N"===r&&p.hasOwnProperty("0O")&&p.hasOwnProperty("0O-1")&&(p={"0O":{element:"O",count:2,hydrogenCount:0,previousElement:"C",charge:""}},l=0),c.font=this.fontLarge,c.fillStyle=this.themeManager.getColor("BACKGROUND");let b=c.measureText(r);b.totalWidth=b.width+m,b.height=parseInt(this.fontLarge,10);let y=b.width>this.opts.fontSizeLarge?b.width:this.opts.fontSizeLarge;y/=1.5,c.globalCompositeOperation="destination-out",c.beginPath(),c.arc(e+d,t+h,y,0,s.twoPI,!0),c.closePath(),c.fill(),c.globalCompositeOperation="source-over";let j=-b.width/2,_=-b.width/2;c.fillStyle=this.themeManager.getColor(r),c.fillText(r,e+d+j,t+this.opts.halfFontSizeLarge+h),j+=b.width,l&&(c.font=this.fontSmall,c.fillText(f,e+d+j,t-this.opts.fifthFontSizeSmall+h),j+=m),u>0&&(c.font=this.fontSmall,c.fillText(g,e+d+_-x,t-this.opts.fifthFontSizeSmall+h),_-=x),c.font=this.fontLarge;let k=0,I=0;if(1===n){let r=e+d,s=t+h+this.opts.halfFontSizeLarge;_-=k=this.hydrogenWidth,"left"===o?r+=_:"right"===o?r+=j:"up"===o&&i?r+=j:"down"===o&&i?r+=j:"up"!==o||i?"down"!==o||i||(s+=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,r-=this.halfHydrogenWidth):(s-=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,r-=this.halfHydrogenWidth),c.fillText("H",r,s),j+=k}else if(n>1){let r=e+d,s=t+h+this.opts.halfFontSizeLarge;k=this.hydrogenWidth,c.font=this.fontSmall,_-=k+(I=c.measureText(n).width),"left"===o?r+=_:"right"===o?r+=j:"up"===o&&i?r+=j:"down"===o&&i?r+=j:"up"!==o||i?"down"!==o||i||(s+=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,r-=this.halfHydrogenWidth):(s-=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,r-=this.halfHydrogenWidth),c.font=this.fontLarge,c.fillText("H",r,s),c.font=this.fontSmall,c.fillText(n,r+this.halfHydrogenWidth+I,s+this.opts.fifthFontSizeSmall),j+=k+this.halfHydrogenWidth+I}for(let r in p){if(!p.hasOwnProperty(r))continue;let s=0,n=0,i=p[r].element,l=p[r].count,u=p[r].hydrogenCount,f=p[r].charge;c.font=this.fontLarge,l>1&&u>0&&(s=c.measureText("(").width,n=c.measureText(")").width);let m=c.measureText(i).width,g=0,x="",b=0;k=0,u>0&&(k=this.hydrogenWidth),c.font=this.fontSmall,l>1&&(g=c.measureText(l).width),0!==f&&(x=a(f),b=c.measureText(x).width),I=0,u>1&&(I=c.measureText(u).width),c.font=this.fontLarge;let y=e+d,w=t+h+this.opts.halfFontSizeLarge;c.fillStyle=this.themeManager.getColor(i),l>0&&(_-=g),l>1&&u>0&&("left"===o?(_-=n,c.fillText(")",y+_,w)):(c.fillText("(",y+j,w),j+=s)),"left"===o?(_-=m,c.fillText(i,y+_,w)):(c.fillText(i,y+j,w),j+=m),u>0&&("left"===o?(_-=k+I,c.fillText("H",y+_,w),u>1&&(c.font=this.fontSmall,c.fillText(u,y+_+k,w+this.opts.fifthFontSizeSmall))):(c.fillText("H",y+j,w),j+=k,u>1&&(c.font=this.fontSmall,c.fillText(u,y+j,w+this.opts.fifthFontSizeSmall),j+=I))),c.font=this.fontLarge,l>1&&u>0&&("left"===o?(_-=s,c.fillText("(",y+_,w)):(c.fillText(")",y+j,w),j+=n)),c.font=this.fontSmall,l>1&&("left"===o?c.fillText(l,y+_+s+n+k+I+m,w+this.opts.fifthFontSizeSmall):(c.fillText(l,y+j,w+this.opts.fifthFontSizeSmall),j+=g)),0!==f&&("left"===o?c.fillText(x,y+_+s+n+k+I+m,t-this.opts.fifthFontSizeSmall+h):(c.fillText(x,y+j,t-this.opts.fifthFontSizeSmall+h),j+=b))}c.restore()}/**
     * Translate the integer indicating the charge to the appropriate text.
     * @param {Number} charge The integer indicating the charge.
     * @returns {String} A string representing a charge.
     */getChargeText(e){return 1===e?"+":2===e?"2+":-1===e?"-":-2===e?"2-":""}/**
     * Draws a dubug dot at a given coordinate and adds text.
     *
     * @param {Number} x The x coordinate.
     * @param {Number} y The y coordindate.
     * @param {String} [debugText=''] A string.
     * @param {String} [color='#f00'] A color in hex form.
     */drawDebugPoint(e,t,r="",s="#f00"){this.drawCircle(e,t,2,s,!0,!0,r)}/**
     * Draws a ring inside a provided ring, indicating aromaticity.
     *
     * @param {Ring} ring A ring.
     */drawAromaticityRing(e){let t=this.ctx,r=s.apothemFromSideLength(this.opts.bondLength,e.getSize());t.save(),t.strokeStyle=this.themeManager.getColor("C"),t.lineWidth=this.opts.bondThickness,t.beginPath(),t.arc(e.center.x+this.offsetX,e.center.y+this.offsetY,r-this.opts.bondSpacing,0,2*Math.PI,!0),t.closePath(),t.stroke(),t.restore()}/**
     * Clear the canvas.
     *
     */clear(){this.ctx.clearRect(0,0,this.canvas.offsetWidth,this.canvas.offsetHeight)}}},{"5fa513c2135990a5":"absWn",b49353e683371066:"ltay8",e6481c5525094abb:"hJ5Qi","7f5e61ebe2a4581a":"c5diN","191f5d07ff9be5f":"akR7W","431826ecaa08fe94":"5whlz"}],"5whlz":[function(e,t,r){t.exports={getChargeText:/**
 * Translate the integer indicating the charge to the appropriate text.
 * @param {Number} charge The integer indicating the charge.
 * @returns {String} A string representing a charge.
 */function(e){return(console.log("in the utility version of getChargeText"),1===e)?"+":2===e?"2+":-1===e?"-":-2===e?"2-":""}}},{}],esUs1:[function(e,t,r){//@ts-check
let s=e("76a3a1db7f3844e7");e("506f058e478d7d8b");let n=e("84a2ba2d380a47f3"),a=e("e4fa122d938e9267");e("2cd24c00e49d98cf");let o=e("6f7de6d46caa406");/** 
 * A class representing the molecular graph. 
 * 
 * @property {Vertex[]} vertices The vertices of the graph.
 * @property {Edge[]} edges The edges of this graph.
 * @property {Object} vertexIdsToEdgeId A map mapping vertex ids to the edge between the two vertices. The key is defined as vertexAId + '_' + vertexBId.
 * @property {Boolean} isometric A boolean indicating whether or not the SMILES associated with this graph is isometric.
 */class i{/**
   * The constructor of the class Graph.
   * 
   * @param {Object} parseTree A SMILES parse tree.
   * @param {Boolean} [isomeric=false] A boolean specifying whether or not the SMILES is isomeric.
   */constructor(e,t=!1){this.vertices=[],this.edges=[],this.vertexIdsToEdgeId={},this.isomeric=t,// Used for the bridge detection algorithm
this._time=0,this._init(e)}/**
   * PRIVATE FUNCTION. Initializing the graph from the parse tree.
   *
   * @param {Object} node The current node in the parse tree.
   * @param {Number} parentVertexId=null The id of the previous vertex.
   * @param {Boolean} isBranch=false Whether or not the bond leading to this vertex is a branch bond. Branches are represented by parentheses in smiles (e.g. CC(O)C).
   */_init(e,t=0,r=null,s=!1){// Create a new vertex object
let i=new o(e.atom.element?e.atom.element:e.atom,e.bond);i.branchBond=e.branchBond,i.ringbonds=e.ringbonds,i.bracket=e.atom.element?e.atom:null;let l=new n(i),u=this.vertices[r];// Add the id of this node to the parent as child
if(this.addVertex(l),null!==r){l.setParentVertexId(r),l.value.addNeighbouringElement(u.value.element),u.addChild(l.id),u.value.addNeighbouringElement(i.element),// In addition create a spanningTreeChildren property, which later will
// not contain the children added through ringbonds
u.spanningTreeChildren.push(l.id);// Add edge between this node and its parent
let e=new a(r,l.id,1);s?(e.setBondType(l.value.branchBond||"-"),l.id,e.setBondType(l.value.branchBond||"-"),l.id):(e.setBondType(u.value.bondType||"-"),u.id),this.addEdge(e)}let p=e.ringbondCount+1;i.bracket&&(p+=i.bracket.hcount);let c=0;if(i.bracket&&i.bracket.chirality){i.isStereoCenter=!0,c=i.bracket.hcount;for(var d=0;d<c;d++)this._init({atom:"H",isBracket:"false",branches:[],branchCount:0,ringbonds:[],ringbondCount:!1,next:null,hasNext:!1,bond:"-"},d,l.id,!0)}for(var d=0;d<e.branchCount;d++)this._init(e.branches[d],d+p,l.id,!0);e.hasNext&&this._init(e.next,e.branchCount+p,l.id)}/**
   * Clears all the elements in this graph (edges and vertices).
   */clear(){this.vertices=[],this.edges=[],this.vertexIdsToEdgeId={}}/**
   * Add a vertex to the graph.
   *
   * @param {Vertex} vertex A new vertex.
   * @returns {Number} The vertex id of the new vertex.
   */addVertex(e){return e.id=this.vertices.length,this.vertices.push(e),e.id}/**
   * Add an edge to the graph.
   *
   * @param {Edge} edge A new edge.
   * @returns {Number} The edge id of the new edge.
   */addEdge(e){let t=this.vertices[e.sourceId],r=this.vertices[e.targetId];return e.id=this.edges.length,this.edges.push(e),this.vertexIdsToEdgeId[e.sourceId+"_"+e.targetId]=e.id,this.vertexIdsToEdgeId[e.targetId+"_"+e.sourceId]=e.id,e.isPartOfAromaticRing=t.value.isPartOfAromaticRing&&r.value.isPartOfAromaticRing,t.value.bondCount+=e.weight,r.value.bondCount+=e.weight,t.edges.push(e.id),r.edges.push(e.id),e.id}/**
   * Returns the edge between two given vertices.
   *
   * @param {Number} vertexIdA A vertex id.
   * @param {Number} vertexIdB A vertex id.
   * @returns {(Edge|null)} The edge or, if no edge can be found, null.
   */getEdge(e,t){let r=this.vertexIdsToEdgeId[e+"_"+t];return void 0===r?null:this.edges[r]}/**
   * Returns the ids of edges connected to a vertex.
   *
   * @param {Number} vertexId A vertex id.
   * @returns {Number[]} An array containing the ids of edges connected to the vertex.
   */getEdges(e){let t=[],r=this.vertices[e];for(var s=0;s<r.neighbours.length;s++)t.push(this.vertexIdsToEdgeId[e+"_"+r.neighbours[s]]);return t}/**
   * Check whether or not two vertices are connected by an edge.
   *
   * @param {Number} vertexIdA A vertex id.
   * @param {Number} vertexIdB A vertex id.
   * @returns {Boolean} A boolean indicating whether or not two vertices are connected by an edge.
   */hasEdge(e,t){return void 0!==this.vertexIdsToEdgeId[e+"_"+t]}/**
   * Returns an array containing the vertex ids of this graph.
   * 
   * @returns {Number[]} An array containing all vertex ids of this graph.
   */getVertexList(){let e=[this.vertices.length];for(var t=0;t<this.vertices.length;t++)e[t]=this.vertices[t].id;return e}/**
   * Returns an array containing source, target arrays of this graphs edges.
   * 
   * @returns {Array[]} An array containing source, target arrays of this graphs edges. Example: [ [ 2, 5 ], [ 6, 9 ] ].
   */getEdgeList(){let e=Array(this.edges.length);for(var t=0;t<this.edges.length;t++)e[t]=[this.edges[t].sourceId,this.edges[t].targetId];return e}/**
   * Get the adjacency matrix of the graph.
   * 
   * @returns {Array[]} The adjancency matrix of the molecular graph.
   */getAdjacencyMatrix(){let e=this.vertices.length,t=Array(e);for(var r=0;r<e;r++)t[r]=Array(e),t[r].fill(0);for(var r=0;r<this.edges.length;r++){let e=this.edges[r];t[e.sourceId][e.targetId]=1,t[e.targetId][e.sourceId]=1}return t}/**
   * Get the adjacency matrix of the graph with all bridges removed (thus the components). Thus the remaining vertices are all part of ring systems.
   * 
   * @returns {Array[]} The adjancency matrix of the molecular graph with all bridges removed.
   */getComponentsAdjacencyMatrix(){let e=this.vertices.length,t=Array(e),r=this.getBridges();for(var s=0;s<e;s++)t[s]=Array(e),t[s].fill(0);for(var s=0;s<this.edges.length;s++){let e=this.edges[s];t[e.sourceId][e.targetId]=1,t[e.targetId][e.sourceId]=1}for(var s=0;s<r.length;s++)t[r[s][0]][r[s][1]]=0,t[r[s][1]][r[s][0]]=0;return t}/**
   * Get the adjacency matrix of a subgraph.
   * 
   * @param {Number[]} vertexIds An array containing the vertex ids contained within the subgraph.
   * @returns {Array[]} The adjancency matrix of the subgraph.
   */getSubgraphAdjacencyMatrix(e){let t=e.length,r=Array(t);for(var s=0;s<t;s++){r[s]=Array(t),r[s].fill(0);for(var n=0;n<t;n++)s!==n&&this.hasEdge(e[s],e[n])&&(r[s][n]=1)}return r}/**
   * Get the distance matrix of the graph.
   * 
   * @returns {Array[]} The distance matrix of the graph.
   */getDistanceMatrix(){let e=this.vertices.length,t=this.getAdjacencyMatrix(),r=Array(e);for(var s=0;s<e;s++)r[s]=Array(e),r[s].fill(1/0);for(var s=0;s<e;s++)for(var n=0;n<e;n++)1===t[s][n]&&(r[s][n]=1);for(var a=0;a<e;a++)for(var s=0;s<e;s++)for(var n=0;n<e;n++)r[s][n]>r[s][a]+r[a][n]&&(r[s][n]=r[s][a]+r[a][n]);return r}/**
   * Get the distance matrix of a subgraph.
   * 
   * @param {Number[]} vertexIds An array containing the vertex ids contained within the subgraph.
   * @returns {Array[]} The distance matrix of the subgraph.
   */getSubgraphDistanceMatrix(e){let t=e.length,r=this.getSubgraphAdjacencyMatrix(e),s=Array(t);for(var n=0;n<t;n++)s[n]=Array(t),s[n].fill(1/0);for(var n=0;n<t;n++)for(var a=0;a<t;a++)1===r[n][a]&&(s[n][a]=1);for(var o=0;o<t;o++)for(var n=0;n<t;n++)for(var a=0;a<t;a++)s[n][a]>s[n][o]+s[o][a]&&(s[n][a]=s[n][o]+s[o][a]);return s}/**
   * Get the adjacency list of the graph.
   * 
   * @returns {Array[]} The adjancency list of the graph.
   */getAdjacencyList(){let e=this.vertices.length,t=Array(e);for(var r=0;r<e;r++){t[r]=[];for(var s=0;s<e;s++)r!==s&&this.hasEdge(this.vertices[r].id,this.vertices[s].id)&&t[r].push(s)}return t}/**
   * Get the adjacency list of a subgraph.
   * 
   * @param {Number[]} vertexIds An array containing the vertex ids contained within the subgraph.
   * @returns {Array[]} The adjancency list of the subgraph.
   */getSubgraphAdjacencyList(e){let t=e.length,r=Array(t);for(var s=0;s<t;s++){r[s]=[];for(var n=0;n<t;n++)s!==n&&this.hasEdge(e[s],e[n])&&r[s].push(n)}return r}/**
   * Returns an array containing the edge ids of bridges. A bridge splits the graph into multiple components when removed.
   * 
   * @returns {Number[]} An array containing the edge ids of the bridges.
   */getBridges(){let e=this.vertices.length,t=Array(e),r=Array(e),s=Array(e),n=Array(e),a=this.getAdjacencyList(),o=[];t.fill(!1),n.fill(null),this._time=0;for(var i=0;i<e;i++)t[i]||this._bridgeDfs(i,t,r,s,n,a,o);return o}/**
   * Traverses the graph in breadth-first order.
   * 
   * @param {Number} startVertexId The id of the starting vertex.
   * @param {Function} callback The callback function to be called on every vertex.
   */traverseBF(e,t){let r=Array(this.vertices.length);r.fill(!1);for(var s=[e];s.length>0;){// JavaScripts shift() is O(n) ... bad JavaScript, bad!
let e=s.shift(),a=this.vertices[e];t(a);for(var n=0;n<a.neighbours.length;n++){let e=a.neighbours[n];r[e]||(r[e]=!0,s.push(e))}}}/**
   * Get the depth of a subtree in the direction opposite to the vertex specified as the parent vertex.
   *
   * @param {Number} vertexId A vertex id.
   * @param {Number} parentVertexId The id of a neighbouring vertex.
   * @returns {Number} The depth of the sub-tree.
   */getTreeDepth(e,t){if(null===e||null===t)return 0;let r=this.vertices[e].getSpanningTreeNeighbours(t),s=0;for(var n=0;n<r.length;n++){let t=r[n],a=this.getTreeDepth(t,e);a>s&&(s=a)}return s+1}/**
   * Traverse a sub-tree in the graph.
   *
   * @param {Number} vertexId A vertex id.
   * @param {Number} parentVertexId A neighbouring vertex.
   * @param {Function} callback The callback function that is called with each visited as an argument.
   * @param {Number} [maxDepth=999999] The maximum depth of the recursion.
   * @param {Boolean} [ignoreFirst=false] Whether or not to ignore the starting vertex supplied as vertexId in the callback.
   * @param {Number} [depth=1] The current depth in the tree.
   * @param {Uint8Array} [visited=null] An array holding a flag on whether or not a node has been visited.
   */traverseTree(e,t,r,s=999999,n=!1,a=1,o=null){if(null===o&&(o=new Uint8Array(this.vertices.length)),a>s+1||1===o[e])return;o[e]=1;let i=this.vertices[e],l=i.getNeighbours(t);(!n||a>1)&&r(i);for(var u=0;u<l.length;u++)this.traverseTree(l[u],e,r,s,n,a+1,o)}/**
   * Positiones the (sub)graph using Kamada and Kawais algorithm for drawing general undirected graphs. https://pdfs.semanticscholar.org/b8d3/bca50ccc573c5cb99f7d201e8acce6618f04.pdf
   * There are undocumented layout parameters. They are undocumented for a reason, so be very careful.
   * 
   * @param {Number[]} vertexIds An array containing vertexIds to be placed using the force based layout.
   * @param {Vector2} center The center of the layout.
   * @param {Number} startVertexId A vertex id. Should be the starting vertex - e.g. the first to be positioned and connected to a previously place vertex.
   * @param {Ring} ring The bridged ring associated with this force-based layout.
   */kkLayout(e,t,r,n,a,o=.1,i=.1,l=2e3,u=50,p=1e9){let c,d,h,f,m,g,x;for(// Add vertices that are directly connected to the ring
var b=e.length;b--;)var y=this.vertices[e[b]].neighbours.length;let j=this.getSubgraphDistanceMatrix(e),_=e.length,k=s.polyCircumradius(500,_),I=s.centralAngle(_),w=0,C=new Float32Array(_),S=new Float32Array(_),T=Array(_);for(b=_;b--;){let r=this.vertices[e[b]];r.positioned?(C[b]=r.position.x,S[b]=r.position.y):(C[b]=t.x+Math.cos(w)*k,S[b]=t.y+Math.sin(w)*k),T[b]=r.positioned,w+=I}// Create the matrix containing the lengths
let N=Array(_);for(b=_;b--;){N[b]=Array(_);for(var y=_;y--;)N[b][y]=a*j[b][y]}// Create the matrix containing the spring strenghts
let E=Array(_);for(b=_;b--;){E[b]=Array(_);for(var y=_;y--;)E[b][y]=a*Math.pow(j[b][y],-2)}// Create the matrix containing the energies
let F=Array(_),A=new Float32Array(_),R=new Float32Array(_);for(b=_;b--;)F[b]=Array(_);for(b=_;b--;){c=C[b],d=S[b],h=0,f=0;let e=_;for(;e--;)b!==e&&(x=1/Math.sqrt((c-(m=C[e]))*(c-m)+(d-(g=S[e]))*(d-g)),F[b][e]=[E[b][e]*(c-m-N[b][e]*(c-m)*x),E[b][e]*(d-g-N[b][e]*(d-g)*x)],F[e][b]=F[b][e],h+=F[b][e][0],f+=F[b][e][1]);A[b]=h,R[b]=f}// Utility functions, maybe inline them later
let D=function(e){return[A[e]*A[e]+R[e]*R[e],A[e],R[e]]},$=0,P=0,z=0,M=0,O=0,L=0;for(;p>o&&l>O;)for(O++,[$,p,P,z]=function(){let e=0,t=0,r=0,s=0;for(b=_;b--;){let[n,a,o]=D(b);n>e&&!1===T[b]&&(e=n,t=b,r=a,s=o)}return[t,e,r,s]}(),M=p,L=0;M>i&&u>L;)L++,function(e,t,r){let s,n,a,o,i,l=0,u=0,p=0,c=C[e],d=S[e],h=N[e],f=E[e];for(b=_;b--;){if(b===e)continue;let t=C[b],r=S[b],s=h[b],n=f[b],a=(c-t)*(c-t),o=1/Math.pow(a+(d-r)*(d-r),1.5);l+=n*(1-s*(d-r)*(d-r)*o),u+=n*(1-s*a*o),p+=n*(s*(c-t)*(d-r)*o)}0===l&&(l=.1),0===u&&(u=.1),0===p&&(p=.1);let m=t/l+r/p;m/=p/l-u/p;let g=-(p*m+t)/l;C[e]+=g,S[e]+=m;// Update the energies
let x=F[e];for(t=0,r=0,c=C[e],d=S[e],b=_;b--;)e!==b&&(s=C[b],n=S[b],// Store old energies
a=x[b][0],o=x[b][1],i=1/Math.sqrt((c-s)*(c-s)+(d-n)*(d-n)),g=f[b]*(c-s-h[b]*(c-s)*i),m=f[b]*(d-n-h[b]*(d-n)*i),x[b]=[g,m],t+=g,r+=m,A[b]+=g-a,R[b]+=m-o);A[e]=t,R[e]=r}($,P,z),[M,P,z]=D($);for(b=_;b--;){let t=e[b],r=this.vertices[t];r.position.x=C[b],r.position.y=S[b],r.positioned=!0,r.forcePositioned=!0}}/**
   * PRIVATE FUNCTION used by getBridges().
   */_bridgeDfs(e,t,r,s,n,a,o){t[e]=!0,r[e]=s[e]=++this._time;for(var i=0;i<a[e].length;i++){let l=a[e][i];t[l]?l!==n[e]&&(s[e]=Math.min(s[e],r[l])):(n[l]=e,this._bridgeDfs(l,t,r,s,n,a,o),s[e]=Math.min(s[e],s[l]),s[l]>r[e]&&o.push([e,l]))}}/**
   * Returns the connected components of the graph.
   * 
   * @param {Array[]} adjacencyMatrix An adjacency matrix.
   * @returns {Set[]} Connected components as sets.
   */static getConnectedComponents(e){let t=e.length,r=Array(t),s=[];r.fill(!1);for(var n=0;n<t;n++)if(!r[n]){let t=[];r[n]=!0,t.push(n),i._ccGetDfs(n,r,e,t),t.length>1&&s.push(t)}return s}/**
   * Returns the number of connected components for the graph. 
   * 
   * @param {Array[]} adjacencyMatrix An adjacency matrix.
   * @returns {Number} The number of connected components of the supplied graph.
   */static getConnectedComponentCount(e){let t=e.length,r=Array(t),s=0;r.fill(!1);for(var n=0;n<t;n++)r[n]||(r[n]=!0,s++,i._ccCountDfs(n,r,e));return s}/**
   * PRIVATE FUNCTION used by getConnectedComponentCount().
   */static _ccCountDfs(e,t,r){for(var s=0;s<r[e].length;s++)r[e][s]&&!t[s]&&e!==s&&(t[s]=!0,i._ccCountDfs(s,t,r))}/**
   * PRIVATE FUNCTION used by getConnectedComponents().
   */static _ccGetDfs(e,t,r,s){for(var n=0;n<r[e].length;n++)r[e][n]&&!t[n]&&e!==n&&(t[n]=!0,s.push(n),i._ccGetDfs(n,t,r,s))}}t.exports=i},{"76a3a1db7f3844e7":"absWn","506f058e478d7d8b":"ltay8","84a2ba2d380a47f3":"c5diN",e4fa122d938e9267:"7rIHz","2cd24c00e49d98cf":"akR7W","6f7de6d46caa406":"g62h9"}],e6YHD:[function(e,t,r){//@ts-check
let s=e("2a59e760ea1c03d1");/** A class encapsulating the functionality to find the smallest set of smallest rings in a graph. */class n{/**
     * Returns an array containing arrays, each representing a ring from the smallest set of smallest rings in the graph.
     * 
     * @param {Graph} graph A Graph object.
     * @param {Boolean} [experimental=false] Whether or not to use experimental SSSR.
     * @returns {Array[]} An array containing arrays, each representing a ring from the smallest set of smallest rings in the group.
     */static getRings(e,t=!1){let r=e.getComponentsAdjacencyMatrix();if(0===r.length)return null;let a=s.getConnectedComponents(r),o=[];for(var i=0;i<a.length;i++){let r=a[i],s=e.getSubgraphAdjacencyMatrix([...r]),p=new Uint16Array(s.length),c=new Uint16Array(s.length);for(var l=0;l<s.length;l++){c[l]=0,p[l]=0;for(var u=0;u<s[l].length;u++)p[l]+=s[l][u]}// Get the edge number and the theoretical number of rings in SSSR
let d=0;for(var l=0;l<s.length;l++)for(var u=l+1;u<s.length;u++)d+=s[l][u];let h=d-s.length+1,f=!0;for(var l=0;l<p.length;l++)3!==p[l]&&(f=!1);// All vertices are part of one ring if theres only one ring.
if(f&&(h=2+d-s.length),1===h){o.push([...r]);continue}t&&(h=999);let{d:m,pe:g,pe_prime:x}=n.getPathIncludedDistanceMatrices(s),b=n.getRingCandidates(m,g,x),y=n.getSSSR(b,m,s,g,x,p,c,h);for(var l=0;l<y.length;l++){let e=Array(y[l].size),t=0;for(let s of y[l])e[t++]=r[s];o.push(e)}}// So, for some reason, this would return three rings for C1CCCC2CC1CCCC2, which is wrong
// As I don't have time to fix this properly, it will stay in. I'm sorry next person who works
// on it. At that point it might be best to reimplement the whole SSSR thing...
return o}/**
     * Creates a printable string from a matrix (2D array).
     * 
     * @param {Array[]} matrix A 2D array.
     * @returns {String} A string representing the matrix.
     */static matrixToString(e){let t="";for(var r=0;r<e.length;r++){for(var s=0;s<e[r].length;s++)t+=e[r][s]+" ";t+="\n"}return t}/**
     * Returnes the two path-included distance matrices used to find the sssr.
     * 
     * @param {Array[]} adjacencyMatrix An adjacency matrix.
     * @returns {Object} The path-included distance matrices. { p1, p2 }
     */static getPathIncludedDistanceMatrices(e){let t=e.length,r=Array(t),s=Array(t),n=Array(t);for(var a,o=0,i=0,l=0,u=t;u--;){r[u]=Array(t),s[u]=Array(t),n[u]=Array(t);for(var a=t;a--;)r[u][a]=u===a||1===e[u][a]?e[u][a]:Number.POSITIVE_INFINITY,1===r[u][a]?s[u][a]=[[[u,a]]]:s[u][a]=[],n[u][a]=[]}for(var p=t;p--;)for(u=t;u--;)for(a=t;a--;){let e=r[u][a],t=r[u][p]+r[p][a];if(e>t){if(e===t+1)for(n[u][a]=[s[u][a].length],o=s[u][a].length;o--;)for(n[u][a][o]=[s[u][a][o].length],i=s[u][a][o].length;i--;)for(n[u][a][o][i]=[s[u][a][o][i].length],l=s[u][a][o][i].length;l--;)n[u][a][o][i][l]=[s[u][a][o][i][0],s[u][a][o][i][1]];else n[u][a]=[];for(r[u][a]=t,s[u][a]=[[]],o=s[u][p][0].length;o--;)s[u][a][0].push(s[u][p][0][o]);for(o=s[p][a][0].length;o--;)s[u][a][0].push(s[p][a][0][o])}else if(e===t){if(s[u][p].length&&s[p][a].length){if(s[u][a].length){let e=[];for(o=s[u][p][0].length;o--;)e.push(s[u][p][0][o]);for(o=s[p][a][0].length;o--;)e.push(s[p][a][0][o]);s[u][a].push(e)}else{let e=[];for(o=s[u][p][0].length;o--;)e.push(s[u][p][0][o]);for(o=s[p][a][0].length;o--;)e.push(s[p][a][0][o]);s[u][a][0]=e}}}else if(e===t-1){if(n[u][a].length){let e=[];for(o=s[u][p][0].length;o--;)e.push(s[u][p][0][o]);for(o=s[p][a][0].length;o--;)e.push(s[p][a][0][o]);n[u][a].push(e)}else{let e=[];for(o=s[u][p][0].length;o--;)e.push(s[u][p][0][o]);for(o=s[p][a][0].length;o--;)e.push(s[p][a][0][o]);n[u][a][0]=e}}}return{d:r,pe:s,pe_prime:n}}/**
     * Get the ring candidates from the path-included distance matrices.
     * 
     * @param {Array[]} d The distance matrix.
     * @param {Array[]} pe A matrix containing the shortest paths.
     * @param {Array[]} pe_prime A matrix containing the shortest paths + one vertex.
     * @returns {Array[]} The ring candidates.
     */static getRingCandidates(e,t,r){let s=e.length,n=[],a=0;for(let o=0;o<s;o++)for(let i=0;i<s;i++)0!==e[o][i]&&(1!==t[o][i].length||0!==r[o][i])&&(a=0!==r[o][i].length?2*(e[o][i]+.5):2*e[o][i])!=1/0&&n.push([a,t[o][i],r[o][i]]);return(// Candidates have to be sorted by c
n.sort(function(e,t){return e[0]-t[0]}),n)}/**
     * Searches the candidates for the smallest set of smallest rings.
     * 
     * @param {Array[]} c The candidates.
     * @param {Array[]} d The distance matrix.
     * @param {Array[]} adjacencyMatrix An adjacency matrix.
     * @param {Array[]} pe A matrix containing the shortest paths.
     * @param {Array[]} pe_prime A matrix containing the shortest paths + one vertex.
     * @param {Uint16Array} arrBondCount A matrix containing the bond count of each vertex.
     * @param {Uint16Array} arrRingCount A matrix containing the number of rings associated with each vertex.
     * @param {Number} nsssr The theoretical number of rings in the graph.
     * @returns {Set[]} The smallest set of smallest rings.
     */static getSSSR(e,t,r,s,a,o,i,l){let u=[],p=[];for(let t=0;t<e.length;t++)if(e[t][0]%2!=0)for(let s=0;s<e[t][2].length;s++){let a=e[t][1][0].concat(e[t][2][s]);// Some bonds are added twice, resulting in [[u, v], [u, v]] instead of [u, v].
// TODO: This is a workaround, fix later. Probably should be a set rather than an array, however the computational overhead
//       is probably bigger compared to leaving it like this.
for(var c=0;c<a.length;c++)a[c][0].constructor===Array&&(a[c]=a[c][0]);let d=n.bondsToAtoms(a);if(n.getBondCount(d,r)!==d.size||n.pathSetsContain(u,d,a,p,o,i)||(u.push(d),p=p.concat(a)),u.length>l)return u}else for(let s=0;s<e[t][1].length-1;s++){let a=e[t][1][s].concat(e[t][1][s+1]);// Some bonds are added twice, resulting in [[u, v], [u, v]] instead of [u, v].
// TODO: This is a workaround, fix later. Probably should be a set rather than an array, however the computational overhead
//       is probably bigger compared to leaving it like this.
for(var c=0;c<a.length;c++)a[c][0].constructor===Array&&(a[c]=a[c][0]);let d=n.bondsToAtoms(a);if(n.getBondCount(d,r)!==d.size||n.pathSetsContain(u,d,a,p,o,i)||(u.push(d),p=p.concat(a)),u.length>l)return u}return u}/**
     * Returns the number of edges in a graph defined by an adjacency matrix.
     * 
     * @param {Array[]} adjacencyMatrix An adjacency matrix.
     * @returns {Number} The number of edges in the graph defined by the adjacency matrix.
     */static getEdgeCount(e){let t=0,r=e.length;for(var s=r-1;s--;)for(var n=r;n--;)1===e[s][n]&&t++;return t}/**
     * Returns an edge list constructed form an adjacency matrix.
     * 
     * @param {Array[]} adjacencyMatrix An adjacency matrix.
     * @returns {Array[]} An edge list. E.g. [ [ 0, 1 ], ..., [ 16, 2 ] ]
     */static getEdgeList(e){let t=e.length,r=[];for(var s=t-1;s--;)for(var n=t;n--;)1===e[s][n]&&r.push([s,n]);return r}/**
     * Return a set of vertex indices contained in an array of bonds.
     * 
     * @param {Array} bonds An array of bonds. A bond is defined as [ sourceVertexId, targetVertexId ].
     * @returns {Set<Number>} An array of vertices.
     */static bondsToAtoms(e){let t=new Set;for(var r=e.length;r--;)t.add(e[r][0]),t.add(e[r][1]);return t}/**
    * Returns the number of bonds within a set of atoms.
    * 
    * @param {Set<Number>} atoms An array of atom ids.
    * @param {Array[]} adjacencyMatrix An adjacency matrix.
    * @returns {Number} The number of bonds in a set of atoms.
    */static getBondCount(e,t){let r=0;for(let s of e)for(let n of e)s!==n&&(r+=t[s][n]);return r/2}/**
     * Checks whether or not a given path already exists in an array of paths.
     * 
     * @param {Set[]} pathSets An array of sets each representing a path.
     * @param {Set<Number>} pathSet A set representing a path.
     * @param {Array[]} bonds The bonds associated with the current path.
     * @param {Array[]} allBonds All bonds currently associated with rings in the SSSR set.
     * @param {Uint16Array} arrBondCount A matrix containing the bond count of each vertex.
     * @param {Uint16Array} arrRingCount A matrix containing the number of rings associated with each vertex.
     * @returns {Boolean} A boolean indicating whether or not a give path is contained within a set.
     */static pathSetsContain(e,t,r,s,a,o){for(var i=e.length;i--;)if(n.isSupersetOf(t,e[i])||e[i].size===t.size&&n.areSetsEqual(e[i],t))return!0;// Check if the edges from the candidate are already all contained within the paths of the set of paths.
// TODO: For some reason, this does not replace the isSupersetOf method above -> why?
let l=0,u=!1;for(i=r.length;i--;)for(var p=s.length;p--;)(r[i][0]===s[p][0]&&r[i][1]===s[p][1]||r[i][1]===s[p][0]&&r[i][0]===s[p][1])&&l++,l===r.length&&(u=!0);// If all the bonds and thus vertices are already contained within other rings
// check if there's one vertex with ringCount < bondCount
let c=!1;if(u){for(let e of t)if(o[e]<a[e]){c=!0;break}}if(u&&!c)return!0;// Update the ring counts for the vertices
for(let e of t)o[e]++;return!1}/**
     * Checks whether or not two sets are equal (contain the same elements).
     * 
     * @param {Set<Number>} setA A set.
     * @param {Set<Number>} setB A set.
     * @returns {Boolean} A boolean indicating whether or not the two sets are equal.
     */static areSetsEqual(e,t){if(e.size!==t.size)return!1;for(let r of e)if(!t.has(r))return!1;return!0}/**
     * Checks whether or not a set (setA) is a superset of another set (setB).
     * 
     * @param {Set<Number>} setA A set.
     * @param {Set<Number>} setB A set.
     * @returns {Boolean} A boolean indicating whether or not setB is a superset of setA.
     */static isSupersetOf(e,t){for(var r of t)if(!e.has(r))return!1;return!0}}t.exports=n},{"2a59e760ea1c03d1":"esUs1"}],l4F7i:[function(e,t,r){t.exports=class{constructor(e,t){this.colors=e,this.theme=this.colors[t]}/**
   * Returns the hex code of a color associated with a key from the current theme.
   *
   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).
   * @returns {String} A color hex value.
   */getColor(e){return e&&(e=e.toUpperCase())in this.theme?this.theme[e]:this.theme.C}/**
   * Sets the theme to the specified string if it exists. If it does not, this
   * does nothing.
   *
   * @param {String} theme the name of the theme to switch to
   */setTheme(e){this.colors.hasOwnProperty(e)&&(this.theme=this.colors[e]);// TODO: this probably should notify those who are watching this theme
// manager that the theme has changed so that colors can be changed
// on the fly
}}},{}],"3qCoD":[function(e,t,r){// WHEN REPLACING, CHECK FOR:
// KEEP THIS WHEN REGENERATING THE PARSER !!
t.exports=function(){function e(t,r,s,n){this.message=t,this.expected=r,this.found=s,this.location=n,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,e)}return!/*
   * Generated by PEG.js 0.10.0.
   *
   * http://pegjs.org/
   */function(e,t){function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r}(e,Error),e.buildMessage=function(e,t){var r={literal:function(e){return'"'+n(e.text)+'"'},class:function(e){var t,r="";for(t=0;t<e.parts.length;t++)r+=e.parts[t]instanceof Array?a(e.parts[t][0])+"-"+a(e.parts[t][1]):a(e.parts[t]);return"["+(e.inverted?"^":"")+r+"]"},any:function(e){return"any character"},end:function(e){return"end of input"},other:function(e){return e.description}};function s(e){return e.charCodeAt(0).toString(16).toUpperCase()}function n(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+s(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+s(e)})}function a(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+s(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+s(e)})}return"Expected "+function(e){var t,s,n,a=Array(e.length);for(s=0;s<e.length;s++)a[s]=r[(t=e[s]).type](t);if(a.sort(),a.length>0){for(s=1,n=1;s<a.length;s++)a[s-1]!==a[s]&&(a[n]=a[s],n++);a.length=n}switch(a.length){case 1:return a[0];case 2:return a[0]+" or "+a[1];default:return a.slice(0,-1).join(", ")+", or "+a[a.length-1]}}(e)+" but "+(t?'"'+n(t)+'"':"end of input")+" found."},{SyntaxError:e,parse:function(t,r){if(r=void 0!==r?r:{},t.split("(").length-1!=t.split(")").length-1)throw ef("The number of opening parentheses does not match the number of closing parentheses.",0);// KEEP THIS WHEN REGENERATING THE PARSER !!
var s,n,a,o,i,l,u,p,c={},d={chain:em},h=em,f=function(e){for(var t=[],r=[],s=0;s<e[1].length;s++)t.push(e[1][s]);for(var s=0;s<e[2].length;s++){var n=e[2][s][0]?e[2][s][0]:"-";r.push({bond:n,id:e[2][s][1]})}for(var s=0;s<e[3].length;s++)t.push(e[3][s]);for(var s=0;s<e[6].length;s++)t.push(e[6][s]);return{atom:e[0],isBracket:!!e[0].element,branches:t,branchCount:t.length,ringbonds:r,ringbondCount:r.length,bond:e[4]?e[4]:"-",next:e[5],hasNext:!!e[5]}},m=ep("(",!1),g=ep(")",!1),x=function(e){var t=e[1]?e[1]:"-";return e[2].branchBond=t,e[2]},b=function(e){return e},y=/^[\-=#$:\/\\.]/,j=ec(["-","=","#","$",":","/","\\","."],!1,!1),_=ep("[",!1),k=ep("se",!1),I=ep("as",!1),w=ep("]",!1),C=ep("B",!1),S=ep("r",!1),T=ep("C",!1),N=ep("l",!1),E=/^[NOPSFI]/,F=ec(["N","O","P","S","F","I"],!1,!1),A=/^[bcnops]/,R=ec(["b","c","n","o","p","s"],!1,!1),D=ep("*",!1),$=/^[A-Z]/,P=ec([["A","Z"]],!1,!1),z=/^[a-z]/,M=ec([["a","z"]],!1,!1),O=ep("%",!1),L=/^[1-9]/,B=ec([["1","9"]],!1,!1),U=/^[0-9]/,V=ec([["0","9"]],!1,!1),G=ep("@",!1),W=ep("TH",!1),q=/^[12]/,K=ec(["1","2"],!1,!1),H=ep("AL",!1),X=ep("SP",!1),Y=/^[1-3]/,Z=ec([["1","3"]],!1,!1),J=ep("TB",!1),Q=ep("OH",!1),ee=ep("+",!1),et=ep("-",!1),er=ep("H",!1),es=ep(":",!1),en=/^[0]/,ea=ec(["0"],!1,!1),eo=0,ei=[{line:1,column:1}],el=0,eu=[];if("startRule"in r){if(!(r.startRule in d))throw Error("Can't start parsing from rule \""+r.startRule+'".');h=d[r.startRule]}function ep(e,t){return{type:"literal",text:e,ignoreCase:t}}function ec(e,t,r){return{type:"class",parts:e,inverted:t,ignoreCase:r}}function ed(e){var r,s=ei[e];if(s)return s;for(r=e-1;!ei[r];)r--;for(s={line:(s=ei[r]).line,column:s.column};r<e;)10===t.charCodeAt(r)?(s.line++,s.column=1):s.column++,r++;return ei[e]=s,s}function eh(e){eo<el||(eo>el&&(el=eo,eu=[]),eu.push(e))}function ef(t,r){return new e(t,null,null,r)}function em(){var e,r,s,n,a,o,i,l,u,p,d,h,m,g;if(e=eo,d=eo,66===t.charCodeAt(eo)?(h="B",eo++):(h=c,eh(C)),h!==c?(114===t.charCodeAt(eo)?(m="r",eo++):(m=c,eh(S)),m===c&&(m=null),m!==c?d=h=[h,m]:(eo=d,d=c)):(eo=d,d=c),d===c&&(d=eo,67===t.charCodeAt(eo)?(h="C",eo++):(h=c,eh(T)),h!==c?(108===t.charCodeAt(eo)?(m="l",eo++):(m=c,eh(N)),m===c&&(m=null),m!==c?d=h=[h,m]:(eo=d,d=c)):(eo=d,d=c),d===c&&(E.test(t.charAt(eo))?(d=t.charAt(eo),eo++):(d=c,eh(F)))),d!==c&&(d=(g=d).length>1?g.join(""):g),(p=d)===c&&(p=ev())===c&&(p=function(){var e,r,s,n,a,o,i,l,u,p,d,h,f,m,g,x,b,y,j,C,S,T,N,E,F,A,R,D,O,ei,el,eu,ep,ec,ed,ef,em,eg,ex,ey,ej;if(e=eo,91===t.charCodeAt(eo)?(r="[",eo++):(r=c,eh(_)),r!==c?(d=eo,L.test(t.charAt(eo))?(h=t.charAt(eo),eo++):(h=c,eh(B)),h!==c?(U.test(t.charAt(eo))?(f=t.charAt(eo),eo++):(f=c,eh(V)),f===c&&(f=null),f!==c?(U.test(t.charAt(eo))?(m=t.charAt(eo),eo++):(m=c,eh(V)),m===c&&(m=null),m!==c?d=h=[h,f,m]:(eo=d,d=c)):(eo=d,d=c)):(eo=d,d=c),d!==c&&(d=Number(d.join(""))),(s=d)===c&&(s=null),s!==c?("se"===t.substr(eo,2)?(n="se",eo+=2):(n=c,eh(k)),n===c&&("as"===t.substr(eo,2)?(n="as",eo+=2):(n=c,eh(I)),n===c&&(n=ev())===c&&(g=eo,$.test(t.charAt(eo))?(x=t.charAt(eo),eo++):(x=c,eh(P)),x!==c?(z.test(t.charAt(eo))?(b=t.charAt(eo),eo++):(b=c,eh(M)),b===c&&(b=null),b!==c?g=x=[x,b]:(eo=g,g=c)):(eo=g,g=c),g!==c&&(g=g.join("")),(n=g)===c)&&(n=eb())),n!==c?(y=eo,64===t.charCodeAt(eo)?(j="@",eo++):(j=c,eh(G)),j!==c?(64===t.charCodeAt(eo)?(C="@",eo++):(C=c,eh(G)),C===c&&(C=eo,"TH"===t.substr(eo,2)?(S="TH",eo+=2):(S=c,eh(W)),S!==c?(q.test(t.charAt(eo))?(T=t.charAt(eo),eo++):(T=c,eh(K)),T!==c?C=S=[S,T]:(eo=C,C=c)):(eo=C,C=c),C===c&&(C=eo,"AL"===t.substr(eo,2)?(S="AL",eo+=2):(S=c,eh(H)),S!==c?(q.test(t.charAt(eo))?(T=t.charAt(eo),eo++):(T=c,eh(K)),T!==c?C=S=[S,T]:(eo=C,C=c)):(eo=C,C=c),C===c&&(C=eo,"SP"===t.substr(eo,2)?(S="SP",eo+=2):(S=c,eh(X)),S!==c?(Y.test(t.charAt(eo))?(T=t.charAt(eo),eo++):(T=c,eh(Z)),T!==c?C=S=[S,T]:(eo=C,C=c)):(eo=C,C=c),C===c&&(C=eo,"TB"===t.substr(eo,2)?(S="TB",eo+=2):(S=c,eh(J)),S!==c?(L.test(t.charAt(eo))?(T=t.charAt(eo),eo++):(T=c,eh(B)),T!==c?(U.test(t.charAt(eo))?(N=t.charAt(eo),eo++):(N=c,eh(V)),N===c&&(N=null),N!==c?C=S=[S,T,N]:(eo=C,C=c)):(eo=C,C=c)):(eo=C,C=c),C===c&&(C=eo,"OH"===t.substr(eo,2)?(S="OH",eo+=2):(S=c,eh(Q)),S!==c?(L.test(t.charAt(eo))?(T=t.charAt(eo),eo++):(T=c,eh(B)),T!==c?(U.test(t.charAt(eo))?(N=t.charAt(eo),eo++):(N=c,eh(V)),N===c&&(N=null),N!==c?C=S=[S,T,N]:(eo=C,C=c)):(eo=C,C=c)):(eo=C,C=c)))))),C===c&&(C=null),C!==c?y=j=[j,C]:(eo=y,y=c)):(eo=y,y=c),y!==c&&(y=(E=y)[1]?"@"==E[1]?"@@":E[1].join("").replace(",",""):"@"),(a=y)===c&&(a=null),a!==c?(F=eo,72===t.charCodeAt(eo)?(A="H",eo++):(A=c,eh(er)),A!==c?(U.test(t.charAt(eo))?(R=t.charAt(eo),eo++):(R=c,eh(V)),R===c&&(R=null),R!==c?F=A=[A,R]:(eo=F,F=c)):(eo=F,F=c),F!==c&&(F=(D=F)[1]?Number(D[1]):1),(o=F)===c&&(o=null),o!==c?(ei=eo,43===t.charCodeAt(eo)?(el="+",eo++):(el=c,eh(ee)),el!==c?(43===t.charCodeAt(eo)?(eu="+",eo++):(eu=c,eh(ee)),eu===c&&(eu=eo,L.test(t.charAt(eo))?(ep=t.charAt(eo),eo++):(ep=c,eh(B)),ep!==c?(U.test(t.charAt(eo))?(ec=t.charAt(eo),eo++):(ec=c,eh(V)),ec===c&&(ec=null),ec!==c?eu=ep=[ep,ec]:(eo=eu,eu=c)):(eo=eu,eu=c)),eu===c&&(eu=null),eu!==c?ei=el=[el,eu]:(eo=ei,ei=c)):(eo=ei,ei=c),ei!==c&&(ei=(ed=ei)[1]?"+"!=ed[1]?Number(ed[1].join("")):2:1),(O=ei)===c&&(ef=eo,45===t.charCodeAt(eo)?(em="-",eo++):(em=c,eh(et)),em!==c?(45===t.charCodeAt(eo)?(eg="-",eo++):(eg=c,eh(et)),eg===c&&(eg=eo,L.test(t.charAt(eo))?(ex=t.charAt(eo),eo++):(ex=c,eh(B)),ex!==c?(U.test(t.charAt(eo))?(ey=t.charAt(eo),eo++):(ey=c,eh(V)),ey===c&&(ey=null),ey!==c?eg=ex=[ex,ey]:(eo=eg,eg=c)):(eo=eg,eg=c)),eg===c&&(eg=null),eg!==c?ef=em=[em,eg]:(eo=ef,ef=c)):(eo=ef,ef=c),ef!==c&&(ef=(ej=ef)[1]?"-"!=ej[1]?-Number(ej[1].join("")):-2:-1),O=ef),(i=O)===c&&(i=null),i!==c?((l=function(){var e,r,s,n,a,o,i;if(e=eo,58===t.charCodeAt(eo)?(r=":",eo++):(r=c,eh(es)),r!==c){if(s=eo,L.test(t.charAt(eo))?(n=t.charAt(eo),eo++):(n=c,eh(B)),n!==c){for(a=[],U.test(t.charAt(eo))?(o=t.charAt(eo),eo++):(o=c,eh(V));o!==c;)a.push(o),U.test(t.charAt(eo))?(o=t.charAt(eo),eo++):(o=c,eh(V));a!==c?s=n=[n,a]:(eo=s,s=c)}else eo=s,s=c;s===c&&(en.test(t.charAt(eo))?(s=t.charAt(eo),eo++):(s=c,eh(ea))),s!==c?e=r=[r,s]:(eo=e,e=c)}else eo=e,e=c;return e!==c&&(e=Number((i=e)[1][0]+i[1][1].join(""))),e}())===c&&(l=null),l!==c?(93===t.charCodeAt(eo)?(u="]",eo++):(u=c,eh(w)),u!==c?e=r=[r,s,n,a,o,i,l,u]:(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c),e!==c)e={isotope:(p=e)[1],element:p[2],chirality:p[3],hcount:p[4],charge:p[5],class:p[6]};return e}())===c&&(p=eb()),p!==c&&(p=b(p)),(r=p)!==c){for(s=[],n=eg();n!==c;)s.push(n),n=eg();if(s!==c){for(n=[],a=eo,(o=ex())===c&&(o=null),o!==c&&(i=ey())!==c?a=o=[o,i]:(eo=a,a=c);a!==c;)n.push(a),a=eo,(o=ex())===c&&(o=null),o!==c&&(i=ey())!==c?a=o=[o,i]:(eo=a,a=c);if(n!==c){for(a=[],o=eg();o!==c;)a.push(o),o=eg();if(a!==c){if((o=ex())===c&&(o=null),o!==c){if((i=em())===c&&(i=null),i!==c){for(l=[],u=eg();u!==c;)l.push(u),u=eg();l!==c?e=r=[r,s,n,a,o,i,l]:(eo=e,e=c)}else eo=e,e=c}else eo=e,e=c}else eo=e,e=c}else eo=e,e=c}else eo=e,e=c}else eo=e,e=c;return e!==c&&(e=f(e)),e}function eg(){var e,r,s,n,a;return e=eo,40===t.charCodeAt(eo)?(r="(",eo++):(r=c,eh(m)),r!==c?((s=ex())===c&&(s=null),s!==c&&(n=em())!==c?(41===t.charCodeAt(eo)?(a=")",eo++):(a=c,eh(g)),a!==c?e=r=[r,s,n,a]:(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c),e!==c&&(e=x(e)),e}function ex(){var e;if(y.test(t.charAt(eo))){// Hack to resolve problem caused by:
// O=C(N[C@@H](CC(O)=O)C(N[C@H](C1=CC=C(O)C=C1)C(N[C@@H](CC(O)=O)C(NCC(N[C@@H](C(N[C@@H]([C@H](C)CC(O)=O)C(N/C(C(O[C@H](C)[C@@H]2NC([C@H](CO)NC(C(O3)C3CCC)=O)=O)=O)=C\\\\C4=CNC5=C4C=CC=C5)=O)=O)[C@H](O)C(N)=O)=O)=O)=O)=O)[C@H](CC(O)=O)NC([C@@H](CC6=CNC7=C6C=CC=C7)NC2=O)=O
// KEEP THIS WHEN REGENERATING THE PARSER !!
if((e=t.charAt(eo))===t.charAt(eo+1)&&(e=c,1))throw ef("The parser encountered a bond repetition.",eo+1);// KEEP THIS WHEN REGENERATING THE PARSER !!
eo++}else e=c,eh(j);return e}function ev(){var e;return A.test(t.charAt(eo))?(e=t.charAt(eo),eo++):(e=c,eh(R)),e!==c&&(e=b(e)),e}function eb(){var e;return 42===t.charCodeAt(eo)?(e="*",eo++):(e=c,eh(D)),e}function ey(){var e,r,s,n,a;return e=eo,37===t.charCodeAt(eo)?(r="%",eo++):(r=c,eh(O)),r!==c?(L.test(t.charAt(eo))?(s=t.charAt(eo),eo++):(s=c,eh(B)),s!==c?(U.test(t.charAt(eo))?(n=t.charAt(eo),eo++):(n=c,eh(V)),n!==c?e=r=[r,s,n]:(eo=e,e=c)):(eo=e,e=c)):(eo=e,e=c),e===c&&(U.test(t.charAt(eo))?(e=t.charAt(eo),eo++):(e=c,eh(V))),e!==c&&(e=1==(a=e).length?Number(a):Number(a.join("").replace("%",""))),e}if((p=h())!==c&&eo===t.length)return p;throw p!==c&&eo<t.length&&eh({type:"end"}),i=eu,l=el<t.length?t.charAt(el):null,s=el,n=el<t.length?el+1:el,a=ed(s),o=ed(n),u={start:{offset:s,line:a.line,column:a.column},end:{offset:n,line:o.line,column:o.column}},new e(e.buildMessage(i,l),i,l,u)}}}()},{}],cV8FS:[function(e,t,r){// we use the drawer to do all the preprocessing. then we take over the drawing
// portion to output to svg
let s=e("20b8107e250b6f79"),n=e("651f8c2bf52522cb"),a=e("f17461c6fc315be6");e("554cbd408945862f");let o=e("e7682d22efc27bcd"),i=e("a2909c18258fd329"),l=e("7979bfc3914bdbe6"),u=e("81b3c7a296c30abe");t.exports=class{constructor(e){this.preprocessor=new a(e)}/**
   * Draws the parsed smiles data to an svg element.
   *
   * @param {Object} data The tree returned by the smiles parser.
   * @param {(String|HTMLElement)} target The id of the HTML svg element the structure is drawn to - or the element itself.
   * @param {String} themeName='dark' The name of the theme to use. Built-in themes are 'light' and 'dark'.
   * @param {Boolean} infoOnly=false Only output info on the molecule without drawing anything to the canvas.

   * @returns {Oject} The dimensions of the drawing in { width, height }
   */draw(e,t,r="light",s=!1){let n=this.preprocessor;return n.initDraw(e,r,s),s||(this.themeManager=new l(this.preprocessor.opts.themes,r),this.svgWrapper=new i(this.themeManager,t,this.preprocessor.opts)),n.processGraph(),// Set the canvas to the appropriate size
this.svgWrapper.determineDimensions(n.graph.vertices),// Do the actual drawing
this.drawEdges(n.opts.debug),this.drawVertices(n.opts.debug),n.opts.debug&&(console.log(n.graph),console.log(n.rings),console.log(n.ringConnections)),this.svgWrapper.constructSvg()}/**
   * Draws a ring inside a provided ring, indicating aromaticity.
   *
   * @param {Ring} ring A ring.
   */drawAromaticityRing(e){let t=this.ctx,r=MathHelper.apothemFromSideLength(this.opts.bondLength,e.getSize());t.save(),t.strokeStyle=this.getColor("C"),t.lineWidth=this.opts.bondThickness,t.beginPath(),t.arc(e.center.x+this.offsetX,e.center.y+this.offsetY,r-this.opts.bondSpacing,0,2*Math.PI,!0),t.closePath(),t.stroke(),t.restore()}/**
   * Draw the actual edges as bonds.
   *
   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.
   */drawEdges(e){let t=this.preprocessor,r=t.graph,s=t.rings,n=Array(this.preprocessor.graph.edges.length);// Draw ring for implicitly defined aromatic rings
if(n.fill(!1),r.traverseBF(0,t=>{let s=r.getEdges(t.id);for(var a=0;a<s.length;a++){let t=s[a];n[t]||(n[t]=!0,this.drawEdge(t,e))}}),!this.bridgedRing)for(var a=0;a<s.length;a++){let e=s[a];t.isRingAromatic(e)&&this.drawAromaticityRing(e)}}/**
   * Draw the an edge as a bond.
   *
   * @param {Number} edgeId An edge id.
   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.
   */drawEdge(e,t){let r=this.preprocessor,n=r.opts,a=this.svgWrapper,i=r.graph.edges[e],l=r.graph.vertices[i.sourceId],p=r.graph.vertices[i.targetId],c=l.value.element,d=p.value.element;if((!l.value.isDrawn||!p.value.isDrawn)&&"default"===r.opts.atomVisualization)return;let h=l.position,f=p.position,m=r.getEdgeNormals(i),g=s.clone(m);if(g[0].multiplyScalar(10).add(h),g[1].multiplyScalar(10).add(h),"="===i.bondType||"="===r.getRingbondType(l,p)||i.isPartOfAromaticRing&&r.bridgedRing){// Always draw double bonds inside the ring
let e=r.areVerticesInSameRing(l,p),t=r.chooseSide(l,p,g);if(e){let e=r.getLargestOrAromaticCommonRing(l,p).center;m[0].multiplyScalar(n.bondSpacing),m[1].multiplyScalar(n.bondSpacing);// Choose the normal that is on the same side as the center
let t=null;(t=e.sameSideAs(l.position,p.position,u.add(h,m[0]))?new o(u.add(h,m[0]),u.add(f,m[0]),c,d):new o(u.add(h,m[1]),u.add(f,m[1]),c,d)).shorten(n.bondLength-n.shortBondLength*n.bondLength),i.isPartOfAromaticRing?a.drawLine(t,!0):a.drawLine(t),a.drawLine(new o(h,f,c,d))}else if(i.center||l.isTerminal()&&p.isTerminal()||0==t.anCount&&t.bnCount>1||0==t.bnCount&&t.anCount>1){this.multiplyNormals(m,n.halfBondSpacing);let e=new o(u.add(h,m[0]),u.add(f,m[0]),c,d),t=new o(u.add(h,m[1]),u.add(f,m[1]),c,d);a.drawLine(e),a.drawLine(t)}else if(t.sideCount[0]>t.sideCount[1]||t.totalSideCount[0]>t.totalSideCount[1]){this.multiplyNormals(m,n.bondSpacing);let e=new o(u.add(h,m[0]),u.add(f,m[0]),c,d);e.shorten(n.bondLength-n.shortBondLength*n.bondLength),a.drawLine(e),a.drawLine(new o(h,f,c,d))}else if(t.sideCount[0]<t.sideCount[1]||t.totalSideCount[0]<=t.totalSideCount[1]){this.multiplyNormals(m,n.bondSpacing);let e=new o(u.add(h,m[1]),u.add(f,m[1]),c,d);e.shorten(n.bondLength-n.shortBondLength*n.bondLength),a.drawLine(e),a.drawLine(new o(h,f,c,d))}}else if("#"===i.bondType){m[0].multiplyScalar(n.bondSpacing/1.5),m[1].multiplyScalar(n.bondSpacing/1.5);let e=new o(u.add(h,m[0]),u.add(f,m[0]),c,d),t=new o(u.add(h,m[1]),u.add(f,m[1]),c,d);a.drawLine(e),a.drawLine(t),a.drawLine(new o(h,f,c,d))}else if("."===i.bondType);else{let e=l.value.isStereoCenter,t=p.value.isStereoCenter;"up"===i.wedge?a.drawWedge(new o(h,f,c,d,e,t)):"down"===i.wedge?a.drawDashedWedge(new o(h,f,c,d,e,t)):a.drawLine(new o(h,f,c,d,e,t))}if(t){let t=u.midpoint(h,f);a.drawDebugText(t.x,t.y,"e: "+e)}}/**
   * Draws the vertices representing atoms to the canvas.
   *
   * @param {Boolean} debug A boolean indicating whether or not to draw debug messages to the canvas.
   */drawVertices(e){let t=this.preprocessor,r=t.opts,a=t.graph,o=t.rings,i=this.svgWrapper;for(var l=a.vertices.length,l=0;l<a.vertices.length;l++){let t=a.vertices[l],o=t.value,p=0,c=0,d=t.value.bondCount,h=o.element,f=n.maxBonds[h]-d,m=t.getTextDirection(a.vertices),g=(!!r.terminalCarbons||"C"!==h||!!o.hasAttachedPseudoElements)&&t.isTerminal(),x="C"===o.element;if("N"===o.element&&o.isPartOfAromaticRing&&(f=0),o.bracket&&(f=o.bracket.hcount,p=o.bracket.charge,c=o.bracket.isotope),"allballs"===r.atomVisualization)i.drawBall(t.position.x,t.position.y,h);else if(o.isDrawn&&(!x||o.drawExplicit||g||o.hasAttachedPseudoElements)||1===a.vertices.length)"default"===r.atomVisualization?i.drawText(t.position.x,t.position.y,h,f,m,g,p,c,o.getAttachedPseudoElements()):"balls"===r.atomVisualization&&i.drawBall(t.position.x,t.position.y,h);else if(2===t.getNeighbourCount()&&!0==t.forcePositioned){// If there is a carbon which bonds are in a straight line, draw a dot
let e=a.vertices[t.neighbours[0]].position,r=a.vertices[t.neighbours[1]].position;.1>Math.abs(Math.PI-u.threePointangle(t.position,e,r))&&i.drawPoint(t.position.x,t.position.y,h)}if(e){let e="v: "+t.id+" "+s.print(o.ringbonds);i.drawDebugText(t.position.x,t.position.y,e)}else i.drawDebugText(t.position.x,t.position.y,t.value.chirality)}// Draw the ring centers for debug purposes
if(r.debug)for(var l=0;l<o.length;l++){let e=o[l].center;i.drawDebugPoint(e.x,e.y,"r: "+o[l].id)}}/**
   * Returns the total overlap score of the current molecule.
   *
   * @returns {Number} The overlap score.
   */getTotalOverlapScore(){return this.preprocessor.getTotalOverlapScore()}/**
   * Returns the molecular formula of the loaded molecule as a string.
   *
   * @returns {String} The molecular formula.
   */getMolecularFormula(){return this.preprocessor.getMolecularFormula()}/**
   * @param {Array} normals list of normals to multiply
   * @param {Number} spacing value to multiply normals by
   */multiplyNormals(e,t){e[0].multiplyScalar(t),e[1].multiplyScalar(t)}}},{"20b8107e250b6f79":"2ffbV","651f8c2bf52522cb":"g62h9",f17461c6fc315be6:"jq7Y0","554cbd408945862f":"esUs1",e7682d22efc27bcd:"hJ5Qi",a2909c18258fd329:"8SHGN","7979bfc3914bdbe6":"l4F7i","81b3c7a296c30abe":"ltay8"}],"8SHGN":[function(e,t,r){let{getChargeText:s}=e("740956d364164518"),n=e("3b757363223a554e"),a=e("9f285ff8b0ad46e3");t.exports=class{constructor(e,t,r){this.svg=document.getElementById(t),this.opts=r,this.gradientId=0,// maintain a list of line elements and their corresponding gradients
// maintain a list of vertex elements
this.paths=[],this.vertices=[],this.gradients=[],// maintain the offset for drawing purposes
this.offsetX=0,this.offsetY=0,// maintain the dimensions
this.drawingWidth=0,this.drawingHeight=0,this.halfBondThickness=this.opts.bondThickness/2,// for managing color schemes
this.themeManager=e,// create the mask
this.maskElements=[];let s=document.createElementNS("http://www.w3.org/2000/svg","rect");// clear the svg element
for(s.setAttributeNS(null,"x",0),s.setAttributeNS(null,"y",0),s.setAttributeNS(null,"width","100%"),s.setAttributeNS(null,"height","100%"),s.setAttributeNS(null,"fill","white"),this.maskElements.push(s);this.svg.firstChild;)this.svg.removeChild(this.svg.firstChild)}constructSvg(){// TODO: add the defs element to put gradients in
let e=document.createElementNS("http://www.w3.org/2000/svg","defs"),t=document.createElementNS("http://www.w3.org/2000/svg","mask"),r=document.createElementNS("http://www.w3.org/2000/svg","style"),s=document.createElementNS("http://www.w3.org/2000/svg","g"),n=document.createElementNS("http://www.w3.org/2000/svg","g"),a=this.paths;for(let e of(// give the mask an id
t.setAttributeNS(null,"id","text-mask"),// create the css styles
r.appendChild(document.createTextNode(`
                .element {
                    font: ${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif;
                    alignment-baseline: 'middle';
                }
                .sub {
                    font: ${this.opts.fontSizeSmall}pt Helvetica, Arial, sans-serif;
                }
            `)),a))s.appendChild(e);for(let e of this.vertices)n.appendChild(e);for(let e of this.maskElements)t.appendChild(e);for(let t of this.gradients)e.appendChild(t);if(s.setAttributeNS(null,"mask","url(#text-mask)"),this.svg)return this.svg.appendChild(e),this.svg.appendChild(t),this.svg.appendChild(r),this.svg.appendChild(s),this.svg.appendChild(n),this.svg;{let a=document.createElementNS("http://www.w3.org/2000/svg","g");return a.appendChild(e),a.appendChild(t),a.appendChild(r),a.appendChild(s),a.appendChild(n),a}}/**
   * Create a linear gradient to apply to a line
   *
   * @param {Line} line the line to apply the gradiation to.
   */createGradient(e){// create the gradient and add it
let t=document.createElementNS("http://www.w3.org/2000/svg","linearGradient"),r=`line-${this.gradientId++}`,s=e.getLeftVector(),n=e.getRightVector(),a=s.x+this.offsetX,o=s.y+this.offsetY,i=n.x+this.offsetX,l=n.y+this.offsetY;t.setAttributeNS(null,"id",r),t.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),t.setAttributeNS(null,"x1",a),t.setAttributeNS(null,"y1",o),t.setAttributeNS(null,"x2",i),t.setAttributeNS(null,"y2",l);let u=document.createElementNS("http://www.w3.org/2000/svg","stop");u.setAttributeNS(null,"stop-color",this.themeManager.getColor(e.getLeftElement())||this.themeManager.getColor("C")),u.setAttributeNS(null,"offset","20%");let p=document.createElementNS("http://www.w3.org/2000/svg","stop");return p.setAttributeNS(null,"stop-color",this.themeManager.getColor(e.getRightElement()||this.themeManager.getColor("C"))),p.setAttributeNS(null,"offset","100%"),t.appendChild(u),t.appendChild(p),this.gradients.push(t),r}/**
   * Create a tspan element for sub or super scripts that styles the text
   * appropriately as one of those text types.
   *
   * @param {String} text the actual text
   * @param {String} shift the type of text, either 'sub', or 'super'
   */createSubSuperScripts(e,t){let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");return r.setAttributeNS(null,"baseline-shift",t),r.appendChild(document.createTextNode(e)),r.setAttributeNS(null,"class","sub"),r}/**
   * Determine drawing dimensiosn based on vertex positions.
   *
   * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.
   */determineDimensions(e){// Figure out the final size of the image
let t=-Number.MAX_VALUE,r=-Number.MAX_VALUE,s=Number.MAX_VALUE,n=Number.MAX_VALUE;for(var a=0;a<e.length;a++){if(!e[a].value.isDrawn)continue;let o=e[a].position;t<o.x&&(t=o.x),r<o.y&&(r=o.y),s>o.x&&(s=o.x),n>o.y&&(n=o.y)}// Add padding
let o=this.opts.padding;t+=o,r+=o,s-=o,n-=o,this.drawingWidth=t-s,this.drawingHeight=r-n;let i=this.svg.clientWidth/this.drawingWidth,l=this.svg.clientHeight/this.drawingHeight,u=i<l?i:l,p=Math.round(this.drawingWidth>this.drawingHeight?this.drawingWidth:this.drawingHeight);this.svg.setAttributeNS(null,"viewBox",`0 0 ${p} ${p}`),this.offsetX=-s,this.offsetY=-n,i<l?this.offsetY+=this.svg.clientHeight/(2*u)-this.drawingHeight/2:this.offsetX+=this.svg.clientWidth/(2*u)-this.drawingWidth/2}/**
   * Draw an svg ellipse as a ball.
   *
   * @param {Number} x The x position of the text.
   * @param {Number} y The y position of the text.
   * @param {String} elementName The name of the element (single-letter).
   */drawBall(e,t,r){let s=document.createElementNS("http://www.w3.org/2000/svg","circle");s.setAttributeNS(null,"cx",e+this.offsetX),s.setAttributeNS(null,"cy",t+this.offsetY),s.setAttributeNS(null,"r",this.opts.bondLength/4.5),s.setAttributeNS(null,"fill",this.themeManager.getColor(r)),this.vertices.push(s)}/**
   * Draw a dashed wedge on the canvas.
   *
   * @param {Line} line A line.
   */drawDashedWedge(e){let t,r;if(isNaN(e.from.x)||isNaN(e.from.y)||isNaN(e.to.x)||isNaN(e.to.y))return;this.offsetX,this.offsetY;let s=e.getLeftVector().clone(),o=e.getRightVector().clone(),i=a.normals(s,o);i[0].normalize(),i[1].normalize(),e.getRightChiral()?(t=o,r=s):(t=s,r=o);let l=a.subtract(r,t).normalize(),u=e.getLength(),p=1.25/(u/(3*this.opts.bondThickness)),c=this.createGradient(e);for(let e=0;e<1;e+=p){let r=a.multiplyScalar(l,e*u),s=a.add(t,r),o=1.5*e,p=a.multiplyScalar(i[0],o);s.subtract(p);let d=s.clone();d.add(a.multiplyScalar(p,2)),this.drawLine(new n(s,d),null,c)}}/**
   * Draws a debug dot at a given coordinate and adds text.
   *
   * @param {Number} x The x coordinate.
   * @param {Number} y The y coordindate.
   * @param {String} [debugText=''] A string.
   * @param {String} [color='#f00'] A color in hex form.
   */drawDebugPoint(e,t,r="",s="#f00"){let n=document.createElementNS("http://www.w3.org/2000/svg","circle");n.setAttributeNS(null,"cx",e+this.offsetX),n.setAttributeNS(null,"cy",t+this.offsetY),n.setAttributeNS(null,"r","2"),n.setAttributeNS(null,"fill","#f00"),this.vertices.push(n),this.drawDebugText(e,t,r)}/**
   * Draws a debug text message at a given position
   *
   * @param {Number} x The x coordinate.
   * @param {Number} y The y coordinate.
   * @param {String} text The debug text.
   */drawDebugText(e,t,r){let s=document.createElementNS("http://www.w3.org/2000/svg","text");s.setAttributeNS(null,"x",e+this.offsetX),s.setAttributeNS(null,"y",t+this.offsetY),s.setAttributeNS(null,"class","debug"),s.setAttributeNS(null,"fill","#ff0000"),s.setAttributeNS(null,"style",`
                font: 5px Droid Sans, sans-serif;
            `),s.appendChild(document.createTextNode(r)),this.vertices.push(s)}/**
   * Draws a line.
   *
   * @param {Line} line A line.
   * @param {Boolean} dashed defaults to false.
   * @param {String} gradient gradient url. Defaults to null.
   */drawLine(e,t=!1,r=null){this.opts;let s=e.getLeftVector(),n=e.getRightVector(),a=s.x+this.offsetX,o=s.y+this.offsetY,i=n.x+this.offsetX,l=n.y+this.offsetY,u=[["stroke-linecap","round"],["stroke-dasharray",t?"5, 5":"none"]].map(e=>e.join(":")).join(";"),p=document.createElementNS("http://www.w3.org/2000/svg","line");p.setAttributeNS(null,"x1",a),p.setAttributeNS(null,"y1",o),p.setAttributeNS(null,"x2",i),p.setAttributeNS(null,"y2",l),p.setAttributeNS(null,"style",u),this.paths.push(p),null==r&&(r=this.createGradient(e,a,o,i,l)),p.setAttributeNS(null,"stroke",`url('#${r}')`)}/**
   * Draw a point.
   *
   * @param {Number} x The x position of the point.
   * @param {Number} y The y position of the point.
   * @param {String} elementName The name of the element (single-letter).
   */drawPoint(e,t,r){this.ctx;let s=this.offsetX,n=this.offsetY,a=document.createElementNS("http://www.w3.org/2000/svg","circle");a.setAttributeNS(null,"cx",e+s),a.setAttributeNS(null,"cy",t+n),a.setAttributeNS(null,"r","1.5"),a.setAttributeNS(null,"fill","black"),this.maskElements.push(a);// now create the point
let o=document.createElementNS("http://www.w3.org/2000/svg","circle");o.setAttributeNS(null,"cx",e+s),o.setAttributeNS(null,"cy",t+n),o.setAttributeNS(null,"r","0.75"),o.setAttributeNS(null,"fill",this.themeManager.getColor(r)),this.vertices.push(o)}/**
   * Draw a text to the canvas.
   *
   * @param {Number} x The x position of the text.
   * @param {Number} y The y position of the text.
   * @param {String} elementName The name of the element (single-letter).
   * @param {Number} hydrogens The number of hydrogen atoms.
   * @param {String} direction The direction of the text in relation to the associated vertex.
   * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.
   * @param {Number} charge The charge of the atom.
   * @param {Number} isotope The isotope number.
   * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.
   * @param {String} attachedPseudoElement.element The element symbol.
   * @param {Number} attachedPseudoElement.count The number of occurences that match the key.
   * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.
   */drawText(e,t,r,n,a,o,i,l,u={}){let p={x:e+this.offsetX,y:t+this.offsetY},c=document.createElementNS("http://www.w3.org/2000/svg","text"),d="horizontal-tb",h="normal",f="mixed",m="direction: ltr;",g=-2,x=2.5,b=document.createElementNS("http://www.w3.org/2000/svg","circle");b.setAttributeNS(null,"cx",p.x),b.setAttributeNS(null,"cy",p.y),b.setAttributeNS(null,"r","3.5"),b.setAttributeNS(null,"fill","black"),this.maskElements.push(b),/up|down/.test(a)&&!o&&(d="vertical-rl",f="upright",h="-1px"),"down"!==a||o?"up"!==a||o?"left"===a&&(g=2):g=.5:(g=0,x=-2),"left"!==a&&("up"!==a||o)||(m="direction: rtl; unicode-bidi: bidi-override;"),// now the text element
c.setAttributeNS(null,"x",p.x+g),c.setAttributeNS(null,"y",p.y+x),c.setAttributeNS(null,"class","element"),c.setAttributeNS(null,"fill",this.themeManager.getColor(r)),c.setAttributeNS(null,"style",`
                text-anchor: start;
                writing-mode: ${d};
                text-orientation: ${f};
                letter-spacing: ${h};
                ${m}
            `);let y=document.createElementNS("http://www.w3.org/2000/svg","tspan");// special case for element names that are 2 letters
if(r.length>1){let e=/up|down/.test(a)?"middle":"start";y.setAttributeNS(null,"style",`
                unicode-bidi: plaintext;
                writing-mode: lr-tb;
                letter-spacing: normal;
                text-anchor: ${e};
            `)}// Charge
if(y.appendChild(document.createTextNode(r)),c.appendChild(y),i){let e=this.createSubSuperScripts(s(i),"super");y.appendChild(e)}if(l>0){let e=this.createSubSuperScripts(l.toString(),"super");y.appendChild(e)}if(1===i&&"N"===r&&u.hasOwnProperty("0O")&&u.hasOwnProperty("0O-1")&&(u={"0O":{element:"O",count:2,hydrogenCount:0,previousElement:"C",charge:""}},i=0),n>0){let e=document.createElementNS("http://www.w3.org/2000/svg","tspan");if(e.setAttributeNS(null,"style","unicode-bidi: plaintext;"),e.appendChild(document.createTextNode("H")),c.appendChild(e),n>1){let t=this.createSubSuperScripts(n,"sub");e.appendChild(t)}}for(let e in u){if(!u.hasOwnProperty(e))continue;let t=u[e].element,r=u[e].count,n=u[e].hydrogenCount,a=u[e].charge,o=document.createElementNS("http://www.w3.org/2000/svg","tspan");if(o.setAttributeNS(null,"style","unicode-bidi: plaintext;"),o.appendChild(document.createTextNode(t)),o.setAttributeNS(null,"fill",this.themeManager.getColor(t)),0!==a){let e=this.createSubSuperScripts(s(a),"super");o.appendChild(e)}if(n>0){let e=document.createElementNS("http://www.w3.org/2000/svg","tspan");if(e.setAttributeNS(null,"style","unicode-bidi: plaintext;"),e.appendChild(document.createTextNode("H")),o.appendChild(e),n>1){let t=this.createSubSuperScripts(n,"sub");e.appendChild(t)}}if(r>1){let e=this.createSubSuperScripts(r,"sub");o.appendChild(e)}c.appendChild(o)}this.vertices.push(c)}/**
   * @param {Line} line the line object to create the wedge from
   */drawWedge(e){let t=this.offsetX,r=this.offsetY,s=e.getLeftVector().clone(),n=e.getRightVector().clone();s.x+=t,s.y+=r,n.x+=t,n.y+=r;let o=a.normals(s,n);o[0].normalize(),o[1].normalize();let i=e.getRightChiral(),l=s,u=n;i&&(l=n,u=s);let p=a.add(l,a.multiplyScalar(o[0],this.halfBondThickness)),c=a.add(u,a.multiplyScalar(o[0],1.5+this.halfBondThickness)),d=a.add(u,a.multiplyScalar(o[1],1.5+this.halfBondThickness)),h=a.add(l,a.multiplyScalar(o[1],this.halfBondThickness)),f=document.createElementNS("http://www.w3.org/2000/svg","polygon"),m=this.createGradient(e,s.x,s.y,n.x,n.y);f.setAttributeNS(null,"points",`${p.x},${p.y} ${c.x},${c.y} ${d.x},${d.y} ${h.x},${h.y}`),f.setAttributeNS(null,"fill",`url('#${m}')`),this.paths.push(f)}}},{"740956d364164518":"5whlz","3b757363223a554e":"hJ5Qi","9f285ff8b0ad46e3":"ltay8"}],"90B9u":[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>o);var n=e("vue");let a={ref:"smilesCanvas",width:"960",height:"200"};function o(e,t,r,s,o,i){return(0,n.openBlock)(),(0,n.createElementBlock)("canvas",a,null,512)}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],VBYkS:[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],h48dc:[function(e,t,r){var s=e("@parcel/transformer-js/src/esmodule-helpers.js");s.defineInteropFlag(r),s.export(r,"render",()=>F);var n=e("vue");let a={class:"hero is-primary is-bold"},o={class:"hero-body",style:{padding:"0px"}},i={class:"container"},l={class:"floating-hero"},u=/*#__PURE__*/(0,n.createElementVNode)("span",{class:"title"},"mol dashboard",-1),p=/*#__PURE__*/(0,n.createElementVNode)("br",null,null,-1),c={class:"subtitle"},d=/*#__PURE__*/(0,n.createElementVNode)("div",{class:"container"},null,-1),h={ref:"inputcontainer",class:"container"},f={class:"columns is-centered"},m={class:"column"},g={class:"container"},x={class:"columns"},b={class:"column card"},y={class:"card-content"},j=/*#__PURE__*/(0,n.createElementVNode)("h3",{class:"title is-size-4"},"Solubility Prediction",-1),_=/*#__PURE__*/(0,n.createElementVNode)("h4",{class:"subtitle is-size-6"}," Predicted solubility in water ",-1),k={class:"ref-footer"},I=/*#__PURE__*/(0,n.createElementVNode)("br",null,null,-1),w=/*#__PURE__*/(0,n.createElementVNode)("br",null,null,-1),C=/*#__PURE__*/(0,n.createElementVNode)("br",null,null,-1),S={class:"container"},T={class:"columns"},N=/*#__PURE__*/(0,n.createElementVNode)("div",{class:"block column"},[/*#__PURE__*/(0,n.createElementVNode)("p",null,[/*#__PURE__*/(0,n.createTextVNode)(" (c) "),/*#__PURE__*/(0,n.createElementVNode)("a",{href:"https://twitter.com/andrewwhite01"},"Andrew White"),/*#__PURE__*/(0,n.createTextVNode)(", 2022 ")]),/*#__PURE__*/(0,n.createElementVNode)("p",null,[/*#__PURE__*/(0,n.createTextVNode)(" \xa0\xa0\xa0\xa0"),/*#__PURE__*/(0,n.createElementVNode)("a",{href:"https://thewhitelab.org"},"thewhitelab.org")])],-1),E={class:"block column"};function F(e,t,r,s,F,A){let R=(0,n.resolveComponent)("smiles-viewer"),D=(0,n.resolveComponent)("mol-input"),$=(0,n.resolveComponent)("tf-prediction"),P=(0,n.resolveComponent)("reference");return(0,n.openBlock)(),(0,n.createElementBlock)("div",null,[(0,n.createElementVNode)("section",a,[(0,n.createElementVNode)("div",o,[(0,n.createElementVNode)("div",i,[(0,n.createElementVNode)("div",l,[u,p,(0,n.createElementVNode)("span",c," v"+(0,n.toDisplayString)(F.version),1)]),(0,n.createVNode)(R,{smiles:F.smiles,"view-width":F.viewWidth,onSelectionUpdate:t[0]||(t[0]=e=>F.selectedIndex=e)},null,8,["smiles","view-width"]),d])])]),(0,n.createElementVNode)("section",null,[(0,n.createElementVNode)("div",h,[(0,n.createElementVNode)("div",f,[(0,n.createElementVNode)("div",m,[(0,n.createVNode)(D,{onSelfiesUpdate:t[1]||(t[1]=e=>F.selfies=e),onSmilesUpdate:t[2]||(t[2]=e=>F.smiles=e),onSelfiesPush:A.pushSelfies,ready:F.resultsReady},null,8,["onSelfiesPush","ready"])])])],512)]),(0,n.createElementVNode)("section",null,[(0,n.createElementVNode)("div",g,[(0,n.createElementVNode)("div",x,[(0,n.createElementVNode)("div",b,[(0,n.createElementVNode)("div",y,[j,_,(0,n.createVNode)($,{url:"https://raw.githubusercontent.com/ur-whitelab/exmol.io/master/models",modelNumber:10,sequence:F.selfies,adjective:"soluble",onSolubleUpdate:t[3]||(t[3]=t=>e.soluble=t)},null,8,["sequence"]),(0,n.createElementVNode)("div",k,[(0,n.createTextVNode)(" Model paper: "),(0,n.createVNode)(P,{reflink:"https://arxiv.org/abs/2307.05318",reftitle:"Predicting small molecules solubilities on endpoint devices using deep ensemble neural networks",journal:"ArXiv",year:"2023"}),I,(0,n.createTextVNode)(" Data: "),(0,n.createVNode)(P,{reflink:"https://www.nature.com/articles/s41597-019-0151-1",reftitle:"AqSolDB, a curated reference set of aqueous solubility and 2D descriptors for a diverse set of compounds",journal:"Sci. Data",year:"2019"}),w,(0,n.createTextVNode)(" SELFIES: "),(0,n.createVNode)(P,{reflink:"https://arxiv.org/abs/2204.00056",reftitle:"SELFIES and the future of molecular string representations",journal:"arXiv",year:"2022"}),C,(0,n.createTextVNode)(" Model uncertainty: "),(0,n.createVNode)(P,{reflink:"https://arxiv.org/abs/1612.01474",reftitle:"Simple and scalable predictive uncertainty estimation using deep ensembles",journal:"NeurIPS",year:"2017"})])])])])])]),(0,n.createElementVNode)("section",null,[(0,n.createElementVNode)("div",S,[(0,n.createElementVNode)("div",T,[N,(0,n.createElementVNode)("div",E,[(0,n.createElementVNode)("p",null,[(0,n.createTextVNode)(" Please, cite our work: "),(0,n.createVNode)(P,{reflink:"https://pubs.rsc.org/en/content/articlelanding/2024/dd/d3dd00217a",reftitle:"Predicting small molecules solubilities on endpoint devices using deep ensemble neural networks",journal:"Digital Discovery",year:"2024"})])])])])])])}},{vue:"4rzM0","@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}],VaPpt:[function(){},{}],"1MbKh":[function(e,t,r){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(r),r.default=e=>{}},{"@parcel/transformer-js/src/esmodule-helpers.js":"jiucr"}]},["e8Kp4"],"e8Kp4","parcelRequire4442")//# sourceMappingURL=index.4ce7e584.js.map
;
//# sourceMappingURL=index.4ce7e584.js.map
